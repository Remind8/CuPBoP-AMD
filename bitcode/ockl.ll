; ModuleID = 'ockl.bc'
source_filename = "llvm-link"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-G1-ni:7"
target triple = "amdgcn-amd-amdhsa"

%0 = type { [16 x %1], [16 x %1], [16 x %1], [16 x %2], [16 x %2], [16 x [256 x %3]], i64 }
%1 = type { i32, [3 x i64] }
%2 = type { i64, [3 x i64] }
%3 = type { i64, i64, i32 }
%4 = type { i32, i32, i32, i32, i32, i32, i32, i32 }
%5 = type { i16, i16, i16, i16, i16, i16, i32, i32, i32, i32, i32, i64, ptr addrspace(1), i64, %6 }
%6 = type { i64 }
%7 = type { ptr addrspace(1), i32, i32, i64, i64 }
%8 = type { i32, i32, i32, i32, [524284 x i32] }
%9 = type { ptr addrspace(1), ptr addrspace(1), %6, i64, i64, i64 }
%10 = type { i64, i64, i32, i32 }
%11 = type { [64 x [8 x i64]] }
%12 = type { i64, %6, i64, i32, i32, i64, i64, %13, [2 x i32] }
%13 = type { ptr addrspace(1) }
%14 = type { %15, [4 x i32], i64, i32, i32, i32, i32, i64, i32, [9 x i32], i64, i32, i32, [4 x i32], i64, i64, i32, i32, [2 x i32], %6, [14 x i32] }
%15 = type { i32, i32, ptr addrspace(1), %6, i32, i32, i64 }

@0 = internal addrspace(1) global %0 zeroinitializer, align 8
@1 = internal unnamed_addr addrspace(4) constant [16 x %4] [%4 { i32 130054, i32 129546, i32 110114, i32 16288, i32 6, i32 256, i32 0, i32 4195 }, %4 { i32 86927, i32 86758, i32 73744, i32 10904, i32 399, i32 512, i32 0, i32 2804 }, %4 { i32 65280, i32 64770, i32 55054, i32 8192, i32 0, i32 128, i32 0, i32 2107 }, %4 { i32 43576, i32 43406, i32 36895, i32 5504, i32 56, i32 256, i32 0, i32 1405 }, %4 { i32 32703, i32 32193, i32 27364, i32 4160, i32 63, i32 64, i32 0, i32 1054 }, %4 { i32 21816, i32 21646, i32 18399, i32 2816, i32 56, i32 128, i32 0, i32 703 }, %4 { i32 16367, i32 15856, i32 13477, i32 2176, i32 15, i32 32, i32 32768, i32 527 }, %4 { i32 10915, i32 10745, i32 9133, i32 1472, i32 35, i32 64, i32 0, i32 352 }, %4 { i32 8187, i32 7676, i32 6524, i32 1280, i32 11, i32 16, i32 134219776, i32 265 }, %4 { i32 5459, i32 5289, i32 4495, i32 896, i32 19, i32 32, i32 524288, i32 176 }, %4 { i32 4094, i32 3583, i32 3045, i32 1024, i32 6, i32 8, i32 1077952576, i32 133 }, %4 { i32 2730, i32 2560, i32 2176, i32 512, i32 10, i32 16, i32 67109888, i32 89 }, %4 { i32 2047, i32 1536, i32 1305, i32 1024, i32 3, i32 4, i32 -2004318072, i32 66 }, %4 { i32 1365, i32 1195, i32 1015, i32 512, i32 5, i32 8, i32 538976288, i32 44 }, %4 { i32 1023, i32 512, i32 435, i32 2048, i32 1, i32 2, i32 -1431655766, i32 34 }, %4 { i32 682, i32 512, i32 435, i32 2048, i32 2, i32 4, i32 1145324612, i32 35 }], align 4
@__oclc_ISA_version = external local_unnamed_addr addrspace(4) constant i32, align 4
@__oclc_wavefrontsize64 = external local_unnamed_addr addrspace(4) constant i8, align 1
@__scratch_lds = linkonce_odr hidden addrspace(3) global [32 x i64] undef, align 8
@__oclc_ABI_version = external local_unnamed_addr addrspace(4) constant i32, align 4

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected i32 @__ockl_activelane_u32() local_unnamed_addr #0 {
  %1 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %2 = icmp eq i8 %1, 0
  br i1 %2, label %8, label %3

3:                                                ; preds = %0
  %4 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %5 = tail call i32 @llvm.read_register.i32(metadata !10) #57
  %6 = tail call i32 @llvm.amdgcn.mbcnt.lo(i32 %5, i32 0)
  %7 = tail call i32 @llvm.amdgcn.mbcnt.hi(i32 %4, i32 %6)
  br label %11

8:                                                ; preds = %0
  %9 = tail call i32 @llvm.read_register.i32(metadata !10) #57
  %10 = tail call i32 @llvm.amdgcn.mbcnt.lo(i32 %9, i32 0)
  br label %11

11:                                               ; preds = %8, %3
  %12 = phi i32 [ %7, %3 ], [ %10, %8 ]
  ret i32 %12
}

; Function Attrs: nounwind readonly
declare i32 @llvm.read_register.i32(metadata) #1

; Function Attrs: nounwind readnone willreturn
declare i32 @llvm.amdgcn.mbcnt.lo(i32, i32) #2

; Function Attrs: nounwind readnone willreturn
declare i32 @llvm.amdgcn.mbcnt.hi(i32, i32) #2

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_add_sat_i32(i32 noundef %0, i32 noundef %1) local_unnamed_addr #3 {
  %3 = tail call i32 @llvm.sadd.sat.i32(i32 %0, i32 %1)
  ret i32 %3
}

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.sadd.sat.i32(i32, i32) #4

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_add_sat_u32(i32 noundef %0, i32 noundef %1) local_unnamed_addr #3 {
  %3 = tail call i32 @llvm.uadd.sat.i32(i32 %0, i32 %1)
  ret i32 %3
}

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.uadd.sat.i32(i32, i32) #4

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i64 @__ockl_add_sat_i64(i64 noundef %0, i64 noundef %1) local_unnamed_addr #3 {
  %3 = tail call i64 @llvm.sadd.sat.i64(i64 %0, i64 %1)
  ret i64 %3
}

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare i64 @llvm.sadd.sat.i64(i64, i64) #4

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i64 @__ockl_add_sat_u64(i64 noundef %0, i64 noundef %1) local_unnamed_addr #3 {
  %3 = tail call i64 @llvm.uadd.sat.i64(i64 %0, i64 %1)
  ret i64 %3
}

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare i64 @llvm.uadd.sat.i64(i64, i64) #4

; Function Attrs: convergent mustprogress norecurse nounwind willreturn writeonly
define linkonce_odr protected void @__ockl_gws_init(i32 noundef %0, i32 noundef %1) local_unnamed_addr #5 {
  tail call void @llvm.amdgcn.ds.gws.init(i32 %0, i32 %1)
  ret void
}

; Function Attrs: convergent inaccessiblememonly nounwind willreturn writeonly
declare void @llvm.amdgcn.ds.gws.init(i32, i32) #6

; Function Attrs: convergent mustprogress norecurse nounwind willreturn
define linkonce_odr protected void @__ockl_gws_barrier(i32 noundef %0, i32 noundef %1) local_unnamed_addr #7 {
  tail call void @llvm.amdgcn.ds.gws.barrier(i32 %0, i32 %1)
  ret void
}

; Function Attrs: convergent inaccessiblememonly nounwind willreturn
declare void @llvm.amdgcn.ds.gws.barrier(i32, i32) #8

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_grid_is_valid() local_unnamed_addr #3 {
  %1 = load i32, ptr addrspace(4) @__oclc_ABI_version, align 4, !tbaa !11
  %2 = icmp slt i32 %1, 500
  %3 = tail call ptr addrspace(4) @llvm.amdgcn.implicitarg.ptr()
  %4 = select i1 %2, i64 6, i64 11
  %5 = getelementptr inbounds i64, ptr addrspace(4) %3, i64 %4
  %6 = load i64, ptr addrspace(4) %5, align 8, !tbaa !13
  %7 = icmp ne i64 %6, 0
  %8 = zext i1 %7 to i32
  ret i32 %8
}

; Function Attrs: nounwind readnone speculatable willreturn
declare align 4 ptr addrspace(4) @llvm.amdgcn.implicitarg.ptr() #9

; Function Attrs: convergent mustprogress norecurse nounwind willreturn
define linkonce_odr protected void @__ockl_grid_sync() local_unnamed_addr #7 {
  fence syncscope("agent") seq_cst
  tail call void @llvm.amdgcn.s.barrier()
  %1 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15
  %2 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !15
  %3 = or i32 %1, %2
  %4 = tail call i32 @llvm.amdgcn.workitem.id.z(), !range !15
  %5 = or i32 %3, %4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %17

7:                                                ; preds = %0
  %8 = tail call i64 @__ockl_get_num_groups(i32 noundef 0) #17
  %9 = trunc i64 %8 to i32
  %10 = tail call i64 @__ockl_get_num_groups(i32 noundef 1) #17
  %11 = trunc i64 %10 to i32
  %12 = mul i32 %11, %9
  %13 = tail call i64 @__ockl_get_num_groups(i32 noundef 2) #17
  %14 = trunc i64 %13 to i32
  %15 = mul i32 %12, %14
  %16 = add i32 %15, -1
  tail call void @llvm.amdgcn.ds.gws.barrier(i32 %16, i32 0)
  br label %17

17:                                               ; preds = %7, %0
  tail call void @llvm.amdgcn.s.barrier()
  ret void
}

; Function Attrs: convergent nounwind willreturn
declare void @llvm.amdgcn.s.barrier() #10

; Function Attrs: nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workitem.id.x() #9

; Function Attrs: nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workitem.id.y() #9

; Function Attrs: nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workitem.id.z() #9

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i64 @__ockl_get_num_groups(i32 noundef %0) local_unnamed_addr #3 {
  switch i32 %0, label %76 [
    i32 0, label %2
    i32 1, label %26
    i32 2, label %51
  ]

2:                                                ; preds = %1
  %3 = load i32, ptr addrspace(4) @__oclc_ABI_version, align 4, !tbaa !11
  %4 = icmp slt i32 %3, 500
  br i1 %4, label %5, label %15

5:                                                ; preds = %2
  %dispatch.ptr6 = tail call align 4 dereferenceable(64) ptr addrspace(4) @llvm.amdgcn.dispatch.ptr()
  %v7.grid.size.x.ptr = getelementptr inbounds %5, ptr addrspace(4) %dispatch.ptr6, i64 0, i32 6
  %v8.grid.size.x = load i32, ptr addrspace(4) %v7.grid.size.x.ptr, align 4, !tbaa !16
  %v9.tmp.dispatchPtr.offset4 = getelementptr i8, ptr addrspace(4) %dispatch.ptr6, i64 4
  %10 = load i16, ptr addrspace(4) %v9.tmp.dispatchPtr.offset4, align 4, !range !21, !invariant.load !22
  %11 = zext i16 %10 to i32
  %12 = udiv i32 %v8.grid.size.x, %11
  %13 = mul i32 %12, %11
  %14 = icmp ugt i32 %v8.grid.size.x, %13
  br label %21

15:                                               ; preds = %2
  %dispatch.ptr = tail call ptr addrspace(4) @llvm.amdgcn.implicitarg.ptr()
  %17 = load i32, ptr addrspace(4) %dispatch.ptr, align 4, !tbaa !11
  %18 = getelementptr inbounds i16, ptr addrspace(4) %dispatch.ptr, i64 9
  %19 = load i16, ptr addrspace(4) %18, align 2, !tbaa !23
  %20 = icmp ne i16 %19, 0
  br label %21

21:                                               ; preds = %15, %5
  %22 = phi i1 [ %20, %15 ], [ %14, %5 ]
  %23 = phi i32 [ %17, %15 ], [ %12, %5 ]
  %24 = zext i1 %22 to i32
  %25 = add i32 %23, %24
  br label %76

26:                                               ; preds = %1
  %27 = load i32, ptr addrspace(4) @__oclc_ABI_version, align 4, !tbaa !11
  %28 = icmp slt i32 %27, 500
  br i1 %28, label %29, label %39

29:                                               ; preds = %26
  %30 = tail call align 4 dereferenceable(64) ptr addrspace(4) @llvm.amdgcn.dispatch.ptr()
  %31 = getelementptr inbounds %5, ptr addrspace(4) %30, i64 0, i32 7
  %32 = load i32, ptr addrspace(4) %31, align 8, !tbaa !24
  %33 = getelementptr i8, ptr addrspace(4) %30, i64 6
  %34 = load i16, ptr addrspace(4) %33, align 2, !range !21, !invariant.load !22
  %35 = zext i16 %34 to i32
  %36 = udiv i32 %32, %35
  %37 = mul i32 %36, %35
  %38 = icmp ugt i32 %32, %37
  br label %46

39:                                               ; preds = %26
  %40 = tail call ptr addrspace(4) @llvm.amdgcn.implicitarg.ptr()
  %41 = getelementptr inbounds i32, ptr addrspace(4) %40, i64 1
  %42 = load i32, ptr addrspace(4) %41, align 4, !tbaa !11
  %43 = getelementptr inbounds i16, ptr addrspace(4) %40, i64 10
  %44 = load i16, ptr addrspace(4) %43, align 4, !tbaa !23
  %45 = icmp ne i16 %44, 0
  br label %46

46:                                               ; preds = %39, %29
  %47 = phi i1 [ %45, %39 ], [ %38, %29 ]
  %48 = phi i32 [ %42, %39 ], [ %36, %29 ]
  %49 = zext i1 %47 to i32
  %50 = add i32 %48, %49
  br label %76

51:                                               ; preds = %1
  %52 = load i32, ptr addrspace(4) @__oclc_ABI_version, align 4, !tbaa !11
  %53 = icmp slt i32 %52, 500
  br i1 %53, label %54, label %64

54:                                               ; preds = %51
  %55 = tail call align 4 dereferenceable(64) ptr addrspace(4) @llvm.amdgcn.dispatch.ptr()
  %56 = getelementptr inbounds %5, ptr addrspace(4) %55, i64 0, i32 8
  %57 = load i32, ptr addrspace(4) %56, align 4, !tbaa !25
  %58 = getelementptr i8, ptr addrspace(4) %55, i64 8
  %59 = load i16, ptr addrspace(4) %58, align 4, !range !21, !invariant.load !22
  %60 = zext i16 %59 to i32
  %61 = udiv i32 %57, %60
  %62 = mul i32 %61, %60
  %63 = icmp ugt i32 %57, %62
  br label %71

64:                                               ; preds = %51
  %65 = tail call ptr addrspace(4) @llvm.amdgcn.implicitarg.ptr()
  %66 = getelementptr inbounds i32, ptr addrspace(4) %65, i64 2
  %67 = load i32, ptr addrspace(4) %66, align 4, !tbaa !11
  %68 = getelementptr inbounds i16, ptr addrspace(4) %65, i64 11
  %69 = load i16, ptr addrspace(4) %68, align 2, !tbaa !23
  %70 = icmp ne i16 %69, 0
  br label %71

71:                                               ; preds = %64, %54
  %72 = phi i1 [ %70, %64 ], [ %63, %54 ]
  %73 = phi i32 [ %67, %64 ], [ %61, %54 ]
  %74 = zext i1 %72 to i32
  %75 = add i32 %73, %74
  br label %76

76:                                               ; preds = %71, %46, %21, %1
  %77 = phi i32 [ %75, %71 ], [ %50, %46 ], [ %25, %21 ], [ 1, %1 ]
  %78 = zext i32 %77 to i64
  ret i64 %78
}

; Function Attrs: nounwind readnone speculatable willreturn
declare align 4 ptr addrspace(4) @llvm.amdgcn.dispatch.ptr() #9

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_multi_grid_num_grids() local_unnamed_addr #3 {
  %1 = load i32, ptr addrspace(4) @__oclc_ABI_version, align 4, !tbaa !11
  %2 = icmp slt i32 %1, 500
  %3 = tail call ptr addrspace(4) @llvm.amdgcn.implicitarg.ptr()
  %4 = select i1 %2, i64 6, i64 11
  %5 = getelementptr inbounds i64, ptr addrspace(4) %3, i64 %4
  %6 = load i64, ptr addrspace(4) %5, align 8, !tbaa !13
  %7 = inttoptr i64 %6 to ptr addrspace(4)
  %8 = getelementptr inbounds %7, ptr addrspace(4) %7, i64 0, i32 2
  %9 = load i32, ptr addrspace(4) %8, align 4, !tbaa !26
  ret i32 %9
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_multi_grid_grid_rank() local_unnamed_addr #3 {
  %1 = load i32, ptr addrspace(4) @__oclc_ABI_version, align 4, !tbaa !11
  %2 = icmp slt i32 %1, 500
  %3 = tail call ptr addrspace(4) @llvm.amdgcn.implicitarg.ptr()
  %4 = select i1 %2, i64 6, i64 11
  %5 = getelementptr inbounds i64, ptr addrspace(4) %3, i64 %4
  %6 = load i64, ptr addrspace(4) %5, align 8, !tbaa !13
  %7 = inttoptr i64 %6 to ptr addrspace(4)
  %8 = getelementptr inbounds %7, ptr addrspace(4) %7, i64 0, i32 1
  %9 = load i32, ptr addrspace(4) %8, align 8, !tbaa !28
  ret i32 %9
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_multi_grid_size() local_unnamed_addr #3 {
  %1 = load i32, ptr addrspace(4) @__oclc_ABI_version, align 4, !tbaa !11
  %2 = icmp slt i32 %1, 500
  %3 = tail call ptr addrspace(4) @llvm.amdgcn.implicitarg.ptr()
  %4 = select i1 %2, i64 6, i64 11
  %5 = getelementptr inbounds i64, ptr addrspace(4) %3, i64 %4
  %6 = load i64, ptr addrspace(4) %5, align 8, !tbaa !13
  %7 = inttoptr i64 %6 to ptr addrspace(4)
  %8 = getelementptr inbounds %7, ptr addrspace(4) %7, i64 0, i32 4
  %9 = load i64, ptr addrspace(4) %8, align 8, !tbaa !29
  %10 = trunc i64 %9 to i32
  ret i32 %10
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_multi_grid_thread_rank() local_unnamed_addr #11 {
  %1 = load i32, ptr addrspace(4) @__oclc_ABI_version, align 4, !tbaa !11
  %2 = icmp slt i32 %1, 500
  %3 = tail call ptr addrspace(4) @llvm.amdgcn.implicitarg.ptr()
  %4 = select i1 %2, i64 6, i64 11
  %5 = getelementptr inbounds i64, ptr addrspace(4) %3, i64 %4
  %6 = load i64, ptr addrspace(4) %5, align 8, !tbaa !13
  %7 = inttoptr i64 %6 to ptr addrspace(4)
  %8 = getelementptr inbounds %7, ptr addrspace(4) %7, i64 0, i32 3
  %9 = load i64, ptr addrspace(4) %8, align 8, !tbaa !30
  %10 = tail call i64 @__ockl_get_global_linear_id() #17
  %11 = add i64 %10, %9
  %12 = trunc i64 %11 to i32
  ret i32 %12
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i64 @__ockl_get_global_linear_id() local_unnamed_addr #3 {
  %1 = load i32, ptr addrspace(4) @__oclc_ABI_version, align 4, !tbaa !11
  %2 = icmp slt i32 %1, 500
  %3 = tail call align 4 ptr addrspace(4) @llvm.amdgcn.dispatch.ptr()
  %4 = getelementptr inbounds %5, ptr addrspace(4) %3, i64 0, i32 1
  %5 = tail call ptr addrspace(4) @llvm.amdgcn.implicitarg.ptr()
  %6 = getelementptr inbounds i16, ptr addrspace(4) %5, i64 32
  %7 = select i1 %2, ptr addrspace(4) %4, ptr addrspace(4) %6
  %8 = load i16, ptr addrspace(4) %7, align 2, !tbaa !23
  switch i16 %8, label %121 [
    i16 1, label %9
    i16 2, label %20
    i16 3, label %58
  ]

9:                                                ; preds = %0
  %10 = getelementptr i8, ptr addrspace(4) %3, i64 4
  %11 = getelementptr inbounds i16, ptr addrspace(4) %5, i64 6
  %12 = select i1 %2, ptr addrspace(4) %10, ptr addrspace(4) %11
  %13 = load i16, ptr addrspace(4) %12, align 4
  %14 = zext i16 %13 to i32
  %15 = tail call i32 @llvm.amdgcn.workgroup.id.x()
  %16 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15
  %17 = mul i32 %15, %14
  %18 = add i32 %17, %16
  %19 = zext i32 %18 to i64
  br label %121

20:                                               ; preds = %0
  br i1 %2, label %21, label %28

21:                                               ; preds = %20
  %22 = getelementptr i8, ptr addrspace(4) %3, i64 4
  %23 = load i16, ptr addrspace(4) %22, align 4, !range !21, !invariant.load !22
  %24 = zext i16 %23 to i32
  %25 = getelementptr i8, ptr addrspace(4) %3, i64 6
  %26 = getelementptr inbounds %5, ptr addrspace(4) %3, i64 0, i32 6
  %27 = load i32, ptr addrspace(4) %26, align 4, !tbaa !16
  br label %39

28:                                               ; preds = %20
  %29 = getelementptr inbounds i16, ptr addrspace(4) %5, i64 6
  %30 = load i16, ptr addrspace(4) %29, align 4, !tbaa !23
  %31 = zext i16 %30 to i32
  %32 = getelementptr inbounds i16, ptr addrspace(4) %5, i64 7
  %33 = load i32, ptr addrspace(4) %5, align 4, !tbaa !11
  %34 = mul i32 %33, %31
  %35 = getelementptr inbounds i16, ptr addrspace(4) %5, i64 9
  %36 = load i16, ptr addrspace(4) %35, align 2, !tbaa !23
  %37 = zext i16 %36 to i32
  %38 = add i32 %34, %37
  br label %39

39:                                               ; preds = %28, %21
  %40 = phi i32 [ %27, %21 ], [ %38, %28 ]
  %41 = phi ptr addrspace(4) [ %25, %21 ], [ %32, %28 ]
  %42 = phi i32 [ %24, %21 ], [ %31, %28 ]
  %43 = load i16, ptr addrspace(4) %41, align 2
  %44 = zext i16 %43 to i32
  %45 = tail call i32 @llvm.amdgcn.workgroup.id.y()
  %46 = tail call i32 @llvm.amdgcn.workgroup.id.x()
  %47 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !15
  %48 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15
  %49 = mul i32 %42, %46
  %50 = add i32 %49, %48
  %51 = mul i32 %45, %44
  %52 = add i32 %51, %47
  %53 = zext i32 %52 to i64
  %54 = zext i32 %40 to i64
  %55 = mul nuw i64 %53, %54
  %56 = zext i32 %50 to i64
  %57 = add nuw i64 %55, %56
  br label %121

58:                                               ; preds = %0
  br i1 %2, label %59, label %71

59:                                               ; preds = %58
  %60 = getelementptr i8, ptr addrspace(4) %3, i64 4
  %61 = load i16, ptr addrspace(4) %60, align 4, !range !21, !invariant.load !22
  %62 = zext i16 %61 to i32
  %63 = getelementptr i8, ptr addrspace(4) %3, i64 6
  %64 = load i16, ptr addrspace(4) %63, align 2, !range !21, !invariant.load !22
  %65 = zext i16 %64 to i32
  %66 = getelementptr i8, ptr addrspace(4) %3, i64 8
  %67 = getelementptr inbounds %5, ptr addrspace(4) %3, i64 0, i32 6
  %68 = load i32, ptr addrspace(4) %67, align 4, !tbaa !16
  %69 = getelementptr inbounds %5, ptr addrspace(4) %3, i64 0, i32 7
  %70 = load i32, ptr addrspace(4) %69, align 8, !tbaa !24
  br label %92

71:                                               ; preds = %58
  %72 = getelementptr inbounds i16, ptr addrspace(4) %5, i64 6
  %73 = load i16, ptr addrspace(4) %72, align 4, !tbaa !23
  %74 = zext i16 %73 to i32
  %75 = getelementptr inbounds i16, ptr addrspace(4) %5, i64 7
  %76 = load i16, ptr addrspace(4) %75, align 2, !tbaa !23
  %77 = zext i16 %76 to i32
  %78 = getelementptr inbounds i16, ptr addrspace(4) %5, i64 8
  %79 = load i32, ptr addrspace(4) %5, align 4, !tbaa !11
  %80 = mul i32 %79, %74
  %81 = getelementptr inbounds i16, ptr addrspace(4) %5, i64 9
  %82 = load i16, ptr addrspace(4) %81, align 2, !tbaa !23
  %83 = zext i16 %82 to i32
  %84 = add i32 %80, %83
  %85 = getelementptr inbounds i32, ptr addrspace(4) %5, i64 1
  %86 = load i32, ptr addrspace(4) %85, align 4, !tbaa !11
  %87 = mul i32 %86, %77
  %88 = getelementptr inbounds i16, ptr addrspace(4) %5, i64 10
  %89 = load i16, ptr addrspace(4) %88, align 4, !tbaa !23
  %90 = zext i16 %89 to i32
  %91 = add i32 %87, %90
  br label %92

92:                                               ; preds = %71, %59
  %93 = phi i32 [ %70, %59 ], [ %91, %71 ]
  %94 = phi i32 [ %68, %59 ], [ %84, %71 ]
  %95 = phi ptr addrspace(4) [ %66, %59 ], [ %78, %71 ]
  %96 = phi i32 [ %65, %59 ], [ %77, %71 ]
  %97 = phi i32 [ %62, %59 ], [ %74, %71 ]
  %98 = load i16, ptr addrspace(4) %95, align 2
  %99 = zext i16 %98 to i32
  %100 = tail call i32 @llvm.amdgcn.workgroup.id.z()
  %101 = tail call i32 @llvm.amdgcn.workgroup.id.y()
  %102 = tail call i32 @llvm.amdgcn.workgroup.id.x()
  %103 = tail call i32 @llvm.amdgcn.workitem.id.z(), !range !15
  %104 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !15
  %105 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15
  %106 = mul i32 %97, %102
  %107 = add i32 %106, %105
  %108 = mul i32 %96, %101
  %109 = add i32 %108, %104
  %110 = mul i32 %100, %99
  %111 = add i32 %110, %103
  %112 = zext i32 %111 to i64
  %113 = zext i32 %93 to i64
  %114 = mul nuw i64 %112, %113
  %115 = zext i32 %109 to i64
  %116 = add nuw i64 %114, %115
  %117 = zext i32 %94 to i64
  %118 = mul i64 %116, %117
  %119 = zext i32 %107 to i64
  %120 = add i64 %118, %119
  br label %121

121:                                              ; preds = %92, %39, %9, %0
  %122 = phi i64 [ %120, %92 ], [ %57, %39 ], [ %19, %9 ], [ 0, %0 ]
  ret i64 %122
}

; Function Attrs: nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workgroup.id.x() #9

; Function Attrs: nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workgroup.id.y() #9

; Function Attrs: nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workgroup.id.z() #9

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_multi_grid_is_valid() local_unnamed_addr #3 {
  %1 = load i32, ptr addrspace(4) @__oclc_ABI_version, align 4, !tbaa !11
  %2 = icmp slt i32 %1, 500
  %3 = tail call ptr addrspace(4) @llvm.amdgcn.implicitarg.ptr()
  %4 = select i1 %2, i64 6, i64 11
  %5 = getelementptr inbounds i64, ptr addrspace(4) %3, i64 %4
  %6 = load i64, ptr addrspace(4) %5, align 8, !tbaa !13
  %7 = icmp ugt i64 %6, 1
  %8 = zext i1 %7 to i32
  ret i32 %8
}

; Function Attrs: convergent norecurse nounwind
define linkonce_odr protected void @__ockl_multi_grid_sync() local_unnamed_addr #12 {
  fence seq_cst
  tail call void @llvm.amdgcn.s.barrier()
  %1 = tail call i64 @__ockl_get_num_groups(i32 noundef 0) #17
  %2 = trunc i64 %1 to i32
  %3 = tail call i64 @__ockl_get_num_groups(i32 noundef 1) #17
  %4 = trunc i64 %3 to i32
  %5 = mul i32 %4, %2
  %6 = tail call i64 @__ockl_get_num_groups(i32 noundef 2) #17
  %7 = trunc i64 %6 to i32
  %8 = mul i32 %5, %7
  %9 = add i32 %8, -1
  %10 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15
  %11 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !15
  %12 = tail call i32 @llvm.amdgcn.workitem.id.z(), !range !15
  %13 = or i32 %11, %12
  %14 = or i32 %13, %10
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %17

16:                                               ; preds = %0
  tail call void @llvm.amdgcn.ds.gws.barrier(i32 %9, i32 0)
  br label %17

17:                                               ; preds = %16, %0
  %18 = tail call i32 @llvm.amdgcn.workgroup.id.x()
  %19 = tail call i32 @llvm.amdgcn.workgroup.id.y()
  %20 = tail call i32 @llvm.amdgcn.workgroup.id.z()
  %21 = or i32 %10, %12
  %22 = or i32 %21, %11
  %23 = or i32 %22, %18
  %24 = or i32 %23, %19
  %25 = or i32 %24, %20
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %49

27:                                               ; preds = %17
  %28 = load i32, ptr addrspace(4) @__oclc_ABI_version, align 4, !tbaa !11
  %29 = icmp slt i32 %28, 500
  %30 = tail call ptr addrspace(4) @llvm.amdgcn.implicitarg.ptr()
  %31 = select i1 %29, i64 6, i64 11
  %32 = getelementptr inbounds i64, ptr addrspace(4) %30, i64 %31
  %33 = load i64, ptr addrspace(4) %32, align 8, !tbaa !13
  %34 = inttoptr i64 %33 to ptr addrspace(4)
  %35 = load ptr addrspace(1), ptr addrspace(4) %34, align 8, !tbaa !31
  %36 = getelementptr inbounds %7, ptr addrspace(4) %34, i64 0, i32 2
  %37 = load i32, ptr addrspace(4) %36, align 4, !tbaa !26
  %38 = atomicrmw add ptr addrspace(1) %35, i32 1 syncscope("one-as") monotonic, align 4
  %39 = and i32 %38, 255
  %40 = add i32 %37, -1
  %41 = icmp eq i32 %39, %40
  br i1 %41, label %42, label %45

42:                                               ; preds = %27
  %43 = sub i32 256, %37
  %44 = atomicrmw add ptr addrspace(1) %35, i32 %43 syncscope("one-as") monotonic, align 4
  br label %49

45:                                               ; preds = %45, %27
  tail call void @llvm.amdgcn.s.sleep(i32 2)
  %46 = load atomic i32, ptr addrspace(1) %35 syncscope("one-as") monotonic, align 4
  %47 = xor i32 %46, %38
  %48 = icmp ult i32 %47, 256
  br i1 %48, label %45, label %49

49:                                               ; preds = %45, %42, %17
  br i1 %15, label %50, label %51

50:                                               ; preds = %49
  tail call void @llvm.amdgcn.ds.gws.barrier(i32 %9, i32 0)
  br label %51

51:                                               ; preds = %50, %49
  tail call void @llvm.amdgcn.s.barrier()
  ret void
}

; Function Attrs: nounwind willreturn
declare void @llvm.amdgcn.s.sleep(i32 immarg) #13

; Function Attrs: alwaysinline mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected zeroext i8 @__ockl_clz_u8(i8 noundef zeroext %0) local_unnamed_addr #14 {
  %2 = tail call i8 @llvm.ctlz.i8(i8 %0, i1 false), !range !32
  ret i8 %2
}

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare i8 @llvm.ctlz.i8(i8, i1 immarg) #4

; Function Attrs: alwaysinline mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected zeroext i16 @__ockl_clz_u16(i16 noundef zeroext %0) local_unnamed_addr #14 {
  %2 = tail call i16 @llvm.ctlz.i16(i16 %0, i1 false), !range !33
  ret i16 %2
}

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare i16 @llvm.ctlz.i16(i16, i1 immarg) #4

; Function Attrs: alwaysinline mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_clz_u32(i32 noundef %0) local_unnamed_addr #14 {
  %2 = tail call i32 @llvm.ctlz.i32(i32 %0, i1 false), !range !34
  ret i32 %2
}

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #4

; Function Attrs: alwaysinline mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i64 @__ockl_clz_u64(i64 noundef %0) local_unnamed_addr #14 {
  %2 = tail call i64 @llvm.ctlz.i64(i64 %0, i1 false), !range !35
  ret i64 %2
}

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare i64 @llvm.ctlz.i64(i64, i1 immarg) #4

; Function Attrs: alwaysinline mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected zeroext i8 @__ockl_ctz_u8(i8 noundef zeroext %0) local_unnamed_addr #14 {
  %2 = tail call i8 @llvm.cttz.i8(i8 %0, i1 false), !range !32
  ret i8 %2
}

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare i8 @llvm.cttz.i8(i8, i1 immarg) #4

; Function Attrs: alwaysinline mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected zeroext i16 @__ockl_ctz_u16(i16 noundef zeroext %0) local_unnamed_addr #14 {
  %2 = tail call i16 @llvm.cttz.i16(i16 %0, i1 false), !range !33
  ret i16 %2
}

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare i16 @llvm.cttz.i16(i16, i1 immarg) #4

; Function Attrs: alwaysinline mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_ctz_u32(i32 noundef %0) local_unnamed_addr #14 {
  %2 = tail call i32 @llvm.cttz.i32(i32 %0, i1 false), !range !34
  ret i32 %2
}

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.cttz.i32(i32, i1 immarg) #4

; Function Attrs: alwaysinline mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i64 @__ockl_ctz_u64(i64 noundef %0) local_unnamed_addr #14 {
  %2 = tail call i64 @llvm.cttz.i64(i64 %0, i1 false), !range !35
  ret i64 %2
}

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare i64 @llvm.cttz.i64(i64, i1 immarg) #4

; Function Attrs: convergent noinline norecurse nounwind
define linkonce_odr protected void @__ockl_dm_dealloc(i64 noundef %0) local_unnamed_addr #15 {
  %2 = and i64 %0, 4095
  %3 = icmp eq i64 %2, 0
  br i1 %3, label %4, label %32

4:                                                ; preds = %1
  %5 = tail call i64 @__ockl_devmem_request(i64 noundef %0, i64 noundef 0) #58
  %6 = tail call i32 @__ockl_activelane_u32() #58
  %7 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %13, label %9

9:                                                ; preds = %4
  %10 = tail call i64 @llvm.read_register.i64(metadata !36) #57
  %11 = tail call i64 @llvm.ctpop.i64(i64 %10), !range !35
  %12 = trunc i64 %11 to i32
  br label %16

13:                                               ; preds = %4
  %14 = tail call i32 @llvm.read_register.i32(metadata !10) #57
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14), !range !34
  br label %16

16:                                               ; preds = %13, %9
  %17 = phi i32 [ %12, %9 ], [ %15, %13 ]
  %18 = icmp eq i32 %6, 0
  br i1 %18, label %19, label %132

19:                                               ; preds = %16
  %20 = load i32, ptr addrspace(4) @__oclc_ABI_version, align 4, !tbaa !11
  %21 = icmp slt i32 %20, 500
  br i1 %21, label %27, label %22

22:                                               ; preds = %19
  %23 = tail call ptr addrspace(4) @llvm.amdgcn.implicitarg.ptr()
  %24 = getelementptr inbounds i64, ptr addrspace(4) %23, i64 12
  %25 = load i64, ptr addrspace(4) %24, align 8, !tbaa !13
  %26 = inttoptr i64 %25 to ptr addrspace(1)
  br label %27

27:                                               ; preds = %22, %19
  %28 = phi ptr addrspace(1) [ %26, %22 ], [ @0, %19 ]
  %29 = getelementptr inbounds %0, ptr addrspace(1) %28, i64 0, i32 6
  %30 = zext i32 %17 to i64
  %31 = atomicrmw sub ptr addrspace(1) %29, i64 %30 syncscope("agent-one-as") monotonic, align 8
  br label %132

32:                                               ; preds = %1
  %33 = and i64 %0, -2097152
  %34 = inttoptr i64 %33 to ptr addrspace(1)
  %35 = load i32, ptr addrspace(1) %34, align 2097152, !tbaa !37
  %36 = getelementptr inbounds %8, ptr addrspace(1) %34, i64 0, i32 1
  %37 = load i32, ptr addrspace(1) %36, align 4, !tbaa !39
  %38 = load i32, ptr addrspace(4) @__oclc_ABI_version, align 4, !tbaa !11
  %39 = icmp slt i32 %38, 500
  br i1 %39, label %45, label %40

40:                                               ; preds = %32
  %41 = tail call ptr addrspace(4) @llvm.amdgcn.implicitarg.ptr()
  %42 = getelementptr inbounds i64, ptr addrspace(4) %41, i64 12
  %43 = load i64, ptr addrspace(4) %42, align 8, !tbaa !13
  %44 = inttoptr i64 %43 to ptr addrspace(1)
  br label %45

45:                                               ; preds = %40, %32
  %46 = phi ptr addrspace(1) [ %44, %40 ], [ @0, %32 ]
  %47 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1
  %48 = icmp eq i8 %47, 0
  %49 = zext i32 %35 to i64
  %50 = icmp ult i32 %37, 256
  %51 = zext i32 %35 to i64
  %52 = zext i32 %37 to i64
  %53 = getelementptr inbounds %0, ptr addrspace(1) %46, i64 0, i32 5, i64 %51, i64 %52
  %54 = add i32 %37, -256
  %55 = zext i32 %35 to i64
  %56 = lshr i32 %54, 8
  %57 = zext i32 %56 to i64
  %58 = getelementptr inbounds %0, ptr addrspace(1) %46, i64 0, i32 5, i64 %55, i64 %57
  %59 = and i32 %37, 255
  %60 = zext i32 %59 to i64
  %61 = trunc i64 %0 to i32
  %62 = and i32 %61, 2097151
  %63 = lshr i32 %35, 1
  %64 = add nuw i32 %63, 4
  %65 = and i32 %64, 31
  %66 = shl nuw i32 1, %65
  %67 = and i32 %35, 1
  %68 = icmp eq i32 %67, 0
  %69 = lshr i32 %66, 1
  %70 = select i1 %68, i32 0, i32 %69
  %71 = add nuw i32 %70, %66
  br label %72

72:                                               ; preds = %129, %45
  %73 = phi i32 [ 1, %45 ], [ %130, %129 ]
  %74 = tail call i32 asm sideeffect "; O0 $0", "=v,0"(i32 %73) #58, !srcloc !40
  %75 = icmp eq i32 %73, 0
  br i1 %75, label %129, label %76

76:                                               ; preds = %72
  %77 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %35)
  %78 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %37)
  %79 = icmp eq i32 %35, %77
  %80 = icmp eq i32 %37, %78
  %81 = select i1 %79, i1 %80, i1 false
  br i1 %81, label %82, label %129

82:                                               ; preds = %76
  %83 = tail call i32 @__ockl_activelane_u32() #58
  br i1 %48, label %88, label %84

84:                                               ; preds = %82
  %85 = tail call i64 @llvm.read_register.i64(metadata !36) #57
  %86 = tail call i64 @llvm.ctpop.i64(i64 %85), !range !35
  %87 = trunc i64 %86 to i32
  br label %91

88:                                               ; preds = %82
  %89 = tail call i32 @llvm.read_register.i32(metadata !10) #57
  %90 = tail call i32 @llvm.ctpop.i32(i32 %89), !range !34
  br label %91

91:                                               ; preds = %88, %84
  %92 = phi i32 [ %87, %84 ], [ %90, %88 ]
  %93 = icmp eq i32 %83, 0
  %94 = xor i1 %93, true
  %95 = select i1 %94, i1 true, i1 %50
  %96 = select i1 %93, i64 %51, i64 %49
  %97 = select i1 %93, ptr addrspace(1) %53, ptr addrspace(1) null
  br i1 %95, label %102, label %98

98:                                               ; preds = %91
  %99 = load atomic i64, ptr addrspace(1) %58 syncscope("agent-one-as") monotonic, align 8
  %100 = inttoptr i64 %99 to ptr addrspace(1)
  %101 = getelementptr inbounds %3, ptr addrspace(1) %100, i64 %60
  br label %102

102:                                              ; preds = %98, %91
  %103 = phi i64 [ %55, %98 ], [ %96, %91 ]
  %104 = phi ptr addrspace(1) [ %101, %98 ], [ %97, %91 ]
  %105 = ptrtoint ptr addrspace(1) %104 to i64
  %106 = trunc i64 %105 to i32
  %107 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %106)
  %108 = lshr i64 %105, 32
  %109 = trunc i64 %108 to i32
  %110 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %109)
  %111 = getelementptr inbounds [16 x %4], ptr addrspace(4) @1, i64 0, i64 %103, i32 3
  %112 = load i32, ptr addrspace(4) %111, align 4, !tbaa !41
  %113 = sub i32 %62, %112
  %114 = udiv i32 %113, %71
  %115 = and i32 %114, 31
  %116 = shl nuw i32 1, %115
  %117 = xor i32 %116, -1
  %118 = lshr i32 %114, 5
  %119 = zext i32 %118 to i64
  %120 = getelementptr inbounds %8, ptr addrspace(1) %34, i64 0, i32 4, i64 %119
  %121 = atomicrmw and ptr addrspace(1) %120, i32 %117 syncscope("agent-one-as") monotonic, align 4
  br i1 %93, label %122, label %129

122:                                              ; preds = %102
  %123 = insertelement <2 x i32> undef, i32 %107, i64 0
  %124 = insertelement <2 x i32> %123, i32 %110, i64 1
  %125 = bitcast <2 x i32> %124 to i64
  %126 = inttoptr i64 %125 to ptr addrspace(1)
  %127 = getelementptr inbounds %3, ptr addrspace(1) %126, i64 0, i32 2
  %128 = atomicrmw sub ptr addrspace(1) %127, i32 %92 syncscope("agent-one-as") monotonic, align 4
  br label %129

129:                                              ; preds = %122, %102, %76, %72
  %130 = phi i32 [ 0, %72 ], [ 1, %76 ], [ 0, %122 ], [ 0, %102 ]
  %131 = tail call zeroext i1 @__ockl_wfany_i32(i32 noundef %130) #58
  br i1 %131, label %72, label %132

132:                                              ; preds = %129, %27, %16
  ret void
}

; Function Attrs: convergent norecurse nounwind
define weak protected i64 @__ockl_devmem_request(i64 noundef %0, i64 noundef %1) local_unnamed_addr #16 {
  %3 = tail call <2 x i64> @__ockl_hostcall_preview(i32 noundef 3, i64 noundef %0, i64 noundef %1, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #58
  %4 = extractelement <2 x i64> %3, i64 0
  ret i64 %4
}

; Function Attrs: nounwind readonly
declare i64 @llvm.read_register.i64(metadata) #1

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare i64 @llvm.ctpop.i64(i64) #4

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.ctpop.i32(i32) #4

; Function Attrs: convergent nounwind readnone willreturn
declare i32 @llvm.amdgcn.readfirstlane(i32) #17

; Function Attrs: alwaysinline convergent norecurse nounwind
define linkonce_odr protected zeroext i1 @__ockl_wfany_i32(i32 noundef %0) local_unnamed_addr #18 {
  %2 = tail call i32 asm sideeffect "; ockl ballot hoisting hack $0", "=v,0"(i32 %0) #58, !srcloc !43
  %3 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %8, label %5

5:                                                ; preds = %1
  %6 = tail call i64 @llvm.amdgcn.icmp.i64.i32(i32 noundef %2, i32 noundef 0, i32 noundef 33) #17
  %7 = icmp ne i64 %6, 0
  br label %11

8:                                                ; preds = %1
  %9 = tail call i32 @llvm.amdgcn.icmp.i32.i32(i32 noundef %2, i32 noundef 0, i32 noundef 33) #17
  %10 = icmp ne i32 %9, 0
  br label %11

11:                                               ; preds = %8, %5
  %12 = phi i1 [ %7, %5 ], [ %10, %8 ]
  ret i1 %12
}

; Function Attrs: convergent nounwind readnone willreturn
declare i64 @llvm.amdgcn.icmp.i64.i32(i32, i32, i32 immarg) #17

; Function Attrs: convergent nounwind readnone willreturn
declare i32 @llvm.amdgcn.icmp.i32.i32(i32, i32, i32 immarg) #17

; Function Attrs: convergent norecurse nounwind
define linkonce_odr protected <2 x i64> @__ockl_hostcall_preview(i32 noundef %0, i64 noundef %1, i64 noundef %2, i64 noundef %3, i64 noundef %4, i64 noundef %5, i64 noundef %6, i64 noundef %7, i64 noundef %8) local_unnamed_addr #16 {
  %10 = load i32, ptr addrspace(4) @__oclc_ABI_version, align 4, !tbaa !11
  %11 = icmp slt i32 %10, 500
  %12 = tail call ptr addrspace(4) @llvm.amdgcn.implicitarg.ptr()
  %13 = select i1 %11, i64 3, i64 10
  %14 = getelementptr inbounds i64, ptr addrspace(4) %12, i64 %13
  %15 = load i64, ptr addrspace(4) %14, align 8, !tbaa !13
  %16 = inttoptr i64 %15 to ptr addrspace(1)
  %17 = addrspacecast ptr addrspace(1) %16 to ptr
  %18 = tail call <2 x i64> @__ockl_hostcall_internal(ptr noundef %17, i32 noundef %0, i64 noundef %1, i64 noundef %2, i64 noundef %3, i64 noundef %4, i64 noundef %5, i64 noundef %6, i64 noundef %7, i64 noundef %8) #58
  ret <2 x i64> %18
}

; Function Attrs: convergent noinline norecurse nounwind optnone
define linkonce_odr protected <2 x i64> @__ockl_hostcall_internal(ptr noundef %0, i32 noundef %1, i64 noundef %2, i64 noundef %3, i64 noundef %4, i64 noundef %5, i64 noundef %6, i64 noundef %7, i64 noundef %8, i64 noundef %9) local_unnamed_addr #19 {
  %11 = alloca ptr, align 8, addrspace(5)
  %12 = alloca i32, align 4, addrspace(5)
  %13 = alloca i64, align 8, addrspace(5)
  %14 = alloca i64, align 8, addrspace(5)
  %15 = alloca i64, align 8, addrspace(5)
  %16 = alloca i64, align 8, addrspace(5)
  %17 = alloca i64, align 8, addrspace(5)
  %18 = alloca i64, align 8, addrspace(5)
  %19 = alloca i64, align 8, addrspace(5)
  %20 = alloca i64, align 8, addrspace(5)
  %21 = alloca i32, align 4, addrspace(5)
  %22 = alloca i32, align 4, addrspace(5)
  %23 = alloca ptr addrspace(1), align 8, addrspace(5)
  %24 = alloca i64, align 8, addrspace(5)
  %25 = alloca ptr addrspace(1), align 8, addrspace(5)
  %26 = alloca ptr addrspace(1), align 8, addrspace(5)
  %27 = alloca <2 x i64>, align 16, addrspace(5)
  store ptr %0, ptr addrspace(5) %11, align 8, !tbaa !44
  store i32 %1, ptr addrspace(5) %12, align 4, !tbaa !11
  store i64 %2, ptr addrspace(5) %13, align 8, !tbaa !13
  store i64 %3, ptr addrspace(5) %14, align 8, !tbaa !13
  store i64 %4, ptr addrspace(5) %15, align 8, !tbaa !13
  store i64 %5, ptr addrspace(5) %16, align 8, !tbaa !13
  store i64 %6, ptr addrspace(5) %17, align 8, !tbaa !13
  store i64 %7, ptr addrspace(5) %18, align 8, !tbaa !13
  store i64 %8, ptr addrspace(5) %19, align 8, !tbaa !13
  store i64 %9, ptr addrspace(5) %20, align 8, !tbaa !13
  call void @llvm.lifetime.start.p5(i64 4, ptr addrspace(5) %21) #25
  %28 = call i32 @__ockl_lane_u32() #57
  store i32 %28, ptr addrspace(5) %21, align 4, !tbaa !11
  %29 = load i32, ptr addrspace(5) %21, align 4, !tbaa !11
  %30 = call fastcc i32 @2(i32 noundef %29) #57
  store i32 %30, ptr addrspace(5) %21, align 4, !tbaa !11
  call void @llvm.lifetime.start.p5(i64 4, ptr addrspace(5) %22) #25
  %31 = load i32, ptr addrspace(5) %21, align 4, !tbaa !11
  %32 = call i32 @llvm.amdgcn.readfirstlane(i32 %31)
  store i32 %32, ptr addrspace(5) %22, align 4, !tbaa !11
  call void @llvm.lifetime.start.p5(i64 8, ptr addrspace(5) %23) #25
  %33 = load ptr, ptr addrspace(5) %11, align 8, !tbaa !44
  %34 = addrspacecast ptr %33 to ptr addrspace(1)
  store ptr addrspace(1) %34, ptr addrspace(5) %23, align 8, !tbaa !44
  call void @llvm.lifetime.start.p5(i64 8, ptr addrspace(5) %24) #25
  %35 = load ptr addrspace(1), ptr addrspace(5) %23, align 8, !tbaa !44
  %36 = load i32, ptr addrspace(5) %21, align 4, !tbaa !11
  %37 = load i32, ptr addrspace(5) %22, align 4, !tbaa !11
  %38 = call fastcc i64 @3(ptr addrspace(1) noundef %35, i32 noundef %36, i32 noundef %37) #57
  store i64 %38, ptr addrspace(5) %24, align 8, !tbaa !13
  call void @llvm.lifetime.start.p5(i64 8, ptr addrspace(5) %25) #25
  %39 = load ptr addrspace(1), ptr addrspace(5) %23, align 8, !tbaa !44
  %40 = load i64, ptr addrspace(5) %24, align 8, !tbaa !13
  %41 = load ptr addrspace(1), ptr addrspace(1) %39, align 8, !tbaa !45
  %42 = getelementptr i8, ptr addrspace(1) %39, i64 40
  %43 = load i64, ptr addrspace(1) %42, align 8, !tbaa !47
  %44 = call fastcc ptr addrspace(1) @4(ptr addrspace(1) %41, i64 %43, i64 noundef %40) #57
  store ptr addrspace(1) %44, ptr addrspace(5) %25, align 8, !tbaa !44
  call void @llvm.lifetime.start.p5(i64 8, ptr addrspace(5) %26) #25
  %45 = load ptr addrspace(1), ptr addrspace(5) %23, align 8, !tbaa !44
  %46 = load i64, ptr addrspace(5) %24, align 8, !tbaa !13
  %47 = getelementptr i8, ptr addrspace(1) %45, i64 8
  %48 = load ptr addrspace(1), ptr addrspace(1) %47, align 8, !tbaa !48
  %49 = getelementptr i8, ptr addrspace(1) %45, i64 40
  %50 = load i64, ptr addrspace(1) %49, align 8, !tbaa !47
  %51 = call fastcc ptr addrspace(1) @5(ptr addrspace(1) %48, i64 %50, i64 noundef %46) #57
  store ptr addrspace(1) %51, ptr addrspace(5) %26, align 8, !tbaa !44
  %52 = load ptr addrspace(1), ptr addrspace(5) %25, align 8, !tbaa !44
  %53 = load ptr addrspace(1), ptr addrspace(5) %26, align 8, !tbaa !44
  %54 = load i32, ptr addrspace(5) %12, align 4, !tbaa !11
  %55 = load i64, ptr addrspace(5) %13, align 8, !tbaa !13
  %56 = load i64, ptr addrspace(5) %14, align 8, !tbaa !13
  %57 = load i64, ptr addrspace(5) %15, align 8, !tbaa !13
  %58 = load i64, ptr addrspace(5) %16, align 8, !tbaa !13
  %59 = load i64, ptr addrspace(5) %17, align 8, !tbaa !13
  %60 = load i64, ptr addrspace(5) %18, align 8, !tbaa !13
  %61 = load i64, ptr addrspace(5) %19, align 8, !tbaa !13
  %62 = load i64, ptr addrspace(5) %20, align 8, !tbaa !13
  %63 = load i32, ptr addrspace(5) %21, align 4, !tbaa !11
  %64 = load i32, ptr addrspace(5) %22, align 4, !tbaa !11
  call fastcc void @6(ptr addrspace(1) noundef %52, ptr addrspace(1) noundef %53, i32 noundef %54, i64 noundef %55, i64 noundef %56, i64 noundef %57, i64 noundef %58, i64 noundef %59, i64 noundef %60, i64 noundef %61, i64 noundef %62, i32 noundef %63, i32 noundef %64) #57
  %65 = load ptr addrspace(1), ptr addrspace(5) %23, align 8, !tbaa !44
  %66 = load i64, ptr addrspace(5) %24, align 8, !tbaa !13
  %67 = load i32, ptr addrspace(5) %21, align 4, !tbaa !11
  %68 = load i32, ptr addrspace(5) %22, align 4, !tbaa !11
  call fastcc void @7(ptr addrspace(1) noundef %65, i64 noundef %66, i32 noundef %67, i32 noundef %68) #57
  call void @llvm.lifetime.start.p5(i64 16, ptr addrspace(5) %27) #25
  %69 = load ptr addrspace(1), ptr addrspace(5) %25, align 8, !tbaa !44
  %70 = load ptr addrspace(1), ptr addrspace(5) %26, align 8, !tbaa !44
  %71 = load i32, ptr addrspace(5) %21, align 4, !tbaa !11
  %72 = load i32, ptr addrspace(5) %22, align 4, !tbaa !11
  %73 = call fastcc <2 x i64> @8(ptr addrspace(1) noundef %69, ptr addrspace(1) noundef %70, i32 noundef %71, i32 noundef %72) #57
  store <2 x i64> %73, ptr addrspace(5) %27, align 16, !tbaa !49
  %74 = load ptr addrspace(1), ptr addrspace(5) %23, align 8, !tbaa !44
  %75 = load i64, ptr addrspace(5) %24, align 8, !tbaa !13
  %76 = load i32, ptr addrspace(5) %21, align 4, !tbaa !11
  %77 = load i32, ptr addrspace(5) %22, align 4, !tbaa !11
  call fastcc void @9(ptr addrspace(1) noundef %74, i64 noundef %75, i32 noundef %76, i32 noundef %77) #57
  %78 = load <2 x i64>, ptr addrspace(5) %27, align 16, !tbaa !49
  call void @llvm.lifetime.end.p5(i64 16, ptr addrspace(5) %27) #25
  call void @llvm.lifetime.end.p5(i64 8, ptr addrspace(5) %26) #25
  call void @llvm.lifetime.end.p5(i64 8, ptr addrspace(5) %25) #25
  call void @llvm.lifetime.end.p5(i64 8, ptr addrspace(5) %24) #25
  call void @llvm.lifetime.end.p5(i64 8, ptr addrspace(5) %23) #25
  call void @llvm.lifetime.end.p5(i64 4, ptr addrspace(5) %22) #25
  call void @llvm.lifetime.end.p5(i64 4, ptr addrspace(5) %21) #25
  ret <2 x i64> %78
}

; Function Attrs: argmemonly nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p5(i64 immarg, ptr addrspace(5) nocapture) #20

; Function Attrs: alwaysinline mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_lane_u32() local_unnamed_addr #21 {
  %1 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %2 = icmp eq i8 %1, 0
  %3 = tail call i32 @llvm.amdgcn.mbcnt.lo(i32 -1, i32 0)
  br i1 %2, label %6, label %4

4:                                                ; preds = %0
  %5 = tail call i32 @llvm.amdgcn.mbcnt.hi(i32 -1, i32 %3)
  br label %6

6:                                                ; preds = %4, %0
  %7 = phi i32 [ %5, %4 ], [ %3, %0 ]
  ret i32 %7
}

; Function Attrs: convergent norecurse nounwind
define internal fastcc i32 @2(i32 noundef %0) unnamed_addr #12 {
  %2 = tail call i32 asm sideeffect "; ockl readfirstlane hoisting hack $0", "=v,0"(i32 %0) #58, !srcloc !50
  ret i32 %2
}

; Function Attrs: convergent norecurse nounwind
define internal fastcc i64 @3(ptr addrspace(1) nocapture noundef %0, i32 noundef %1, i32 noundef %2) unnamed_addr #12 {
  %4 = icmp eq i32 %1, %2
  br i1 %4, label %5, label %29

5:                                                ; preds = %3
  %6 = getelementptr inbounds %9, ptr addrspace(1) %0, i64 0, i32 3
  %7 = load atomic i64, ptr addrspace(1) %6 syncscope("one-as") acquire, align 8
  %8 = getelementptr i8, ptr addrspace(1) %0, i64 40
  %9 = load ptr addrspace(1), ptr addrspace(1) %0, align 8, !tbaa !45
  %10 = load i64, ptr addrspace(1) %8, align 8, !tbaa !47
  %11 = and i64 %10, %7
  %12 = getelementptr inbounds %10, ptr addrspace(1) %9, i64 %11
  %13 = load atomic i64, ptr addrspace(1) %12 syncscope("one-as") monotonic, align 8
  %14 = cmpxchg ptr addrspace(1) %6, i64 %7, i64 %13 syncscope("one-as") acquire monotonic, align 8
  %15 = extractvalue { i64, i1 } %14, 1
  br i1 %15, label %26, label %16

16:                                               ; preds = %16, %5
  %17 = phi { i64, i1 } [ %24, %16 ], [ %14, %5 ]
  %18 = extractvalue { i64, i1 } %17, 0
  tail call void @llvm.amdgcn.s.sleep(i32 1)
  %19 = load ptr addrspace(1), ptr addrspace(1) %0, align 8, !tbaa !45
  %20 = load i64, ptr addrspace(1) %8, align 8, !tbaa !47
  %21 = and i64 %20, %18
  %22 = getelementptr inbounds %10, ptr addrspace(1) %19, i64 %21
  %23 = load atomic i64, ptr addrspace(1) %22 syncscope("one-as") monotonic, align 8
  %24 = cmpxchg ptr addrspace(1) %6, i64 %18, i64 %23 syncscope("one-as") acquire monotonic, align 8
  %25 = extractvalue { i64, i1 } %24, 1
  br i1 %25, label %26, label %16

26:                                               ; preds = %16, %5
  %27 = phi { i64, i1 } [ %14, %5 ], [ %24, %16 ]
  %28 = extractvalue { i64, i1 } %27, 0
  br label %29

29:                                               ; preds = %26, %3
  %30 = phi i64 [ %28, %26 ], [ 0, %3 ]
  %31 = trunc i64 %30 to i32
  %32 = lshr i64 %30, 32
  %33 = trunc i64 %32 to i32
  %34 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %31)
  %35 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %33)
  %36 = zext i32 %35 to i64
  %37 = shl nuw i64 %36, 32
  %38 = zext i32 %34 to i64
  %39 = or i64 %37, %38
  ret i64 %39
}

; Function Attrs: argmemonly mustprogress nofree norecurse nosync nounwind readonly willreturn
define internal fastcc ptr addrspace(1) @4(ptr addrspace(1) %0, i64 %1, i64 noundef %2) unnamed_addr #22 {
  %4 = and i64 %2, %1
  %5 = getelementptr inbounds %10, ptr addrspace(1) %0, i64 %4
  ret ptr addrspace(1) %5
}

; Function Attrs: argmemonly mustprogress nofree norecurse nosync nounwind readonly willreturn
define internal fastcc ptr addrspace(1) @5(ptr addrspace(1) %0, i64 %1, i64 noundef %2) unnamed_addr #22 {
  %4 = and i64 %2, %1
  %5 = getelementptr inbounds %11, ptr addrspace(1) %0, i64 %4
  ret ptr addrspace(1) %5
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind willreturn
define internal fastcc void @6(ptr addrspace(1) nocapture noundef writeonly %0, ptr addrspace(1) nocapture noundef writeonly %1, i32 noundef %2, i64 noundef %3, i64 noundef %4, i64 noundef %5, i64 noundef %6, i64 noundef %7, i64 noundef %8, i64 noundef %9, i64 noundef %10, i32 noundef %11, i32 noundef %12) unnamed_addr #23 {
  %14 = tail call i64 @llvm.read_register.i64(metadata !36) #57
  %15 = icmp eq i32 %11, %12
  br i1 %15, label %16, label %20

16:                                               ; preds = %13
  %17 = getelementptr inbounds %10, ptr addrspace(1) %0, i64 0, i32 3
  %18 = getelementptr inbounds %10, ptr addrspace(1) %0, i64 0, i32 1
  %19 = getelementptr inbounds %10, ptr addrspace(1) %0, i64 0, i32 2
  store i32 %2, ptr addrspace(1) %19, align 8, !tbaa !51
  store i64 %14, ptr addrspace(1) %18, align 8, !tbaa !53
  store i32 1, ptr addrspace(1) %17, align 4, !tbaa !54
  br label %20

20:                                               ; preds = %16, %13
  %21 = zext i32 %11 to i64
  %22 = getelementptr inbounds [64 x [8 x i64]], ptr addrspace(1) %1, i64 0, i64 %21
  store i64 %3, ptr addrspace(1) %22, align 8, !tbaa !13
  %23 = getelementptr inbounds i64, ptr addrspace(1) %22, i64 1
  store i64 %4, ptr addrspace(1) %23, align 8, !tbaa !13
  %24 = getelementptr inbounds i64, ptr addrspace(1) %22, i64 2
  store i64 %5, ptr addrspace(1) %24, align 8, !tbaa !13
  %25 = getelementptr inbounds i64, ptr addrspace(1) %22, i64 3
  store i64 %6, ptr addrspace(1) %25, align 8, !tbaa !13
  %26 = getelementptr inbounds i64, ptr addrspace(1) %22, i64 4
  store i64 %7, ptr addrspace(1) %26, align 8, !tbaa !13
  %27 = getelementptr inbounds i64, ptr addrspace(1) %22, i64 5
  store i64 %8, ptr addrspace(1) %27, align 8, !tbaa !13
  %28 = getelementptr inbounds i64, ptr addrspace(1) %22, i64 6
  store i64 %9, ptr addrspace(1) %28, align 8, !tbaa !13
  %29 = getelementptr inbounds i64, ptr addrspace(1) %22, i64 7
  store i64 %10, ptr addrspace(1) %29, align 8, !tbaa !13
  ret void
}

; Function Attrs: convergent norecurse nounwind
define internal fastcc void @7(ptr addrspace(1) nocapture noundef %0, i64 noundef %1, i32 noundef %2, i32 noundef %3) unnamed_addr #12 {
  %5 = icmp eq i32 %2, %3
  br i1 %5, label %6, label %24

6:                                                ; preds = %4
  %7 = getelementptr inbounds %9, ptr addrspace(1) %0, i64 0, i32 4
  %8 = load atomic i64, ptr addrspace(1) %7 syncscope("one-as") monotonic, align 8
  %9 = load ptr addrspace(1), ptr addrspace(1) %0, align 8, !tbaa !45
  %10 = getelementptr i8, ptr addrspace(1) %0, i64 40
  %11 = load i64, ptr addrspace(1) %10, align 8, !tbaa !47
  %12 = and i64 %11, %1
  %13 = getelementptr inbounds %10, ptr addrspace(1) %9, i64 %12
  store i64 %8, ptr addrspace(1) %13, align 8, !tbaa !55
  %14 = cmpxchg ptr addrspace(1) %7, i64 %8, i64 %1 syncscope("one-as") release monotonic, align 8
  %15 = extractvalue { i64, i1 } %14, 1
  br i1 %15, label %21, label %16

16:                                               ; preds = %16, %6
  %17 = phi { i64, i1 } [ %19, %16 ], [ %14, %6 ]
  %18 = extractvalue { i64, i1 } %17, 0
  tail call void @llvm.amdgcn.s.sleep(i32 1)
  store i64 %18, ptr addrspace(1) %13, align 8, !tbaa !55
  %19 = cmpxchg ptr addrspace(1) %7, i64 %18, i64 %1 syncscope("one-as") release monotonic, align 8
  %20 = extractvalue { i64, i1 } %19, 1
  br i1 %20, label %21, label %16

21:                                               ; preds = %16, %6
  %22 = getelementptr inbounds %9, ptr addrspace(1) %0, i64 0, i32 2
  %23 = load i64, ptr addrspace(1) %22, align 8
  tail call void @__ockl_hsa_signal_add(i64 %23, i64 noundef 1, i32 noundef 3) #58
  br label %24

24:                                               ; preds = %21, %4
  ret void
}

; Function Attrs: convergent norecurse nounwind
define internal fastcc <2 x i64> @8(ptr addrspace(1) nocapture noundef readonly %0, ptr addrspace(1) nocapture noundef readonly %1, i32 noundef %2, i32 noundef %3) unnamed_addr #16 {
  %5 = icmp eq i32 %2, %3
  %6 = getelementptr inbounds %10, ptr addrspace(1) %0, i64 0, i32 3
  br label %7

7:                                                ; preds = %15, %4
  br i1 %5, label %8, label %11

8:                                                ; preds = %7
  %9 = load atomic i32, ptr addrspace(1) %6 syncscope("one-as") acquire, align 4
  %10 = and i32 %9, 1
  br label %11

11:                                               ; preds = %8, %7
  %12 = phi i32 [ %10, %8 ], [ 1, %7 ]
  %13 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %12)
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %16, label %15

15:                                               ; preds = %11
  tail call void @llvm.amdgcn.s.sleep(i32 1)
  br label %7

16:                                               ; preds = %11
  %17 = zext i32 %2 to i64
  %18 = getelementptr inbounds [8 x i64], ptr addrspace(1) %1, i64 %17
  %19 = getelementptr inbounds i64, ptr addrspace(1) %18, i64 1
  %20 = load i64, ptr addrspace(1) %18, align 8, !tbaa !13
  %21 = load i64, ptr addrspace(1) %19, align 8, !tbaa !13
  %22 = insertelement <2 x i64> undef, i64 %20, i64 0
  %23 = insertelement <2 x i64> %22, i64 %21, i64 1
  ret <2 x i64> %23
}

; Function Attrs: norecurse nounwind
define internal fastcc void @9(ptr addrspace(1) nocapture noundef %0, i64 noundef %1, i32 noundef %2, i32 noundef %3) unnamed_addr #24 {
  %5 = icmp eq i32 %2, %3
  br i1 %5, label %6, label %25

6:                                                ; preds = %4
  %7 = getelementptr %9, ptr addrspace(1) %0, i64 0, i32 5
  %8 = load i64, ptr addrspace(1) %7, align 8, !tbaa !47
  %9 = add i64 %8, 1
  %10 = add i64 %9, %1
  %11 = icmp eq i64 %10, 0
  %12 = select i1 %11, i64 %9, i64 %10
  %13 = getelementptr inbounds %9, ptr addrspace(1) %0, i64 0, i32 3
  %14 = load atomic i64, ptr addrspace(1) %13 syncscope("one-as") monotonic, align 8
  %15 = load ptr addrspace(1), ptr addrspace(1) %0, align 8, !tbaa !45
  %16 = and i64 %12, %8
  %17 = getelementptr inbounds %10, ptr addrspace(1) %15, i64 %16
  store i64 %14, ptr addrspace(1) %17, align 8, !tbaa !55
  %18 = cmpxchg ptr addrspace(1) %13, i64 %14, i64 %12 syncscope("one-as") release monotonic, align 8
  %19 = extractvalue { i64, i1 } %18, 1
  br i1 %19, label %25, label %20

20:                                               ; preds = %20, %6
  %21 = phi { i64, i1 } [ %23, %20 ], [ %18, %6 ]
  %22 = extractvalue { i64, i1 } %21, 0
  tail call void @llvm.amdgcn.s.sleep(i32 1)
  store i64 %22, ptr addrspace(1) %17, align 8, !tbaa !55
  %23 = cmpxchg ptr addrspace(1) %13, i64 %22, i64 %12 syncscope("one-as") release monotonic, align 8
  %24 = extractvalue { i64, i1 } %23, 1
  br i1 %24, label %25, label %20

25:                                               ; preds = %20, %6, %4
  ret void
}

; Function Attrs: argmemonly nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p5(i64 immarg, ptr addrspace(5) nocapture) #20

; Function Attrs: convergent norecurse nounwind
define linkonce_odr protected void @__ockl_hsa_signal_add(i64 %0, i64 noundef %1, i32 noundef %2) local_unnamed_addr #12 {
  %4 = inttoptr i64 %0 to ptr addrspace(1)
  %5 = getelementptr inbounds %12, ptr addrspace(1) %4, i64 0, i32 1
  switch i32 %2, label %6 [
    i32 1, label %8
    i32 2, label %8
    i32 3, label %10
    i32 4, label %12
    i32 5, label %14
  ]

6:                                                ; preds = %3
  %7 = atomicrmw add ptr addrspace(1) %5, i64 %1 syncscope("one-as") monotonic, align 8
  br label %16

8:                                                ; preds = %3, %3
  %9 = atomicrmw add ptr addrspace(1) %5, i64 %1 syncscope("one-as") acquire, align 8
  br label %16

10:                                               ; preds = %3
  %11 = atomicrmw add ptr addrspace(1) %5, i64 %1 syncscope("one-as") release, align 8
  br label %16

12:                                               ; preds = %3
  %13 = atomicrmw add ptr addrspace(1) %5, i64 %1 syncscope("one-as") acq_rel, align 8
  br label %16

14:                                               ; preds = %3
  %15 = atomicrmw add ptr addrspace(1) %5, i64 %1 seq_cst, align 8
  br label %16

16:                                               ; preds = %14, %12, %10, %8, %6
  %17 = getelementptr inbounds %12, ptr addrspace(1) %4, i64 0, i32 2
  %18 = load i64, ptr addrspace(1) %17, align 16, !tbaa !56
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %27, label %20

20:                                               ; preds = %16
  %21 = inttoptr i64 %18 to ptr addrspace(1)
  %22 = getelementptr inbounds %12, ptr addrspace(1) %4, i64 0, i32 3
  %23 = load i32, ptr addrspace(1) %22, align 8, !tbaa !58
  %24 = zext i32 %23 to i64
  store atomic i64 %24, ptr addrspace(1) %21 syncscope("one-as") release, align 8
  %25 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %23)
  %26 = and i32 %25, 255
  tail call void @llvm.amdgcn.s.sendmsg(i32 1, i32 %26)
  br label %27

27:                                               ; preds = %20, %16
  ret void
}

; Function Attrs: nounwind
declare void @llvm.amdgcn.s.sendmsg(i32 immarg, i32) #25

; Function Attrs: convergent noinline norecurse nounwind
define linkonce_odr protected ptr addrspace(1) @__ockl_dm_alloc(i64 noundef %0) local_unnamed_addr #15 {
  %2 = icmp eq i64 %0, 0
  br i1 %2, label %1193, label %3

3:                                                ; preds = %1
  %4 = icmp ugt i64 %0, 3072
  br i1 %4, label %5, label %37

5:                                                ; preds = %3
  %6 = tail call i64 @__ockl_devmem_request(i64 noundef 0, i64 noundef %0) #58
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %35, label %8

8:                                                ; preds = %5
  %9 = tail call i32 @__ockl_activelane_u32() #58
  %10 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %16, label %12

12:                                               ; preds = %8
  %13 = tail call i64 @llvm.read_register.i64(metadata !36) #57
  %14 = tail call i64 @llvm.ctpop.i64(i64 %13), !range !35
  %15 = trunc i64 %14 to i32
  br label %19

16:                                               ; preds = %8
  %17 = tail call i32 @llvm.read_register.i32(metadata !10) #57
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17), !range !34
  br label %19

19:                                               ; preds = %16, %12
  %20 = phi i32 [ %15, %12 ], [ %18, %16 ]
  %21 = icmp eq i32 %9, 0
  br i1 %21, label %22, label %35

22:                                               ; preds = %19
  %23 = load i32, ptr addrspace(4) @__oclc_ABI_version, align 4, !tbaa !11
  %24 = icmp slt i32 %23, 500
  br i1 %24, label %30, label %25

25:                                               ; preds = %22
  %26 = tail call ptr addrspace(4) @llvm.amdgcn.implicitarg.ptr()
  %27 = getelementptr inbounds i64, ptr addrspace(4) %26, i64 12
  %28 = load i64, ptr addrspace(4) %27, align 8, !tbaa !13
  %29 = inttoptr i64 %28 to ptr addrspace(1)
  br label %30

30:                                               ; preds = %25, %22
  %31 = phi ptr addrspace(1) [ %29, %25 ], [ @0, %22 ]
  %32 = getelementptr inbounds %0, ptr addrspace(1) %31, i64 0, i32 6
  %33 = zext i32 %20 to i64
  %34 = atomicrmw add ptr addrspace(1) %32, i64 %33 syncscope("agent-one-as") monotonic, align 8
  br label %35

35:                                               ; preds = %30, %19, %5
  %36 = inttoptr i64 %6 to ptr addrspace(1)
  br label %1193

37:                                               ; preds = %3
  %38 = trunc i64 %0 to i32
  %39 = tail call i32 @llvm.umax.i32(i32 %38, i32 16)
  %40 = tail call i32 @__ockl_clz_u32(i32 noundef %39) #17
  %41 = sub i32 31, %40
  %42 = and i32 %41, 31
  %43 = shl nuw i32 1, %42
  %44 = mul i32 %40, -2
  %45 = add i32 %44, 54
  %46 = icmp ugt i32 %39, %43
  %47 = zext i1 %46 to i32
  %48 = or i32 %45, %47
  %49 = lshr i32 %43, 1
  %50 = or i32 %49, %43
  %51 = icmp ugt i32 %39, %50
  %52 = zext i1 %51 to i32
  %53 = add i32 %48, %52
  %54 = load i32, ptr addrspace(4) @__oclc_ABI_version, align 4, !tbaa !11
  %55 = icmp slt i32 %54, 500
  br i1 %55, label %61, label %56

56:                                               ; preds = %37
  %57 = tail call ptr addrspace(4) @llvm.amdgcn.implicitarg.ptr()
  %58 = getelementptr inbounds i64, ptr addrspace(4) %57, i64 12
  %59 = load i64, ptr addrspace(4) %58, align 8, !tbaa !13
  %60 = inttoptr i64 %59 to ptr addrspace(1)
  br label %61

61:                                               ; preds = %56, %37
  %62 = phi ptr addrspace(1) [ %60, %56 ], [ @0, %37 ]
  %63 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1
  %64 = icmp eq i8 %63, 0
  %65 = zext i32 %53 to i64
  %66 = getelementptr inbounds %0, ptr addrspace(1) %62, i64 0, i32 1, i64 %65
  %67 = getelementptr inbounds [16 x %1], ptr addrspace(1) %62, i64 0, i64 %65
  %68 = getelementptr inbounds [16 x %4], ptr addrspace(4) @1, i64 0, i64 %65, i32 2
  %69 = getelementptr inbounds %0, ptr addrspace(1) %62, i64 0, i32 2, i64 %65
  %70 = getelementptr inbounds %0, ptr addrspace(1) %62, i64 0, i32 4, i64 %65
  %71 = getelementptr inbounds %0, ptr addrspace(1) %62, i64 0, i32 3, i64 %65
  %72 = getelementptr inbounds [16 x %4], ptr addrspace(4) @1, i64 0, i64 %65, i32 5
  %73 = getelementptr inbounds [16 x %4], ptr addrspace(4) @1, i64 0, i64 %65
  %74 = lshr i64 191, %65
  %75 = and i64 %74, 1
  %76 = icmp eq i64 %75, 0
  %77 = getelementptr inbounds [16 x %4], ptr addrspace(4) @1, i64 0, i64 %65, i32 4
  %78 = getelementptr inbounds [16 x %4], ptr addrspace(4) @1, i64 0, i64 %65, i32 6
  %79 = insertelement <4 x i32> <i32 poison, i32 0, i32 0, i32 0>, i32 %53, i64 0
  br label %80

80:                                               ; preds = %1189, %61
  %81 = phi i32 [ 1, %61 ], [ %1190, %1189 ]
  %82 = phi ptr addrspace(1) [ null, %61 ], [ %1191, %1189 ]
  %83 = tail call i32 asm sideeffect "; O0 $0", "=v,0"(i32 %81) #58, !srcloc !40
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %1189, label %85

85:                                               ; preds = %80
  %86 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %53)
  %87 = icmp eq i32 %86, %53
  br i1 %87, label %88, label %1189

88:                                               ; preds = %1184, %85
  %89 = phi i32 [ %1185, %1184 ], [ %83, %85 ]
  %90 = phi i32 [ %1186, %1184 ], [ 1, %85 ]
  %91 = phi ptr addrspace(1) [ %1187, %1184 ], [ %82, %85 ]
  %92 = tail call i32 asm sideeffect "; O0 $0", "=v,0"(i32 %90) #58, !srcloc !40
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %1184, label %94

94:                                               ; preds = %88
  %95 = tail call i32 @__ockl_activelane_u32() #58
  %96 = tail call i32 asm sideeffect "; O0 $0", "=v,0"(i32 %95) #58, !srcloc !59
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %98, label %100

98:                                               ; preds = %94
  %99 = load atomic i32, ptr addrspace(1) %66 syncscope("agent-one-as") monotonic, align 8
  br label %100

100:                                              ; preds = %98, %94
  %101 = phi i32 [ %99, %98 ], [ 0, %94 ]
  %102 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %101)
  %103 = icmp ult i32 %102, 65792
  %104 = tail call i32 @__ockl_activelane_u32() #58
  br i1 %103, label %105, label %522

105:                                              ; preds = %100
  br i1 %64, label %110, label %106

106:                                              ; preds = %105
  %107 = tail call i64 @llvm.read_register.i64(metadata !36) #57
  %108 = tail call i64 @llvm.ctpop.i64(i64 %107), !range !35
  %109 = trunc i64 %108 to i32
  br label %113

110:                                              ; preds = %105
  %111 = tail call i32 @llvm.read_register.i32(metadata !10) #57
  %112 = tail call i32 @llvm.ctpop.i32(i32 %111), !range !34
  br label %113

113:                                              ; preds = %110, %106
  %114 = phi i32 [ %109, %106 ], [ %112, %110 ]
  br label %115

115:                                              ; preds = %519, %113
  %116 = phi i32 [ undef, %113 ], [ %201, %519 ]
  %117 = phi i32 [ %104, %113 ], [ %120, %519 ]
  %118 = phi i32 [ %102, %113 ], [ %520, %519 ]
  %119 = phi ptr addrspace(1) [ undef, %113 ], [ %521, %519 ]
  %120 = tail call i32 asm sideeffect "; O0 $0", "=v,0"(i32 %117) #58, !srcloc !59
  %121 = icmp eq i32 %118, 0
  br i1 %121, label %200, label %122

122:                                              ; preds = %115
  %123 = icmp eq i32 %120, 0
  br i1 %123, label %124, label %126

124:                                              ; preds = %122
  %125 = load atomic i32, ptr addrspace(1) %67 syncscope("agent-one-as") monotonic, align 8
  br label %126

126:                                              ; preds = %124, %122
  %127 = phi i32 [ %125, %124 ], [ %116, %122 ]
  %128 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %127)
  %129 = add i32 %128, %120
  %130 = urem i32 %129, %118
  %131 = load i32, ptr addrspace(4) %68, align 4, !tbaa !60
  br label %132

132:                                              ; preds = %198, %126
  %133 = phi i32 [ %130, %126 ], [ %195, %198 ]
  %134 = phi i32 [ %118, %126 ], [ %196, %198 ]
  %135 = phi ptr addrspace(1) [ %119, %126 ], [ %197, %198 ]
  %136 = icmp ugt i32 %133, 255
  br i1 %136, label %137, label %147

137:                                              ; preds = %132
  %138 = add i32 %133, -256
  %139 = lshr i32 %138, 8
  %140 = zext i32 %139 to i64
  %141 = getelementptr inbounds %0, ptr addrspace(1) %62, i64 0, i32 5, i64 %65, i64 %140
  %142 = load atomic i64, ptr addrspace(1) %141 syncscope("agent-one-as") monotonic, align 8
  %143 = inttoptr i64 %142 to ptr addrspace(1)
  %144 = and i32 %133, 255
  %145 = zext i32 %144 to i64
  %146 = getelementptr inbounds %3, ptr addrspace(1) %143, i64 %145
  br label %150

147:                                              ; preds = %132
  %148 = zext i32 %133 to i64
  %149 = getelementptr inbounds %0, ptr addrspace(1) %62, i64 0, i32 5, i64 %65, i64 %148
  br label %150

150:                                              ; preds = %147, %137
  %151 = phi ptr addrspace(1) [ %146, %137 ], [ %149, %147 ]
  %152 = getelementptr inbounds %3, ptr addrspace(1) %151, i64 0, i32 2
  %153 = load atomic i32, ptr addrspace(1) %152 syncscope("agent-one-as") monotonic, align 8
  br i1 %64, label %160, label %154

154:                                              ; preds = %150
  %155 = tail call i64 @llvm.amdgcn.icmp.i64.i32(i32 %153, i32 %131, i32 36)
  %156 = icmp eq i64 %155, 0
  br i1 %156, label %169, label %157

157:                                              ; preds = %154
  %158 = tail call i64 @__ockl_ctz_u64(i64 noundef %155) #17
  %159 = trunc i64 %158 to i32
  br label %165

160:                                              ; preds = %150
  %161 = tail call i32 @llvm.amdgcn.icmp.i32.i32(i32 %153, i32 %131, i32 36)
  %162 = icmp eq i32 %161, 0
  br i1 %162, label %169, label %163

163:                                              ; preds = %160
  %164 = tail call i32 @__ockl_ctz_u32(i32 noundef %161) #17
  br label %165

165:                                              ; preds = %163, %157
  %166 = phi i32 [ %164, %163 ], [ %159, %157 ]
  %167 = shl i32 %166, 2
  %168 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %167, i32 %133)
  br label %169

169:                                              ; preds = %165, %160, %154
  %170 = phi i32 [ -1, %154 ], [ -1, %160 ], [ %168, %165 ]
  %171 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %170)
  %172 = icmp eq i32 %171, -1
  br i1 %172, label %188, label %173

173:                                              ; preds = %169
  %174 = icmp ugt i32 %171, 255
  br i1 %174, label %175, label %185

175:                                              ; preds = %173
  %176 = add i32 %171, -256
  %177 = lshr i32 %176, 8
  %178 = zext i32 %177 to i64
  %179 = getelementptr inbounds %0, ptr addrspace(1) %62, i64 0, i32 5, i64 %65, i64 %178
  %180 = load atomic i64, ptr addrspace(1) %179 syncscope("agent-one-as") monotonic, align 8
  %181 = inttoptr i64 %180 to ptr addrspace(1)
  %182 = and i32 %171, 255
  %183 = zext i32 %182 to i64
  %184 = getelementptr inbounds %3, ptr addrspace(1) %181, i64 %183
  br label %194

185:                                              ; preds = %173
  %186 = zext i32 %171 to i64
  %187 = getelementptr inbounds %0, ptr addrspace(1) %62, i64 0, i32 5, i64 %65, i64 %186
  br label %194

188:                                              ; preds = %169
  %189 = add i32 %133, %114
  %190 = urem i32 %189, %118
  br i1 %123, label %191, label %192

191:                                              ; preds = %188
  store atomic i32 %190, ptr addrspace(1) %67 syncscope("agent-one-as") monotonic, align 8
  br label %192

192:                                              ; preds = %191, %188
  %193 = sub i32 %134, %114
  br label %194

194:                                              ; preds = %192, %185, %175
  %195 = phi i32 [ %190, %192 ], [ %133, %175 ], [ %133, %185 ]
  %196 = phi i32 [ %193, %192 ], [ %134, %175 ], [ %134, %185 ]
  %197 = phi ptr addrspace(1) [ %135, %192 ], [ %184, %175 ], [ %187, %185 ]
  br i1 %172, label %198, label %1071

198:                                              ; preds = %194
  %199 = icmp sgt i32 %196, 0
  br i1 %199, label %132, label %200

200:                                              ; preds = %198, %115
  %201 = phi i32 [ %116, %115 ], [ %195, %198 ]
  %202 = phi ptr addrspace(1) [ %119, %115 ], [ %197, %198 ]
  %203 = tail call i32 @__ockl_activelane_u32() #58
  br label %204

204:                                              ; preds = %492, %200
  %205 = phi i64 [ undef, %200 ], [ %493, %492 ]
  %206 = phi i32 [ undef, %200 ], [ %495, %492 ]
  %207 = phi i32 [ undef, %200 ], [ %496, %492 ]
  %208 = phi i32 [ %203, %200 ], [ %497, %492 ]
  %209 = phi ptr addrspace(1) [ undef, %200 ], [ %498, %492 ]
  %210 = tail call i32 asm sideeffect "; O0 $0", "=v,0"(i32 %208) #58, !srcloc !59
  %211 = icmp eq i32 %210, 0
  br i1 %211, label %212, label %214

212:                                              ; preds = %204
  %213 = load atomic i32, ptr addrspace(1) %66 syncscope("agent-one-as") monotonic, align 8
  br label %214

214:                                              ; preds = %212, %204
  %215 = phi i32 [ %213, %212 ], [ %207, %204 ]
  %216 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %215)
  %217 = icmp eq i32 %216, 65792
  br i1 %217, label %492, label %218

218:                                              ; preds = %214
  br i1 %211, label %219, label %224

219:                                              ; preds = %218
  %220 = cmpxchg ptr addrspace(1) %69, i32 0, i32 256 syncscope("agent-one-as") monotonic monotonic, align 4
  %221 = extractvalue { i32, i1 } %220, 1
  %222 = extractvalue { i32, i1 } %220, 0
  %223 = select i1 %221, i32 256, i32 %222
  br label %224

224:                                              ; preds = %219, %218
  %225 = phi i32 [ %223, %219 ], [ %206, %218 ]
  %226 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %225)
  %227 = icmp eq i32 %216, %226
  br i1 %227, label %228, label %329

228:                                              ; preds = %224
  %229 = tail call i32 @__ockl_activelane_u32() #58
  %230 = tail call i32 asm sideeffect "; O0 $0", "=v,0"(i32 %229) #58, !srcloc !59
  %231 = load atomic i32, ptr addrspace(1) %69 syncscope("agent-one-as") monotonic, align 8
  %232 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %231)
  %233 = icmp eq i32 %232, 65792
  br i1 %233, label %310, label %234

234:                                              ; preds = %228
  %235 = icmp eq i32 %230, 0
  br i1 %235, label %236, label %245

236:                                              ; preds = %234
  %237 = load atomic i64, ptr addrspace(1) %70 syncscope("agent-one-as") monotonic, align 8
  %238 = tail call fastcc i64 @10()
  %239 = sub i64 %238, %237
  %240 = icmp ugt i64 %239, 29999
  br i1 %240, label %241, label %245

241:                                              ; preds = %236
  %242 = cmpxchg ptr addrspace(1) %70, i64 %237, i64 %238 syncscope("agent-one-as") monotonic monotonic, align 8
  %243 = extractvalue { i64, i1 } %242, 1
  %244 = select i1 %243, i32 2, i32 1
  br label %245

245:                                              ; preds = %241, %236, %234
  %246 = phi i32 [ 1, %234 ], [ 1, %236 ], [ %244, %241 ]
  %247 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %246)
  %248 = icmp eq i32 %247, 1
  br i1 %248, label %310, label %249

249:                                              ; preds = %245
  %250 = tail call i64 @__ockl_devmem_request(i64 noundef 0, i64 noundef 6144) #58
  %251 = trunc i64 %250 to i32
  %252 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %251)
  %253 = insertelement <2 x i32> undef, i32 %252, i64 0
  %254 = lshr i64 %250, 32
  %255 = trunc i64 %254 to i32
  %256 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %255)
  %257 = insertelement <2 x i32> %253, i32 %256, i64 1
  %258 = bitcast <2 x i32> %257 to i64
  %259 = icmp eq i64 %258, 0
  br i1 %259, label %310, label %260

260:                                              ; preds = %249
  %261 = tail call i32 @__ockl_activelane_u32() #58
  br i1 %64, label %266, label %262

262:                                              ; preds = %260
  %263 = tail call i64 @llvm.read_register.i64(metadata !36) #57
  %264 = tail call i64 @llvm.ctpop.i64(i64 %263), !range !35
  %265 = trunc i64 %264 to i32
  br label %269

266:                                              ; preds = %260
  %267 = tail call i32 @llvm.read_register.i32(metadata !10) #57
  %268 = tail call i32 @llvm.ctpop.i32(i32 %267), !range !34
  br label %269

269:                                              ; preds = %266, %262
  %270 = phi i32 [ %265, %262 ], [ %268, %266 ]
  %271 = inttoptr i64 %258 to ptr addrspace(1)
  %272 = icmp ult i32 %261, 768
  br i1 %272, label %273, label %279

273:                                              ; preds = %273, %269
  %274 = phi i32 [ %277, %273 ], [ %261, %269 ]
  %275 = zext i32 %274 to i64
  %276 = getelementptr inbounds i64, ptr addrspace(1) %271, i64 %275
  store i64 0, ptr addrspace(1) %276, align 8, !tbaa !13
  %277 = add i32 %274, %270
  %278 = icmp ult i32 %277, 768
  br i1 %278, label %273, label %279

279:                                              ; preds = %273, %269
  br label %280

280:                                              ; preds = %309, %279
  %281 = phi i32 [ %307, %309 ], [ %247, %279 ]
  %282 = phi i32 [ %290, %309 ], [ %232, %279 ]
  %283 = phi i32 [ %284, %309 ], [ %230, %279 ]
  %284 = tail call i32 asm sideeffect "; O0 $0", "=v,0"(i32 %283) #58, !srcloc !59
  %285 = icmp eq i32 %284, 0
  br i1 %285, label %286, label %288

286:                                              ; preds = %280
  %287 = load atomic i32, ptr addrspace(1) %69 syncscope("agent-one-as") monotonic, align 8
  br label %288

288:                                              ; preds = %286, %280
  %289 = phi i32 [ %287, %286 ], [ %282, %280 ]
  %290 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %289)
  %291 = icmp eq i32 %290, 65792
  br i1 %291, label %292, label %295

292:                                              ; preds = %288
  br i1 %285, label %293, label %310

293:                                              ; preds = %292
  %294 = tail call i64 @__ockl_devmem_request(i64 noundef %258, i64 noundef 0) #58
  br label %310

295:                                              ; preds = %288
  br i1 %285, label %296, label %305

296:                                              ; preds = %295
  %297 = add i32 %290, -256
  %298 = lshr i32 %297, 8
  %299 = zext i32 %298 to i64
  %300 = getelementptr inbounds %0, ptr addrspace(1) %62, i64 0, i32 5, i64 %65, i64 %299
  %301 = cmpxchg ptr addrspace(1) %300, i64 0, i64 %258 syncscope("agent-one-as") monotonic monotonic, align 8
  %302 = extractvalue { i64, i1 } %301, 1
  br i1 %302, label %303, label %305

303:                                              ; preds = %296
  %304 = atomicrmw add ptr addrspace(1) %69, i32 256 syncscope("agent-one-as") release, align 4
  br label %305

305:                                              ; preds = %303, %296, %295
  %306 = phi i32 [ %281, %295 ], [ 0, %303 ], [ %281, %296 ]
  %307 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %306)
  %308 = icmp eq i32 %307, 0
  br i1 %308, label %310, label %309

309:                                              ; preds = %305
  tail call void @llvm.amdgcn.s.sleep(i32 2)
  br label %280

310:                                              ; preds = %305, %293, %292, %249, %245, %228
  %311 = phi i32 [ 2, %228 ], [ 1, %245 ], [ %247, %249 ], [ %281, %293 ], [ %281, %292 ], [ 0, %305 ]
  %312 = icmp eq i32 %311, 0
  br i1 %312, label %327, label %313

313:                                              ; preds = %310
  %314 = tail call i32 @__ockl_activelane_u32() #58
  %315 = icmp eq i32 %314, 0
  br i1 %315, label %316, label %324

316:                                              ; preds = %313
  %317 = load atomic i64, ptr addrspace(1) %70 syncscope("agent-one-as") monotonic, align 8
  %318 = tail call fastcc i64 @10()
  %319 = sub i64 %318, %317
  %320 = icmp ult i64 %319, 30000
  br i1 %320, label %321, label %324

321:                                              ; preds = %316
  %322 = trunc i64 %319 to i32
  %323 = sub nuw nsw i32 30000, %322
  tail call void @__ockl_rtcwait_u32(i32 noundef %323) #58
  br label %324

324:                                              ; preds = %321, %316, %313
  %325 = icmp eq i32 %311, 2
  %326 = select i1 %325, ptr addrspace(1) null, ptr addrspace(1) inttoptr (i64 1 to ptr addrspace(1))
  br label %327

327:                                              ; preds = %324, %310
  %328 = phi ptr addrspace(1) [ %326, %324 ], [ %209, %310 ]
  br i1 %312, label %329, label %492

329:                                              ; preds = %327, %224
  %330 = phi ptr addrspace(1) [ %328, %327 ], [ %209, %224 ]
  br i1 %211, label %331, label %340

331:                                              ; preds = %329
  %332 = load atomic i64, ptr addrspace(1) %71 syncscope("agent-one-as") monotonic, align 8
  %333 = tail call fastcc i64 @10()
  %334 = sub i64 %333, %332
  %335 = icmp ugt i64 %334, 19999
  br i1 %335, label %336, label %340

336:                                              ; preds = %331
  %337 = cmpxchg ptr addrspace(1) %71, i64 %332, i64 %333 syncscope("agent-one-as") monotonic monotonic, align 8
  %338 = extractvalue { i64, i1 } %337, 1
  %339 = select i1 %338, ptr addrspace(1) null, ptr addrspace(1) inttoptr (i64 1 to ptr addrspace(1))
  br label %340

340:                                              ; preds = %336, %331, %329
  %341 = phi ptr addrspace(1) [ inttoptr (i64 1 to ptr addrspace(1)), %329 ], [ inttoptr (i64 1 to ptr addrspace(1)), %331 ], [ %339, %336 ]
  %342 = ptrtoint ptr addrspace(1) %341 to i64
  %343 = trunc i64 %342 to i32
  %344 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %343)
  %345 = insertelement <2 x i32> undef, i32 %344, i64 0
  %346 = lshr i64 %342, 32
  %347 = trunc i64 %346 to i32
  %348 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %347)
  %349 = insertelement <2 x i32> %345, i32 %348, i64 1
  %350 = bitcast <2 x i32> %349 to i64
  %351 = inttoptr i64 %350 to ptr addrspace(1)
  %352 = icmp eq i64 %350, 0
  br i1 %352, label %353, label %492

353:                                              ; preds = %340
  br i1 %211, label %354, label %356

354:                                              ; preds = %353
  %355 = tail call i64 @__ockl_devmem_request(i64 noundef 0, i64 noundef 2097152) #58
  br label %356

356:                                              ; preds = %354, %353
  %357 = phi i64 [ %355, %354 ], [ %205, %353 ]
  %358 = trunc i64 %357 to i32
  %359 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %358)
  %360 = insertelement <2 x i32> undef, i32 %359, i64 0
  %361 = lshr i64 %357, 32
  %362 = trunc i64 %361 to i32
  %363 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %362)
  %364 = insertelement <2 x i32> %360, i32 %363, i64 1
  %365 = bitcast <2 x i32> %364 to i64
  %366 = icmp eq i64 %365, 0
  br i1 %366, label %492, label %367

367:                                              ; preds = %356
  %368 = inttoptr i64 %365 to ptr addrspace(1)
  %369 = tail call i32 @__ockl_activelane_u32() #58
  %370 = tail call i32 asm sideeffect "; O0 $0", "=v,0"(i32 %369) #58, !srcloc !59
  br i1 %64, label %375, label %371

371:                                              ; preds = %367
  %372 = tail call i64 @llvm.read_register.i64(metadata !36) #57
  %373 = tail call i64 @llvm.ctpop.i64(i64 %372), !range !35
  %374 = trunc i64 %373 to i32
  br label %378

375:                                              ; preds = %367
  %376 = tail call i32 @llvm.read_register.i32(metadata !10) #57
  %377 = tail call i32 @llvm.ctpop.i32(i32 %376), !range !34
  br label %378

378:                                              ; preds = %375, %371
  %379 = phi i32 [ %374, %371 ], [ %377, %375 ]
  %380 = load i32, ptr addrspace(4) %72, align 4, !tbaa !61
  %381 = load i32, ptr addrspace(4) %73, align 4, !tbaa !62
  %382 = add i32 %381, 31
  %383 = lshr i32 %382, 5
  %384 = getelementptr inbounds %8, ptr addrspace(1) %368, i64 0, i32 4
  br i1 %76, label %408, label %385

385:                                              ; preds = %378
  %386 = icmp ult i32 %370, %383
  br i1 %386, label %393, label %387

387:                                              ; preds = %393, %385
  %388 = mul i32 %380, %379
  %389 = load i32, ptr addrspace(4) %77, align 4, !tbaa !63
  %390 = mul i32 %380, %370
  %391 = add i32 %389, %390
  %392 = icmp ult i32 %391, %381
  br i1 %392, label %399, label %417

393:                                              ; preds = %393, %385
  %394 = phi i32 [ %397, %393 ], [ %370, %385 ]
  %395 = zext i32 %394 to i64
  %396 = getelementptr inbounds i32, ptr addrspace(1) %384, i64 %395
  store i32 0, ptr addrspace(1) %396, align 4, !tbaa !11
  %397 = add i32 %394, %379
  %398 = icmp ult i32 %397, %383
  br i1 %398, label %393, label %387

399:                                              ; preds = %399, %387
  %400 = phi i32 [ %406, %399 ], [ %391, %387 ]
  %401 = and i32 %400, 31
  %402 = shl nuw i32 1, %401
  %403 = lshr i32 %400, 5
  %404 = zext i32 %403 to i64
  %405 = getelementptr inbounds i32, ptr addrspace(1) %384, i64 %404
  store i32 %402, ptr addrspace(1) %405, align 4, !tbaa !11
  %406 = add i32 %400, %388
  %407 = icmp ult i32 %406, %381
  br i1 %407, label %399, label %417

408:                                              ; preds = %378
  %409 = load i32, ptr addrspace(4) %78, align 4, !tbaa !64
  %410 = icmp ult i32 %370, %383
  br i1 %410, label %411, label %417

411:                                              ; preds = %411, %408
  %412 = phi i32 [ %415, %411 ], [ %370, %408 ]
  %413 = zext i32 %412 to i64
  %414 = getelementptr inbounds i32, ptr addrspace(1) %384, i64 %413
  store i32 %409, ptr addrspace(1) %414, align 4, !tbaa !11
  %415 = add i32 %412, %379
  %416 = icmp ult i32 %415, %383
  br i1 %416, label %411, label %417

417:                                              ; preds = %411, %408, %399, %387
  %418 = icmp eq i32 %370, 0
  br i1 %418, label %419, label %430

419:                                              ; preds = %417
  %420 = and i32 %381, 31
  %421 = icmp eq i32 %420, 0
  br i1 %421, label %429, label %422

422:                                              ; preds = %419
  %423 = shl nsw i32 -1, %420
  %424 = add nsw i32 %383, -1
  %425 = zext i32 %424 to i64
  %426 = getelementptr inbounds i32, ptr addrspace(1) %384, i64 %425
  %427 = load i32, ptr addrspace(1) %426, align 4, !tbaa !11
  %428 = or i32 %427, %423
  store i32 %428, ptr addrspace(1) %426, align 4, !tbaa !11
  br label %429

429:                                              ; preds = %422, %419
  store <4 x i32> %79, ptr addrspace(1) %368, align 16, !tbaa !49
  br label %430

430:                                              ; preds = %429, %417
  %431 = getelementptr inbounds %8, ptr addrspace(1) %368, i64 0, i32 1
  br label %432

432:                                              ; preds = %489, %430
  %433 = phi i32 [ %226, %430 ], [ %449, %489 ]
  %434 = phi i32 [ %216, %430 ], [ %442, %489 ]
  %435 = phi i32 [ %210, %430 ], [ %436, %489 ]
  %436 = tail call i32 asm sideeffect "; O0 $0", "=v,0"(i32 %435) #58, !srcloc !59
  %437 = icmp eq i32 %436, 0
  br i1 %437, label %438, label %440

438:                                              ; preds = %432
  %439 = load atomic i32, ptr addrspace(1) %66 syncscope("agent-one-as") monotonic, align 8
  br label %440

440:                                              ; preds = %438, %432
  %441 = phi i32 [ %439, %438 ], [ %434, %432 ]
  %442 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %441)
  %443 = icmp eq i32 %442, 65792
  br i1 %443, label %492, label %444

444:                                              ; preds = %440
  br i1 %437, label %445, label %447

445:                                              ; preds = %444
  %446 = load atomic i32, ptr addrspace(1) %69 syncscope("agent-one-as") monotonic, align 8
  br label %447

447:                                              ; preds = %445, %444
  %448 = phi i32 [ %446, %445 ], [ %433, %444 ]
  %449 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %448)
  %450 = icmp eq i32 %442, %449
  br i1 %450, label %451, label %454

451:                                              ; preds = %447
  br i1 %437, label %452, label %492

452:                                              ; preds = %451
  %453 = tail call i64 @__ockl_devmem_request(i64 noundef %365, i64 noundef 0) #58
  br label %492

454:                                              ; preds = %447
  br i1 %437, label %455, label %477

455:                                              ; preds = %454
  %456 = icmp ugt i32 %442, 255
  br i1 %456, label %457, label %467

457:                                              ; preds = %455
  %458 = add i32 %442, -256
  %459 = lshr i32 %458, 8
  %460 = zext i32 %459 to i64
  %461 = getelementptr inbounds %0, ptr addrspace(1) %62, i64 0, i32 5, i64 %65, i64 %460
  %462 = load atomic i64, ptr addrspace(1) %461 syncscope("agent-one-as") monotonic, align 8
  %463 = inttoptr i64 %462 to ptr addrspace(1)
  %464 = and i32 %442, 255
  %465 = zext i32 %464 to i64
  %466 = getelementptr inbounds %3, ptr addrspace(1) %463, i64 %465
  br label %470

467:                                              ; preds = %455
  %468 = zext i32 %442 to i64
  %469 = getelementptr inbounds %0, ptr addrspace(1) %62, i64 0, i32 5, i64 %65, i64 %468
  br label %470

470:                                              ; preds = %467, %457
  %471 = phi ptr addrspace(1) [ %466, %457 ], [ %469, %467 ]
  store i32 %442, ptr addrspace(1) %431, align 4, !tbaa !39
  %472 = getelementptr inbounds %3, ptr addrspace(1) %471, i64 0, i32 1
  %473 = cmpxchg ptr addrspace(1) %472, i64 0, i64 %365 syncscope("agent-one-as") monotonic monotonic, align 8
  %474 = extractvalue { i64, i1 } %473, 1
  br i1 %474, label %475, label %477

475:                                              ; preds = %470
  %476 = atomicrmw add ptr addrspace(1) %66, i32 1 syncscope("agent-one-as") release, align 4
  br label %477

477:                                              ; preds = %475, %470, %454
  %478 = phi ptr addrspace(1) [ null, %454 ], [ %471, %475 ], [ null, %470 ]
  %479 = ptrtoint ptr addrspace(1) %478 to i64
  %480 = trunc i64 %479 to i32
  %481 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %480)
  %482 = insertelement <2 x i32> undef, i32 %481, i64 0
  %483 = lshr i64 %479, 32
  %484 = trunc i64 %483 to i32
  %485 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %484)
  %486 = insertelement <2 x i32> %482, i32 %485, i64 1
  %487 = bitcast <2 x i32> %486 to i64
  %488 = icmp eq i64 %487, 0
  br i1 %488, label %489, label %490

489:                                              ; preds = %477
  tail call void @llvm.amdgcn.s.sleep(i32 2)
  br label %432

490:                                              ; preds = %477
  %491 = inttoptr i64 %487 to ptr addrspace(1)
  br label %492

492:                                              ; preds = %490, %452, %451, %440, %356, %340, %327, %214
  %493 = phi i64 [ %205, %327 ], [ %205, %214 ], [ %205, %340 ], [ %365, %452 ], [ %365, %451 ], [ 0, %356 ], [ %365, %490 ], [ %365, %440 ]
  %494 = phi i1 [ false, %327 ], [ false, %214 ], [ false, %340 ], [ true, %452 ], [ true, %451 ], [ false, %356 ], [ false, %490 ], [ false, %440 ]
  %495 = phi i32 [ %216, %327 ], [ %206, %214 ], [ %226, %340 ], [ %442, %452 ], [ %442, %451 ], [ %226, %356 ], [ %449, %490 ], [ %433, %440 ]
  %496 = phi i32 [ %216, %327 ], [ 65792, %214 ], [ %216, %340 ], [ %442, %452 ], [ %442, %451 ], [ %216, %356 ], [ %442, %490 ], [ 65792, %440 ]
  %497 = phi i32 [ %210, %327 ], [ %210, %214 ], [ %210, %340 ], [ 0, %452 ], [ %436, %451 ], [ %210, %356 ], [ %436, %490 ], [ %436, %440 ]
  %498 = phi ptr addrspace(1) [ %328, %327 ], [ null, %214 ], [ %351, %340 ], [ %330, %452 ], [ %330, %451 ], [ null, %356 ], [ %491, %490 ], [ null, %440 ]
  br i1 %494, label %204, label %499

499:                                              ; preds = %492
  %500 = icmp eq ptr addrspace(1) %498, inttoptr (i64 1 to ptr addrspace(1))
  br i1 %500, label %501, label %519

501:                                              ; preds = %499
  %502 = tail call i32 @__ockl_activelane_u32() #58
  %503 = icmp eq i32 %502, 0
  br i1 %503, label %504, label %512

504:                                              ; preds = %501
  %505 = load atomic i64, ptr addrspace(1) %71 syncscope("agent-one-as") monotonic, align 8
  %506 = tail call fastcc i64 @10()
  %507 = sub i64 %506, %505
  %508 = icmp ult i64 %507, 20000
  br i1 %508, label %509, label %512

509:                                              ; preds = %504
  %510 = trunc i64 %507 to i32
  %511 = sub nuw nsw i32 20000, %510
  tail call void @__ockl_rtcwait_u32(i32 noundef %511) #58
  br label %512

512:                                              ; preds = %509, %504, %501
  %513 = icmp eq i32 %120, 0
  br i1 %513, label %514, label %516

514:                                              ; preds = %512
  %515 = load atomic i32, ptr addrspace(1) %66 syncscope("agent-one-as") monotonic, align 8
  br label %516

516:                                              ; preds = %514, %512
  %517 = phi i32 [ %515, %514 ], [ %118, %512 ]
  %518 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %517)
  br label %519

519:                                              ; preds = %516, %499
  %520 = phi i32 [ %518, %516 ], [ %118, %499 ]
  %521 = phi ptr addrspace(1) [ %202, %516 ], [ %498, %499 ]
  br i1 %500, label %115, label %1071

522:                                              ; preds = %100
  br i1 %64, label %527, label %523

523:                                              ; preds = %522
  %524 = tail call i64 @llvm.read_register.i64(metadata !36) #57
  %525 = tail call i64 @llvm.ctpop.i64(i64 %524), !range !35
  %526 = trunc i64 %525 to i32
  br label %530

527:                                              ; preds = %522
  %528 = tail call i32 @llvm.read_register.i32(metadata !10) #57
  %529 = tail call i32 @llvm.ctpop.i32(i32 %528), !range !34
  br label %530

530:                                              ; preds = %527, %523
  %531 = phi i32 [ %526, %523 ], [ %529, %527 ]
  br label %532

532:                                              ; preds = %1067, %530
  %533 = phi i32 [ undef, %530 ], [ %614, %1067 ]
  %534 = phi i32 [ %53, %530 ], [ %1069, %1067 ]
  %535 = phi i32 [ %104, %530 ], [ %537, %1067 ]
  %536 = phi ptr addrspace(1) [ undef, %530 ], [ %1070, %1067 ]
  %537 = tail call i32 asm sideeffect "; O0 $0", "=v,0"(i32 %535) #58, !srcloc !59
  %538 = zext i32 %534 to i64
  %539 = icmp eq i32 %537, 0
  br i1 %539, label %540, label %543

540:                                              ; preds = %532
  %541 = getelementptr inbounds [16 x %1], ptr addrspace(1) %62, i64 0, i64 %538
  %542 = load atomic i32, ptr addrspace(1) %541 syncscope("agent-one-as") monotonic, align 8
  br label %543

543:                                              ; preds = %540, %532
  %544 = phi i32 [ %542, %540 ], [ %533, %532 ]
  %545 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %544)
  %546 = add i32 %545, %537
  %547 = urem i32 %546, 65792
  %548 = getelementptr inbounds [16 x %4], ptr addrspace(4) @1, i64 0, i64 %538, i32 1
  %549 = load i32, ptr addrspace(4) %548, align 4, !tbaa !65
  %550 = getelementptr inbounds [16 x %1], ptr addrspace(1) %62, i64 0, i64 %538
  br label %551

551:                                              ; preds = %617, %543
  %552 = phi i32 [ %547, %543 ], [ %614, %617 ]
  %553 = phi i32 [ 65792, %543 ], [ %615, %617 ]
  %554 = phi ptr addrspace(1) [ %536, %543 ], [ %616, %617 ]
  %555 = icmp ugt i32 %552, 255
  br i1 %555, label %556, label %566

556:                                              ; preds = %551
  %557 = add i32 %552, -256
  %558 = lshr i32 %557, 8
  %559 = zext i32 %558 to i64
  %560 = getelementptr inbounds %0, ptr addrspace(1) %62, i64 0, i32 5, i64 %538, i64 %559
  %561 = load atomic i64, ptr addrspace(1) %560 syncscope("agent-one-as") monotonic, align 8
  %562 = inttoptr i64 %561 to ptr addrspace(1)
  %563 = and i32 %552, 255
  %564 = zext i32 %563 to i64
  %565 = getelementptr inbounds %3, ptr addrspace(1) %562, i64 %564
  br label %569

566:                                              ; preds = %551
  %567 = zext i32 %552 to i64
  %568 = getelementptr inbounds %0, ptr addrspace(1) %62, i64 0, i32 5, i64 %538, i64 %567
  br label %569

569:                                              ; preds = %566, %556
  %570 = phi ptr addrspace(1) [ %565, %556 ], [ %568, %566 ]
  %571 = getelementptr inbounds %3, ptr addrspace(1) %570, i64 0, i32 2
  %572 = load atomic i32, ptr addrspace(1) %571 syncscope("agent-one-as") monotonic, align 8
  br i1 %64, label %579, label %573

573:                                              ; preds = %569
  %574 = tail call i64 @llvm.amdgcn.icmp.i64.i32(i32 %572, i32 %549, i32 36)
  %575 = icmp eq i64 %574, 0
  br i1 %575, label %588, label %576

576:                                              ; preds = %573
  %577 = tail call i64 @__ockl_ctz_u64(i64 noundef %574) #17
  %578 = trunc i64 %577 to i32
  br label %584

579:                                              ; preds = %569
  %580 = tail call i32 @llvm.amdgcn.icmp.i32.i32(i32 %572, i32 %549, i32 36)
  %581 = icmp eq i32 %580, 0
  br i1 %581, label %588, label %582

582:                                              ; preds = %579
  %583 = tail call i32 @__ockl_ctz_u32(i32 noundef %580) #17
  br label %584

584:                                              ; preds = %582, %576
  %585 = phi i32 [ %583, %582 ], [ %578, %576 ]
  %586 = shl i32 %585, 2
  %587 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %586, i32 %552)
  br label %588

588:                                              ; preds = %584, %579, %573
  %589 = phi i32 [ -1, %573 ], [ -1, %579 ], [ %587, %584 ]
  %590 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %589)
  %591 = icmp eq i32 %590, -1
  br i1 %591, label %607, label %592

592:                                              ; preds = %588
  %593 = icmp ugt i32 %590, 255
  br i1 %593, label %594, label %604

594:                                              ; preds = %592
  %595 = add i32 %590, -256
  %596 = lshr i32 %595, 8
  %597 = zext i32 %596 to i64
  %598 = getelementptr inbounds %0, ptr addrspace(1) %62, i64 0, i32 5, i64 %538, i64 %597
  %599 = load atomic i64, ptr addrspace(1) %598 syncscope("agent-one-as") monotonic, align 8
  %600 = inttoptr i64 %599 to ptr addrspace(1)
  %601 = and i32 %590, 255
  %602 = zext i32 %601 to i64
  %603 = getelementptr inbounds %3, ptr addrspace(1) %600, i64 %602
  br label %613

604:                                              ; preds = %592
  %605 = zext i32 %590 to i64
  %606 = getelementptr inbounds %0, ptr addrspace(1) %62, i64 0, i32 5, i64 %538, i64 %605
  br label %613

607:                                              ; preds = %588
  %608 = add i32 %552, %531
  %609 = urem i32 %608, 65792
  br i1 %539, label %610, label %611

610:                                              ; preds = %607
  store atomic i32 %609, ptr addrspace(1) %550 syncscope("agent-one-as") monotonic, align 8
  br label %611

611:                                              ; preds = %610, %607
  %612 = sub i32 %553, %531
  br label %613

613:                                              ; preds = %611, %604, %594
  %614 = phi i32 [ %609, %611 ], [ %552, %594 ], [ %552, %604 ]
  %615 = phi i32 [ %612, %611 ], [ %553, %594 ], [ %553, %604 ]
  %616 = phi ptr addrspace(1) [ %554, %611 ], [ %603, %594 ], [ %606, %604 ]
  br i1 %591, label %617, label %1067

617:                                              ; preds = %613
  %618 = icmp sgt i32 %615, 0
  br i1 %618, label %551, label %619

619:                                              ; preds = %617
  %620 = add i32 %534, 2
  %621 = and i32 %620, -2
  %622 = icmp ne i32 %534, %53
  %623 = icmp ugt i32 %621, 15
  %624 = select i1 %622, i1 true, i1 %623
  br i1 %624, label %1067, label %625

625:                                              ; preds = %619
  br i1 %539, label %626, label %630

626:                                              ; preds = %625
  %627 = zext i32 %621 to i64
  %628 = getelementptr inbounds %0, ptr addrspace(1) %62, i64 0, i32 1, i64 %627
  %629 = load atomic i32, ptr addrspace(1) %628 syncscope("agent-one-as") monotonic, align 8
  br label %630

630:                                              ; preds = %626, %625
  %631 = phi i32 [ %629, %626 ], [ 0, %625 ]
  %632 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %631)
  %633 = icmp ult i32 %632, 65792
  br i1 %633, label %634, label %1067

634:                                              ; preds = %630
  %635 = tail call i32 @__ockl_activelane_u32() #58
  br i1 %64, label %640, label %636

636:                                              ; preds = %634
  %637 = tail call i64 @llvm.read_register.i64(metadata !36) #57
  %638 = tail call i64 @llvm.ctpop.i64(i64 %637), !range !35
  %639 = trunc i64 %638 to i32
  br label %643

640:                                              ; preds = %634
  %641 = tail call i32 @llvm.read_register.i32(metadata !10) #57
  %642 = tail call i32 @llvm.ctpop.i32(i32 %641), !range !34
  br label %643

643:                                              ; preds = %640, %636
  %644 = phi i32 [ %639, %636 ], [ %642, %640 ]
  %645 = zext i32 %621 to i64
  %646 = getelementptr inbounds [16 x %1], ptr addrspace(1) %62, i64 0, i64 %645
  %647 = getelementptr inbounds [16 x %4], ptr addrspace(4) @1, i64 0, i64 %645, i32 2
  %648 = getelementptr inbounds %0, ptr addrspace(1) %62, i64 0, i32 1, i64 %645
  %649 = getelementptr inbounds %0, ptr addrspace(1) %62, i64 0, i32 2, i64 %645
  %650 = getelementptr inbounds %0, ptr addrspace(1) %62, i64 0, i32 4, i64 %645
  %651 = getelementptr inbounds %0, ptr addrspace(1) %62, i64 0, i32 3, i64 %645
  %652 = getelementptr inbounds [16 x %4], ptr addrspace(4) @1, i64 0, i64 %645, i32 5
  %653 = getelementptr inbounds [16 x %4], ptr addrspace(4) @1, i64 0, i64 %645
  %654 = lshr i64 191, %645
  %655 = and i64 %654, 1
  %656 = icmp eq i64 %655, 0
  %657 = getelementptr inbounds [16 x %4], ptr addrspace(4) @1, i64 0, i64 %645, i32 4
  %658 = getelementptr inbounds [16 x %4], ptr addrspace(4) @1, i64 0, i64 %645, i32 6
  %659 = insertelement <4 x i32> <i32 poison, i32 0, i32 0, i32 0>, i32 %621, i64 0
  br label %660

660:                                              ; preds = %1064, %643
  %661 = phi i32 [ undef, %643 ], [ %746, %1064 ]
  %662 = phi i32 [ %635, %643 ], [ %665, %1064 ]
  %663 = phi i32 [ %632, %643 ], [ %1065, %1064 ]
  %664 = phi ptr addrspace(1) [ undef, %643 ], [ %1066, %1064 ]
  %665 = tail call i32 asm sideeffect "; O0 $0", "=v,0"(i32 %662) #58, !srcloc !59
  %666 = icmp eq i32 %663, 0
  br i1 %666, label %745, label %667

667:                                              ; preds = %660
  %668 = icmp eq i32 %665, 0
  br i1 %668, label %669, label %671

669:                                              ; preds = %667
  %670 = load atomic i32, ptr addrspace(1) %646 syncscope("agent-one-as") monotonic, align 8
  br label %671

671:                                              ; preds = %669, %667
  %672 = phi i32 [ %670, %669 ], [ %661, %667 ]
  %673 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %672)
  %674 = add i32 %673, %665
  %675 = urem i32 %674, %663
  %676 = load i32, ptr addrspace(4) %647, align 4, !tbaa !60
  br label %677

677:                                              ; preds = %743, %671
  %678 = phi i32 [ %675, %671 ], [ %740, %743 ]
  %679 = phi i32 [ %663, %671 ], [ %741, %743 ]
  %680 = phi ptr addrspace(1) [ %664, %671 ], [ %742, %743 ]
  %681 = icmp ugt i32 %678, 255
  br i1 %681, label %682, label %692

682:                                              ; preds = %677
  %683 = add i32 %678, -256
  %684 = lshr i32 %683, 8
  %685 = zext i32 %684 to i64
  %686 = getelementptr inbounds %0, ptr addrspace(1) %62, i64 0, i32 5, i64 %645, i64 %685
  %687 = load atomic i64, ptr addrspace(1) %686 syncscope("agent-one-as") monotonic, align 8
  %688 = inttoptr i64 %687 to ptr addrspace(1)
  %689 = and i32 %678, 255
  %690 = zext i32 %689 to i64
  %691 = getelementptr inbounds %3, ptr addrspace(1) %688, i64 %690
  br label %695

692:                                              ; preds = %677
  %693 = zext i32 %678 to i64
  %694 = getelementptr inbounds %0, ptr addrspace(1) %62, i64 0, i32 5, i64 %645, i64 %693
  br label %695

695:                                              ; preds = %692, %682
  %696 = phi ptr addrspace(1) [ %691, %682 ], [ %694, %692 ]
  %697 = getelementptr inbounds %3, ptr addrspace(1) %696, i64 0, i32 2
  %698 = load atomic i32, ptr addrspace(1) %697 syncscope("agent-one-as") monotonic, align 8
  br i1 %64, label %705, label %699

699:                                              ; preds = %695
  %700 = tail call i64 @llvm.amdgcn.icmp.i64.i32(i32 %698, i32 %676, i32 36)
  %701 = icmp eq i64 %700, 0
  br i1 %701, label %714, label %702

702:                                              ; preds = %699
  %703 = tail call i64 @__ockl_ctz_u64(i64 noundef %700) #17
  %704 = trunc i64 %703 to i32
  br label %710

705:                                              ; preds = %695
  %706 = tail call i32 @llvm.amdgcn.icmp.i32.i32(i32 %698, i32 %676, i32 36)
  %707 = icmp eq i32 %706, 0
  br i1 %707, label %714, label %708

708:                                              ; preds = %705
  %709 = tail call i32 @__ockl_ctz_u32(i32 noundef %706) #17
  br label %710

710:                                              ; preds = %708, %702
  %711 = phi i32 [ %709, %708 ], [ %704, %702 ]
  %712 = shl i32 %711, 2
  %713 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %712, i32 %678)
  br label %714

714:                                              ; preds = %710, %705, %699
  %715 = phi i32 [ -1, %699 ], [ -1, %705 ], [ %713, %710 ]
  %716 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %715)
  %717 = icmp eq i32 %716, -1
  br i1 %717, label %733, label %718

718:                                              ; preds = %714
  %719 = icmp ugt i32 %716, 255
  br i1 %719, label %720, label %730

720:                                              ; preds = %718
  %721 = add i32 %716, -256
  %722 = lshr i32 %721, 8
  %723 = zext i32 %722 to i64
  %724 = getelementptr inbounds %0, ptr addrspace(1) %62, i64 0, i32 5, i64 %645, i64 %723
  %725 = load atomic i64, ptr addrspace(1) %724 syncscope("agent-one-as") monotonic, align 8
  %726 = inttoptr i64 %725 to ptr addrspace(1)
  %727 = and i32 %716, 255
  %728 = zext i32 %727 to i64
  %729 = getelementptr inbounds %3, ptr addrspace(1) %726, i64 %728
  br label %739

730:                                              ; preds = %718
  %731 = zext i32 %716 to i64
  %732 = getelementptr inbounds %0, ptr addrspace(1) %62, i64 0, i32 5, i64 %645, i64 %731
  br label %739

733:                                              ; preds = %714
  %734 = add i32 %678, %644
  %735 = urem i32 %734, %663
  br i1 %668, label %736, label %737

736:                                              ; preds = %733
  store atomic i32 %735, ptr addrspace(1) %646 syncscope("agent-one-as") monotonic, align 8
  br label %737

737:                                              ; preds = %736, %733
  %738 = sub i32 %679, %644
  br label %739

739:                                              ; preds = %737, %730, %720
  %740 = phi i32 [ %735, %737 ], [ %678, %720 ], [ %678, %730 ]
  %741 = phi i32 [ %738, %737 ], [ %679, %720 ], [ %679, %730 ]
  %742 = phi ptr addrspace(1) [ %680, %737 ], [ %729, %720 ], [ %732, %730 ]
  br i1 %717, label %743, label %1067

743:                                              ; preds = %739
  %744 = icmp sgt i32 %741, 0
  br i1 %744, label %677, label %745

745:                                              ; preds = %743, %660
  %746 = phi i32 [ %661, %660 ], [ %740, %743 ]
  %747 = phi ptr addrspace(1) [ %664, %660 ], [ %742, %743 ]
  %748 = tail call i32 @__ockl_activelane_u32() #58
  br label %749

749:                                              ; preds = %1037, %745
  %750 = phi i64 [ undef, %745 ], [ %1038, %1037 ]
  %751 = phi i32 [ undef, %745 ], [ %1040, %1037 ]
  %752 = phi i32 [ undef, %745 ], [ %1041, %1037 ]
  %753 = phi i32 [ %748, %745 ], [ %1042, %1037 ]
  %754 = phi ptr addrspace(1) [ undef, %745 ], [ %1043, %1037 ]
  %755 = tail call i32 asm sideeffect "; O0 $0", "=v,0"(i32 %753) #58, !srcloc !59
  %756 = icmp eq i32 %755, 0
  br i1 %756, label %757, label %759

757:                                              ; preds = %749
  %758 = load atomic i32, ptr addrspace(1) %648 syncscope("agent-one-as") monotonic, align 8
  br label %759

759:                                              ; preds = %757, %749
  %760 = phi i32 [ %758, %757 ], [ %752, %749 ]
  %761 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %760)
  %762 = icmp eq i32 %761, 65792
  br i1 %762, label %1037, label %763

763:                                              ; preds = %759
  br i1 %756, label %764, label %769

764:                                              ; preds = %763
  %765 = cmpxchg ptr addrspace(1) %649, i32 0, i32 256 syncscope("agent-one-as") monotonic monotonic, align 4
  %766 = extractvalue { i32, i1 } %765, 1
  %767 = extractvalue { i32, i1 } %765, 0
  %768 = select i1 %766, i32 256, i32 %767
  br label %769

769:                                              ; preds = %764, %763
  %770 = phi i32 [ %768, %764 ], [ %751, %763 ]
  %771 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %770)
  %772 = icmp eq i32 %761, %771
  br i1 %772, label %773, label %874

773:                                              ; preds = %769
  %774 = tail call i32 @__ockl_activelane_u32() #58
  %775 = tail call i32 asm sideeffect "; O0 $0", "=v,0"(i32 %774) #58, !srcloc !59
  %776 = load atomic i32, ptr addrspace(1) %649 syncscope("agent-one-as") monotonic, align 8
  %777 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %776)
  %778 = icmp eq i32 %777, 65792
  br i1 %778, label %855, label %779

779:                                              ; preds = %773
  %780 = icmp eq i32 %775, 0
  br i1 %780, label %781, label %790

781:                                              ; preds = %779
  %782 = load atomic i64, ptr addrspace(1) %650 syncscope("agent-one-as") monotonic, align 8
  %783 = tail call fastcc i64 @10()
  %784 = sub i64 %783, %782
  %785 = icmp ugt i64 %784, 29999
  br i1 %785, label %786, label %790

786:                                              ; preds = %781
  %787 = cmpxchg ptr addrspace(1) %650, i64 %782, i64 %783 syncscope("agent-one-as") monotonic monotonic, align 8
  %788 = extractvalue { i64, i1 } %787, 1
  %789 = select i1 %788, i32 2, i32 1
  br label %790

790:                                              ; preds = %786, %781, %779
  %791 = phi i32 [ 1, %779 ], [ 1, %781 ], [ %789, %786 ]
  %792 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %791)
  %793 = icmp eq i32 %792, 1
  br i1 %793, label %855, label %794

794:                                              ; preds = %790
  %795 = tail call i64 @__ockl_devmem_request(i64 noundef 0, i64 noundef 6144) #58
  %796 = trunc i64 %795 to i32
  %797 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %796)
  %798 = insertelement <2 x i32> undef, i32 %797, i64 0
  %799 = lshr i64 %795, 32
  %800 = trunc i64 %799 to i32
  %801 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %800)
  %802 = insertelement <2 x i32> %798, i32 %801, i64 1
  %803 = bitcast <2 x i32> %802 to i64
  %804 = icmp eq i64 %803, 0
  br i1 %804, label %855, label %805

805:                                              ; preds = %794
  %806 = tail call i32 @__ockl_activelane_u32() #58
  br i1 %64, label %811, label %807

807:                                              ; preds = %805
  %808 = tail call i64 @llvm.read_register.i64(metadata !36) #57
  %809 = tail call i64 @llvm.ctpop.i64(i64 %808), !range !35
  %810 = trunc i64 %809 to i32
  br label %814

811:                                              ; preds = %805
  %812 = tail call i32 @llvm.read_register.i32(metadata !10) #57
  %813 = tail call i32 @llvm.ctpop.i32(i32 %812), !range !34
  br label %814

814:                                              ; preds = %811, %807
  %815 = phi i32 [ %810, %807 ], [ %813, %811 ]
  %816 = inttoptr i64 %803 to ptr addrspace(1)
  %817 = icmp ult i32 %806, 768
  br i1 %817, label %818, label %824

818:                                              ; preds = %818, %814
  %819 = phi i32 [ %822, %818 ], [ %806, %814 ]
  %820 = zext i32 %819 to i64
  %821 = getelementptr inbounds i64, ptr addrspace(1) %816, i64 %820
  store i64 0, ptr addrspace(1) %821, align 8, !tbaa !13
  %822 = add i32 %819, %815
  %823 = icmp ult i32 %822, 768
  br i1 %823, label %818, label %824

824:                                              ; preds = %818, %814
  br label %825

825:                                              ; preds = %854, %824
  %826 = phi i32 [ %852, %854 ], [ %792, %824 ]
  %827 = phi i32 [ %835, %854 ], [ %777, %824 ]
  %828 = phi i32 [ %829, %854 ], [ %775, %824 ]
  %829 = tail call i32 asm sideeffect "; O0 $0", "=v,0"(i32 %828) #58, !srcloc !59
  %830 = icmp eq i32 %829, 0
  br i1 %830, label %831, label %833

831:                                              ; preds = %825
  %832 = load atomic i32, ptr addrspace(1) %649 syncscope("agent-one-as") monotonic, align 8
  br label %833

833:                                              ; preds = %831, %825
  %834 = phi i32 [ %832, %831 ], [ %827, %825 ]
  %835 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %834)
  %836 = icmp eq i32 %835, 65792
  br i1 %836, label %837, label %840

837:                                              ; preds = %833
  br i1 %830, label %838, label %855

838:                                              ; preds = %837
  %839 = tail call i64 @__ockl_devmem_request(i64 noundef %803, i64 noundef 0) #58
  br label %855

840:                                              ; preds = %833
  br i1 %830, label %841, label %850

841:                                              ; preds = %840
  %842 = add i32 %835, -256
  %843 = lshr i32 %842, 8
  %844 = zext i32 %843 to i64
  %845 = getelementptr inbounds %0, ptr addrspace(1) %62, i64 0, i32 5, i64 %645, i64 %844
  %846 = cmpxchg ptr addrspace(1) %845, i64 0, i64 %803 syncscope("agent-one-as") monotonic monotonic, align 8
  %847 = extractvalue { i64, i1 } %846, 1
  br i1 %847, label %848, label %850

848:                                              ; preds = %841
  %849 = atomicrmw add ptr addrspace(1) %649, i32 256 syncscope("agent-one-as") release, align 4
  br label %850

850:                                              ; preds = %848, %841, %840
  %851 = phi i32 [ %826, %840 ], [ 0, %848 ], [ %826, %841 ]
  %852 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %851)
  %853 = icmp eq i32 %852, 0
  br i1 %853, label %855, label %854

854:                                              ; preds = %850
  tail call void @llvm.amdgcn.s.sleep(i32 2)
  br label %825

855:                                              ; preds = %850, %838, %837, %794, %790, %773
  %856 = phi i32 [ 2, %773 ], [ 1, %790 ], [ %792, %794 ], [ %826, %838 ], [ %826, %837 ], [ 0, %850 ]
  %857 = icmp eq i32 %856, 0
  br i1 %857, label %872, label %858

858:                                              ; preds = %855
  %859 = tail call i32 @__ockl_activelane_u32() #58
  %860 = icmp eq i32 %859, 0
  br i1 %860, label %861, label %869

861:                                              ; preds = %858
  %862 = load atomic i64, ptr addrspace(1) %650 syncscope("agent-one-as") monotonic, align 8
  %863 = tail call fastcc i64 @10()
  %864 = sub i64 %863, %862
  %865 = icmp ult i64 %864, 30000
  br i1 %865, label %866, label %869

866:                                              ; preds = %861
  %867 = trunc i64 %864 to i32
  %868 = sub nuw nsw i32 30000, %867
  tail call void @__ockl_rtcwait_u32(i32 noundef %868) #58
  br label %869

869:                                              ; preds = %866, %861, %858
  %870 = icmp eq i32 %856, 2
  %871 = select i1 %870, ptr addrspace(1) null, ptr addrspace(1) inttoptr (i64 1 to ptr addrspace(1))
  br label %872

872:                                              ; preds = %869, %855
  %873 = phi ptr addrspace(1) [ %871, %869 ], [ %754, %855 ]
  br i1 %857, label %874, label %1037

874:                                              ; preds = %872, %769
  %875 = phi ptr addrspace(1) [ %873, %872 ], [ %754, %769 ]
  br i1 %756, label %876, label %885

876:                                              ; preds = %874
  %877 = load atomic i64, ptr addrspace(1) %651 syncscope("agent-one-as") monotonic, align 8
  %878 = tail call fastcc i64 @10()
  %879 = sub i64 %878, %877
  %880 = icmp ugt i64 %879, 19999
  br i1 %880, label %881, label %885

881:                                              ; preds = %876
  %882 = cmpxchg ptr addrspace(1) %651, i64 %877, i64 %878 syncscope("agent-one-as") monotonic monotonic, align 8
  %883 = extractvalue { i64, i1 } %882, 1
  %884 = select i1 %883, ptr addrspace(1) null, ptr addrspace(1) inttoptr (i64 1 to ptr addrspace(1))
  br label %885

885:                                              ; preds = %881, %876, %874
  %886 = phi ptr addrspace(1) [ inttoptr (i64 1 to ptr addrspace(1)), %874 ], [ inttoptr (i64 1 to ptr addrspace(1)), %876 ], [ %884, %881 ]
  %887 = ptrtoint ptr addrspace(1) %886 to i64
  %888 = trunc i64 %887 to i32
  %889 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %888)
  %890 = insertelement <2 x i32> undef, i32 %889, i64 0
  %891 = lshr i64 %887, 32
  %892 = trunc i64 %891 to i32
  %893 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %892)
  %894 = insertelement <2 x i32> %890, i32 %893, i64 1
  %895 = bitcast <2 x i32> %894 to i64
  %896 = inttoptr i64 %895 to ptr addrspace(1)
  %897 = icmp eq i64 %895, 0
  br i1 %897, label %898, label %1037

898:                                              ; preds = %885
  br i1 %756, label %899, label %901

899:                                              ; preds = %898
  %900 = tail call i64 @__ockl_devmem_request(i64 noundef 0, i64 noundef 2097152) #58
  br label %901

901:                                              ; preds = %899, %898
  %902 = phi i64 [ %900, %899 ], [ %750, %898 ]
  %903 = trunc i64 %902 to i32
  %904 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %903)
  %905 = insertelement <2 x i32> undef, i32 %904, i64 0
  %906 = lshr i64 %902, 32
  %907 = trunc i64 %906 to i32
  %908 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %907)
  %909 = insertelement <2 x i32> %905, i32 %908, i64 1
  %910 = bitcast <2 x i32> %909 to i64
  %911 = icmp eq i64 %910, 0
  br i1 %911, label %1037, label %912

912:                                              ; preds = %901
  %913 = inttoptr i64 %910 to ptr addrspace(1)
  %914 = tail call i32 @__ockl_activelane_u32() #58
  %915 = tail call i32 asm sideeffect "; O0 $0", "=v,0"(i32 %914) #58, !srcloc !59
  br i1 %64, label %920, label %916

916:                                              ; preds = %912
  %917 = tail call i64 @llvm.read_register.i64(metadata !36) #57
  %918 = tail call i64 @llvm.ctpop.i64(i64 %917), !range !35
  %919 = trunc i64 %918 to i32
  br label %923

920:                                              ; preds = %912
  %921 = tail call i32 @llvm.read_register.i32(metadata !10) #57
  %922 = tail call i32 @llvm.ctpop.i32(i32 %921), !range !34
  br label %923

923:                                              ; preds = %920, %916
  %924 = phi i32 [ %919, %916 ], [ %922, %920 ]
  %925 = load i32, ptr addrspace(4) %652, align 4, !tbaa !61
  %926 = load i32, ptr addrspace(4) %653, align 4, !tbaa !62
  %927 = add i32 %926, 31
  %928 = lshr i32 %927, 5
  %929 = getelementptr inbounds %8, ptr addrspace(1) %913, i64 0, i32 4
  br i1 %656, label %953, label %930

930:                                              ; preds = %923
  %931 = icmp ult i32 %915, %928
  br i1 %931, label %938, label %932

932:                                              ; preds = %938, %930
  %933 = mul i32 %925, %924
  %934 = load i32, ptr addrspace(4) %657, align 4, !tbaa !63
  %935 = mul i32 %925, %915
  %936 = add i32 %934, %935
  %937 = icmp ult i32 %936, %926
  br i1 %937, label %944, label %962

938:                                              ; preds = %938, %930
  %939 = phi i32 [ %942, %938 ], [ %915, %930 ]
  %940 = zext i32 %939 to i64
  %941 = getelementptr inbounds i32, ptr addrspace(1) %929, i64 %940
  store i32 0, ptr addrspace(1) %941, align 4, !tbaa !11
  %942 = add i32 %939, %924
  %943 = icmp ult i32 %942, %928
  br i1 %943, label %938, label %932

944:                                              ; preds = %944, %932
  %945 = phi i32 [ %951, %944 ], [ %936, %932 ]
  %946 = and i32 %945, 31
  %947 = shl nuw i32 1, %946
  %948 = lshr i32 %945, 5
  %949 = zext i32 %948 to i64
  %950 = getelementptr inbounds i32, ptr addrspace(1) %929, i64 %949
  store i32 %947, ptr addrspace(1) %950, align 4, !tbaa !11
  %951 = add i32 %945, %933
  %952 = icmp ult i32 %951, %926
  br i1 %952, label %944, label %962

953:                                              ; preds = %923
  %954 = load i32, ptr addrspace(4) %658, align 4, !tbaa !64
  %955 = icmp ult i32 %915, %928
  br i1 %955, label %956, label %962

956:                                              ; preds = %956, %953
  %957 = phi i32 [ %960, %956 ], [ %915, %953 ]
  %958 = zext i32 %957 to i64
  %959 = getelementptr inbounds i32, ptr addrspace(1) %929, i64 %958
  store i32 %954, ptr addrspace(1) %959, align 4, !tbaa !11
  %960 = add i32 %957, %924
  %961 = icmp ult i32 %960, %928
  br i1 %961, label %956, label %962

962:                                              ; preds = %956, %953, %944, %932
  %963 = icmp eq i32 %915, 0
  br i1 %963, label %964, label %975

964:                                              ; preds = %962
  %965 = and i32 %926, 31
  %966 = icmp eq i32 %965, 0
  br i1 %966, label %974, label %967

967:                                              ; preds = %964
  %968 = add nsw i32 %928, -1
  %969 = zext i32 %968 to i64
  %970 = getelementptr inbounds i32, ptr addrspace(1) %929, i64 %969
  %971 = shl nsw i32 -1, %965
  %972 = load i32, ptr addrspace(1) %970, align 4, !tbaa !11
  %973 = or i32 %972, %971
  store i32 %973, ptr addrspace(1) %970, align 4, !tbaa !11
  br label %974

974:                                              ; preds = %967, %964
  store <4 x i32> %659, ptr addrspace(1) %913, align 16, !tbaa !49
  br label %975

975:                                              ; preds = %974, %962
  %976 = getelementptr inbounds %8, ptr addrspace(1) %913, i64 0, i32 1
  br label %977

977:                                              ; preds = %1034, %975
  %978 = phi i32 [ %771, %975 ], [ %994, %1034 ]
  %979 = phi i32 [ %761, %975 ], [ %987, %1034 ]
  %980 = phi i32 [ %755, %975 ], [ %981, %1034 ]
  %981 = tail call i32 asm sideeffect "; O0 $0", "=v,0"(i32 %980) #58, !srcloc !59
  %982 = icmp eq i32 %981, 0
  br i1 %982, label %983, label %985

983:                                              ; preds = %977
  %984 = load atomic i32, ptr addrspace(1) %648 syncscope("agent-one-as") monotonic, align 8
  br label %985

985:                                              ; preds = %983, %977
  %986 = phi i32 [ %984, %983 ], [ %979, %977 ]
  %987 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %986)
  %988 = icmp eq i32 %987, 65792
  br i1 %988, label %1037, label %989

989:                                              ; preds = %985
  br i1 %982, label %990, label %992

990:                                              ; preds = %989
  %991 = load atomic i32, ptr addrspace(1) %649 syncscope("agent-one-as") monotonic, align 8
  br label %992

992:                                              ; preds = %990, %989
  %993 = phi i32 [ %991, %990 ], [ %978, %989 ]
  %994 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %993)
  %995 = icmp eq i32 %987, %994
  br i1 %995, label %996, label %999

996:                                              ; preds = %992
  br i1 %982, label %997, label %1037

997:                                              ; preds = %996
  %998 = tail call i64 @__ockl_devmem_request(i64 noundef %910, i64 noundef 0) #58
  br label %1037

999:                                              ; preds = %992
  br i1 %982, label %1000, label %1022

1000:                                             ; preds = %999
  %1001 = icmp ugt i32 %987, 255
  br i1 %1001, label %1002, label %1012

1002:                                             ; preds = %1000
  %1003 = add i32 %987, -256
  %1004 = lshr i32 %1003, 8
  %1005 = zext i32 %1004 to i64
  %1006 = getelementptr inbounds %0, ptr addrspace(1) %62, i64 0, i32 5, i64 %645, i64 %1005
  %1007 = load atomic i64, ptr addrspace(1) %1006 syncscope("agent-one-as") monotonic, align 8
  %1008 = inttoptr i64 %1007 to ptr addrspace(1)
  %1009 = and i32 %987, 255
  %1010 = zext i32 %1009 to i64
  %1011 = getelementptr inbounds %3, ptr addrspace(1) %1008, i64 %1010
  br label %1015

1012:                                             ; preds = %1000
  %1013 = zext i32 %987 to i64
  %1014 = getelementptr inbounds %0, ptr addrspace(1) %62, i64 0, i32 5, i64 %645, i64 %1013
  br label %1015

1015:                                             ; preds = %1012, %1002
  %1016 = phi ptr addrspace(1) [ %1011, %1002 ], [ %1014, %1012 ]
  store i32 %987, ptr addrspace(1) %976, align 4, !tbaa !39
  %1017 = getelementptr inbounds %3, ptr addrspace(1) %1016, i64 0, i32 1
  %1018 = cmpxchg ptr addrspace(1) %1017, i64 0, i64 %910 syncscope("agent-one-as") monotonic monotonic, align 8
  %1019 = extractvalue { i64, i1 } %1018, 1
  br i1 %1019, label %1020, label %1022

1020:                                             ; preds = %1015
  %1021 = atomicrmw add ptr addrspace(1) %648, i32 1 syncscope("agent-one-as") release, align 4
  br label %1022

1022:                                             ; preds = %1020, %1015, %999
  %1023 = phi ptr addrspace(1) [ null, %999 ], [ %1016, %1020 ], [ null, %1015 ]
  %1024 = ptrtoint ptr addrspace(1) %1023 to i64
  %1025 = trunc i64 %1024 to i32
  %1026 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %1025)
  %1027 = insertelement <2 x i32> undef, i32 %1026, i64 0
  %1028 = lshr i64 %1024, 32
  %1029 = trunc i64 %1028 to i32
  %1030 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %1029)
  %1031 = insertelement <2 x i32> %1027, i32 %1030, i64 1
  %1032 = bitcast <2 x i32> %1031 to i64
  %1033 = icmp eq i64 %1032, 0
  br i1 %1033, label %1034, label %1035

1034:                                             ; preds = %1022
  tail call void @llvm.amdgcn.s.sleep(i32 2)
  br label %977

1035:                                             ; preds = %1022
  %1036 = inttoptr i64 %1032 to ptr addrspace(1)
  br label %1037

1037:                                             ; preds = %1035, %997, %996, %985, %901, %885, %872, %759
  %1038 = phi i64 [ %750, %872 ], [ %750, %759 ], [ %750, %885 ], [ %910, %997 ], [ %910, %996 ], [ 0, %901 ], [ %910, %1035 ], [ %910, %985 ]
  %1039 = phi i1 [ false, %872 ], [ false, %759 ], [ false, %885 ], [ true, %997 ], [ true, %996 ], [ false, %901 ], [ false, %1035 ], [ false, %985 ]
  %1040 = phi i32 [ %761, %872 ], [ %751, %759 ], [ %771, %885 ], [ %987, %997 ], [ %987, %996 ], [ %771, %901 ], [ %994, %1035 ], [ %978, %985 ]
  %1041 = phi i32 [ %761, %872 ], [ 65792, %759 ], [ %761, %885 ], [ %987, %997 ], [ %987, %996 ], [ %761, %901 ], [ %987, %1035 ], [ 65792, %985 ]
  %1042 = phi i32 [ %755, %872 ], [ %755, %759 ], [ %755, %885 ], [ 0, %997 ], [ %981, %996 ], [ %755, %901 ], [ %981, %1035 ], [ %981, %985 ]
  %1043 = phi ptr addrspace(1) [ %873, %872 ], [ null, %759 ], [ %896, %885 ], [ %875, %997 ], [ %875, %996 ], [ null, %901 ], [ %1036, %1035 ], [ null, %985 ]
  br i1 %1039, label %749, label %1044

1044:                                             ; preds = %1037
  %1045 = icmp eq ptr addrspace(1) %1043, inttoptr (i64 1 to ptr addrspace(1))
  br i1 %1045, label %1046, label %1064

1046:                                             ; preds = %1044
  %1047 = tail call i32 @__ockl_activelane_u32() #58
  %1048 = icmp eq i32 %1047, 0
  br i1 %1048, label %1049, label %1057

1049:                                             ; preds = %1046
  %1050 = load atomic i64, ptr addrspace(1) %651 syncscope("agent-one-as") monotonic, align 8
  %1051 = tail call fastcc i64 @10()
  %1052 = sub i64 %1051, %1050
  %1053 = icmp ult i64 %1052, 20000
  br i1 %1053, label %1054, label %1057

1054:                                             ; preds = %1049
  %1055 = trunc i64 %1052 to i32
  %1056 = sub nuw nsw i32 20000, %1055
  tail call void @__ockl_rtcwait_u32(i32 noundef %1056) #58
  br label %1057

1057:                                             ; preds = %1054, %1049, %1046
  %1058 = icmp eq i32 %665, 0
  br i1 %1058, label %1059, label %1061

1059:                                             ; preds = %1057
  %1060 = load atomic i32, ptr addrspace(1) %648 syncscope("agent-one-as") monotonic, align 8
  br label %1061

1061:                                             ; preds = %1059, %1057
  %1062 = phi i32 [ %1060, %1059 ], [ %663, %1057 ]
  %1063 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %1062)
  br label %1064

1064:                                             ; preds = %1061, %1044
  %1065 = phi i32 [ %1063, %1061 ], [ %663, %1044 ]
  %1066 = phi ptr addrspace(1) [ %747, %1061 ], [ %1043, %1044 ]
  br i1 %1045, label %660, label %1067

1067:                                             ; preds = %1064, %739, %630, %619, %613
  %1068 = phi i1 [ false, %619 ], [ true, %630 ], [ false, %739 ], [ false, %1064 ], [ false, %613 ]
  %1069 = phi i32 [ %534, %619 ], [ %621, %630 ], [ %53, %739 ], [ %53, %1064 ], [ %534, %613 ]
  %1070 = phi ptr addrspace(1) [ null, %619 ], [ %616, %630 ], [ %742, %739 ], [ %1066, %1064 ], [ %616, %613 ]
  br i1 %1068, label %532, label %1071

1071:                                             ; preds = %1067, %519, %194
  %1072 = phi ptr addrspace(1) [ %197, %194 ], [ %521, %519 ], [ %1070, %1067 ]
  %1073 = ptrtoint ptr addrspace(1) %1072 to i64
  %1074 = trunc i64 %1073 to i32
  %1075 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %1074)
  %1076 = insertelement <2 x i32> undef, i32 %1075, i64 0
  %1077 = lshr i64 %1073, 32
  %1078 = trunc i64 %1077 to i32
  %1079 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %1078)
  %1080 = insertelement <2 x i32> %1076, i32 %1079, i64 1
  %1081 = bitcast <2 x i32> %1080 to i64
  %1082 = inttoptr i64 %1081 to ptr addrspace(1)
  %1083 = icmp eq i64 %1081, 0
  br i1 %1083, label %1184, label %1084

1084:                                             ; preds = %1071
  %1085 = tail call i32 @__ockl_activelane_u32() #58
  %1086 = tail call i32 asm sideeffect "; O0 $0", "=v,0"(i32 %1085) #58, !srcloc !59
  br i1 %64, label %1091, label %1087

1087:                                             ; preds = %1084
  %1088 = tail call i64 @llvm.read_register.i64(metadata !36) #57
  %1089 = tail call i64 @llvm.ctpop.i64(i64 %1088), !range !35
  %1090 = trunc i64 %1089 to i32
  br label %1094

1091:                                             ; preds = %1084
  %1092 = tail call i32 @llvm.read_register.i32(metadata !10) #57
  %1093 = tail call i32 @llvm.ctpop.i32(i32 %1092), !range !34
  br label %1094

1094:                                             ; preds = %1091, %1087
  %1095 = phi i32 [ %1090, %1087 ], [ %1093, %1091 ]
  %1096 = getelementptr inbounds %3, ptr addrspace(1) %1082, i64 0, i32 1
  %1097 = load atomic i64, ptr addrspace(1) %1096 seq_cst, align 8, !tbaa !66
  %1098 = inttoptr i64 %1097 to ptr addrspace(1)
  %1099 = load i32, ptr addrspace(1) %1098, align 4, !tbaa !37
  %1100 = icmp eq i32 %1086, 0
  tail call void @llvm.assume(i1 %1100)
  %1101 = getelementptr inbounds %8, ptr addrspace(1) %1098, i64 0, i32 2
  %1102 = atomicrmw add ptr addrspace(1) %1101, i32 %1095 syncscope("agent-one-as") monotonic, align 4
  %1103 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %1102)
  %1104 = zext i32 %1099 to i64
  %1105 = getelementptr inbounds [16 x %4], ptr addrspace(4) @1, i64 0, i64 %1104
  %1106 = load i32, ptr addrspace(4) %1105, align 4, !tbaa !62
  %1107 = add i32 %1106, 31
  %1108 = lshr i32 %1107, 5
  %1109 = icmp ult i32 %1107, 32
  br i1 %1109, label %1168, label %1110

1110:                                             ; preds = %1094
  %1111 = getelementptr inbounds [16 x %4], ptr addrspace(4) @1, i64 0, i64 %1104, i32 7
  %1112 = load i32, ptr addrspace(4) %1111, align 4, !tbaa !68
  %1113 = mul i32 %1112, %1103
  %1114 = urem i32 %1113, %1106
  %1115 = lshr i32 %1114, 5
  %1116 = getelementptr inbounds %8, ptr addrspace(1) %1098, i64 0, i32 4
  %1117 = getelementptr inbounds [16 x %4], ptr addrspace(4) @1, i64 0, i64 %1104, i32 3
  %1118 = lshr i32 %1099, 1
  %1119 = add nuw i32 %1118, 4
  %1120 = and i32 %1119, 31
  %1121 = shl nuw i32 1, %1120
  %1122 = and i32 %1099, 1
  %1123 = icmp eq i32 %1122, 0
  %1124 = lshr i32 %1121, 1
  %1125 = select i1 %1123, i32 0, i32 %1124
  %1126 = add nuw i32 %1125, %1121
  %1127 = tail call i32 @llvm.umax.i32(i32 %1108, i32 1)
  br label %1128

1128:                                             ; preds = %1160, %1110
  %1129 = phi i32 [ %1115, %1110 ], [ %1163, %1160 ]
  %1130 = phi ptr addrspace(1) [ null, %1110 ], [ %1162, %1160 ]
  %1131 = phi i32 [ 0, %1110 ], [ %1165, %1160 ]
  %1132 = zext i32 %1129 to i64
  %1133 = getelementptr inbounds i32, ptr addrspace(1) %1116, i64 %1132
  %1134 = load atomic i32, ptr addrspace(1) %1133 syncscope("agent-one-as") monotonic, align 4
  %1135 = icmp eq i32 %1134, -1
  br i1 %1135, label %1156, label %1136

1136:                                             ; preds = %1128
  %1137 = xor i32 %1134, -1
  %1138 = tail call i32 @__ockl_ctz_u32(i32 noundef %1137) #17
  %1139 = and i32 %1138, 31
  %1140 = shl nuw i32 1, %1139
  %1141 = atomicrmw or ptr addrspace(1) %1133, i32 %1140 syncscope("agent-one-as") monotonic, align 4
  %1142 = and i32 %1140, %1141
  %1143 = icmp eq i32 %1142, 0
  br i1 %1143, label %1144, label %1153

1144:                                             ; preds = %1136
  %1145 = shl i32 %1129, 5
  %1146 = add i32 %1138, %1145
  %1147 = mul i32 %1146, %1126
  %1148 = zext i32 %1147 to i64
  %1149 = load i32, ptr addrspace(4) %1117, align 4, !tbaa !41
  %1150 = zext i32 %1149 to i64
  %1151 = getelementptr inbounds i8, ptr addrspace(1) %1098, i64 %1150
  %1152 = getelementptr inbounds i8, ptr addrspace(1) %1151, i64 %1148
  br label %1153

1153:                                             ; preds = %1144, %1136
  %1154 = phi i32 [ 2, %1144 ], [ 0, %1136 ]
  %1155 = phi ptr addrspace(1) [ %1152, %1144 ], [ %1130, %1136 ]
  br i1 %1143, label %1160, label %1156

1156:                                             ; preds = %1153, %1128
  %1157 = phi ptr addrspace(1) [ %1155, %1153 ], [ %1130, %1128 ]
  %1158 = add i32 %1129, 1
  %1159 = urem i32 %1158, %1108
  br label %1160

1160:                                             ; preds = %1156, %1153
  %1161 = phi i32 [ 0, %1156 ], [ %1154, %1153 ]
  %1162 = phi ptr addrspace(1) [ %1157, %1156 ], [ %1155, %1153 ]
  %1163 = phi i32 [ %1159, %1156 ], [ %1129, %1153 ]
  %1164 = icmp ne i32 %1161, 0
  %1165 = add nuw nsw i32 %1131, 1
  %1166 = icmp eq i32 %1165, %1127
  %1167 = select i1 %1164, i1 true, i1 %1166
  br i1 %1167, label %1168, label %1128

1168:                                             ; preds = %1160, %1094
  %1169 = phi ptr addrspace(1) [ null, %1094 ], [ %1162, %1160 ]
  %1170 = ptrtoint ptr addrspace(1) %1169 to i64
  br i1 %64, label %1175, label %1171

1171:                                             ; preds = %1168
  %1172 = tail call i64 @llvm.amdgcn.icmp.i64.i64(i64 noundef %1170, i64 noundef 0, i32 noundef 33) #17
  %1173 = tail call i64 @llvm.ctpop.i64(i64 %1172), !range !35
  %1174 = trunc i64 %1173 to i32
  br label %1178

1175:                                             ; preds = %1168
  %1176 = tail call i32 @llvm.amdgcn.icmp.i32.i64(i64 noundef %1170, i64 noundef 0, i32 noundef 33) #17
  %1177 = tail call i32 @llvm.ctpop.i32(i32 %1176), !range !34
  br label %1178

1178:                                             ; preds = %1175, %1171
  %1179 = phi i32 [ %1174, %1171 ], [ %1177, %1175 ]
  %1180 = getelementptr inbounds %3, ptr addrspace(1) %1082, i64 0, i32 2
  %1181 = atomicrmw add ptr addrspace(1) %1180, i32 %1179 syncscope("agent-one-as") monotonic, align 4
  %1182 = icmp eq ptr addrspace(1) %1169, null
  br i1 %1182, label %1184, label %1183

1183:                                             ; preds = %1178
  br label %1184

1184:                                             ; preds = %1183, %1178, %1071, %88
  %1185 = phi i32 [ %89, %88 ], [ 0, %1183 ], [ %89, %1178 ], [ 0, %1071 ]
  %1186 = phi i32 [ 0, %88 ], [ 0, %1183 ], [ %92, %1178 ], [ 0, %1071 ]
  %1187 = phi ptr addrspace(1) [ %91, %88 ], [ %1169, %1183 ], [ null, %1178 ], [ %91, %1071 ]
  %1188 = tail call zeroext i1 @__ockl_wfany_i32(i32 noundef %1186) #58
  br i1 %1188, label %88, label %1189

1189:                                             ; preds = %1184, %85, %80
  %1190 = phi i32 [ 0, %80 ], [ %83, %85 ], [ %1185, %1184 ]
  %1191 = phi ptr addrspace(1) [ %82, %80 ], [ %82, %85 ], [ %1187, %1184 ]
  %1192 = tail call zeroext i1 @__ockl_wfany_i32(i32 noundef %1190) #58
  br i1 %1192, label %80, label %1193

1193:                                             ; preds = %1189, %35, %1
  %1194 = phi ptr addrspace(1) [ %36, %35 ], [ null, %1 ], [ %1191, %1189 ]
  ret ptr addrspace(1) %1194
}

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.umax.i32(i32, i32) #4

; Function Attrs: convergent nounwind readnone willreturn
declare i32 @llvm.amdgcn.ds.bpermute(i32, i32) #17

; Function Attrs: mustprogress norecurse nounwind willreturn
define internal fastcc i64 @10() unnamed_addr #26 {
  %1 = tail call i64 @llvm.amdgcn.s.memrealtime()
  ret i64 %1
}

; Function Attrs: convergent norecurse nounwind
define linkonce_odr protected void @__ockl_rtcwait_u32(i32 noundef %0) local_unnamed_addr #27 {
  %2 = tail call i64 @llvm.amdgcn.s.memrealtime()
  %3 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %0)
  %4 = sext i32 %3 to i64
  %5 = add i64 %2, %4
  %6 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %7 = icmp sgt i32 %6, 8999
  br i1 %7, label %8, label %31

8:                                                ; preds = %1
  %9 = add i64 %2, 1625
  %10 = icmp ugt i64 %5, %9
  br i1 %10, label %15, label %11

11:                                               ; preds = %15, %8
  %12 = phi i64 [ %2, %8 ], [ %16, %15 ]
  %13 = add i64 %12, 806
  %14 = icmp ugt i64 %5, %13
  br i1 %14, label %23, label %19

15:                                               ; preds = %15, %8
  tail call void @llvm.amdgcn.s.sleep(i32 127)
  %16 = tail call i64 @llvm.amdgcn.s.memrealtime()
  %17 = add i64 %16, 1625
  %18 = icmp ugt i64 %5, %17
  br i1 %18, label %15, label %11

19:                                               ; preds = %23, %11
  %20 = phi i64 [ %12, %11 ], [ %24, %23 ]
  %21 = add i64 %20, 396
  %22 = icmp ugt i64 %5, %21
  br i1 %22, label %27, label %31

23:                                               ; preds = %23, %11
  tail call void @llvm.amdgcn.s.sleep(i32 63)
  %24 = tail call i64 @llvm.amdgcn.s.memrealtime()
  %25 = add i64 %24, 806
  %26 = icmp ugt i64 %5, %25
  br i1 %26, label %23, label %19

27:                                               ; preds = %27, %19
  tail call void @llvm.amdgcn.s.sleep(i32 31)
  %28 = tail call i64 @llvm.amdgcn.s.memrealtime()
  %29 = add i64 %28, 396
  %30 = icmp ugt i64 %5, %29
  br i1 %30, label %27, label %31

31:                                               ; preds = %27, %19, %1
  %32 = phi i64 [ %2, %1 ], [ %20, %19 ], [ %28, %27 ]
  %33 = add i64 %32, 192
  %34 = icmp ugt i64 %5, %33
  br i1 %34, label %39, label %35

35:                                               ; preds = %39, %31
  %36 = phi i64 [ %32, %31 ], [ %40, %39 ]
  %37 = add i64 %36, 89
  %38 = icmp ugt i64 %5, %37
  br i1 %38, label %47, label %43

39:                                               ; preds = %39, %31
  tail call void @llvm.amdgcn.s.sleep(i32 15)
  %40 = tail call i64 @llvm.amdgcn.s.memrealtime()
  %41 = add i64 %40, 192
  %42 = icmp ugt i64 %5, %41
  br i1 %42, label %39, label %35

43:                                               ; preds = %47, %35
  %44 = phi i64 [ %36, %35 ], [ %48, %47 ]
  %45 = add i64 %44, 38
  %46 = icmp ugt i64 %5, %45
  br i1 %46, label %54, label %51

47:                                               ; preds = %47, %35
  tail call void @llvm.amdgcn.s.sleep(i32 7)
  %48 = tail call i64 @llvm.amdgcn.s.memrealtime()
  %49 = add i64 %48, 89
  %50 = icmp ugt i64 %5, %49
  br i1 %50, label %47, label %43

51:                                               ; preds = %54, %43
  %52 = phi i64 [ %44, %43 ], [ %55, %54 ]
  %53 = icmp ugt i64 %5, %52
  br i1 %53, label %58, label %61

54:                                               ; preds = %54, %43
  tail call void @llvm.amdgcn.s.sleep(i32 3)
  %55 = tail call i64 @llvm.amdgcn.s.memrealtime()
  %56 = add i64 %55, 38
  %57 = icmp ugt i64 %5, %56
  br i1 %57, label %54, label %51

58:                                               ; preds = %58, %51
  tail call void @llvm.amdgcn.s.sleep(i32 1)
  %59 = tail call i64 @llvm.amdgcn.s.memrealtime()
  %60 = icmp ugt i64 %5, %59
  br i1 %60, label %58, label %61

61:                                               ; preds = %58, %51
  ret void
}

; Function Attrs: inaccessiblememonly nocallback nofree nosync nounwind willreturn
declare void @llvm.assume(i1 noundef) #28

; Function Attrs: convergent nounwind readnone willreturn
declare i64 @llvm.amdgcn.icmp.i64.i64(i64, i64, i32 immarg) #17

; Function Attrs: convergent nounwind readnone willreturn
declare i32 @llvm.amdgcn.icmp.i32.i64(i64, i64, i32 immarg) #17

; Function Attrs: nounwind willreturn
declare i64 @llvm.amdgcn.s.memrealtime() #13

; Function Attrs: mustprogress nofree norecurse nounwind willreturn
define linkonce_odr protected i64 @__ockl_dm_nna() local_unnamed_addr #29 {
  %1 = load i32, ptr addrspace(4) @__oclc_ABI_version, align 4, !tbaa !11
  %2 = icmp slt i32 %1, 500
  br i1 %2, label %8, label %3

3:                                                ; preds = %0
  %4 = tail call ptr addrspace(4) @llvm.amdgcn.implicitarg.ptr()
  %5 = getelementptr inbounds i64, ptr addrspace(4) %4, i64 12
  %6 = load i64, ptr addrspace(4) %5, align 8, !tbaa !13
  %7 = inttoptr i64 %6 to ptr addrspace(1)
  br label %8

8:                                                ; preds = %3, %0
  %9 = phi ptr addrspace(1) [ %7, %3 ], [ @0, %0 ]
  %10 = getelementptr inbounds %0, ptr addrspace(1) %9, i64 0, i32 6
  %11 = load atomic i64, ptr addrspace(1) %10 syncscope("agent-one-as") monotonic, align 8
  ret i64 %11
}

; Function Attrs: convergent mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected float @__ockl_fdot2(<2 x half> noundef %0, <2 x half> noundef %1, float noundef %2, i1 noundef zeroext %3) local_unnamed_addr #30 {
  %5 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %6 = freeze i32 %5
  %7 = icmp slt i32 %6, 9006
  br i1 %7, label %9, label %8

8:                                                ; preds = %4
  switch i32 %6, label %20 [
    i32 10100, label %9
    i32 9009, label %9
  ]

9:                                                ; preds = %8, %8, %4
  %10 = extractelement <2 x half> %0, i64 1
  %11 = fpext half %10 to float
  %12 = extractelement <2 x half> %1, i64 1
  %13 = fpext half %12 to float
  %14 = extractelement <2 x half> %0, i64 0
  %15 = fpext half %14 to float
  %16 = extractelement <2 x half> %1, i64 0
  %17 = fpext half %16 to float
  %18 = tail call float @llvm.fmuladd.f32(float %15, float %17, float %2)
  %19 = tail call float @llvm.fmuladd.f32(float %11, float %13, float %18)
  br label %22

20:                                               ; preds = %8
  %21 = tail call fastcc float @11(<2 x half> noundef %0, <2 x half> noundef %1, float noundef %2) #2
  br label %22

22:                                               ; preds = %20, %9
  %23 = phi float [ %19, %9 ], [ %21, %20 ]
  ret float %23
}

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.fmuladd.f32(float, float, float) #4

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define internal fastcc float @11(<2 x half> noundef %0, <2 x half> noundef %1, float noundef %2) unnamed_addr #31 {
  %4 = tail call float @llvm.amdgcn.fdot2(<2 x half> %0, <2 x half> %1, float %2, i1 true)
  ret float %4
}

; Function Attrs: nounwind readnone speculatable willreturn
declare float @llvm.amdgcn.fdot2(<2 x half>, <2 x half>, float, i1 immarg) #9

; Function Attrs: convergent mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_sdot2(<2 x i16> noundef %0, <2 x i16> noundef %1, i32 noundef %2, i1 noundef zeroext %3) local_unnamed_addr #30 {
  %5 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %6 = freeze i32 %5
  %7 = icmp slt i32 %6, 9006
  br i1 %7, label %9, label %8

8:                                                ; preds = %4
  switch i32 %6, label %27 [
    i32 10100, label %9
    i32 9009, label %9
  ]

9:                                                ; preds = %8, %8, %4
  %10 = extractelement <2 x i16> %0, i64 0
  %11 = sext i16 %10 to i64
  %12 = extractelement <2 x i16> %1, i64 0
  %13 = sext i16 %12 to i64
  %14 = mul nsw i64 %13, %11
  %15 = extractelement <2 x i16> %0, i64 1
  %16 = sext i16 %15 to i64
  %17 = extractelement <2 x i16> %1, i64 1
  %18 = sext i16 %17 to i64
  %19 = mul nsw i64 %18, %16
  %20 = sext i32 %2 to i64
  %21 = add nsw i64 %14, %20
  %22 = add nsw i64 %21, %19
  %23 = tail call i64 @llvm.smin.i64(i64 %22, i64 2147483647)
  %24 = tail call i64 @llvm.smax.i64(i64 %23, i64 -2147483648)
  %25 = select i1 %3, i64 %24, i64 %22
  %26 = trunc i64 %25 to i32
  br label %29

27:                                               ; preds = %8
  %28 = tail call fastcc i32 @12(<2 x i16> noundef %0, <2 x i16> noundef %1, i32 noundef %2, i1 noundef zeroext %3) #2
  br label %29

29:                                               ; preds = %27, %9
  %30 = phi i32 [ %26, %9 ], [ %28, %27 ]
  ret i32 %30
}

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare i64 @llvm.smin.i64(i64, i64) #4

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare i64 @llvm.smax.i64(i64, i64) #4

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define internal fastcc i32 @12(<2 x i16> noundef %0, <2 x i16> noundef %1, i32 noundef %2, i1 noundef zeroext %3) unnamed_addr #32 {
  %5 = tail call i32 @llvm.amdgcn.sdot2(<2 x i16> %0, <2 x i16> %1, i32 %2, i1 true)
  %6 = tail call i32 @llvm.amdgcn.sdot2(<2 x i16> %0, <2 x i16> %1, i32 %2, i1 false)
  %7 = select i1 %3, i32 %5, i32 %6
  ret i32 %7
}

; Function Attrs: nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.sdot2(<2 x i16>, <2 x i16>, i32, i1 immarg) #9

; Function Attrs: convergent mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_udot2(<2 x i16> noundef %0, <2 x i16> noundef %1, i32 noundef %2, i1 noundef zeroext %3) local_unnamed_addr #30 {
  %5 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %6 = freeze i32 %5
  %7 = icmp slt i32 %6, 9006
  br i1 %7, label %9, label %8

8:                                                ; preds = %4
  switch i32 %6, label %27 [
    i32 10100, label %9
    i32 9009, label %9
  ]

9:                                                ; preds = %8, %8, %4
  %10 = extractelement <2 x i16> %0, i64 0
  %11 = zext i16 %10 to i64
  %12 = extractelement <2 x i16> %1, i64 0
  %13 = zext i16 %12 to i64
  %14 = mul nuw nsw i64 %13, %11
  %15 = extractelement <2 x i16> %0, i64 1
  %16 = zext i16 %15 to i64
  %17 = extractelement <2 x i16> %1, i64 1
  %18 = zext i16 %17 to i64
  %19 = mul nuw nsw i64 %18, %16
  %20 = zext i32 %2 to i64
  %21 = add nuw nsw i64 %14, %20
  %22 = add nuw nsw i64 %21, %19
  %23 = icmp ugt i64 %22, 4294967295
  %24 = and i1 %23, %3
  %25 = trunc i64 %22 to i32
  %26 = select i1 %24, i32 -1, i32 %25
  br label %29

27:                                               ; preds = %8
  %28 = tail call fastcc i32 @13(<2 x i16> noundef %0, <2 x i16> noundef %1, i32 noundef %2, i1 noundef zeroext %3) #2
  br label %29

29:                                               ; preds = %27, %9
  %30 = phi i32 [ %26, %9 ], [ %28, %27 ]
  ret i32 %30
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define internal fastcc i32 @13(<2 x i16> noundef %0, <2 x i16> noundef %1, i32 noundef %2, i1 noundef zeroext %3) unnamed_addr #32 {
  %5 = tail call i32 @llvm.amdgcn.udot2(<2 x i16> %0, <2 x i16> %1, i32 %2, i1 true)
  %6 = tail call i32 @llvm.amdgcn.udot2(<2 x i16> %0, <2 x i16> %1, i32 %2, i1 false)
  %7 = select i1 %3, i32 %5, i32 %6
  ret i32 %7
}

; Function Attrs: nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.udot2(<2 x i16>, <2 x i16>, i32, i1 immarg) #9

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_sdot4(<4 x i8> noundef %0, <4 x i8> noundef %1, i32 noundef %2, i1 noundef zeroext %3) local_unnamed_addr #33 {
  %5 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %6 = freeze i32 %5
  %7 = icmp slt i32 %6, 9006
  br i1 %7, label %9, label %8

8:                                                ; preds = %4
  switch i32 %6, label %37 [
    i32 10100, label %9
    i32 9009, label %9
  ]

9:                                                ; preds = %8, %8, %4
  %10 = extractelement <4 x i8> %0, i64 0
  %11 = sext i8 %10 to i32
  %12 = extractelement <4 x i8> %1, i64 0
  %13 = sext i8 %12 to i32
  %14 = mul nsw i32 %13, %11
  %15 = extractelement <4 x i8> %0, i64 1
  %16 = sext i8 %15 to i32
  %17 = extractelement <4 x i8> %1, i64 1
  %18 = sext i8 %17 to i32
  %19 = mul nsw i32 %18, %16
  %20 = add nsw i32 %14, %19
  %21 = extractelement <4 x i8> %0, i64 2
  %22 = sext i8 %21 to i32
  %23 = extractelement <4 x i8> %1, i64 2
  %24 = sext i8 %23 to i32
  %25 = mul nsw i32 %24, %22
  %26 = add nsw i32 %20, %25
  %27 = extractelement <4 x i8> %0, i64 3
  %28 = sext i8 %27 to i32
  %29 = extractelement <4 x i8> %1, i64 3
  %30 = sext i8 %29 to i32
  %31 = mul nsw i32 %30, %28
  %32 = add nsw i32 %26, %31
  br i1 %3, label %33, label %35

33:                                               ; preds = %9
  %34 = tail call i32 @__ockl_add_sat_i32(i32 noundef %32, i32 noundef %2) #17
  br label %41

35:                                               ; preds = %9
  %36 = add nsw i32 %32, %2
  br label %41

37:                                               ; preds = %8
  %38 = bitcast <4 x i8> %0 to i32
  %39 = bitcast <4 x i8> %1 to i32
  %40 = tail call fastcc i32 @14(i32 noundef %38, i32 noundef %39, i32 noundef %2, i1 noundef zeroext %3) #2
  br label %41

41:                                               ; preds = %37, %35, %33
  %42 = phi i32 [ %40, %37 ], [ %34, %33 ], [ %36, %35 ]
  ret i32 %42
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define internal fastcc i32 @14(i32 noundef %0, i32 noundef %1, i32 noundef %2, i1 noundef zeroext %3) unnamed_addr #34 {
  %5 = tail call i32 @llvm.amdgcn.sdot4(i32 %0, i32 %1, i32 %2, i1 true)
  %6 = tail call i32 @llvm.amdgcn.sdot4(i32 %0, i32 %1, i32 %2, i1 false)
  %7 = select i1 %3, i32 %5, i32 %6
  ret i32 %7
}

; Function Attrs: nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.sdot4(i32, i32, i32, i1 immarg) #9

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_udot4(<4 x i8> noundef %0, <4 x i8> noundef %1, i32 noundef %2, i1 noundef zeroext %3) local_unnamed_addr #33 {
  %5 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %6 = freeze i32 %5
  %7 = icmp slt i32 %6, 9006
  br i1 %7, label %9, label %8

8:                                                ; preds = %4
  switch i32 %6, label %37 [
    i32 10100, label %9
    i32 9009, label %9
  ]

9:                                                ; preds = %8, %8, %4
  %10 = extractelement <4 x i8> %0, i64 0
  %11 = zext i8 %10 to i32
  %12 = extractelement <4 x i8> %1, i64 0
  %13 = zext i8 %12 to i32
  %14 = mul nuw nsw i32 %13, %11
  %15 = extractelement <4 x i8> %0, i64 1
  %16 = zext i8 %15 to i32
  %17 = extractelement <4 x i8> %1, i64 1
  %18 = zext i8 %17 to i32
  %19 = mul nuw nsw i32 %18, %16
  %20 = add nuw nsw i32 %14, %19
  %21 = extractelement <4 x i8> %0, i64 2
  %22 = zext i8 %21 to i32
  %23 = extractelement <4 x i8> %1, i64 2
  %24 = zext i8 %23 to i32
  %25 = mul nuw nsw i32 %24, %22
  %26 = add nuw nsw i32 %20, %25
  %27 = extractelement <4 x i8> %0, i64 3
  %28 = zext i8 %27 to i32
  %29 = extractelement <4 x i8> %1, i64 3
  %30 = zext i8 %29 to i32
  %31 = mul nuw nsw i32 %30, %28
  %32 = add nuw nsw i32 %26, %31
  br i1 %3, label %33, label %35

33:                                               ; preds = %9
  %34 = tail call i32 @__ockl_add_sat_u32(i32 noundef %32, i32 noundef %2) #17
  br label %41

35:                                               ; preds = %9
  %36 = add i32 %32, %2
  br label %41

37:                                               ; preds = %8
  %38 = bitcast <4 x i8> %0 to i32
  %39 = bitcast <4 x i8> %1 to i32
  %40 = tail call fastcc i32 @15(i32 noundef %38, i32 noundef %39, i32 noundef %2, i1 noundef zeroext %3) #2
  br label %41

41:                                               ; preds = %37, %35, %33
  %42 = phi i32 [ %40, %37 ], [ %34, %33 ], [ %36, %35 ]
  ret i32 %42
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define internal fastcc i32 @15(i32 noundef %0, i32 noundef %1, i32 noundef %2, i1 noundef zeroext %3) unnamed_addr #35 {
  %5 = tail call i32 @llvm.amdgcn.udot4(i32 %0, i32 %1, i32 %2, i1 true)
  %6 = tail call i32 @llvm.amdgcn.udot4(i32 %0, i32 %1, i32 %2, i1 false)
  %7 = select i1 %3, i32 %5, i32 %6
  ret i32 %7
}

; Function Attrs: nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.udot4(i32, i32, i32, i1 immarg) #9

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_sdot8(i32 noundef %0, i32 noundef %1, i32 noundef %2, i1 noundef zeroext %3) local_unnamed_addr #11 {
  %5 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %6 = freeze i32 %5
  %7 = icmp slt i32 %6, 9006
  br i1 %7, label %9, label %8

8:                                                ; preds = %4
  switch i32 %6, label %59 [
    i32 10100, label %9
    i32 9009, label %9
  ]

9:                                                ; preds = %8, %8, %4
  %10 = shl i32 %0, 28
  %11 = ashr exact i32 %10, 28
  %12 = shl i32 %1, 28
  %13 = ashr exact i32 %12, 28
  %14 = mul nsw i32 %13, %11
  %15 = shl i32 %0, 24
  %16 = ashr i32 %15, 28
  %17 = shl i32 %1, 24
  %18 = ashr i32 %17, 28
  %19 = mul nsw i32 %18, %16
  %20 = shl i32 %0, 20
  %21 = ashr i32 %20, 28
  %22 = shl i32 %1, 20
  %23 = ashr i32 %22, 28
  %24 = mul nsw i32 %23, %21
  %25 = shl i32 %0, 16
  %26 = ashr i32 %25, 28
  %27 = shl i32 %1, 16
  %28 = ashr i32 %27, 28
  %29 = mul nsw i32 %28, %26
  %30 = shl i32 %0, 12
  %31 = ashr i32 %30, 28
  %32 = shl i32 %1, 12
  %33 = ashr i32 %32, 28
  %34 = mul nsw i32 %33, %31
  %35 = shl i32 %0, 8
  %36 = ashr i32 %35, 28
  %37 = shl i32 %1, 8
  %38 = ashr i32 %37, 28
  %39 = mul nsw i32 %38, %36
  %40 = shl i32 %0, 4
  %41 = ashr i32 %40, 28
  %42 = shl i32 %1, 4
  %43 = ashr i32 %42, 28
  %44 = mul nsw i32 %43, %41
  %45 = ashr i32 %0, 28
  %46 = ashr i32 %1, 28
  %47 = mul nsw i32 %46, %45
  %48 = add nsw i32 %19, %47
  %49 = add nsw i32 %48, %14
  %50 = add nsw i32 %49, %24
  %51 = add nsw i32 %50, %29
  %52 = add nsw i32 %51, %34
  %53 = add nsw i32 %52, %39
  %54 = add nsw i32 %53, %44
  br i1 %3, label %55, label %57

55:                                               ; preds = %9
  %56 = tail call i32 @__ockl_add_sat_i32(i32 noundef %54, i32 noundef %2) #17
  br label %61

57:                                               ; preds = %9
  %58 = add nsw i32 %54, %2
  br label %61

59:                                               ; preds = %8
  %60 = tail call fastcc i32 @16(i32 noundef %0, i32 noundef %1, i32 noundef %2, i1 noundef zeroext %3) #2
  br label %61

61:                                               ; preds = %59, %57, %55
  %62 = phi i32 [ %60, %59 ], [ %56, %55 ], [ %58, %57 ]
  ret i32 %62
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define internal fastcc i32 @16(i32 noundef %0, i32 noundef %1, i32 noundef %2, i1 noundef zeroext %3) unnamed_addr #34 {
  %5 = tail call i32 @llvm.amdgcn.sdot8(i32 %0, i32 %1, i32 %2, i1 true)
  %6 = tail call i32 @llvm.amdgcn.sdot8(i32 %0, i32 %1, i32 %2, i1 false)
  %7 = select i1 %3, i32 %5, i32 %6
  ret i32 %7
}

; Function Attrs: nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.sdot8(i32, i32, i32, i1 immarg) #9

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_udot8(i32 noundef %0, i32 noundef %1, i32 noundef %2, i1 noundef zeroext %3) local_unnamed_addr #11 {
  %5 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %6 = freeze i32 %5
  %7 = icmp slt i32 %6, 9006
  br i1 %7, label %9, label %8

8:                                                ; preds = %4
  switch i32 %6, label %57 [
    i32 10100, label %9
    i32 9009, label %9
  ]

9:                                                ; preds = %8, %8, %4
  %10 = and i32 %0, 15
  %11 = and i32 %1, 15
  %12 = mul nuw nsw i32 %11, %10
  %13 = lshr i32 %0, 4
  %14 = and i32 %13, 15
  %15 = lshr i32 %1, 4
  %16 = and i32 %15, 15
  %17 = mul nuw nsw i32 %16, %14
  %18 = lshr i32 %0, 8
  %19 = and i32 %18, 15
  %20 = lshr i32 %1, 8
  %21 = and i32 %20, 15
  %22 = mul nuw nsw i32 %21, %19
  %23 = lshr i32 %0, 12
  %24 = and i32 %23, 15
  %25 = lshr i32 %1, 12
  %26 = and i32 %25, 15
  %27 = mul nuw nsw i32 %26, %24
  %28 = lshr i32 %0, 16
  %29 = and i32 %28, 15
  %30 = lshr i32 %1, 16
  %31 = and i32 %30, 15
  %32 = mul nuw nsw i32 %31, %29
  %33 = lshr i32 %0, 20
  %34 = and i32 %33, 15
  %35 = lshr i32 %1, 20
  %36 = and i32 %35, 15
  %37 = mul nuw nsw i32 %36, %34
  %38 = lshr i32 %0, 24
  %39 = and i32 %38, 15
  %40 = lshr i32 %1, 24
  %41 = and i32 %40, 15
  %42 = mul nuw nsw i32 %41, %39
  %43 = lshr i32 %0, 28
  %44 = lshr i32 %1, 28
  %45 = mul nuw nsw i32 %44, %43
  %46 = add nuw nsw i32 %45, %12
  %47 = add nuw nsw i32 %46, %17
  %48 = add nuw nsw i32 %47, %22
  %49 = add nuw nsw i32 %48, %27
  %50 = add nuw nsw i32 %49, %32
  %51 = add nuw nsw i32 %50, %37
  %52 = add nuw nsw i32 %51, %42
  br i1 %3, label %53, label %55

53:                                               ; preds = %9
  %54 = tail call i32 @__ockl_add_sat_u32(i32 noundef %52, i32 noundef %2) #17
  br label %59

55:                                               ; preds = %9
  %56 = add i32 %52, %2
  br label %59

57:                                               ; preds = %8
  %58 = tail call fastcc i32 @17(i32 noundef %0, i32 noundef %1, i32 noundef %2, i1 noundef zeroext %3) #2
  br label %59

59:                                               ; preds = %57, %55, %53
  %60 = phi i32 [ %58, %57 ], [ %54, %53 ], [ %56, %55 ]
  ret i32 %60
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define internal fastcc i32 @17(i32 noundef %0, i32 noundef %1, i32 noundef %2, i1 noundef zeroext %3) unnamed_addr #35 {
  %5 = tail call i32 @llvm.amdgcn.udot8(i32 %0, i32 %1, i32 %2, i1 true)
  %6 = tail call i32 @llvm.amdgcn.udot8(i32 %0, i32 %1, i32 %2, i1 false)
  %7 = select i1 %3, i32 %5, i32 %6
  ret i32 %7
}

; Function Attrs: nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.udot8(i32, i32, i32, i1 immarg) #9

; Function Attrs: convergent norecurse nounwind
define linkonce_odr protected void @__ockl_atomic_add_noret_f32(ptr noundef %0, float noundef %1) local_unnamed_addr #12 {
  %3 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %4 = and i32 %3, -3
  %5 = icmp eq i32 %4, 9008
  br i1 %5, label %6, label %13

6:                                                ; preds = %2
  %7 = tail call zeroext i1 @__ockl_is_local_addr(ptr noundef %0) #17
  br i1 %7, label %13, label %8

8:                                                ; preds = %6
  %9 = tail call zeroext i1 @__ockl_is_private_addr(ptr noundef %0) #17
  br i1 %9, label %13, label %10

10:                                               ; preds = %8
  %11 = addrspacecast ptr %0 to ptr addrspace(1)
  %12 = tail call float @llvm.amdgcn.global.atomic.fadd.f32.p1.f32(ptr addrspace(1) noundef %11, float noundef %1) #57
  br label %23

13:                                               ; preds = %8, %6, %2
  %14 = load atomic i32, ptr %0 syncscope("agent-one-as") monotonic, align 4
  br label %15

15:                                               ; preds = %15, %13
  %16 = phi i32 [ %14, %13 ], [ %22, %15 ]
  %17 = bitcast i32 %16 to float
  %18 = fadd float %17, %1
  %19 = bitcast float %18 to i32
  %20 = cmpxchg ptr %0, i32 %16, i32 %19 syncscope("agent-one-as") monotonic monotonic, align 4
  %21 = extractvalue { i32, i1 } %20, 1
  %22 = extractvalue { i32, i1 } %20, 0
  br i1 %21, label %23, label %15

23:                                               ; preds = %15, %10
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected zeroext i1 @__ockl_is_local_addr(ptr nocapture noundef readnone %0) local_unnamed_addr #36 {
  %2 = tail call i1 @llvm.amdgcn.is.shared(ptr %0)
  ret i1 %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected zeroext i1 @__ockl_is_private_addr(ptr nocapture noundef readnone %0) local_unnamed_addr #36 {
  %2 = tail call i1 @llvm.amdgcn.is.private(ptr %0)
  ret i1 %2
}

; Function Attrs: argmemonly nounwind willreturn
declare float @llvm.amdgcn.global.atomic.fadd.f32.p1.f32(ptr addrspace(1) nocapture, float) #37

; Function Attrs: nounwind readnone speculatable willreturn
declare i1 @llvm.amdgcn.is.private(ptr nocapture) #9

; Function Attrs: nounwind readnone speculatable willreturn
declare i1 @llvm.amdgcn.is.shared(ptr nocapture) #9

; Function Attrs: argmemonly mustprogress nofree norecurse nounwind willreturn
define linkonce_odr protected i64 @__ockl_hsa_queue_load_read_index(ptr addrspace(1) nocapture noundef readonly %0, i32 noundef %1) local_unnamed_addr #38 {
  %3 = getelementptr inbounds %14, ptr addrspace(1) %0, i64 0, i32 10
  switch i32 %1, label %4 [
    i32 1, label %6
    i32 2, label %6
    i32 5, label %8
  ]

4:                                                ; preds = %2
  %5 = load atomic i64, ptr addrspace(1) %3 syncscope("one-as") monotonic, align 64
  br label %10

6:                                                ; preds = %2, %2
  %7 = load atomic i64, ptr addrspace(1) %3 syncscope("one-as") acquire, align 64
  br label %10

8:                                                ; preds = %2
  %9 = load atomic i64, ptr addrspace(1) %3 seq_cst, align 64
  br label %10

10:                                               ; preds = %8, %6, %4
  %11 = phi i64 [ %5, %4 ], [ %9, %8 ], [ %7, %6 ]
  ret i64 %11
}

; Function Attrs: argmemonly mustprogress nofree norecurse nounwind willreturn
define linkonce_odr protected i64 @__ockl_hsa_queue_load_write_index(ptr addrspace(1) nocapture noundef readonly %0, i32 noundef %1) local_unnamed_addr #38 {
  %3 = getelementptr inbounds %14, ptr addrspace(1) %0, i64 0, i32 2
  switch i32 %1, label %4 [
    i32 1, label %6
    i32 2, label %6
    i32 5, label %8
  ]

4:                                                ; preds = %2
  %5 = load atomic i64, ptr addrspace(1) %3 syncscope("one-as") monotonic, align 8
  br label %10

6:                                                ; preds = %2, %2
  %7 = load atomic i64, ptr addrspace(1) %3 syncscope("one-as") acquire, align 8
  br label %10

8:                                                ; preds = %2
  %9 = load atomic i64, ptr addrspace(1) %3 seq_cst, align 8
  br label %10

10:                                               ; preds = %8, %6, %4
  %11 = phi i64 [ %5, %4 ], [ %9, %8 ], [ %7, %6 ]
  ret i64 %11
}

; Function Attrs: mustprogress nofree norecurse nounwind willreturn
define linkonce_odr protected i64 @__ockl_hsa_queue_add_write_index(ptr addrspace(1) nocapture noundef %0, i64 noundef %1, i32 noundef %2) local_unnamed_addr #29 {
  %4 = getelementptr inbounds %14, ptr addrspace(1) %0, i64 0, i32 2
  switch i32 %2, label %5 [
    i32 1, label %7
    i32 2, label %7
    i32 3, label %9
    i32 4, label %11
    i32 5, label %13
  ]

5:                                                ; preds = %3
  %6 = atomicrmw add ptr addrspace(1) %4, i64 %1 syncscope("one-as") monotonic, align 8
  br label %15

7:                                                ; preds = %3, %3
  %8 = atomicrmw add ptr addrspace(1) %4, i64 %1 syncscope("one-as") acquire, align 8
  br label %15

9:                                                ; preds = %3
  %10 = atomicrmw add ptr addrspace(1) %4, i64 %1 syncscope("one-as") release, align 8
  br label %15

11:                                               ; preds = %3
  %12 = atomicrmw add ptr addrspace(1) %4, i64 %1 syncscope("one-as") acq_rel, align 8
  br label %15

13:                                               ; preds = %3
  %14 = atomicrmw add ptr addrspace(1) %4, i64 %1 seq_cst, align 8
  br label %15

15:                                               ; preds = %13, %11, %9, %7, %5
  %16 = phi i64 [ %6, %5 ], [ %14, %13 ], [ %12, %11 ], [ %10, %9 ], [ %8, %7 ]
  ret i64 %16
}

; Function Attrs: mustprogress nofree norecurse nounwind willreturn
define linkonce_odr protected i64 @__ockl_hsa_queue_cas_write_index(ptr addrspace(1) nocapture noundef %0, i64 noundef %1, i64 noundef %2, i32 noundef %3) local_unnamed_addr #29 {
  %5 = getelementptr inbounds %14, ptr addrspace(1) %0, i64 0, i32 2
  switch i32 %3, label %6 [
    i32 1, label %8
    i32 2, label %8
    i32 3, label %10
    i32 4, label %12
    i32 5, label %14
  ]

6:                                                ; preds = %4
  %7 = cmpxchg ptr addrspace(1) %5, i64 %1, i64 %2 syncscope("one-as") monotonic monotonic, align 8
  br label %16

8:                                                ; preds = %4, %4
  %9 = cmpxchg ptr addrspace(1) %5, i64 %1, i64 %2 syncscope("one-as") acquire monotonic, align 8
  br label %16

10:                                               ; preds = %4
  %11 = cmpxchg ptr addrspace(1) %5, i64 %1, i64 %2 syncscope("one-as") release monotonic, align 8
  br label %16

12:                                               ; preds = %4
  %13 = cmpxchg ptr addrspace(1) %5, i64 %1, i64 %2 syncscope("one-as") acq_rel monotonic, align 8
  br label %16

14:                                               ; preds = %4
  %15 = cmpxchg ptr addrspace(1) %5, i64 %1, i64 %2 seq_cst monotonic, align 8
  br label %16

16:                                               ; preds = %14, %12, %10, %8, %6
  %17 = phi { i64, i1 } [ %7, %6 ], [ %15, %14 ], [ %13, %12 ], [ %11, %10 ], [ %9, %8 ]
  %18 = extractvalue { i64, i1 } %17, 0
  ret i64 %18
}

; Function Attrs: argmemonly mustprogress nofree norecurse nounwind willreturn
define linkonce_odr protected void @__ockl_hsa_queue_store_write_index(ptr addrspace(1) nocapture noundef writeonly %0, i64 noundef %1, i32 noundef %2) local_unnamed_addr #38 {
  %4 = getelementptr inbounds %14, ptr addrspace(1) %0, i64 0, i32 2
  switch i32 %2, label %5 [
    i32 3, label %6
    i32 5, label %7
  ]

5:                                                ; preds = %3
  store atomic i64 %1, ptr addrspace(1) %4 syncscope("one-as") monotonic, align 8
  br label %8

6:                                                ; preds = %3
  store atomic i64 %1, ptr addrspace(1) %4 syncscope("one-as") release, align 8
  br label %8

7:                                                ; preds = %3
  store atomic i64 %1, ptr addrspace(1) %4 seq_cst, align 8
  br label %8

8:                                                ; preds = %7, %6, %5
  ret void
}

; Function Attrs: mustprogress nofree norecurse nounwind willreturn
define linkonce_odr protected i64 @__ockl_hsa_signal_load(i64 %0, i32 noundef %1) local_unnamed_addr #29 {
  %3 = inttoptr i64 %0 to ptr addrspace(1)
  %4 = getelementptr inbounds %12, ptr addrspace(1) %3, i64 0, i32 1
  switch i32 %1, label %5 [
    i32 1, label %7
    i32 2, label %7
    i32 5, label %9
  ]

5:                                                ; preds = %2
  %6 = load atomic i64, ptr addrspace(1) %4 syncscope("one-as") monotonic, align 8
  br label %11

7:                                                ; preds = %2, %2
  %8 = load atomic i64, ptr addrspace(1) %4 syncscope("one-as") acquire, align 8
  br label %11

9:                                                ; preds = %2
  %10 = load atomic i64, ptr addrspace(1) %4 seq_cst, align 8
  br label %11

11:                                               ; preds = %9, %7, %5
  %12 = phi i64 [ %6, %5 ], [ %10, %9 ], [ %8, %7 ]
  ret i64 %12
}

; Function Attrs: convergent norecurse nounwind
define linkonce_odr protected void @__ockl_hsa_signal_and(i64 %0, i64 noundef %1, i32 noundef %2) local_unnamed_addr #12 {
  %4 = inttoptr i64 %0 to ptr addrspace(1)
  %5 = getelementptr inbounds %12, ptr addrspace(1) %4, i64 0, i32 1
  switch i32 %2, label %6 [
    i32 1, label %8
    i32 2, label %8
    i32 3, label %10
    i32 4, label %12
    i32 5, label %14
  ]

6:                                                ; preds = %3
  %7 = atomicrmw and ptr addrspace(1) %5, i64 %1 syncscope("one-as") monotonic, align 8
  br label %16

8:                                                ; preds = %3, %3
  %9 = atomicrmw and ptr addrspace(1) %5, i64 %1 syncscope("one-as") acquire, align 8
  br label %16

10:                                               ; preds = %3
  %11 = atomicrmw and ptr addrspace(1) %5, i64 %1 syncscope("one-as") release, align 8
  br label %16

12:                                               ; preds = %3
  %13 = atomicrmw and ptr addrspace(1) %5, i64 %1 syncscope("one-as") acq_rel, align 8
  br label %16

14:                                               ; preds = %3
  %15 = atomicrmw and ptr addrspace(1) %5, i64 %1 seq_cst, align 8
  br label %16

16:                                               ; preds = %14, %12, %10, %8, %6
  %17 = getelementptr inbounds %12, ptr addrspace(1) %4, i64 0, i32 2
  %18 = load i64, ptr addrspace(1) %17, align 16, !tbaa !56
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %27, label %20

20:                                               ; preds = %16
  %21 = inttoptr i64 %18 to ptr addrspace(1)
  %22 = getelementptr inbounds %12, ptr addrspace(1) %4, i64 0, i32 3
  %23 = load i32, ptr addrspace(1) %22, align 8, !tbaa !58
  %24 = zext i32 %23 to i64
  store atomic i64 %24, ptr addrspace(1) %21 syncscope("one-as") release, align 8
  %25 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %23)
  %26 = and i32 %25, 255
  tail call void @llvm.amdgcn.s.sendmsg(i32 1, i32 %26)
  br label %27

27:                                               ; preds = %20, %16
  ret void
}

; Function Attrs: convergent norecurse nounwind
define linkonce_odr protected void @__ockl_hsa_signal_or(i64 %0, i64 noundef %1, i32 noundef %2) local_unnamed_addr #12 {
  %4 = inttoptr i64 %0 to ptr addrspace(1)
  %5 = getelementptr inbounds %12, ptr addrspace(1) %4, i64 0, i32 1
  switch i32 %2, label %6 [
    i32 1, label %8
    i32 2, label %8
    i32 3, label %10
    i32 4, label %12
    i32 5, label %14
  ]

6:                                                ; preds = %3
  %7 = atomicrmw or ptr addrspace(1) %5, i64 %1 syncscope("one-as") monotonic, align 8
  br label %16

8:                                                ; preds = %3, %3
  %9 = atomicrmw or ptr addrspace(1) %5, i64 %1 syncscope("one-as") acquire, align 8
  br label %16

10:                                               ; preds = %3
  %11 = atomicrmw or ptr addrspace(1) %5, i64 %1 syncscope("one-as") release, align 8
  br label %16

12:                                               ; preds = %3
  %13 = atomicrmw or ptr addrspace(1) %5, i64 %1 syncscope("one-as") acq_rel, align 8
  br label %16

14:                                               ; preds = %3
  %15 = atomicrmw or ptr addrspace(1) %5, i64 %1 seq_cst, align 8
  br label %16

16:                                               ; preds = %14, %12, %10, %8, %6
  %17 = getelementptr inbounds %12, ptr addrspace(1) %4, i64 0, i32 2
  %18 = load i64, ptr addrspace(1) %17, align 16, !tbaa !56
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %27, label %20

20:                                               ; preds = %16
  %21 = inttoptr i64 %18 to ptr addrspace(1)
  %22 = getelementptr inbounds %12, ptr addrspace(1) %4, i64 0, i32 3
  %23 = load i32, ptr addrspace(1) %22, align 8, !tbaa !58
  %24 = zext i32 %23 to i64
  store atomic i64 %24, ptr addrspace(1) %21 syncscope("one-as") release, align 8
  %25 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %23)
  %26 = and i32 %25, 255
  tail call void @llvm.amdgcn.s.sendmsg(i32 1, i32 %26)
  br label %27

27:                                               ; preds = %20, %16
  ret void
}

; Function Attrs: convergent norecurse nounwind
define linkonce_odr protected void @__ockl_hsa_signal_xor(i64 %0, i64 noundef %1, i32 noundef %2) local_unnamed_addr #12 {
  %4 = inttoptr i64 %0 to ptr addrspace(1)
  %5 = getelementptr inbounds %12, ptr addrspace(1) %4, i64 0, i32 1
  switch i32 %2, label %6 [
    i32 1, label %8
    i32 2, label %8
    i32 3, label %10
    i32 4, label %12
    i32 5, label %14
  ]

6:                                                ; preds = %3
  %7 = atomicrmw xor ptr addrspace(1) %5, i64 %1 syncscope("one-as") monotonic, align 8
  br label %16

8:                                                ; preds = %3, %3
  %9 = atomicrmw xor ptr addrspace(1) %5, i64 %1 syncscope("one-as") acquire, align 8
  br label %16

10:                                               ; preds = %3
  %11 = atomicrmw xor ptr addrspace(1) %5, i64 %1 syncscope("one-as") release, align 8
  br label %16

12:                                               ; preds = %3
  %13 = atomicrmw xor ptr addrspace(1) %5, i64 %1 syncscope("one-as") acq_rel, align 8
  br label %16

14:                                               ; preds = %3
  %15 = atomicrmw xor ptr addrspace(1) %5, i64 %1 seq_cst, align 8
  br label %16

16:                                               ; preds = %14, %12, %10, %8, %6
  %17 = getelementptr inbounds %12, ptr addrspace(1) %4, i64 0, i32 2
  %18 = load i64, ptr addrspace(1) %17, align 16, !tbaa !56
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %27, label %20

20:                                               ; preds = %16
  %21 = inttoptr i64 %18 to ptr addrspace(1)
  %22 = getelementptr inbounds %12, ptr addrspace(1) %4, i64 0, i32 3
  %23 = load i32, ptr addrspace(1) %22, align 8, !tbaa !58
  %24 = zext i32 %23 to i64
  store atomic i64 %24, ptr addrspace(1) %21 syncscope("one-as") release, align 8
  %25 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %23)
  %26 = and i32 %25, 255
  tail call void @llvm.amdgcn.s.sendmsg(i32 1, i32 %26)
  br label %27

27:                                               ; preds = %20, %16
  ret void
}

; Function Attrs: convergent norecurse nounwind
define linkonce_odr protected i64 @__ockl_hsa_signal_exchange(i64 %0, i64 noundef %1, i32 noundef %2) local_unnamed_addr #12 {
  %4 = inttoptr i64 %0 to ptr addrspace(1)
  %5 = getelementptr inbounds %12, ptr addrspace(1) %4, i64 0, i32 1
  switch i32 %2, label %6 [
    i32 1, label %8
    i32 2, label %8
    i32 3, label %10
    i32 4, label %12
    i32 5, label %14
  ]

6:                                                ; preds = %3
  %7 = atomicrmw xchg ptr addrspace(1) %5, i64 %1 syncscope("one-as") monotonic, align 8
  br label %16

8:                                                ; preds = %3, %3
  %9 = atomicrmw xchg ptr addrspace(1) %5, i64 %1 syncscope("one-as") acquire, align 8
  br label %16

10:                                               ; preds = %3
  %11 = atomicrmw xchg ptr addrspace(1) %5, i64 %1 syncscope("one-as") release, align 8
  br label %16

12:                                               ; preds = %3
  %13 = atomicrmw xchg ptr addrspace(1) %5, i64 %1 syncscope("one-as") acq_rel, align 8
  br label %16

14:                                               ; preds = %3
  %15 = atomicrmw xchg ptr addrspace(1) %5, i64 %1 seq_cst, align 8
  br label %16

16:                                               ; preds = %14, %12, %10, %8, %6
  %17 = phi i64 [ %7, %6 ], [ %15, %14 ], [ %13, %12 ], [ %11, %10 ], [ %9, %8 ]
  %18 = getelementptr inbounds %12, ptr addrspace(1) %4, i64 0, i32 2
  %19 = load i64, ptr addrspace(1) %18, align 16, !tbaa !56
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %28, label %21

21:                                               ; preds = %16
  %22 = inttoptr i64 %19 to ptr addrspace(1)
  %23 = getelementptr inbounds %12, ptr addrspace(1) %4, i64 0, i32 3
  %24 = load i32, ptr addrspace(1) %23, align 8, !tbaa !58
  %25 = zext i32 %24 to i64
  store atomic i64 %25, ptr addrspace(1) %22 syncscope("one-as") release, align 8
  %26 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %24)
  %27 = and i32 %26, 255
  tail call void @llvm.amdgcn.s.sendmsg(i32 1, i32 %27)
  br label %28

28:                                               ; preds = %21, %16
  ret i64 %17
}

; Function Attrs: convergent norecurse nounwind
define linkonce_odr protected void @__ockl_hsa_signal_subtract(i64 %0, i64 noundef %1, i32 noundef %2) local_unnamed_addr #12 {
  %4 = inttoptr i64 %0 to ptr addrspace(1)
  %5 = getelementptr inbounds %12, ptr addrspace(1) %4, i64 0, i32 1
  switch i32 %2, label %6 [
    i32 1, label %8
    i32 2, label %8
    i32 3, label %10
    i32 4, label %12
    i32 5, label %14
  ]

6:                                                ; preds = %3
  %7 = atomicrmw sub ptr addrspace(1) %5, i64 %1 syncscope("one-as") monotonic, align 8
  br label %16

8:                                                ; preds = %3, %3
  %9 = atomicrmw sub ptr addrspace(1) %5, i64 %1 syncscope("one-as") acquire, align 8
  br label %16

10:                                               ; preds = %3
  %11 = atomicrmw sub ptr addrspace(1) %5, i64 %1 syncscope("one-as") release, align 8
  br label %16

12:                                               ; preds = %3
  %13 = atomicrmw sub ptr addrspace(1) %5, i64 %1 syncscope("one-as") acq_rel, align 8
  br label %16

14:                                               ; preds = %3
  %15 = atomicrmw sub ptr addrspace(1) %5, i64 %1 seq_cst, align 8
  br label %16

16:                                               ; preds = %14, %12, %10, %8, %6
  %17 = getelementptr inbounds %12, ptr addrspace(1) %4, i64 0, i32 2
  %18 = load i64, ptr addrspace(1) %17, align 16, !tbaa !56
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %27, label %20

20:                                               ; preds = %16
  %21 = inttoptr i64 %18 to ptr addrspace(1)
  %22 = getelementptr inbounds %12, ptr addrspace(1) %4, i64 0, i32 3
  %23 = load i32, ptr addrspace(1) %22, align 8, !tbaa !58
  %24 = zext i32 %23 to i64
  store atomic i64 %24, ptr addrspace(1) %21 syncscope("one-as") release, align 8
  %25 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %23)
  %26 = and i32 %25, 255
  tail call void @llvm.amdgcn.s.sendmsg(i32 1, i32 %26)
  br label %27

27:                                               ; preds = %20, %16
  ret void
}

; Function Attrs: convergent norecurse nounwind
define linkonce_odr protected i64 @__ockl_hsa_signal_cas(i64 %0, i64 noundef %1, i64 noundef %2, i32 noundef %3) local_unnamed_addr #12 {
  %5 = inttoptr i64 %0 to ptr addrspace(1)
  %6 = getelementptr inbounds %12, ptr addrspace(1) %5, i64 0, i32 1
  switch i32 %3, label %7 [
    i32 1, label %9
    i32 2, label %9
    i32 3, label %11
    i32 4, label %13
    i32 5, label %15
  ]

7:                                                ; preds = %4
  %8 = cmpxchg ptr addrspace(1) %6, i64 %1, i64 %2 syncscope("one-as") monotonic monotonic, align 8
  br label %17

9:                                                ; preds = %4, %4
  %10 = cmpxchg ptr addrspace(1) %6, i64 %1, i64 %2 syncscope("one-as") acquire monotonic, align 8
  br label %17

11:                                               ; preds = %4
  %12 = cmpxchg ptr addrspace(1) %6, i64 %1, i64 %2 syncscope("one-as") release monotonic, align 8
  br label %17

13:                                               ; preds = %4
  %14 = cmpxchg ptr addrspace(1) %6, i64 %1, i64 %2 syncscope("one-as") acq_rel monotonic, align 8
  br label %17

15:                                               ; preds = %4
  %16 = cmpxchg ptr addrspace(1) %6, i64 %1, i64 %2 seq_cst monotonic, align 8
  br label %17

17:                                               ; preds = %15, %13, %11, %9, %7
  %18 = phi { i64, i1 } [ %8, %7 ], [ %16, %15 ], [ %14, %13 ], [ %12, %11 ], [ %10, %9 ]
  %19 = extractvalue { i64, i1 } %18, 1
  br i1 %19, label %20, label %31

20:                                               ; preds = %17
  %21 = getelementptr inbounds %12, ptr addrspace(1) %5, i64 0, i32 2
  %22 = load i64, ptr addrspace(1) %21, align 16, !tbaa !56
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %31, label %24

24:                                               ; preds = %20
  %25 = inttoptr i64 %22 to ptr addrspace(1)
  %26 = getelementptr inbounds %12, ptr addrspace(1) %5, i64 0, i32 3
  %27 = load i32, ptr addrspace(1) %26, align 8, !tbaa !58
  %28 = zext i32 %27 to i64
  store atomic i64 %28, ptr addrspace(1) %25 syncscope("one-as") release, align 8
  %29 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %27)
  %30 = and i32 %29, 255
  tail call void @llvm.amdgcn.s.sendmsg(i32 1, i32 %30)
  br label %31

31:                                               ; preds = %24, %20, %17
  %32 = extractvalue { i64, i1 } %18, 0
  ret i64 %32
}

; Function Attrs: convergent norecurse nounwind
define linkonce_odr protected void @__ockl_hsa_signal_store(i64 %0, i64 noundef %1, i32 noundef %2) local_unnamed_addr #12 {
  %4 = inttoptr i64 %0 to ptr addrspace(1)
  %5 = load i64, ptr addrspace(1) %4, align 64, !tbaa !69
  %6 = icmp eq i64 %5, 1
  br i1 %6, label %7, label %23

7:                                                ; preds = %3
  %8 = getelementptr inbounds %12, ptr addrspace(1) %4, i64 0, i32 1
  switch i32 %2, label %9 [
    i32 3, label %10
    i32 5, label %11
  ]

9:                                                ; preds = %7
  store atomic i64 %1, ptr addrspace(1) %8 syncscope("one-as") monotonic, align 8
  br label %12

10:                                               ; preds = %7
  store atomic i64 %1, ptr addrspace(1) %8 syncscope("one-as") release, align 8
  br label %12

11:                                               ; preds = %7
  store atomic i64 %1, ptr addrspace(1) %8 seq_cst, align 8
  br label %12

12:                                               ; preds = %11, %10, %9
  %13 = getelementptr inbounds %12, ptr addrspace(1) %4, i64 0, i32 2
  %14 = load i64, ptr addrspace(1) %13, align 16, !tbaa !56
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %60, label %16

16:                                               ; preds = %12
  %17 = inttoptr i64 %14 to ptr addrspace(1)
  %18 = getelementptr inbounds %12, ptr addrspace(1) %4, i64 0, i32 3
  %19 = load i32, ptr addrspace(1) %18, align 8, !tbaa !58
  %20 = zext i32 %19 to i64
  store atomic i64 %20, ptr addrspace(1) %17 syncscope("one-as") release, align 8
  %21 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %19)
  %22 = and i32 %21, 255
  tail call void @llvm.amdgcn.s.sendmsg(i32 1, i32 %22)
  br label %60

23:                                               ; preds = %3
  %24 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %25 = icmp sgt i32 %24, 8999
  br i1 %25, label %26, label %29

26:                                               ; preds = %23
  %27 = getelementptr inbounds %12, ptr addrspace(1) %4, i64 0, i32 1
  %28 = load ptr addrspace(1), ptr addrspace(1) %27, align 8, !tbaa !49
  store atomic i64 %1, ptr addrspace(1) %28 syncscope("one-as") release, align 8
  br label %60

29:                                               ; preds = %23
  %30 = getelementptr inbounds %12, ptr addrspace(1) %4, i64 0, i32 7
  %31 = load ptr addrspace(1), ptr addrspace(1) %30, align 16, !tbaa !49
  %32 = getelementptr inbounds %14, ptr addrspace(1) %31, i64 0, i32 8
  %33 = cmpxchg ptr addrspace(1) %32, i32 0, i32 1 syncscope("one-as") acquire monotonic, align 4
  %34 = extractvalue { i32, i1 } %33, 1
  br i1 %34, label %38, label %35

35:                                               ; preds = %35, %29
  tail call void @llvm.amdgcn.s.sleep(i32 1)
  %36 = cmpxchg ptr addrspace(1) %32, i32 0, i32 1 syncscope("one-as") acquire monotonic, align 4
  %37 = extractvalue { i32, i1 } %36, 1
  br i1 %37, label %38, label %35

38:                                               ; preds = %35, %29
  %39 = add nsw i64 %1, 1
  %40 = getelementptr inbounds %14, ptr addrspace(1) %31, i64 0, i32 7
  %41 = load volatile i64, ptr addrspace(1) %40, align 16, !tbaa !70
  %42 = icmp ugt i64 %39, %41
  br i1 %42, label %43, label %59

43:                                               ; preds = %38
  store atomic i64 %39, ptr addrspace(1) %40 syncscope("one-as") monotonic, align 16
  %44 = icmp slt i32 %24, 8000
  br i1 %44, label %45, label %54

45:                                               ; preds = %43
  %46 = trunc i64 %39 to i32
  %47 = getelementptr inbounds %15, ptr addrspace(1) %31, i64 0, i32 4
  %48 = load i32, ptr addrspace(1) %47, align 8, !tbaa !73
  %49 = shl i32 %48, 1
  %50 = add i32 %49, 268435455
  %51 = and i32 %50, %46
  %52 = shl i32 %51, 4
  %53 = zext i32 %52 to i64
  br label %54

54:                                               ; preds = %45, %43
  %55 = phi i64 [ %53, %45 ], [ %39, %43 ]
  %56 = trunc i64 %55 to i32
  %57 = getelementptr inbounds %12, ptr addrspace(1) %4, i64 0, i32 1
  %58 = load ptr addrspace(1), ptr addrspace(1) %57, align 8, !tbaa !49
  store volatile i32 %56, ptr addrspace(1) %58, align 4, !tbaa !11
  br label %59

59:                                               ; preds = %54, %38
  store atomic i32 0, ptr addrspace(1) %32 syncscope("one-as") release, align 4
  br label %60

60:                                               ; preds = %59, %26, %16, %12
  ret void
}

; Function Attrs: mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected <4 x float> @__ockl_image_load_1D(ptr addrspace(4) nocapture noundef readonly %0, i32 noundef %1) local_unnamed_addr #39 {
  %3 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %4 = tail call <4 x float> @llvm.amdgcn.image.load.1d.v4f32.i32(i32 15, i32 %1, <8 x i32> %3, i32 0, i32 0)
  ret <4 x float> %4
}

; Function Attrs: nounwind readonly willreturn
declare <4 x float> @llvm.amdgcn.image.load.1d.v4f32.i32(i32 immarg, i32, <8 x i32>, i32 immarg, i32 immarg) #40

; Function Attrs: mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected <4 x float> @__ockl_image_load_1Da(ptr addrspace(4) nocapture noundef readonly %0, <2 x i32> noundef %1) local_unnamed_addr #39 {
  %3 = extractelement <2 x i32> %1, i64 0
  %4 = extractelement <2 x i32> %1, i64 1
  %5 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %6 = tail call <4 x float> @llvm.amdgcn.image.load.1darray.v4f32.i32(i32 15, i32 %3, i32 %4, <8 x i32> %5, i32 0, i32 0)
  ret <4 x float> %6
}

; Function Attrs: nounwind readonly willreturn
declare <4 x float> @llvm.amdgcn.image.load.1darray.v4f32.i32(i32 immarg, i32, i32, <8 x i32>, i32 immarg, i32 immarg) #40

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected <4 x float> @__ockl_image_load_1Db(ptr addrspace(4) nocapture noundef readonly %0, i32 noundef %1) local_unnamed_addr #41 {
  %3 = load <4 x i32>, ptr addrspace(4) %0, align 16, !tbaa !49
  %4 = tail call <4 x float> @llvm.amdgcn.struct.buffer.load.format.v4f32(<4 x i32> noundef %3, i32 noundef %1, i32 noundef 0, i32 noundef 0, i32 noundef 0) #59
  ret <4 x float> %4
}

; Function Attrs: nounwind readonly willreturn
declare <4 x float> @llvm.amdgcn.struct.buffer.load.format.v4f32(<4 x i32>, i32, i32, i32, i32 immarg) #40

; Function Attrs: mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected <4 x float> @__ockl_image_load_2D(ptr addrspace(4) nocapture noundef readonly %0, <2 x i32> noundef %1) local_unnamed_addr #39 {
  %3 = extractelement <2 x i32> %1, i64 0
  %4 = extractelement <2 x i32> %1, i64 1
  %5 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %6 = tail call <4 x float> @llvm.amdgcn.image.load.2d.v4f32.i32(i32 15, i32 %3, i32 %4, <8 x i32> %5, i32 0, i32 0)
  ret <4 x float> %6
}

; Function Attrs: nounwind readonly willreturn
declare <4 x float> @llvm.amdgcn.image.load.2d.v4f32.i32(i32 immarg, i32, i32, <8 x i32>, i32 immarg, i32 immarg) #40

; Function Attrs: mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected <4 x float> @__ockl_image_load_2Da(ptr addrspace(4) nocapture noundef readonly %0, <4 x i32> noundef %1) local_unnamed_addr #39 {
  %3 = extractelement <4 x i32> %1, i64 0
  %4 = extractelement <4 x i32> %1, i64 1
  %5 = extractelement <4 x i32> %1, i64 2
  %6 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %7 = tail call <4 x float> @llvm.amdgcn.image.load.2darray.v4f32.i32(i32 15, i32 %3, i32 %4, i32 %5, <8 x i32> %6, i32 0, i32 0)
  ret <4 x float> %7
}

; Function Attrs: nounwind readonly willreturn
declare <4 x float> @llvm.amdgcn.image.load.2darray.v4f32.i32(i32 immarg, i32, i32, i32, <8 x i32>, i32 immarg, i32 immarg) #40

; Function Attrs: mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected float @__ockl_image_load_2Dad(ptr addrspace(4) nocapture noundef readonly %0, <4 x i32> noundef %1) local_unnamed_addr #39 {
  %3 = extractelement <4 x i32> %1, i64 0
  %4 = extractelement <4 x i32> %1, i64 1
  %5 = extractelement <4 x i32> %1, i64 2
  %6 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %7 = tail call float @llvm.amdgcn.image.load.2darray.f32.i32(i32 1, i32 %3, i32 %4, i32 %5, <8 x i32> %6, i32 0, i32 0)
  ret float %7
}

; Function Attrs: nounwind readonly willreturn
declare float @llvm.amdgcn.image.load.2darray.f32.i32(i32 immarg, i32, i32, i32, <8 x i32>, i32 immarg, i32 immarg) #40

; Function Attrs: mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected float @__ockl_image_load_2Dd(ptr addrspace(4) nocapture noundef readonly %0, <2 x i32> noundef %1) local_unnamed_addr #39 {
  %3 = extractelement <2 x i32> %1, i64 0
  %4 = extractelement <2 x i32> %1, i64 1
  %5 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %6 = tail call float @llvm.amdgcn.image.load.2d.f32.i32(i32 1, i32 %3, i32 %4, <8 x i32> %5, i32 0, i32 0)
  ret float %6
}

; Function Attrs: nounwind readonly willreturn
declare float @llvm.amdgcn.image.load.2d.f32.i32(i32 immarg, i32, i32, <8 x i32>, i32 immarg, i32 immarg) #40

; Function Attrs: mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected <4 x float> @__ockl_image_load_3D(ptr addrspace(4) nocapture noundef readonly %0, <4 x i32> noundef %1) local_unnamed_addr #39 {
  %3 = extractelement <4 x i32> %1, i64 0
  %4 = extractelement <4 x i32> %1, i64 1
  %5 = extractelement <4 x i32> %1, i64 2
  %6 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %7 = tail call <4 x float> @llvm.amdgcn.image.load.3d.v4f32.i32(i32 15, i32 %3, i32 %4, i32 %5, <8 x i32> %6, i32 0, i32 0)
  ret <4 x float> %7
}

; Function Attrs: nounwind readonly willreturn
declare <4 x float> @llvm.amdgcn.image.load.3d.v4f32.i32(i32 immarg, i32, i32, i32, <8 x i32>, i32 immarg, i32 immarg) #40

; Function Attrs: mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected <4 x float> @__ockl_image_load_CM(ptr addrspace(4) nocapture noundef readonly %0, <2 x i32> noundef %1, i32 noundef %2) local_unnamed_addr #39 {
  %4 = extractelement <2 x i32> %1, i64 0
  %5 = extractelement <2 x i32> %1, i64 1
  %6 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %7 = tail call <4 x float> @llvm.amdgcn.image.load.cube.v4f32.i32(i32 15, i32 %4, i32 %5, i32 %2, <8 x i32> %6, i32 0, i32 0)
  ret <4 x float> %7
}

; Function Attrs: nounwind readonly willreturn
declare <4 x float> @llvm.amdgcn.image.load.cube.v4f32.i32(i32 immarg, i32, i32, i32, <8 x i32>, i32 immarg, i32 immarg) #40

; Function Attrs: mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected <4 x float> @__ockl_image_load_CMa(ptr addrspace(4) nocapture noundef readonly %0, <4 x i32> noundef %1, i32 noundef %2) local_unnamed_addr #39 {
  %4 = extractelement <4 x i32> %1, i64 2
  %5 = shl i32 %4, 8
  %6 = ashr exact i32 %5, 8
  %7 = mul nsw i32 %6, 6
  %8 = add nsw i32 %7, %2
  %9 = extractelement <4 x i32> %1, i64 0
  %10 = extractelement <4 x i32> %1, i64 1
  %11 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %12 = tail call <4 x float> @llvm.amdgcn.image.load.cube.v4f32.i32(i32 15, i32 %9, i32 %10, i32 %8, <8 x i32> %11, i32 0, i32 0)
  ret <4 x float> %12
}

; Function Attrs: mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected <4 x float> @__ockl_image_load_lod_1D(ptr addrspace(4) nocapture noundef readonly %0, i32 noundef %1, i32 noundef %2) local_unnamed_addr #39 {
  %4 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %5 = tail call <4 x float> @llvm.amdgcn.image.load.mip.1d.v4f32.i32(i32 15, i32 %1, i32 %2, <8 x i32> %4, i32 0, i32 0)
  ret <4 x float> %5
}

; Function Attrs: nounwind readonly willreturn
declare <4 x float> @llvm.amdgcn.image.load.mip.1d.v4f32.i32(i32 immarg, i32, i32, <8 x i32>, i32 immarg, i32 immarg) #40

; Function Attrs: mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected <4 x float> @__ockl_image_load_lod_1Da(ptr addrspace(4) nocapture noundef readonly %0, <2 x i32> noundef %1, i32 noundef %2) local_unnamed_addr #39 {
  %4 = extractelement <2 x i32> %1, i64 0
  %5 = extractelement <2 x i32> %1, i64 1
  %6 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %7 = tail call <4 x float> @llvm.amdgcn.image.load.mip.1darray.v4f32.i32(i32 15, i32 %4, i32 %5, i32 %2, <8 x i32> %6, i32 0, i32 0)
  ret <4 x float> %7
}

; Function Attrs: nounwind readonly willreturn
declare <4 x float> @llvm.amdgcn.image.load.mip.1darray.v4f32.i32(i32 immarg, i32, i32, i32, <8 x i32>, i32 immarg, i32 immarg) #40

; Function Attrs: mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected <4 x float> @__ockl_image_load_lod_2D(ptr addrspace(4) nocapture noundef readonly %0, <2 x i32> noundef %1, i32 noundef %2) local_unnamed_addr #39 {
  %4 = extractelement <2 x i32> %1, i64 0
  %5 = extractelement <2 x i32> %1, i64 1
  %6 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %7 = tail call <4 x float> @llvm.amdgcn.image.load.mip.2d.v4f32.i32(i32 15, i32 %4, i32 %5, i32 %2, <8 x i32> %6, i32 0, i32 0)
  ret <4 x float> %7
}

; Function Attrs: nounwind readonly willreturn
declare <4 x float> @llvm.amdgcn.image.load.mip.2d.v4f32.i32(i32 immarg, i32, i32, i32, <8 x i32>, i32 immarg, i32 immarg) #40

; Function Attrs: mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected <4 x float> @__ockl_image_load_lod_2Da(ptr addrspace(4) nocapture noundef readonly %0, <4 x i32> noundef %1, i32 noundef %2) local_unnamed_addr #39 {
  %4 = extractelement <4 x i32> %1, i64 0
  %5 = extractelement <4 x i32> %1, i64 1
  %6 = extractelement <4 x i32> %1, i64 2
  %7 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %8 = tail call <4 x float> @llvm.amdgcn.image.load.mip.2darray.v4f32.i32(i32 15, i32 %4, i32 %5, i32 %6, i32 %2, <8 x i32> %7, i32 0, i32 0)
  ret <4 x float> %8
}

; Function Attrs: nounwind readonly willreturn
declare <4 x float> @llvm.amdgcn.image.load.mip.2darray.v4f32.i32(i32 immarg, i32, i32, i32, i32, <8 x i32>, i32 immarg, i32 immarg) #40

; Function Attrs: mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected float @__ockl_image_load_lod_2Dad(ptr addrspace(4) nocapture noundef readonly %0, <4 x i32> noundef %1, i32 noundef %2) local_unnamed_addr #39 {
  %4 = extractelement <4 x i32> %1, i64 0
  %5 = extractelement <4 x i32> %1, i64 1
  %6 = extractelement <4 x i32> %1, i64 2
  %7 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %8 = tail call float @llvm.amdgcn.image.load.mip.2darray.f32.i32(i32 1, i32 %4, i32 %5, i32 %6, i32 %2, <8 x i32> %7, i32 0, i32 0)
  ret float %8
}

; Function Attrs: nounwind readonly willreturn
declare float @llvm.amdgcn.image.load.mip.2darray.f32.i32(i32 immarg, i32, i32, i32, i32, <8 x i32>, i32 immarg, i32 immarg) #40

; Function Attrs: mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected float @__ockl_image_load_lod_2Dd(ptr addrspace(4) nocapture noundef readonly %0, <2 x i32> noundef %1, i32 noundef %2) local_unnamed_addr #39 {
  %4 = extractelement <2 x i32> %1, i64 0
  %5 = extractelement <2 x i32> %1, i64 1
  %6 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %7 = tail call float @llvm.amdgcn.image.load.mip.2d.f32.i32(i32 1, i32 %4, i32 %5, i32 %2, <8 x i32> %6, i32 0, i32 0)
  ret float %7
}

; Function Attrs: nounwind readonly willreturn
declare float @llvm.amdgcn.image.load.mip.2d.f32.i32(i32 immarg, i32, i32, i32, <8 x i32>, i32 immarg, i32 immarg) #40

; Function Attrs: mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected <4 x float> @__ockl_image_load_lod_3D(ptr addrspace(4) nocapture noundef readonly %0, <4 x i32> noundef %1, i32 noundef %2) local_unnamed_addr #39 {
  %4 = extractelement <4 x i32> %1, i64 0
  %5 = extractelement <4 x i32> %1, i64 1
  %6 = extractelement <4 x i32> %1, i64 2
  %7 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %8 = tail call <4 x float> @llvm.amdgcn.image.load.mip.3d.v4f32.i32(i32 15, i32 %4, i32 %5, i32 %6, i32 %2, <8 x i32> %7, i32 0, i32 0)
  ret <4 x float> %8
}

; Function Attrs: nounwind readonly willreturn
declare <4 x float> @llvm.amdgcn.image.load.mip.3d.v4f32.i32(i32 immarg, i32, i32, i32, i32, <8 x i32>, i32 immarg, i32 immarg) #40

; Function Attrs: mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected <4 x float> @__ockl_image_load_lod_CM(ptr addrspace(4) nocapture noundef readonly %0, <2 x i32> noundef %1, i32 noundef %2, i32 noundef %3) local_unnamed_addr #39 {
  %5 = extractelement <2 x i32> %1, i64 0
  %6 = extractelement <2 x i32> %1, i64 1
  %7 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %8 = tail call <4 x float> @llvm.amdgcn.image.load.mip.cube.v4f32.i32(i32 15, i32 %5, i32 %6, i32 %2, i32 %3, <8 x i32> %7, i32 0, i32 0)
  ret <4 x float> %8
}

; Function Attrs: nounwind readonly willreturn
declare <4 x float> @llvm.amdgcn.image.load.mip.cube.v4f32.i32(i32 immarg, i32, i32, i32, i32, <8 x i32>, i32 immarg, i32 immarg) #40

; Function Attrs: mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected <4 x float> @__ockl_image_load_lod_CMa(ptr addrspace(4) nocapture noundef readonly %0, <4 x i32> noundef %1, i32 noundef %2, i32 noundef %3) local_unnamed_addr #39 {
  %5 = extractelement <4 x i32> %1, i64 2
  %6 = shl i32 %5, 8
  %7 = ashr exact i32 %6, 8
  %8 = mul nsw i32 %7, 6
  %9 = add nsw i32 %8, %2
  %10 = extractelement <4 x i32> %1, i64 0
  %11 = extractelement <4 x i32> %1, i64 1
  %12 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %13 = tail call <4 x float> @llvm.amdgcn.image.load.mip.cube.v4f32.i32(i32 15, i32 %10, i32 %11, i32 %9, i32 %3, <8 x i32> %12, i32 0, i32 0)
  ret <4 x float> %13
}

; Function Attrs: mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected <4 x half> @__ockl_image_loadh_1D(ptr addrspace(4) nocapture noundef readonly %0, i32 noundef %1) local_unnamed_addr #39 {
  %3 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %4 = tail call <4 x half> @llvm.amdgcn.image.load.1d.v4f16.i32(i32 15, i32 %1, <8 x i32> %3, i32 0, i32 0)
  ret <4 x half> %4
}

; Function Attrs: nounwind readonly willreturn
declare <4 x half> @llvm.amdgcn.image.load.1d.v4f16.i32(i32 immarg, i32, <8 x i32>, i32 immarg, i32 immarg) #40

; Function Attrs: mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected <4 x half> @__ockl_image_loadh_1Da(ptr addrspace(4) nocapture noundef readonly %0, <2 x i32> noundef %1) local_unnamed_addr #39 {
  %3 = extractelement <2 x i32> %1, i64 0
  %4 = extractelement <2 x i32> %1, i64 1
  %5 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %6 = tail call <4 x half> @llvm.amdgcn.image.load.1darray.v4f16.i32(i32 15, i32 %3, i32 %4, <8 x i32> %5, i32 0, i32 0)
  ret <4 x half> %6
}

; Function Attrs: nounwind readonly willreturn
declare <4 x half> @llvm.amdgcn.image.load.1darray.v4f16.i32(i32 immarg, i32, i32, <8 x i32>, i32 immarg, i32 immarg) #40

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected <4 x half> @__ockl_image_loadh_1Db(ptr addrspace(4) nocapture noundef readonly %0, i32 noundef %1) local_unnamed_addr #41 {
  %3 = load <4 x i32>, ptr addrspace(4) %0, align 16, !tbaa !49
  %4 = tail call <4 x half> @llvm.amdgcn.struct.buffer.load.format.v4f16(<4 x i32> noundef %3, i32 noundef %1, i32 noundef 0, i32 noundef 0, i32 noundef 0) #59
  ret <4 x half> %4
}

; Function Attrs: nounwind readonly willreturn
declare <4 x half> @llvm.amdgcn.struct.buffer.load.format.v4f16(<4 x i32>, i32, i32, i32, i32 immarg) #40

; Function Attrs: mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected <4 x half> @__ockl_image_loadh_2D(ptr addrspace(4) nocapture noundef readonly %0, <2 x i32> noundef %1) local_unnamed_addr #39 {
  %3 = extractelement <2 x i32> %1, i64 0
  %4 = extractelement <2 x i32> %1, i64 1
  %5 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %6 = tail call <4 x half> @llvm.amdgcn.image.load.2d.v4f16.i32(i32 15, i32 %3, i32 %4, <8 x i32> %5, i32 0, i32 0)
  ret <4 x half> %6
}

; Function Attrs: nounwind readonly willreturn
declare <4 x half> @llvm.amdgcn.image.load.2d.v4f16.i32(i32 immarg, i32, i32, <8 x i32>, i32 immarg, i32 immarg) #40

; Function Attrs: mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected <4 x half> @__ockl_image_loadh_2Da(ptr addrspace(4) nocapture noundef readonly %0, <4 x i32> noundef %1) local_unnamed_addr #39 {
  %3 = extractelement <4 x i32> %1, i64 0
  %4 = extractelement <4 x i32> %1, i64 1
  %5 = extractelement <4 x i32> %1, i64 2
  %6 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %7 = tail call <4 x half> @llvm.amdgcn.image.load.2darray.v4f16.i32(i32 15, i32 %3, i32 %4, i32 %5, <8 x i32> %6, i32 0, i32 0)
  ret <4 x half> %7
}

; Function Attrs: nounwind readonly willreturn
declare <4 x half> @llvm.amdgcn.image.load.2darray.v4f16.i32(i32 immarg, i32, i32, i32, <8 x i32>, i32 immarg, i32 immarg) #40

; Function Attrs: mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected <4 x half> @__ockl_image_loadh_3D(ptr addrspace(4) nocapture noundef readonly %0, <4 x i32> noundef %1) local_unnamed_addr #39 {
  %3 = extractelement <4 x i32> %1, i64 0
  %4 = extractelement <4 x i32> %1, i64 1
  %5 = extractelement <4 x i32> %1, i64 2
  %6 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %7 = tail call <4 x half> @llvm.amdgcn.image.load.3d.v4f16.i32(i32 15, i32 %3, i32 %4, i32 %5, <8 x i32> %6, i32 0, i32 0)
  ret <4 x half> %7
}

; Function Attrs: nounwind readonly willreturn
declare <4 x half> @llvm.amdgcn.image.load.3d.v4f16.i32(i32 immarg, i32, i32, i32, <8 x i32>, i32 immarg, i32 immarg) #40

; Function Attrs: mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected <4 x half> @__ockl_image_loadh_CM(ptr addrspace(4) nocapture noundef readonly %0, <2 x i32> noundef %1, i32 noundef %2) local_unnamed_addr #39 {
  %4 = extractelement <2 x i32> %1, i64 0
  %5 = extractelement <2 x i32> %1, i64 1
  %6 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %7 = tail call <4 x half> @llvm.amdgcn.image.load.cube.v4f16.i32(i32 15, i32 %4, i32 %5, i32 %2, <8 x i32> %6, i32 0, i32 0)
  ret <4 x half> %7
}

; Function Attrs: nounwind readonly willreturn
declare <4 x half> @llvm.amdgcn.image.load.cube.v4f16.i32(i32 immarg, i32, i32, i32, <8 x i32>, i32 immarg, i32 immarg) #40

; Function Attrs: mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected <4 x half> @__ockl_image_loadh_CMa(ptr addrspace(4) nocapture noundef readonly %0, <4 x i32> noundef %1, i32 noundef %2) local_unnamed_addr #39 {
  %4 = extractelement <4 x i32> %1, i64 2
  %5 = shl i32 %4, 8
  %6 = ashr exact i32 %5, 8
  %7 = mul nsw i32 %6, 6
  %8 = add nsw i32 %7, %2
  %9 = extractelement <4 x i32> %1, i64 0
  %10 = extractelement <4 x i32> %1, i64 1
  %11 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %12 = tail call <4 x half> @llvm.amdgcn.image.load.cube.v4f16.i32(i32 15, i32 %9, i32 %10, i32 %8, <8 x i32> %11, i32 0, i32 0)
  ret <4 x half> %12
}

; Function Attrs: mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected <4 x half> @__ockl_image_loadh_lod_1D(ptr addrspace(4) nocapture noundef readonly %0, i32 noundef %1, i32 noundef %2) local_unnamed_addr #39 {
  %4 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %5 = tail call <4 x half> @llvm.amdgcn.image.load.mip.1d.v4f16.i32(i32 15, i32 %1, i32 %2, <8 x i32> %4, i32 0, i32 0)
  ret <4 x half> %5
}

; Function Attrs: nounwind readonly willreturn
declare <4 x half> @llvm.amdgcn.image.load.mip.1d.v4f16.i32(i32 immarg, i32, i32, <8 x i32>, i32 immarg, i32 immarg) #40

; Function Attrs: mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected <4 x half> @__ockl_image_loadh_lod_1Da(ptr addrspace(4) nocapture noundef readonly %0, <2 x i32> noundef %1, i32 noundef %2) local_unnamed_addr #39 {
  %4 = extractelement <2 x i32> %1, i64 0
  %5 = extractelement <2 x i32> %1, i64 1
  %6 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %7 = tail call <4 x half> @llvm.amdgcn.image.load.mip.1darray.v4f16.i32(i32 15, i32 %4, i32 %5, i32 %2, <8 x i32> %6, i32 0, i32 0)
  ret <4 x half> %7
}

; Function Attrs: nounwind readonly willreturn
declare <4 x half> @llvm.amdgcn.image.load.mip.1darray.v4f16.i32(i32 immarg, i32, i32, i32, <8 x i32>, i32 immarg, i32 immarg) #40

; Function Attrs: mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected <4 x half> @__ockl_image_loadh_lod_2D(ptr addrspace(4) nocapture noundef readonly %0, <2 x i32> noundef %1, i32 noundef %2) local_unnamed_addr #39 {
  %4 = extractelement <2 x i32> %1, i64 0
  %5 = extractelement <2 x i32> %1, i64 1
  %6 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %7 = tail call <4 x half> @llvm.amdgcn.image.load.mip.2d.v4f16.i32(i32 15, i32 %4, i32 %5, i32 %2, <8 x i32> %6, i32 0, i32 0)
  ret <4 x half> %7
}

; Function Attrs: nounwind readonly willreturn
declare <4 x half> @llvm.amdgcn.image.load.mip.2d.v4f16.i32(i32 immarg, i32, i32, i32, <8 x i32>, i32 immarg, i32 immarg) #40

; Function Attrs: mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected <4 x half> @__ockl_image_loadh_lod_2Da(ptr addrspace(4) nocapture noundef readonly %0, <4 x i32> noundef %1, i32 noundef %2) local_unnamed_addr #39 {
  %4 = extractelement <4 x i32> %1, i64 0
  %5 = extractelement <4 x i32> %1, i64 1
  %6 = extractelement <4 x i32> %1, i64 2
  %7 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %8 = tail call <4 x half> @llvm.amdgcn.image.load.mip.2darray.v4f16.i32(i32 15, i32 %4, i32 %5, i32 %6, i32 %2, <8 x i32> %7, i32 0, i32 0)
  ret <4 x half> %8
}

; Function Attrs: nounwind readonly willreturn
declare <4 x half> @llvm.amdgcn.image.load.mip.2darray.v4f16.i32(i32 immarg, i32, i32, i32, i32, <8 x i32>, i32 immarg, i32 immarg) #40

; Function Attrs: mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected <4 x half> @__ockl_image_loadh_lod_3D(ptr addrspace(4) nocapture noundef readonly %0, <4 x i32> noundef %1, i32 noundef %2) local_unnamed_addr #39 {
  %4 = extractelement <4 x i32> %1, i64 0
  %5 = extractelement <4 x i32> %1, i64 1
  %6 = extractelement <4 x i32> %1, i64 2
  %7 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %8 = tail call <4 x half> @llvm.amdgcn.image.load.mip.3d.v4f16.i32(i32 15, i32 %4, i32 %5, i32 %6, i32 %2, <8 x i32> %7, i32 0, i32 0)
  ret <4 x half> %8
}

; Function Attrs: nounwind readonly willreturn
declare <4 x half> @llvm.amdgcn.image.load.mip.3d.v4f16.i32(i32 immarg, i32, i32, i32, i32, <8 x i32>, i32 immarg, i32 immarg) #40

; Function Attrs: mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected <4 x half> @__ockl_image_loadh_lod_CM(ptr addrspace(4) nocapture noundef readonly %0, <2 x i32> noundef %1, i32 noundef %2, i32 noundef %3) local_unnamed_addr #39 {
  %5 = extractelement <2 x i32> %1, i64 0
  %6 = extractelement <2 x i32> %1, i64 1
  %7 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %8 = tail call <4 x half> @llvm.amdgcn.image.load.mip.cube.v4f16.i32(i32 15, i32 %5, i32 %6, i32 %2, i32 %3, <8 x i32> %7, i32 0, i32 0)
  ret <4 x half> %8
}

; Function Attrs: nounwind readonly willreturn
declare <4 x half> @llvm.amdgcn.image.load.mip.cube.v4f16.i32(i32 immarg, i32, i32, i32, i32, <8 x i32>, i32 immarg, i32 immarg) #40

; Function Attrs: mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected <4 x half> @__ockl_image_loadh_lod_CMa(ptr addrspace(4) nocapture noundef readonly %0, <4 x i32> noundef %1, i32 noundef %2, i32 noundef %3) local_unnamed_addr #39 {
  %5 = extractelement <4 x i32> %1, i64 2
  %6 = shl i32 %5, 8
  %7 = ashr exact i32 %6, 8
  %8 = mul nsw i32 %7, 6
  %9 = add nsw i32 %8, %2
  %10 = extractelement <4 x i32> %1, i64 0
  %11 = extractelement <4 x i32> %1, i64 1
  %12 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %13 = tail call <4 x half> @llvm.amdgcn.image.load.mip.cube.v4f16.i32(i32 15, i32 %10, i32 %11, i32 %9, i32 %3, <8 x i32> %12, i32 0, i32 0)
  ret <4 x half> %13
}

; Function Attrs: mustprogress norecurse nounwind willreturn writeonly
define linkonce_odr protected void @__ockl_image_store_1D(ptr addrspace(4) nocapture noundef readonly %0, i32 noundef %1, <4 x float> noundef %2) local_unnamed_addr #42 {
  %4 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  tail call void @llvm.amdgcn.image.store.1d.v4f32.i32(<4 x float> %2, i32 15, i32 %1, <8 x i32> %4, i32 0, i32 0)
  ret void
}

; Function Attrs: nounwind willreturn writeonly
declare void @llvm.amdgcn.image.store.1d.v4f32.i32(<4 x float>, i32 immarg, i32, <8 x i32>, i32 immarg, i32 immarg) #43

; Function Attrs: mustprogress norecurse nounwind willreturn writeonly
define linkonce_odr protected void @__ockl_image_store_1Da(ptr addrspace(4) nocapture noundef readonly %0, <2 x i32> noundef %1, <4 x float> noundef %2) local_unnamed_addr #42 {
  %4 = extractelement <2 x i32> %1, i64 0
  %5 = extractelement <2 x i32> %1, i64 1
  %6 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  tail call void @llvm.amdgcn.image.store.1darray.v4f32.i32(<4 x float> %2, i32 15, i32 %4, i32 %5, <8 x i32> %6, i32 0, i32 0)
  ret void
}

; Function Attrs: nounwind willreturn writeonly
declare void @llvm.amdgcn.image.store.1darray.v4f32.i32(<4 x float>, i32 immarg, i32, i32, <8 x i32>, i32 immarg, i32 immarg) #43

; Function Attrs: convergent mustprogress norecurse nounwind willreturn writeonly
define linkonce_odr protected void @__ockl_image_store_1Db(ptr addrspace(4) nocapture noundef readonly %0, i32 noundef %1, <4 x float> noundef %2) local_unnamed_addr #44 {
  %4 = load <4 x i32>, ptr addrspace(4) %0, align 16, !tbaa !49
  tail call void @llvm.amdgcn.struct.buffer.store.format.v4f32(<4 x float> noundef %2, <4 x i32> noundef %4, i32 noundef %1, i32 noundef 0, i32 noundef 0, i32 noundef 0) #57
  ret void
}

; Function Attrs: nounwind willreturn writeonly
declare void @llvm.amdgcn.struct.buffer.store.format.v4f32(<4 x float>, <4 x i32>, i32, i32, i32, i32 immarg) #43

; Function Attrs: mustprogress norecurse nounwind willreturn writeonly
define linkonce_odr protected void @__ockl_image_store_2D(ptr addrspace(4) nocapture noundef readonly %0, <2 x i32> noundef %1, <4 x float> noundef %2) local_unnamed_addr #42 {
  %4 = extractelement <2 x i32> %1, i64 0
  %5 = extractelement <2 x i32> %1, i64 1
  %6 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  tail call void @llvm.amdgcn.image.store.2d.v4f32.i32(<4 x float> %2, i32 15, i32 %4, i32 %5, <8 x i32> %6, i32 0, i32 0)
  ret void
}

; Function Attrs: nounwind willreturn writeonly
declare void @llvm.amdgcn.image.store.2d.v4f32.i32(<4 x float>, i32 immarg, i32, i32, <8 x i32>, i32 immarg, i32 immarg) #43

; Function Attrs: mustprogress norecurse nounwind willreturn writeonly
define linkonce_odr protected void @__ockl_image_store_2Da(ptr addrspace(4) nocapture noundef readonly %0, <4 x i32> noundef %1, <4 x float> noundef %2) local_unnamed_addr #42 {
  %4 = extractelement <4 x i32> %1, i64 0
  %5 = extractelement <4 x i32> %1, i64 1
  %6 = extractelement <4 x i32> %1, i64 2
  %7 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  tail call void @llvm.amdgcn.image.store.2darray.v4f32.i32(<4 x float> %2, i32 15, i32 %4, i32 %5, i32 %6, <8 x i32> %7, i32 0, i32 0)
  ret void
}

; Function Attrs: nounwind willreturn writeonly
declare void @llvm.amdgcn.image.store.2darray.v4f32.i32(<4 x float>, i32 immarg, i32, i32, i32, <8 x i32>, i32 immarg, i32 immarg) #43

; Function Attrs: mustprogress norecurse nounwind willreturn writeonly
define linkonce_odr protected void @__ockl_image_store_2Dad(ptr addrspace(4) nocapture noundef readonly %0, <4 x i32> noundef %1, float noundef %2) local_unnamed_addr #42 {
  %4 = extractelement <4 x i32> %1, i64 0
  %5 = extractelement <4 x i32> %1, i64 1
  %6 = extractelement <4 x i32> %1, i64 2
  %7 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  tail call void @llvm.amdgcn.image.store.2darray.f32.i32(float %2, i32 1, i32 %4, i32 %5, i32 %6, <8 x i32> %7, i32 0, i32 0)
  ret void
}

; Function Attrs: nounwind willreturn writeonly
declare void @llvm.amdgcn.image.store.2darray.f32.i32(float, i32 immarg, i32, i32, i32, <8 x i32>, i32 immarg, i32 immarg) #43

; Function Attrs: mustprogress norecurse nounwind willreturn writeonly
define linkonce_odr protected void @__ockl_image_store_2Dd(ptr addrspace(4) nocapture noundef readonly %0, <2 x i32> noundef %1, float noundef %2) local_unnamed_addr #42 {
  %4 = extractelement <2 x i32> %1, i64 0
  %5 = extractelement <2 x i32> %1, i64 1
  %6 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  tail call void @llvm.amdgcn.image.store.2d.f32.i32(float %2, i32 15, i32 %4, i32 %5, <8 x i32> %6, i32 0, i32 0)
  ret void
}

; Function Attrs: nounwind willreturn writeonly
declare void @llvm.amdgcn.image.store.2d.f32.i32(float, i32 immarg, i32, i32, <8 x i32>, i32 immarg, i32 immarg) #43

; Function Attrs: mustprogress norecurse nounwind willreturn writeonly
define linkonce_odr protected void @__ockl_image_store_3D(ptr addrspace(4) nocapture noundef readonly %0, <4 x i32> noundef %1, <4 x float> noundef %2) local_unnamed_addr #42 {
  %4 = extractelement <4 x i32> %1, i64 0
  %5 = extractelement <4 x i32> %1, i64 1
  %6 = extractelement <4 x i32> %1, i64 2
  %7 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  tail call void @llvm.amdgcn.image.store.3d.v4f32.i32(<4 x float> %2, i32 15, i32 %4, i32 %5, i32 %6, <8 x i32> %7, i32 0, i32 0)
  ret void
}

; Function Attrs: nounwind willreturn writeonly
declare void @llvm.amdgcn.image.store.3d.v4f32.i32(<4 x float>, i32 immarg, i32, i32, i32, <8 x i32>, i32 immarg, i32 immarg) #43

; Function Attrs: mustprogress norecurse nounwind willreturn writeonly
define linkonce_odr protected void @__ockl_image_store_CM(ptr addrspace(4) nocapture noundef readonly %0, <2 x i32> noundef %1, i32 noundef %2, <4 x float> noundef %3) local_unnamed_addr #42 {
  %5 = extractelement <2 x i32> %1, i64 0
  %6 = extractelement <2 x i32> %1, i64 1
  %7 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  tail call void @llvm.amdgcn.image.store.cube.v4f32.i32(<4 x float> %3, i32 15, i32 %5, i32 %6, i32 %2, <8 x i32> %7, i32 0, i32 0)
  ret void
}

; Function Attrs: nounwind willreturn writeonly
declare void @llvm.amdgcn.image.store.cube.v4f32.i32(<4 x float>, i32 immarg, i32, i32, i32, <8 x i32>, i32 immarg, i32 immarg) #43

; Function Attrs: mustprogress norecurse nounwind willreturn writeonly
define linkonce_odr protected void @__ockl_image_store_CMa(ptr addrspace(4) nocapture noundef readonly %0, <4 x i32> noundef %1, i32 noundef %2, <4 x float> noundef %3) local_unnamed_addr #42 {
  %5 = extractelement <4 x i32> %1, i64 2
  %6 = shl i32 %5, 8
  %7 = ashr exact i32 %6, 8
  %8 = mul nsw i32 %7, 6
  %9 = add nsw i32 %8, %2
  %10 = extractelement <4 x i32> %1, i64 0
  %11 = extractelement <4 x i32> %1, i64 1
  %12 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  tail call void @llvm.amdgcn.image.store.cube.v4f32.i32(<4 x float> %3, i32 15, i32 %10, i32 %11, i32 %9, <8 x i32> %12, i32 0, i32 0)
  ret void
}

; Function Attrs: mustprogress norecurse nounwind willreturn writeonly
define linkonce_odr protected void @__ockl_image_store_lod_1D(ptr addrspace(4) nocapture noundef readonly %0, i32 noundef %1, i32 noundef %2, <4 x float> noundef %3) local_unnamed_addr #42 {
  %5 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  tail call void @llvm.amdgcn.image.store.mip.1d.v4f32.i32(<4 x float> %3, i32 15, i32 %1, i32 %2, <8 x i32> %5, i32 0, i32 0)
  ret void
}

; Function Attrs: nounwind willreturn writeonly
declare void @llvm.amdgcn.image.store.mip.1d.v4f32.i32(<4 x float>, i32 immarg, i32, i32, <8 x i32>, i32 immarg, i32 immarg) #43

; Function Attrs: mustprogress norecurse nounwind willreturn writeonly
define linkonce_odr protected void @__ockl_image_store_lod_1Da(ptr addrspace(4) nocapture noundef readonly %0, <2 x i32> noundef %1, i32 noundef %2, <4 x float> noundef %3) local_unnamed_addr #42 {
  %5 = extractelement <2 x i32> %1, i64 0
  %6 = extractelement <2 x i32> %1, i64 1
  %7 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  tail call void @llvm.amdgcn.image.store.mip.1darray.v4f32.i32(<4 x float> %3, i32 15, i32 %5, i32 %6, i32 %2, <8 x i32> %7, i32 0, i32 0)
  ret void
}

; Function Attrs: nounwind willreturn writeonly
declare void @llvm.amdgcn.image.store.mip.1darray.v4f32.i32(<4 x float>, i32 immarg, i32, i32, i32, <8 x i32>, i32 immarg, i32 immarg) #43

; Function Attrs: mustprogress norecurse nounwind willreturn writeonly
define linkonce_odr protected void @__ockl_image_store_lod_2D(ptr addrspace(4) nocapture noundef readonly %0, <2 x i32> noundef %1, i32 noundef %2, <4 x float> noundef %3) local_unnamed_addr #42 {
  %5 = extractelement <2 x i32> %1, i64 0
  %6 = extractelement <2 x i32> %1, i64 1
  %7 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  tail call void @llvm.amdgcn.image.store.mip.2d.v4f32.i32(<4 x float> %3, i32 15, i32 %5, i32 %6, i32 %2, <8 x i32> %7, i32 0, i32 0)
  ret void
}

; Function Attrs: nounwind willreturn writeonly
declare void @llvm.amdgcn.image.store.mip.2d.v4f32.i32(<4 x float>, i32 immarg, i32, i32, i32, <8 x i32>, i32 immarg, i32 immarg) #43

; Function Attrs: mustprogress norecurse nounwind willreturn writeonly
define linkonce_odr protected void @__ockl_image_store_lod_2Da(ptr addrspace(4) nocapture noundef readonly %0, <4 x i32> noundef %1, i32 noundef %2, <4 x float> noundef %3) local_unnamed_addr #42 {
  %5 = extractelement <4 x i32> %1, i64 0
  %6 = extractelement <4 x i32> %1, i64 1
  %7 = extractelement <4 x i32> %1, i64 2
  %8 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  tail call void @llvm.amdgcn.image.store.mip.2darray.v4f32.i32(<4 x float> %3, i32 15, i32 %5, i32 %6, i32 %7, i32 %2, <8 x i32> %8, i32 0, i32 0)
  ret void
}

; Function Attrs: nounwind willreturn writeonly
declare void @llvm.amdgcn.image.store.mip.2darray.v4f32.i32(<4 x float>, i32 immarg, i32, i32, i32, i32, <8 x i32>, i32 immarg, i32 immarg) #43

; Function Attrs: mustprogress norecurse nounwind willreturn writeonly
define linkonce_odr protected void @__ockl_image_store_lod_2Dad(ptr addrspace(4) nocapture noundef readonly %0, <4 x i32> noundef %1, i32 noundef %2, float noundef %3) local_unnamed_addr #42 {
  %5 = extractelement <4 x i32> %1, i64 0
  %6 = extractelement <4 x i32> %1, i64 1
  %7 = extractelement <4 x i32> %1, i64 2
  %8 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  tail call void @llvm.amdgcn.image.store.mip.2darray.f32.i32(float %3, i32 1, i32 %5, i32 %6, i32 %7, i32 %2, <8 x i32> %8, i32 0, i32 0)
  ret void
}

; Function Attrs: nounwind willreturn writeonly
declare void @llvm.amdgcn.image.store.mip.2darray.f32.i32(float, i32 immarg, i32, i32, i32, i32, <8 x i32>, i32 immarg, i32 immarg) #43

; Function Attrs: mustprogress norecurse nounwind willreturn writeonly
define linkonce_odr protected void @__ockl_image_store_lod_2Dd(ptr addrspace(4) nocapture noundef readonly %0, <2 x i32> noundef %1, i32 noundef %2, float noundef %3) local_unnamed_addr #42 {
  %5 = extractelement <2 x i32> %1, i64 0
  %6 = extractelement <2 x i32> %1, i64 1
  %7 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  tail call void @llvm.amdgcn.image.store.mip.2d.f32.i32(float %3, i32 1, i32 %5, i32 %6, i32 %2, <8 x i32> %7, i32 0, i32 0)
  ret void
}

; Function Attrs: nounwind willreturn writeonly
declare void @llvm.amdgcn.image.store.mip.2d.f32.i32(float, i32 immarg, i32, i32, i32, <8 x i32>, i32 immarg, i32 immarg) #43

; Function Attrs: mustprogress norecurse nounwind willreturn writeonly
define linkonce_odr protected void @__ockl_image_store_lod_3D(ptr addrspace(4) nocapture noundef readonly %0, <4 x i32> noundef %1, i32 noundef %2, <4 x float> noundef %3) local_unnamed_addr #42 {
  %5 = extractelement <4 x i32> %1, i64 0
  %6 = extractelement <4 x i32> %1, i64 1
  %7 = extractelement <4 x i32> %1, i64 2
  %8 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  tail call void @llvm.amdgcn.image.store.mip.3d.v4f32.i32(<4 x float> %3, i32 15, i32 %5, i32 %6, i32 %7, i32 %2, <8 x i32> %8, i32 0, i32 0)
  ret void
}

; Function Attrs: nounwind willreturn writeonly
declare void @llvm.amdgcn.image.store.mip.3d.v4f32.i32(<4 x float>, i32 immarg, i32, i32, i32, i32, <8 x i32>, i32 immarg, i32 immarg) #43

; Function Attrs: mustprogress norecurse nounwind willreturn writeonly
define linkonce_odr protected void @__ockl_image_store_lod_CM(ptr addrspace(4) nocapture noundef readonly %0, <2 x i32> noundef %1, i32 noundef %2, i32 noundef %3, <4 x float> noundef %4) local_unnamed_addr #42 {
  %6 = extractelement <2 x i32> %1, i64 0
  %7 = extractelement <2 x i32> %1, i64 1
  %8 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  tail call void @llvm.amdgcn.image.store.mip.cube.v4f32.i32(<4 x float> %4, i32 15, i32 %6, i32 %7, i32 %2, i32 %3, <8 x i32> %8, i32 0, i32 0)
  ret void
}

; Function Attrs: nounwind willreturn writeonly
declare void @llvm.amdgcn.image.store.mip.cube.v4f32.i32(<4 x float>, i32 immarg, i32, i32, i32, i32, <8 x i32>, i32 immarg, i32 immarg) #43

; Function Attrs: mustprogress norecurse nounwind willreturn writeonly
define linkonce_odr protected void @__ockl_image_store_lod_CMa(ptr addrspace(4) nocapture noundef readonly %0, <4 x i32> noundef %1, i32 noundef %2, i32 noundef %3, <4 x float> noundef %4) local_unnamed_addr #42 {
  %6 = extractelement <4 x i32> %1, i64 2
  %7 = shl i32 %6, 8
  %8 = ashr exact i32 %7, 8
  %9 = mul nsw i32 %8, 6
  %10 = add nsw i32 %9, %2
  %11 = extractelement <4 x i32> %1, i64 0
  %12 = extractelement <4 x i32> %1, i64 1
  %13 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  tail call void @llvm.amdgcn.image.store.mip.cube.v4f32.i32(<4 x float> %4, i32 15, i32 %11, i32 %12, i32 %10, i32 %3, <8 x i32> %13, i32 0, i32 0)
  ret void
}

; Function Attrs: mustprogress norecurse nounwind willreturn writeonly
define linkonce_odr protected void @__ockl_image_storeh_1D(ptr addrspace(4) nocapture noundef readonly %0, i32 noundef %1, <4 x half> noundef %2) local_unnamed_addr #42 {
  %4 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  tail call void @llvm.amdgcn.image.store.1d.v4f16.i32(<4 x half> %2, i32 15, i32 %1, <8 x i32> %4, i32 0, i32 0)
  ret void
}

; Function Attrs: nounwind willreturn writeonly
declare void @llvm.amdgcn.image.store.1d.v4f16.i32(<4 x half>, i32 immarg, i32, <8 x i32>, i32 immarg, i32 immarg) #43

; Function Attrs: mustprogress norecurse nounwind willreturn writeonly
define linkonce_odr protected void @__ockl_image_storeh_1Da(ptr addrspace(4) nocapture noundef readonly %0, <2 x i32> noundef %1, <4 x half> noundef %2) local_unnamed_addr #42 {
  %4 = extractelement <2 x i32> %1, i64 0
  %5 = extractelement <2 x i32> %1, i64 1
  %6 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  tail call void @llvm.amdgcn.image.store.1darray.v4f16.i32(<4 x half> %2, i32 15, i32 %4, i32 %5, <8 x i32> %6, i32 0, i32 0)
  ret void
}

; Function Attrs: nounwind willreturn writeonly
declare void @llvm.amdgcn.image.store.1darray.v4f16.i32(<4 x half>, i32 immarg, i32, i32, <8 x i32>, i32 immarg, i32 immarg) #43

; Function Attrs: convergent mustprogress norecurse nounwind willreturn writeonly
define linkonce_odr protected void @__ockl_image_storeh_1Db(ptr addrspace(4) nocapture noundef readonly %0, i32 noundef %1, <4 x half> noundef %2) local_unnamed_addr #44 {
  %4 = load <4 x i32>, ptr addrspace(4) %0, align 16, !tbaa !49
  tail call void @llvm.amdgcn.struct.buffer.store.format.v4f16(<4 x half> noundef %2, <4 x i32> noundef %4, i32 noundef %1, i32 noundef 0, i32 noundef 0, i32 noundef 0) #57
  ret void
}

; Function Attrs: nounwind willreturn writeonly
declare void @llvm.amdgcn.struct.buffer.store.format.v4f16(<4 x half>, <4 x i32>, i32, i32, i32, i32 immarg) #43

; Function Attrs: mustprogress norecurse nounwind willreturn writeonly
define linkonce_odr protected void @__ockl_image_storeh_2D(ptr addrspace(4) nocapture noundef readonly %0, <2 x i32> noundef %1, <4 x half> noundef %2) local_unnamed_addr #42 {
  %4 = extractelement <2 x i32> %1, i64 0
  %5 = extractelement <2 x i32> %1, i64 1
  %6 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  tail call void @llvm.amdgcn.image.store.2d.v4f16.i32(<4 x half> %2, i32 15, i32 %4, i32 %5, <8 x i32> %6, i32 0, i32 0)
  ret void
}

; Function Attrs: nounwind willreturn writeonly
declare void @llvm.amdgcn.image.store.2d.v4f16.i32(<4 x half>, i32 immarg, i32, i32, <8 x i32>, i32 immarg, i32 immarg) #43

; Function Attrs: mustprogress norecurse nounwind willreturn writeonly
define linkonce_odr protected void @__ockl_image_storeh_2Da(ptr addrspace(4) nocapture noundef readonly %0, <4 x i32> noundef %1, <4 x half> noundef %2) local_unnamed_addr #42 {
  %4 = extractelement <4 x i32> %1, i64 0
  %5 = extractelement <4 x i32> %1, i64 1
  %6 = extractelement <4 x i32> %1, i64 2
  %7 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  tail call void @llvm.amdgcn.image.store.2darray.v4f16.i32(<4 x half> %2, i32 15, i32 %4, i32 %5, i32 %6, <8 x i32> %7, i32 0, i32 0)
  ret void
}

; Function Attrs: nounwind willreturn writeonly
declare void @llvm.amdgcn.image.store.2darray.v4f16.i32(<4 x half>, i32 immarg, i32, i32, i32, <8 x i32>, i32 immarg, i32 immarg) #43

; Function Attrs: mustprogress norecurse nounwind willreturn writeonly
define linkonce_odr protected void @__ockl_image_storeh_3D(ptr addrspace(4) nocapture noundef readonly %0, <4 x i32> noundef %1, <4 x half> noundef %2) local_unnamed_addr #42 {
  %4 = extractelement <4 x i32> %1, i64 0
  %5 = extractelement <4 x i32> %1, i64 1
  %6 = extractelement <4 x i32> %1, i64 2
  %7 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  tail call void @llvm.amdgcn.image.store.3d.v4f16.i32(<4 x half> %2, i32 15, i32 %4, i32 %5, i32 %6, <8 x i32> %7, i32 0, i32 0)
  ret void
}

; Function Attrs: nounwind willreturn writeonly
declare void @llvm.amdgcn.image.store.3d.v4f16.i32(<4 x half>, i32 immarg, i32, i32, i32, <8 x i32>, i32 immarg, i32 immarg) #43

; Function Attrs: mustprogress norecurse nounwind willreturn writeonly
define linkonce_odr protected void @__ockl_image_storeh_CM(ptr addrspace(4) nocapture noundef readonly %0, <2 x i32> noundef %1, i32 noundef %2, <4 x half> noundef %3) local_unnamed_addr #42 {
  %5 = extractelement <2 x i32> %1, i64 0
  %6 = extractelement <2 x i32> %1, i64 1
  %7 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  tail call void @llvm.amdgcn.image.store.cube.v4f16.i32(<4 x half> %3, i32 15, i32 %5, i32 %6, i32 %2, <8 x i32> %7, i32 0, i32 0)
  ret void
}

; Function Attrs: nounwind willreturn writeonly
declare void @llvm.amdgcn.image.store.cube.v4f16.i32(<4 x half>, i32 immarg, i32, i32, i32, <8 x i32>, i32 immarg, i32 immarg) #43

; Function Attrs: mustprogress norecurse nounwind willreturn writeonly
define linkonce_odr protected void @__ockl_image_storeh_CMa(ptr addrspace(4) nocapture noundef readonly %0, <4 x i32> noundef %1, i32 noundef %2, <4 x half> noundef %3) local_unnamed_addr #42 {
  %5 = extractelement <4 x i32> %1, i64 2
  %6 = shl i32 %5, 8
  %7 = ashr exact i32 %6, 8
  %8 = mul nsw i32 %7, 6
  %9 = add nsw i32 %8, %2
  %10 = extractelement <4 x i32> %1, i64 0
  %11 = extractelement <4 x i32> %1, i64 1
  %12 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  tail call void @llvm.amdgcn.image.store.cube.v4f16.i32(<4 x half> %3, i32 15, i32 %10, i32 %11, i32 %9, <8 x i32> %12, i32 0, i32 0)
  ret void
}

; Function Attrs: mustprogress norecurse nounwind willreturn writeonly
define linkonce_odr protected void @__ockl_image_storeh_lod_1D(ptr addrspace(4) nocapture noundef readonly %0, i32 noundef %1, i32 noundef %2, <4 x half> noundef %3) local_unnamed_addr #42 {
  %5 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  tail call void @llvm.amdgcn.image.store.mip.1d.v4f16.i32(<4 x half> %3, i32 15, i32 %1, i32 %2, <8 x i32> %5, i32 0, i32 0)
  ret void
}

; Function Attrs: nounwind willreturn writeonly
declare void @llvm.amdgcn.image.store.mip.1d.v4f16.i32(<4 x half>, i32 immarg, i32, i32, <8 x i32>, i32 immarg, i32 immarg) #43

; Function Attrs: mustprogress norecurse nounwind willreturn writeonly
define linkonce_odr protected void @__ockl_image_storeh_lod_1Da(ptr addrspace(4) nocapture noundef readonly %0, <2 x i32> noundef %1, i32 noundef %2, <4 x half> noundef %3) local_unnamed_addr #42 {
  %5 = extractelement <2 x i32> %1, i64 0
  %6 = extractelement <2 x i32> %1, i64 1
  %7 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  tail call void @llvm.amdgcn.image.store.mip.1darray.v4f16.i32(<4 x half> %3, i32 15, i32 %5, i32 %6, i32 %2, <8 x i32> %7, i32 0, i32 0)
  ret void
}

; Function Attrs: nounwind willreturn writeonly
declare void @llvm.amdgcn.image.store.mip.1darray.v4f16.i32(<4 x half>, i32 immarg, i32, i32, i32, <8 x i32>, i32 immarg, i32 immarg) #43

; Function Attrs: mustprogress norecurse nounwind willreturn writeonly
define linkonce_odr protected void @__ockl_image_storeh_lod_2D(ptr addrspace(4) nocapture noundef readonly %0, <2 x i32> noundef %1, i32 noundef %2, <4 x half> noundef %3) local_unnamed_addr #42 {
  %5 = extractelement <2 x i32> %1, i64 0
  %6 = extractelement <2 x i32> %1, i64 1
  %7 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  tail call void @llvm.amdgcn.image.store.mip.2d.v4f16.i32(<4 x half> %3, i32 15, i32 %5, i32 %6, i32 %2, <8 x i32> %7, i32 0, i32 0)
  ret void
}

; Function Attrs: nounwind willreturn writeonly
declare void @llvm.amdgcn.image.store.mip.2d.v4f16.i32(<4 x half>, i32 immarg, i32, i32, i32, <8 x i32>, i32 immarg, i32 immarg) #43

; Function Attrs: mustprogress norecurse nounwind willreturn writeonly
define linkonce_odr protected void @__ockl_image_storeh_lod_2Da(ptr addrspace(4) nocapture noundef readonly %0, <4 x i32> noundef %1, i32 noundef %2, <4 x half> noundef %3) local_unnamed_addr #42 {
  %5 = extractelement <4 x i32> %1, i64 0
  %6 = extractelement <4 x i32> %1, i64 1
  %7 = extractelement <4 x i32> %1, i64 2
  %8 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  tail call void @llvm.amdgcn.image.store.mip.2darray.v4f16.i32(<4 x half> %3, i32 15, i32 %5, i32 %6, i32 %7, i32 %2, <8 x i32> %8, i32 0, i32 0)
  ret void
}

; Function Attrs: nounwind willreturn writeonly
declare void @llvm.amdgcn.image.store.mip.2darray.v4f16.i32(<4 x half>, i32 immarg, i32, i32, i32, i32, <8 x i32>, i32 immarg, i32 immarg) #43

; Function Attrs: mustprogress norecurse nounwind willreturn writeonly
define linkonce_odr protected void @__ockl_image_storeh_lod_3D(ptr addrspace(4) nocapture noundef readonly %0, <4 x i32> noundef %1, i32 noundef %2, <4 x half> noundef %3) local_unnamed_addr #42 {
  %5 = extractelement <4 x i32> %1, i64 0
  %6 = extractelement <4 x i32> %1, i64 1
  %7 = extractelement <4 x i32> %1, i64 2
  %8 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  tail call void @llvm.amdgcn.image.store.mip.3d.v4f16.i32(<4 x half> %3, i32 15, i32 %5, i32 %6, i32 %7, i32 %2, <8 x i32> %8, i32 0, i32 0)
  ret void
}

; Function Attrs: nounwind willreturn writeonly
declare void @llvm.amdgcn.image.store.mip.3d.v4f16.i32(<4 x half>, i32 immarg, i32, i32, i32, i32, <8 x i32>, i32 immarg, i32 immarg) #43

; Function Attrs: mustprogress norecurse nounwind willreturn writeonly
define linkonce_odr protected void @__ockl_image_storeh_lod_CM(ptr addrspace(4) nocapture noundef readonly %0, <2 x i32> noundef %1, i32 noundef %2, i32 noundef %3, <4 x half> noundef %4) local_unnamed_addr #42 {
  %6 = extractelement <2 x i32> %1, i64 0
  %7 = extractelement <2 x i32> %1, i64 1
  %8 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  tail call void @llvm.amdgcn.image.store.mip.cube.v4f16.i32(<4 x half> %4, i32 15, i32 %6, i32 %7, i32 %2, i32 %3, <8 x i32> %8, i32 0, i32 0)
  ret void
}

; Function Attrs: nounwind willreturn writeonly
declare void @llvm.amdgcn.image.store.mip.cube.v4f16.i32(<4 x half>, i32 immarg, i32, i32, i32, i32, <8 x i32>, i32 immarg, i32 immarg) #43

; Function Attrs: mustprogress norecurse nounwind willreturn writeonly
define linkonce_odr protected void @__ockl_image_storeh_lod_CMa(ptr addrspace(4) nocapture noundef readonly %0, <4 x i32> noundef %1, i32 noundef %2, i32 noundef %3, <4 x half> noundef %4) local_unnamed_addr #42 {
  %6 = extractelement <4 x i32> %1, i64 2
  %7 = shl i32 %6, 8
  %8 = ashr exact i32 %7, 8
  %9 = mul nsw i32 %8, 6
  %10 = add nsw i32 %9, %2
  %11 = extractelement <4 x i32> %1, i64 0
  %12 = extractelement <4 x i32> %1, i64 1
  %13 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  tail call void @llvm.amdgcn.image.store.mip.cube.v4f16.i32(<4 x half> %4, i32 15, i32 %11, i32 %12, i32 %10, i32 %3, <8 x i32> %13, i32 0, i32 0)
  ret void
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected <4 x float> @__ockl_image_sample_1D(ptr addrspace(4) nocapture noundef readonly %0, ptr addrspace(4) nocapture noundef readonly %1, float noundef %2) local_unnamed_addr #45 {
  %4 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 10
  %5 = load i32, ptr addrspace(4) %4, align 4, !tbaa !11
  %6 = uitofp i32 %5 to float
  %7 = load i32, ptr addrspace(4) %1, align 4, !tbaa !11
  %8 = and i32 %7, 32768
  %9 = icmp eq i32 %8, 0
  %10 = select i1 %9, float %6, float 1.000000e+00
  %11 = fmul float %10, %2
  %12 = tail call float @llvm.floor.f32(float %11)
  %13 = tail call float @llvm.amdgcn.rcp.f32(float %10)
  %14 = fmul float %13, %12
  %15 = getelementptr inbounds i32, ptr addrspace(4) %1, i64 2
  %16 = load i32, ptr addrspace(4) %15, align 4, !tbaa !11
  %17 = and i32 %16, 1048576
  %18 = icmp eq i32 %17, 0
  %19 = select i1 %18, float %14, float %2
  %20 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %21 = icmp eq i32 %20, 9010
  %22 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %23 = load <4 x i32>, ptr addrspace(4) %1, align 16, !tbaa !49
  br i1 %21, label %26, label %24

24:                                               ; preds = %3
  %25 = tail call fastcc <4 x float> @18(float noundef %19, <8 x i32> noundef %22, <4 x i32> noundef %23) #40
  br label %28

26:                                               ; preds = %3
  %27 = tail call <4 x float> @llvm.amdgcn.image.sample.1d.v4f32.f32(i32 15, float %19, <8 x i32> %22, <4 x i32> %23, i1 false, i32 0, i32 0)
  br label %28

28:                                               ; preds = %26, %24
  %29 = phi <4 x float> [ %25, %24 ], [ %27, %26 ]
  ret <4 x float> %29
}

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.floor.f32(float) #4

; Function Attrs: nounwind readnone speculatable willreturn
declare float @llvm.amdgcn.rcp.f32(float) #9

; Function Attrs: mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc <4 x float> @18(float noundef %0, <8 x i32> noundef %1, <4 x i32> noundef %2) unnamed_addr #46 {
  %4 = tail call <4 x float> @llvm.amdgcn.image.sample.lz.1d.v4f32.f32(i32 15, float %0, <8 x i32> %1, <4 x i32> %2, i1 false, i32 0, i32 0)
  ret <4 x float> %4
}

; Function Attrs: nounwind readonly willreturn
declare <4 x float> @llvm.amdgcn.image.sample.1d.v4f32.f32(i32 immarg, float, <8 x i32>, <4 x i32>, i1 immarg, i32 immarg, i32 immarg) #40

; Function Attrs: nounwind readonly willreturn
declare <4 x float> @llvm.amdgcn.image.sample.lz.1d.v4f32.f32(i32 immarg, float, <8 x i32>, <4 x i32>, i1 immarg, i32 immarg, i32 immarg) #40

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected <4 x float> @__ockl_image_sample_1Da(ptr addrspace(4) nocapture noundef readonly %0, ptr addrspace(4) nocapture noundef readonly %1, <2 x float> noundef %2) local_unnamed_addr #45 {
  %4 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 10
  %5 = load i32, ptr addrspace(4) %4, align 4, !tbaa !11
  %6 = uitofp i32 %5 to float
  %7 = load i32, ptr addrspace(4) %1, align 4, !tbaa !11
  %8 = and i32 %7, 32768
  %9 = icmp eq i32 %8, 0
  %10 = select i1 %9, float %6, float 1.000000e+00
  %11 = extractelement <2 x float> %2, i64 0
  %12 = fmul float %11, %10
  %13 = tail call float @llvm.floor.f32(float %12)
  %14 = tail call float @llvm.amdgcn.rcp.f32(float %10)
  %15 = fmul float %14, %13
  %16 = getelementptr inbounds i32, ptr addrspace(4) %1, i64 2
  %17 = load i32, ptr addrspace(4) %16, align 4, !tbaa !11
  %18 = and i32 %17, 1048576
  %19 = icmp eq i32 %18, 0
  %20 = select i1 %19, float %15, float %11
  %21 = extractelement <2 x float> %2, i64 1
  %22 = tail call float @llvm.rint.f32(float %21)
  %23 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %24 = icmp eq i32 %23, 9010
  %25 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %26 = load <4 x i32>, ptr addrspace(4) %1, align 16, !tbaa !49
  br i1 %24, label %29, label %27

27:                                               ; preds = %3
  %28 = tail call fastcc <4 x float> @19(float noundef %20, float noundef %22, <8 x i32> noundef %25, <4 x i32> noundef %26) #40
  br label %31

29:                                               ; preds = %3
  %30 = tail call <4 x float> @llvm.amdgcn.image.sample.1darray.v4f32.f32(i32 15, float %20, float %22, <8 x i32> %25, <4 x i32> %26, i1 false, i32 0, i32 0)
  br label %31

31:                                               ; preds = %29, %27
  %32 = phi <4 x float> [ %28, %27 ], [ %30, %29 ]
  ret <4 x float> %32
}

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.rint.f32(float) #4

; Function Attrs: mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc <4 x float> @19(float noundef %0, float noundef %1, <8 x i32> noundef %2, <4 x i32> noundef %3) unnamed_addr #46 {
  %5 = tail call <4 x float> @llvm.amdgcn.image.sample.lz.1darray.v4f32.f32(i32 15, float %0, float %1, <8 x i32> %2, <4 x i32> %3, i1 false, i32 0, i32 0)
  ret <4 x float> %5
}

; Function Attrs: nounwind readonly willreturn
declare <4 x float> @llvm.amdgcn.image.sample.1darray.v4f32.f32(i32 immarg, float, float, <8 x i32>, <4 x i32>, i1 immarg, i32 immarg, i32 immarg) #40

; Function Attrs: nounwind readonly willreturn
declare <4 x float> @llvm.amdgcn.image.sample.lz.1darray.v4f32.f32(i32 immarg, float, float, <8 x i32>, <4 x i32>, i1 immarg, i32 immarg, i32 immarg) #40

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected <4 x float> @__ockl_image_sample_2D(ptr addrspace(4) nocapture noundef readonly %0, ptr addrspace(4) nocapture noundef readonly %1, <2 x float> noundef %2) local_unnamed_addr #45 {
  %4 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 10
  %5 = load i32, ptr addrspace(4) %4, align 4, !tbaa !11
  %6 = uitofp i32 %5 to float
  %7 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 2
  %8 = load i32, ptr addrspace(4) %7, align 4, !tbaa !11
  %9 = lshr i32 %8, 14
  %10 = and i32 %9, 16383
  %11 = add nuw nsw i32 %10, 1
  %12 = uitofp i32 %11 to float
  %13 = load i32, ptr addrspace(4) %1, align 4, !tbaa !11
  %14 = and i32 %13, 32768
  %15 = icmp eq i32 %14, 0
  %16 = select i1 %15, float %6, float 1.000000e+00
  %17 = select i1 %15, float %12, float 1.000000e+00
  %18 = extractelement <2 x float> %2, i64 0
  %19 = fmul float %18, %16
  %20 = tail call float @llvm.floor.f32(float %19)
  %21 = tail call float @llvm.amdgcn.rcp.f32(float %16)
  %22 = fmul float %21, %20
  %23 = extractelement <2 x float> %2, i64 1
  %24 = fmul float %23, %17
  %25 = tail call float @llvm.floor.f32(float %24)
  %26 = tail call float @llvm.amdgcn.rcp.f32(float %17)
  %27 = fmul float %26, %25
  %28 = getelementptr inbounds i32, ptr addrspace(4) %1, i64 2
  %29 = load i32, ptr addrspace(4) %28, align 4, !tbaa !11
  %30 = and i32 %29, 1048576
  %31 = icmp eq i32 %30, 0
  %32 = select i1 %31, float %22, float %18
  %33 = select i1 %31, float %27, float %23
  %34 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %35 = icmp eq i32 %34, 9010
  %36 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %37 = load <4 x i32>, ptr addrspace(4) %1, align 16, !tbaa !49
  br i1 %35, label %40, label %38

38:                                               ; preds = %3
  %39 = tail call fastcc <4 x float> @20(float noundef %32, float noundef %33, <8 x i32> noundef %36, <4 x i32> noundef %37) #40
  br label %42

40:                                               ; preds = %3
  %41 = tail call <4 x float> @llvm.amdgcn.image.sample.2d.v4f32.f32(i32 15, float %32, float %33, <8 x i32> %36, <4 x i32> %37, i1 false, i32 0, i32 0)
  br label %42

42:                                               ; preds = %40, %38
  %43 = phi <4 x float> [ %39, %38 ], [ %41, %40 ]
  ret <4 x float> %43
}

; Function Attrs: mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc <4 x float> @20(float noundef %0, float noundef %1, <8 x i32> noundef %2, <4 x i32> noundef %3) unnamed_addr #46 {
  %5 = tail call <4 x float> @llvm.amdgcn.image.sample.lz.2d.v4f32.f32(i32 15, float %0, float %1, <8 x i32> %2, <4 x i32> %3, i1 false, i32 0, i32 0)
  ret <4 x float> %5
}

; Function Attrs: nounwind readonly willreturn
declare <4 x float> @llvm.amdgcn.image.sample.2d.v4f32.f32(i32 immarg, float, float, <8 x i32>, <4 x i32>, i1 immarg, i32 immarg, i32 immarg) #40

; Function Attrs: nounwind readonly willreturn
declare <4 x float> @llvm.amdgcn.image.sample.lz.2d.v4f32.f32(i32 immarg, float, float, <8 x i32>, <4 x i32>, i1 immarg, i32 immarg, i32 immarg) #40

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected <4 x float> @__ockl_image_sample_2Da(ptr addrspace(4) nocapture noundef readonly %0, ptr addrspace(4) nocapture noundef readonly %1, <4 x float> noundef %2) local_unnamed_addr #45 {
  %4 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 10
  %5 = load i32, ptr addrspace(4) %4, align 4, !tbaa !11
  %6 = uitofp i32 %5 to float
  %7 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 2
  %8 = load i32, ptr addrspace(4) %7, align 4, !tbaa !11
  %9 = lshr i32 %8, 14
  %10 = and i32 %9, 16383
  %11 = add nuw nsw i32 %10, 1
  %12 = uitofp i32 %11 to float
  %13 = load i32, ptr addrspace(4) %1, align 4, !tbaa !11
  %14 = and i32 %13, 32768
  %15 = icmp eq i32 %14, 0
  %16 = select i1 %15, float %6, float 1.000000e+00
  %17 = select i1 %15, float %12, float 1.000000e+00
  %18 = extractelement <4 x float> %2, i64 0
  %19 = fmul float %18, %16
  %20 = tail call float @llvm.floor.f32(float %19)
  %21 = tail call float @llvm.amdgcn.rcp.f32(float %16)
  %22 = fmul float %21, %20
  %23 = extractelement <4 x float> %2, i64 1
  %24 = fmul float %23, %17
  %25 = tail call float @llvm.floor.f32(float %24)
  %26 = tail call float @llvm.amdgcn.rcp.f32(float %17)
  %27 = fmul float %26, %25
  %28 = getelementptr inbounds i32, ptr addrspace(4) %1, i64 2
  %29 = load i32, ptr addrspace(4) %28, align 4, !tbaa !11
  %30 = and i32 %29, 1048576
  %31 = icmp eq i32 %30, 0
  %32 = select i1 %31, float %22, float %18
  %33 = select i1 %31, float %27, float %23
  %34 = extractelement <4 x float> %2, i64 2
  %35 = tail call float @llvm.rint.f32(float %34)
  %36 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %37 = icmp eq i32 %36, 9010
  %38 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %39 = load <4 x i32>, ptr addrspace(4) %1, align 16, !tbaa !49
  br i1 %37, label %42, label %40

40:                                               ; preds = %3
  %41 = tail call fastcc <4 x float> @21(float noundef %32, float noundef %33, float noundef %35, <8 x i32> noundef %38, <4 x i32> noundef %39) #40
  br label %44

42:                                               ; preds = %3
  %43 = tail call <4 x float> @llvm.amdgcn.image.sample.2darray.v4f32.f32(i32 15, float %32, float %33, float %35, <8 x i32> %38, <4 x i32> %39, i1 false, i32 0, i32 0)
  br label %44

44:                                               ; preds = %42, %40
  %45 = phi <4 x float> [ %41, %40 ], [ %43, %42 ]
  ret <4 x float> %45
}

; Function Attrs: mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc <4 x float> @21(float noundef %0, float noundef %1, float noundef %2, <8 x i32> noundef %3, <4 x i32> noundef %4) unnamed_addr #46 {
  %6 = tail call <4 x float> @llvm.amdgcn.image.sample.lz.2darray.v4f32.f32(i32 15, float %0, float %1, float %2, <8 x i32> %3, <4 x i32> %4, i1 false, i32 0, i32 0)
  ret <4 x float> %6
}

; Function Attrs: nounwind readonly willreturn
declare <4 x float> @llvm.amdgcn.image.sample.2darray.v4f32.f32(i32 immarg, float, float, float, <8 x i32>, <4 x i32>, i1 immarg, i32 immarg, i32 immarg) #40

; Function Attrs: nounwind readonly willreturn
declare <4 x float> @llvm.amdgcn.image.sample.lz.2darray.v4f32.f32(i32 immarg, float, float, float, <8 x i32>, <4 x i32>, i1 immarg, i32 immarg, i32 immarg) #40

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected float @__ockl_image_sample_2Dad(ptr addrspace(4) nocapture noundef readonly %0, ptr addrspace(4) nocapture noundef readonly %1, <4 x float> noundef %2) local_unnamed_addr #45 {
  %4 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 10
  %5 = load i32, ptr addrspace(4) %4, align 4, !tbaa !11
  %6 = uitofp i32 %5 to float
  %7 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 2
  %8 = load i32, ptr addrspace(4) %7, align 4, !tbaa !11
  %9 = lshr i32 %8, 14
  %10 = and i32 %9, 16383
  %11 = add nuw nsw i32 %10, 1
  %12 = uitofp i32 %11 to float
  %13 = load i32, ptr addrspace(4) %1, align 4, !tbaa !11
  %14 = and i32 %13, 32768
  %15 = icmp eq i32 %14, 0
  %16 = select i1 %15, float %6, float 1.000000e+00
  %17 = select i1 %15, float %12, float 1.000000e+00
  %18 = extractelement <4 x float> %2, i64 0
  %19 = fmul float %18, %16
  %20 = tail call float @llvm.floor.f32(float %19)
  %21 = tail call float @llvm.amdgcn.rcp.f32(float %16)
  %22 = fmul float %21, %20
  %23 = extractelement <4 x float> %2, i64 1
  %24 = fmul float %23, %17
  %25 = tail call float @llvm.floor.f32(float %24)
  %26 = tail call float @llvm.amdgcn.rcp.f32(float %17)
  %27 = fmul float %26, %25
  %28 = getelementptr inbounds i32, ptr addrspace(4) %1, i64 2
  %29 = load i32, ptr addrspace(4) %28, align 4, !tbaa !11
  %30 = and i32 %29, 1048576
  %31 = icmp eq i32 %30, 0
  %32 = select i1 %31, float %22, float %18
  %33 = select i1 %31, float %27, float %23
  %34 = extractelement <4 x float> %2, i64 2
  %35 = tail call float @llvm.rint.f32(float %34)
  %36 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %37 = icmp eq i32 %36, 9010
  %38 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %39 = load <4 x i32>, ptr addrspace(4) %1, align 16, !tbaa !49
  br i1 %37, label %42, label %40

40:                                               ; preds = %3
  %41 = tail call fastcc float @22(float noundef %32, float noundef %33, float noundef %35, <8 x i32> noundef %38, <4 x i32> noundef %39) #40
  br label %44

42:                                               ; preds = %3
  %43 = tail call float @llvm.amdgcn.image.sample.2darray.f32.f32(i32 1, float %32, float %33, float %35, <8 x i32> %38, <4 x i32> %39, i1 false, i32 0, i32 0)
  br label %44

44:                                               ; preds = %42, %40
  %45 = phi float [ %41, %40 ], [ %43, %42 ]
  ret float %45
}

; Function Attrs: mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc float @22(float noundef %0, float noundef %1, float noundef %2, <8 x i32> noundef %3, <4 x i32> noundef %4) unnamed_addr #46 {
  %6 = tail call float @llvm.amdgcn.image.sample.lz.2darray.f32.f32(i32 1, float %0, float %1, float %2, <8 x i32> %3, <4 x i32> %4, i1 false, i32 0, i32 0)
  ret float %6
}

; Function Attrs: nounwind readonly willreturn
declare float @llvm.amdgcn.image.sample.2darray.f32.f32(i32 immarg, float, float, float, <8 x i32>, <4 x i32>, i1 immarg, i32 immarg, i32 immarg) #40

; Function Attrs: nounwind readonly willreturn
declare float @llvm.amdgcn.image.sample.lz.2darray.f32.f32(i32 immarg, float, float, float, <8 x i32>, <4 x i32>, i1 immarg, i32 immarg, i32 immarg) #40

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected float @__ockl_image_sample_2Dd(ptr addrspace(4) nocapture noundef readonly %0, ptr addrspace(4) nocapture noundef readonly %1, <2 x float> noundef %2) local_unnamed_addr #45 {
  %4 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 10
  %5 = load i32, ptr addrspace(4) %4, align 4, !tbaa !11
  %6 = uitofp i32 %5 to float
  %7 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 2
  %8 = load i32, ptr addrspace(4) %7, align 4, !tbaa !11
  %9 = lshr i32 %8, 14
  %10 = and i32 %9, 16383
  %11 = add nuw nsw i32 %10, 1
  %12 = uitofp i32 %11 to float
  %13 = load i32, ptr addrspace(4) %1, align 4, !tbaa !11
  %14 = and i32 %13, 32768
  %15 = icmp eq i32 %14, 0
  %16 = select i1 %15, float %6, float 1.000000e+00
  %17 = select i1 %15, float %12, float 1.000000e+00
  %18 = extractelement <2 x float> %2, i64 0
  %19 = fmul float %18, %16
  %20 = tail call float @llvm.floor.f32(float %19)
  %21 = tail call float @llvm.amdgcn.rcp.f32(float %16)
  %22 = fmul float %21, %20
  %23 = extractelement <2 x float> %2, i64 1
  %24 = fmul float %23, %17
  %25 = tail call float @llvm.floor.f32(float %24)
  %26 = tail call float @llvm.amdgcn.rcp.f32(float %17)
  %27 = fmul float %26, %25
  %28 = getelementptr inbounds i32, ptr addrspace(4) %1, i64 2
  %29 = load i32, ptr addrspace(4) %28, align 4, !tbaa !11
  %30 = and i32 %29, 1048576
  %31 = icmp eq i32 %30, 0
  %32 = select i1 %31, float %22, float %18
  %33 = select i1 %31, float %27, float %23
  %34 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %35 = icmp eq i32 %34, 9010
  %36 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %37 = load <4 x i32>, ptr addrspace(4) %1, align 16, !tbaa !49
  br i1 %35, label %40, label %38

38:                                               ; preds = %3
  %39 = tail call fastcc float @23(float noundef %32, float noundef %33, <8 x i32> noundef %36, <4 x i32> noundef %37) #40
  br label %42

40:                                               ; preds = %3
  %41 = tail call float @llvm.amdgcn.image.sample.2d.f32.f32(i32 1, float %32, float %33, <8 x i32> %36, <4 x i32> %37, i1 false, i32 0, i32 0)
  br label %42

42:                                               ; preds = %40, %38
  %43 = phi float [ %39, %38 ], [ %41, %40 ]
  ret float %43
}

; Function Attrs: mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc float @23(float noundef %0, float noundef %1, <8 x i32> noundef %2, <4 x i32> noundef %3) unnamed_addr #46 {
  %5 = tail call float @llvm.amdgcn.image.sample.lz.2d.f32.f32(i32 1, float %0, float %1, <8 x i32> %2, <4 x i32> %3, i1 false, i32 0, i32 0)
  ret float %5
}

; Function Attrs: nounwind readonly willreturn
declare float @llvm.amdgcn.image.sample.2d.f32.f32(i32 immarg, float, float, <8 x i32>, <4 x i32>, i1 immarg, i32 immarg, i32 immarg) #40

; Function Attrs: nounwind readonly willreturn
declare float @llvm.amdgcn.image.sample.lz.2d.f32.f32(i32 immarg, float, float, <8 x i32>, <4 x i32>, i1 immarg, i32 immarg, i32 immarg) #40

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected <4 x float> @__ockl_image_sample_3D(ptr addrspace(4) nocapture noundef readonly %0, ptr addrspace(4) nocapture noundef readonly %1, <4 x float> noundef %2) local_unnamed_addr #45 {
  %4 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 10
  %5 = load i32, ptr addrspace(4) %4, align 4, !tbaa !11
  %6 = uitofp i32 %5 to float
  %7 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 2
  %8 = load i32, ptr addrspace(4) %7, align 4, !tbaa !11
  %9 = lshr i32 %8, 14
  %10 = and i32 %9, 16383
  %11 = add nuw nsw i32 %10, 1
  %12 = uitofp i32 %11 to float
  %13 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 4
  %14 = load i32, ptr addrspace(4) %13, align 4, !tbaa !11
  %15 = and i32 %14, 8191
  %16 = add nuw nsw i32 %15, 1
  %17 = uitofp i32 %16 to float
  %18 = load i32, ptr addrspace(4) %1, align 4, !tbaa !11
  %19 = and i32 %18, 32768
  %20 = icmp eq i32 %19, 0
  %21 = select i1 %20, float %6, float 1.000000e+00
  %22 = select i1 %20, float %12, float 1.000000e+00
  %23 = select i1 %20, float %17, float 1.000000e+00
  %24 = extractelement <4 x float> %2, i64 0
  %25 = fmul float %24, %21
  %26 = tail call float @llvm.floor.f32(float %25)
  %27 = tail call float @llvm.amdgcn.rcp.f32(float %21)
  %28 = fmul float %27, %26
  %29 = extractelement <4 x float> %2, i64 1
  %30 = fmul float %29, %22
  %31 = tail call float @llvm.floor.f32(float %30)
  %32 = tail call float @llvm.amdgcn.rcp.f32(float %22)
  %33 = fmul float %32, %31
  %34 = extractelement <4 x float> %2, i64 2
  %35 = fmul float %34, %23
  %36 = tail call float @llvm.floor.f32(float %35)
  %37 = tail call float @llvm.amdgcn.rcp.f32(float %23)
  %38 = fmul float %37, %36
  %39 = getelementptr inbounds i32, ptr addrspace(4) %1, i64 2
  %40 = load i32, ptr addrspace(4) %39, align 4, !tbaa !11
  %41 = and i32 %40, 1048576
  %42 = icmp eq i32 %41, 0
  %43 = select i1 %42, float %28, float %24
  %44 = select i1 %42, float %33, float %29
  %45 = select i1 %42, float %38, float %34
  %46 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %47 = icmp eq i32 %46, 9010
  %48 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %49 = load <4 x i32>, ptr addrspace(4) %1, align 16, !tbaa !49
  br i1 %47, label %52, label %50

50:                                               ; preds = %3
  %51 = tail call fastcc <4 x float> @24(float noundef %43, float noundef %44, float noundef %45, <8 x i32> noundef %48, <4 x i32> noundef %49) #40
  br label %54

52:                                               ; preds = %3
  %53 = tail call <4 x float> @llvm.amdgcn.image.sample.3d.v4f32.f32(i32 15, float %43, float %44, float %45, <8 x i32> %48, <4 x i32> %49, i1 false, i32 0, i32 0)
  br label %54

54:                                               ; preds = %52, %50
  %55 = phi <4 x float> [ %51, %50 ], [ %53, %52 ]
  ret <4 x float> %55
}

; Function Attrs: mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc <4 x float> @24(float noundef %0, float noundef %1, float noundef %2, <8 x i32> noundef %3, <4 x i32> noundef %4) unnamed_addr #46 {
  %6 = tail call <4 x float> @llvm.amdgcn.image.sample.lz.3d.v4f32.f32(i32 15, float %0, float %1, float %2, <8 x i32> %3, <4 x i32> %4, i1 false, i32 0, i32 0)
  ret <4 x float> %6
}

; Function Attrs: nounwind readonly willreturn
declare <4 x float> @llvm.amdgcn.image.sample.3d.v4f32.f32(i32 immarg, float, float, float, <8 x i32>, <4 x i32>, i1 immarg, i32 immarg, i32 immarg) #40

; Function Attrs: nounwind readonly willreturn
declare <4 x float> @llvm.amdgcn.image.sample.lz.3d.v4f32.f32(i32 immarg, float, float, float, <8 x i32>, <4 x i32>, i1 immarg, i32 immarg, i32 immarg) #40

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected <4 x float> @__ockl_image_sample_CM(ptr addrspace(4) nocapture noundef readonly %0, ptr addrspace(4) nocapture noundef readonly %1, <4 x float> noundef %2) local_unnamed_addr #45 {
  %4 = extractelement <4 x float> %2, i64 0
  %5 = extractelement <4 x float> %2, i64 1
  %6 = extractelement <4 x float> %2, i64 2
  %7 = tail call float @llvm.amdgcn.cubema(float %4, float %5, float %6)
  %8 = tail call float @llvm.amdgcn.rcp.f32(float %7)
  %9 = tail call float @llvm.amdgcn.cubesc(float %4, float %5, float %6)
  %10 = tail call float @llvm.fmuladd.f32(float %9, float %8, float 5.000000e-01)
  %11 = tail call float @llvm.amdgcn.cubetc(float %4, float %5, float %6)
  %12 = tail call float @llvm.fmuladd.f32(float %11, float %8, float 5.000000e-01)
  %13 = tail call float @llvm.amdgcn.cubeid(float %4, float %5, float %6)
  %14 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %15 = icmp eq i32 %14, 9010
  %16 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %17 = load <4 x i32>, ptr addrspace(4) %1, align 16, !tbaa !49
  br i1 %15, label %20, label %18

18:                                               ; preds = %3
  %19 = tail call fastcc <4 x float> @25(float noundef %10, float noundef %12, float noundef %13, <8 x i32> noundef %16, <4 x i32> noundef %17) #40
  br label %22

20:                                               ; preds = %3
  %21 = tail call <4 x float> @llvm.amdgcn.image.sample.cube.v4f32.f32(i32 15, float %10, float %12, float %13, <8 x i32> %16, <4 x i32> %17, i1 false, i32 0, i32 0)
  br label %22

22:                                               ; preds = %20, %18
  %23 = phi <4 x float> [ %19, %18 ], [ %21, %20 ]
  ret <4 x float> %23
}

; Function Attrs: nounwind readnone speculatable willreturn
declare float @llvm.amdgcn.cubema(float, float, float) #9

; Function Attrs: nounwind readnone speculatable willreturn
declare float @llvm.amdgcn.cubesc(float, float, float) #9

; Function Attrs: nounwind readnone speculatable willreturn
declare float @llvm.amdgcn.cubetc(float, float, float) #9

; Function Attrs: nounwind readnone speculatable willreturn
declare float @llvm.amdgcn.cubeid(float, float, float) #9

; Function Attrs: mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc <4 x float> @25(float noundef %0, float noundef %1, float noundef %2, <8 x i32> noundef %3, <4 x i32> noundef %4) unnamed_addr #46 {
  %6 = tail call <4 x float> @llvm.amdgcn.image.sample.lz.cube.v4f32.f32(i32 15, float %0, float %1, float %2, <8 x i32> %3, <4 x i32> %4, i1 false, i32 0, i32 0)
  ret <4 x float> %6
}

; Function Attrs: nounwind readonly willreturn
declare <4 x float> @llvm.amdgcn.image.sample.cube.v4f32.f32(i32 immarg, float, float, float, <8 x i32>, <4 x i32>, i1 immarg, i32 immarg, i32 immarg) #40

; Function Attrs: nounwind readonly willreturn
declare <4 x float> @llvm.amdgcn.image.sample.lz.cube.v4f32.f32(i32 immarg, float, float, float, <8 x i32>, <4 x i32>, i1 immarg, i32 immarg, i32 immarg) #40

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected <4 x float> @__ockl_image_sample_CMa(ptr addrspace(4) nocapture noundef readonly %0, ptr addrspace(4) nocapture noundef readonly %1, <4 x float> noundef %2) local_unnamed_addr #45 {
  %4 = extractelement <4 x float> %2, i64 0
  %5 = extractelement <4 x float> %2, i64 1
  %6 = extractelement <4 x float> %2, i64 2
  %7 = tail call float @llvm.amdgcn.cubema(float %4, float %5, float %6)
  %8 = tail call float @llvm.amdgcn.rcp.f32(float %7)
  %9 = tail call float @llvm.amdgcn.cubesc(float %4, float %5, float %6)
  %10 = tail call float @llvm.fmuladd.f32(float %9, float %8, float 5.000000e-01)
  %11 = tail call float @llvm.amdgcn.cubetc(float %4, float %5, float %6)
  %12 = tail call float @llvm.fmuladd.f32(float %11, float %8, float 5.000000e-01)
  %13 = tail call float @llvm.amdgcn.cubeid(float %4, float %5, float %6)
  %14 = extractelement <4 x float> %2, i64 3
  %15 = tail call float @llvm.rint.f32(float %14)
  %16 = tail call float @llvm.fmuladd.f32(float %15, float 8.000000e+00, float %13)
  %17 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %18 = icmp eq i32 %17, 9010
  %19 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %20 = load <4 x i32>, ptr addrspace(4) %1, align 16, !tbaa !49
  br i1 %18, label %23, label %21

21:                                               ; preds = %3
  %22 = tail call fastcc <4 x float> @25(float noundef %10, float noundef %12, float noundef %16, <8 x i32> noundef %19, <4 x i32> noundef %20) #40
  br label %25

23:                                               ; preds = %3
  %24 = tail call <4 x float> @llvm.amdgcn.image.sample.cube.v4f32.f32(i32 15, float %10, float %12, float %16, <8 x i32> %19, <4 x i32> %20, i1 false, i32 0, i32 0)
  br label %25

25:                                               ; preds = %23, %21
  %26 = phi <4 x float> [ %22, %21 ], [ %24, %23 ]
  ret <4 x float> %26
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected <4 x float> @__ockl_image_sample_grad_1D(ptr addrspace(4) nocapture noundef readonly %0, ptr addrspace(4) nocapture noundef readonly %1, float noundef %2, float noundef %3, float noundef %4) local_unnamed_addr #47 {
  %6 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 10
  %7 = load i32, ptr addrspace(4) %6, align 4, !tbaa !11
  %8 = uitofp i32 %7 to float
  %9 = load i32, ptr addrspace(4) %1, align 4, !tbaa !11
  %10 = and i32 %9, 32768
  %11 = icmp eq i32 %10, 0
  %12 = select i1 %11, float %8, float 1.000000e+00
  %13 = fmul float %12, %2
  %14 = tail call float @llvm.floor.f32(float %13)
  %15 = tail call float @llvm.amdgcn.rcp.f32(float %12)
  %16 = fmul float %15, %14
  %17 = getelementptr inbounds i32, ptr addrspace(4) %1, i64 2
  %18 = load i32, ptr addrspace(4) %17, align 4, !tbaa !11
  %19 = and i32 %18, 1048576
  %20 = icmp eq i32 %19, 0
  %21 = select i1 %20, float %16, float %2
  %22 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %23 = load <4 x i32>, ptr addrspace(4) %1, align 16, !tbaa !49
  %24 = tail call fastcc <4 x float> @26(float noundef %3, float noundef %4, float noundef %21, <8 x i32> noundef %22, <4 x i32> noundef %23) #40
  ret <4 x float> %24
}

; Function Attrs: mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc <4 x float> @26(float noundef %0, float noundef %1, float noundef %2, <8 x i32> noundef %3, <4 x i32> noundef %4) unnamed_addr #46 {
  %6 = tail call <4 x float> @llvm.amdgcn.image.sample.d.1d.v4f32.f32.f32(i32 15, float %0, float %1, float %2, <8 x i32> %3, <4 x i32> %4, i1 false, i32 0, i32 0)
  ret <4 x float> %6
}

; Function Attrs: nounwind readonly willreturn
declare <4 x float> @llvm.amdgcn.image.sample.d.1d.v4f32.f32.f32(i32 immarg, float, float, float, <8 x i32>, <4 x i32>, i1 immarg, i32 immarg, i32 immarg) #40

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected <4 x float> @__ockl_image_sample_grad_1Da(ptr addrspace(4) nocapture noundef readonly %0, ptr addrspace(4) nocapture noundef readonly %1, <2 x float> noundef %2, float noundef %3, float noundef %4) local_unnamed_addr #47 {
  %6 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 10
  %7 = load i32, ptr addrspace(4) %6, align 4, !tbaa !11
  %8 = uitofp i32 %7 to float
  %9 = load i32, ptr addrspace(4) %1, align 4, !tbaa !11
  %10 = and i32 %9, 32768
  %11 = icmp eq i32 %10, 0
  %12 = select i1 %11, float %8, float 1.000000e+00
  %13 = extractelement <2 x float> %2, i64 0
  %14 = fmul float %13, %12
  %15 = tail call float @llvm.floor.f32(float %14)
  %16 = tail call float @llvm.amdgcn.rcp.f32(float %12)
  %17 = fmul float %16, %15
  %18 = getelementptr inbounds i32, ptr addrspace(4) %1, i64 2
  %19 = load i32, ptr addrspace(4) %18, align 4, !tbaa !11
  %20 = and i32 %19, 1048576
  %21 = icmp eq i32 %20, 0
  %22 = select i1 %21, float %17, float %13
  %23 = extractelement <2 x float> %2, i64 1
  %24 = tail call float @llvm.rint.f32(float %23)
  %25 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %26 = load <4 x i32>, ptr addrspace(4) %1, align 16, !tbaa !49
  %27 = tail call fastcc <4 x float> @27(float noundef %3, float noundef %4, float noundef %22, float noundef %24, <8 x i32> noundef %25, <4 x i32> noundef %26) #40
  ret <4 x float> %27
}

; Function Attrs: mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc <4 x float> @27(float noundef %0, float noundef %1, float noundef %2, float noundef %3, <8 x i32> noundef %4, <4 x i32> noundef %5) unnamed_addr #46 {
  %7 = tail call <4 x float> @llvm.amdgcn.image.sample.d.1darray.v4f32.f32.f32(i32 15, float %0, float %1, float %2, float %3, <8 x i32> %4, <4 x i32> %5, i1 false, i32 0, i32 0)
  ret <4 x float> %7
}

; Function Attrs: nounwind readonly willreturn
declare <4 x float> @llvm.amdgcn.image.sample.d.1darray.v4f32.f32.f32(i32 immarg, float, float, float, float, <8 x i32>, <4 x i32>, i1 immarg, i32 immarg, i32 immarg) #40

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected <4 x float> @__ockl_image_sample_grad_2D(ptr addrspace(4) nocapture noundef readonly %0, ptr addrspace(4) nocapture noundef readonly %1, <2 x float> noundef %2, <2 x float> noundef %3, <2 x float> noundef %4) local_unnamed_addr #47 {
  %6 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 10
  %7 = load i32, ptr addrspace(4) %6, align 4, !tbaa !11
  %8 = uitofp i32 %7 to float
  %9 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 2
  %10 = load i32, ptr addrspace(4) %9, align 4, !tbaa !11
  %11 = lshr i32 %10, 14
  %12 = and i32 %11, 16383
  %13 = add nuw nsw i32 %12, 1
  %14 = uitofp i32 %13 to float
  %15 = load i32, ptr addrspace(4) %1, align 4, !tbaa !11
  %16 = and i32 %15, 32768
  %17 = icmp eq i32 %16, 0
  %18 = select i1 %17, float %8, float 1.000000e+00
  %19 = select i1 %17, float %14, float 1.000000e+00
  %20 = extractelement <2 x float> %2, i64 0
  %21 = fmul float %20, %18
  %22 = tail call float @llvm.floor.f32(float %21)
  %23 = tail call float @llvm.amdgcn.rcp.f32(float %18)
  %24 = fmul float %23, %22
  %25 = extractelement <2 x float> %2, i64 1
  %26 = fmul float %25, %19
  %27 = tail call float @llvm.floor.f32(float %26)
  %28 = tail call float @llvm.amdgcn.rcp.f32(float %19)
  %29 = fmul float %28, %27
  %30 = getelementptr inbounds i32, ptr addrspace(4) %1, i64 2
  %31 = load i32, ptr addrspace(4) %30, align 4, !tbaa !11
  %32 = and i32 %31, 1048576
  %33 = icmp eq i32 %32, 0
  %34 = select i1 %33, float %24, float %20
  %35 = select i1 %33, float %29, float %25
  %36 = extractelement <2 x float> %3, i64 0
  %37 = extractelement <2 x float> %3, i64 1
  %38 = extractelement <2 x float> %4, i64 0
  %39 = extractelement <2 x float> %4, i64 1
  %40 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %41 = load <4 x i32>, ptr addrspace(4) %1, align 16, !tbaa !49
  %42 = tail call fastcc <4 x float> @28(float noundef %36, float noundef %37, float noundef %38, float noundef %39, float noundef %34, float noundef %35, <8 x i32> noundef %40, <4 x i32> noundef %41) #40
  ret <4 x float> %42
}

; Function Attrs: mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc <4 x float> @28(float noundef %0, float noundef %1, float noundef %2, float noundef %3, float noundef %4, float noundef %5, <8 x i32> noundef %6, <4 x i32> noundef %7) unnamed_addr #46 {
  %9 = tail call <4 x float> @llvm.amdgcn.image.sample.d.2d.v4f32.f32.f32(i32 15, float %0, float %1, float %2, float %3, float %4, float %5, <8 x i32> %6, <4 x i32> %7, i1 false, i32 0, i32 0)
  ret <4 x float> %9
}

; Function Attrs: nounwind readonly willreturn
declare <4 x float> @llvm.amdgcn.image.sample.d.2d.v4f32.f32.f32(i32 immarg, float, float, float, float, float, float, <8 x i32>, <4 x i32>, i1 immarg, i32 immarg, i32 immarg) #40

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected <4 x float> @__ockl_image_sample_grad_2Da(ptr addrspace(4) nocapture noundef readonly %0, ptr addrspace(4) nocapture noundef readonly %1, <4 x float> noundef %2, <2 x float> noundef %3, <2 x float> noundef %4) local_unnamed_addr #47 {
  %6 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 10
  %7 = load i32, ptr addrspace(4) %6, align 4, !tbaa !11
  %8 = uitofp i32 %7 to float
  %9 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 2
  %10 = load i32, ptr addrspace(4) %9, align 4, !tbaa !11
  %11 = lshr i32 %10, 14
  %12 = and i32 %11, 16383
  %13 = add nuw nsw i32 %12, 1
  %14 = uitofp i32 %13 to float
  %15 = load i32, ptr addrspace(4) %1, align 4, !tbaa !11
  %16 = and i32 %15, 32768
  %17 = icmp eq i32 %16, 0
  %18 = select i1 %17, float %8, float 1.000000e+00
  %19 = select i1 %17, float %14, float 1.000000e+00
  %20 = extractelement <4 x float> %2, i64 0
  %21 = fmul float %20, %18
  %22 = tail call float @llvm.floor.f32(float %21)
  %23 = tail call float @llvm.amdgcn.rcp.f32(float %18)
  %24 = fmul float %23, %22
  %25 = extractelement <4 x float> %2, i64 1
  %26 = fmul float %25, %19
  %27 = tail call float @llvm.floor.f32(float %26)
  %28 = tail call float @llvm.amdgcn.rcp.f32(float %19)
  %29 = fmul float %28, %27
  %30 = getelementptr inbounds i32, ptr addrspace(4) %1, i64 2
  %31 = load i32, ptr addrspace(4) %30, align 4, !tbaa !11
  %32 = and i32 %31, 1048576
  %33 = icmp eq i32 %32, 0
  %34 = select i1 %33, float %24, float %20
  %35 = select i1 %33, float %29, float %25
  %36 = extractelement <4 x float> %2, i64 2
  %37 = tail call float @llvm.rint.f32(float %36)
  %38 = extractelement <2 x float> %3, i64 0
  %39 = extractelement <2 x float> %3, i64 1
  %40 = extractelement <2 x float> %4, i64 0
  %41 = extractelement <2 x float> %4, i64 1
  %42 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %43 = load <4 x i32>, ptr addrspace(4) %1, align 16, !tbaa !49
  %44 = tail call fastcc <4 x float> @29(float noundef %38, float noundef %39, float noundef %40, float noundef %41, float noundef %34, float noundef %35, float noundef %37, <8 x i32> noundef %42, <4 x i32> noundef %43) #40
  ret <4 x float> %44
}

; Function Attrs: mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc <4 x float> @29(float noundef %0, float noundef %1, float noundef %2, float noundef %3, float noundef %4, float noundef %5, float noundef %6, <8 x i32> noundef %7, <4 x i32> noundef %8) unnamed_addr #46 {
  %10 = tail call <4 x float> @llvm.amdgcn.image.sample.d.2darray.v4f32.f32.f32(i32 15, float %0, float %1, float %2, float %3, float %4, float %5, float %6, <8 x i32> %7, <4 x i32> %8, i1 false, i32 0, i32 0)
  ret <4 x float> %10
}

; Function Attrs: nounwind readonly willreturn
declare <4 x float> @llvm.amdgcn.image.sample.d.2darray.v4f32.f32.f32(i32 immarg, float, float, float, float, float, float, float, <8 x i32>, <4 x i32>, i1 immarg, i32 immarg, i32 immarg) #40

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected float @__ockl_image_sample_grad_2Dad(ptr addrspace(4) nocapture noundef readonly %0, ptr addrspace(4) nocapture noundef readonly %1, <4 x float> noundef %2, <2 x float> noundef %3, <2 x float> noundef %4) local_unnamed_addr #47 {
  %6 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 10
  %7 = load i32, ptr addrspace(4) %6, align 4, !tbaa !11
  %8 = uitofp i32 %7 to float
  %9 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 2
  %10 = load i32, ptr addrspace(4) %9, align 4, !tbaa !11
  %11 = lshr i32 %10, 14
  %12 = and i32 %11, 16383
  %13 = add nuw nsw i32 %12, 1
  %14 = uitofp i32 %13 to float
  %15 = load i32, ptr addrspace(4) %1, align 4, !tbaa !11
  %16 = and i32 %15, 32768
  %17 = icmp eq i32 %16, 0
  %18 = select i1 %17, float %8, float 1.000000e+00
  %19 = select i1 %17, float %14, float 1.000000e+00
  %20 = extractelement <4 x float> %2, i64 0
  %21 = fmul float %20, %18
  %22 = tail call float @llvm.floor.f32(float %21)
  %23 = tail call float @llvm.amdgcn.rcp.f32(float %18)
  %24 = fmul float %23, %22
  %25 = extractelement <4 x float> %2, i64 1
  %26 = fmul float %25, %19
  %27 = tail call float @llvm.floor.f32(float %26)
  %28 = tail call float @llvm.amdgcn.rcp.f32(float %19)
  %29 = fmul float %28, %27
  %30 = getelementptr inbounds i32, ptr addrspace(4) %1, i64 2
  %31 = load i32, ptr addrspace(4) %30, align 4, !tbaa !11
  %32 = and i32 %31, 1048576
  %33 = icmp eq i32 %32, 0
  %34 = select i1 %33, float %24, float %20
  %35 = select i1 %33, float %29, float %25
  %36 = extractelement <4 x float> %2, i64 2
  %37 = tail call float @llvm.rint.f32(float %36)
  %38 = extractelement <2 x float> %3, i64 0
  %39 = extractelement <2 x float> %3, i64 1
  %40 = extractelement <2 x float> %4, i64 0
  %41 = extractelement <2 x float> %4, i64 1
  %42 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %43 = load <4 x i32>, ptr addrspace(4) %1, align 16, !tbaa !49
  %44 = tail call fastcc float @30(float noundef %38, float noundef %39, float noundef %40, float noundef %41, float noundef %34, float noundef %35, float noundef %37, <8 x i32> noundef %42, <4 x i32> noundef %43) #40
  ret float %44
}

; Function Attrs: mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc float @30(float noundef %0, float noundef %1, float noundef %2, float noundef %3, float noundef %4, float noundef %5, float noundef %6, <8 x i32> noundef %7, <4 x i32> noundef %8) unnamed_addr #46 {
  %10 = tail call float @llvm.amdgcn.image.sample.d.2darray.f32.f32.f32(i32 1, float %0, float %1, float %2, float %3, float %4, float %5, float %6, <8 x i32> %7, <4 x i32> %8, i1 false, i32 0, i32 0)
  ret float %10
}

; Function Attrs: nounwind readonly willreturn
declare float @llvm.amdgcn.image.sample.d.2darray.f32.f32.f32(i32 immarg, float, float, float, float, float, float, float, <8 x i32>, <4 x i32>, i1 immarg, i32 immarg, i32 immarg) #40

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected float @__ockl_image_sample_grad_2Dd(ptr addrspace(4) nocapture noundef readonly %0, ptr addrspace(4) nocapture noundef readonly %1, <2 x float> noundef %2, <2 x float> noundef %3, <2 x float> noundef %4) local_unnamed_addr #47 {
  %6 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 10
  %7 = load i32, ptr addrspace(4) %6, align 4, !tbaa !11
  %8 = uitofp i32 %7 to float
  %9 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 2
  %10 = load i32, ptr addrspace(4) %9, align 4, !tbaa !11
  %11 = lshr i32 %10, 14
  %12 = and i32 %11, 16383
  %13 = add nuw nsw i32 %12, 1
  %14 = uitofp i32 %13 to float
  %15 = load i32, ptr addrspace(4) %1, align 4, !tbaa !11
  %16 = and i32 %15, 32768
  %17 = icmp eq i32 %16, 0
  %18 = select i1 %17, float %8, float 1.000000e+00
  %19 = select i1 %17, float %14, float 1.000000e+00
  %20 = extractelement <2 x float> %2, i64 0
  %21 = fmul float %20, %18
  %22 = tail call float @llvm.floor.f32(float %21)
  %23 = tail call float @llvm.amdgcn.rcp.f32(float %18)
  %24 = fmul float %23, %22
  %25 = extractelement <2 x float> %2, i64 1
  %26 = fmul float %25, %19
  %27 = tail call float @llvm.floor.f32(float %26)
  %28 = tail call float @llvm.amdgcn.rcp.f32(float %19)
  %29 = fmul float %28, %27
  %30 = getelementptr inbounds i32, ptr addrspace(4) %1, i64 2
  %31 = load i32, ptr addrspace(4) %30, align 4, !tbaa !11
  %32 = and i32 %31, 1048576
  %33 = icmp eq i32 %32, 0
  %34 = select i1 %33, float %24, float %20
  %35 = select i1 %33, float %29, float %25
  %36 = extractelement <2 x float> %3, i64 0
  %37 = extractelement <2 x float> %3, i64 1
  %38 = extractelement <2 x float> %4, i64 0
  %39 = extractelement <2 x float> %4, i64 1
  %40 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %41 = load <4 x i32>, ptr addrspace(4) %1, align 16, !tbaa !49
  %42 = tail call fastcc float @31(float noundef %36, float noundef %37, float noundef %38, float noundef %39, float noundef %34, float noundef %35, <8 x i32> noundef %40, <4 x i32> noundef %41) #40
  ret float %42
}

; Function Attrs: mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc float @31(float noundef %0, float noundef %1, float noundef %2, float noundef %3, float noundef %4, float noundef %5, <8 x i32> noundef %6, <4 x i32> noundef %7) unnamed_addr #46 {
  %9 = tail call float @llvm.amdgcn.image.sample.d.2d.f32.f32.f32(i32 1, float %0, float %1, float %2, float %3, float %4, float %5, <8 x i32> %6, <4 x i32> %7, i1 false, i32 0, i32 0)
  ret float %9
}

; Function Attrs: nounwind readonly willreturn
declare float @llvm.amdgcn.image.sample.d.2d.f32.f32.f32(i32 immarg, float, float, float, float, float, float, <8 x i32>, <4 x i32>, i1 immarg, i32 immarg, i32 immarg) #40

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected <4 x float> @__ockl_image_sample_grad_3D(ptr addrspace(4) nocapture noundef readonly %0, ptr addrspace(4) nocapture noundef readonly %1, <4 x float> noundef %2, <4 x float> noundef %3, <4 x float> noundef %4) local_unnamed_addr #47 {
  %6 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 10
  %7 = load i32, ptr addrspace(4) %6, align 4, !tbaa !11
  %8 = uitofp i32 %7 to float
  %9 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 2
  %10 = load i32, ptr addrspace(4) %9, align 4, !tbaa !11
  %11 = lshr i32 %10, 14
  %12 = and i32 %11, 16383
  %13 = add nuw nsw i32 %12, 1
  %14 = uitofp i32 %13 to float
  %15 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 4
  %16 = load i32, ptr addrspace(4) %15, align 4, !tbaa !11
  %17 = and i32 %16, 8191
  %18 = add nuw nsw i32 %17, 1
  %19 = uitofp i32 %18 to float
  %20 = load i32, ptr addrspace(4) %1, align 4, !tbaa !11
  %21 = and i32 %20, 32768
  %22 = icmp eq i32 %21, 0
  %23 = select i1 %22, float %8, float 1.000000e+00
  %24 = select i1 %22, float %14, float 1.000000e+00
  %25 = select i1 %22, float %19, float 1.000000e+00
  %26 = extractelement <4 x float> %2, i64 0
  %27 = fmul float %26, %23
  %28 = tail call float @llvm.floor.f32(float %27)
  %29 = tail call float @llvm.amdgcn.rcp.f32(float %23)
  %30 = fmul float %29, %28
  %31 = extractelement <4 x float> %2, i64 1
  %32 = fmul float %31, %24
  %33 = tail call float @llvm.floor.f32(float %32)
  %34 = tail call float @llvm.amdgcn.rcp.f32(float %24)
  %35 = fmul float %34, %33
  %36 = extractelement <4 x float> %2, i64 2
  %37 = fmul float %36, %25
  %38 = tail call float @llvm.floor.f32(float %37)
  %39 = tail call float @llvm.amdgcn.rcp.f32(float %25)
  %40 = fmul float %39, %38
  %41 = getelementptr inbounds i32, ptr addrspace(4) %1, i64 2
  %42 = load i32, ptr addrspace(4) %41, align 4, !tbaa !11
  %43 = and i32 %42, 1048576
  %44 = icmp eq i32 %43, 0
  %45 = select i1 %44, float %30, float %26
  %46 = select i1 %44, float %35, float %31
  %47 = select i1 %44, float %40, float %36
  %48 = extractelement <4 x float> %3, i64 0
  %49 = extractelement <4 x float> %3, i64 1
  %50 = extractelement <4 x float> %3, i64 2
  %51 = extractelement <4 x float> %4, i64 0
  %52 = extractelement <4 x float> %4, i64 1
  %53 = extractelement <4 x float> %4, i64 2
  %54 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %55 = load <4 x i32>, ptr addrspace(4) %1, align 16, !tbaa !49
  %56 = tail call fastcc <4 x float> @32(float noundef %48, float noundef %49, float noundef %50, float noundef %51, float noundef %52, float noundef %53, float noundef %45, float noundef %46, float noundef %47, <8 x i32> noundef %54, <4 x i32> noundef %55) #40
  ret <4 x float> %56
}

; Function Attrs: mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc <4 x float> @32(float noundef %0, float noundef %1, float noundef %2, float noundef %3, float noundef %4, float noundef %5, float noundef %6, float noundef %7, float noundef %8, <8 x i32> noundef %9, <4 x i32> noundef %10) unnamed_addr #46 {
  %12 = tail call <4 x float> @llvm.amdgcn.image.sample.d.3d.v4f32.f32.f32(i32 15, float %0, float %1, float %2, float %3, float %4, float %5, float %6, float %7, float %8, <8 x i32> %9, <4 x i32> %10, i1 false, i32 0, i32 0)
  ret <4 x float> %12
}

; Function Attrs: nounwind readonly willreturn
declare <4 x float> @llvm.amdgcn.image.sample.d.3d.v4f32.f32.f32(i32 immarg, float, float, float, float, float, float, float, float, float, <8 x i32>, <4 x i32>, i1 immarg, i32 immarg, i32 immarg) #40

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected <4 x float> @__ockl_image_sample_lod_1D(ptr addrspace(4) nocapture noundef readonly %0, ptr addrspace(4) nocapture noundef readonly %1, float noundef %2, float noundef %3) local_unnamed_addr #47 {
  %5 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %6 = load <4 x i32>, ptr addrspace(4) %1, align 16, !tbaa !49
  %7 = tail call fastcc <4 x float> @33(float noundef %2, float noundef %3, <8 x i32> noundef %5, <4 x i32> noundef %6) #40
  ret <4 x float> %7
}

; Function Attrs: mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc <4 x float> @33(float noundef %0, float noundef %1, <8 x i32> noundef %2, <4 x i32> noundef %3) unnamed_addr #46 {
  %5 = tail call <4 x float> @llvm.amdgcn.image.sample.l.1d.v4f32.f32(i32 15, float %0, float %1, <8 x i32> %2, <4 x i32> %3, i1 false, i32 0, i32 0)
  ret <4 x float> %5
}

; Function Attrs: nounwind readonly willreturn
declare <4 x float> @llvm.amdgcn.image.sample.l.1d.v4f32.f32(i32 immarg, float, float, <8 x i32>, <4 x i32>, i1 immarg, i32 immarg, i32 immarg) #40

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected <4 x float> @__ockl_image_sample_lod_1Da(ptr addrspace(4) nocapture noundef readonly %0, ptr addrspace(4) nocapture noundef readonly %1, <2 x float> noundef %2, float noundef %3) local_unnamed_addr #47 {
  %5 = extractelement <2 x float> %2, i64 1
  %6 = tail call float @llvm.rint.f32(float %5)
  %7 = extractelement <2 x float> %2, i64 0
  %8 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %9 = load <4 x i32>, ptr addrspace(4) %1, align 16, !tbaa !49
  %10 = tail call fastcc <4 x float> @34(float noundef %7, float noundef %6, float noundef %3, <8 x i32> noundef %8, <4 x i32> noundef %9) #40
  ret <4 x float> %10
}

; Function Attrs: mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc <4 x float> @34(float noundef %0, float noundef %1, float noundef %2, <8 x i32> noundef %3, <4 x i32> noundef %4) unnamed_addr #46 {
  %6 = tail call <4 x float> @llvm.amdgcn.image.sample.l.1darray.v4f32.f32(i32 15, float %0, float %1, float %2, <8 x i32> %3, <4 x i32> %4, i1 false, i32 0, i32 0)
  ret <4 x float> %6
}

; Function Attrs: nounwind readonly willreturn
declare <4 x float> @llvm.amdgcn.image.sample.l.1darray.v4f32.f32(i32 immarg, float, float, float, <8 x i32>, <4 x i32>, i1 immarg, i32 immarg, i32 immarg) #40

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected <4 x float> @__ockl_image_sample_lod_2D(ptr addrspace(4) nocapture noundef readonly %0, ptr addrspace(4) nocapture noundef readonly %1, <2 x float> noundef %2, float noundef %3) local_unnamed_addr #47 {
  %5 = extractelement <2 x float> %2, i64 0
  %6 = extractelement <2 x float> %2, i64 1
  %7 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %8 = load <4 x i32>, ptr addrspace(4) %1, align 16, !tbaa !49
  %9 = tail call fastcc <4 x float> @35(float noundef %5, float noundef %6, float noundef %3, <8 x i32> noundef %7, <4 x i32> noundef %8) #40
  ret <4 x float> %9
}

; Function Attrs: mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc <4 x float> @35(float noundef %0, float noundef %1, float noundef %2, <8 x i32> noundef %3, <4 x i32> noundef %4) unnamed_addr #46 {
  %6 = tail call <4 x float> @llvm.amdgcn.image.sample.l.2d.v4f32.f32(i32 15, float %0, float %1, float %2, <8 x i32> %3, <4 x i32> %4, i1 false, i32 0, i32 0)
  ret <4 x float> %6
}

; Function Attrs: nounwind readonly willreturn
declare <4 x float> @llvm.amdgcn.image.sample.l.2d.v4f32.f32(i32 immarg, float, float, float, <8 x i32>, <4 x i32>, i1 immarg, i32 immarg, i32 immarg) #40

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected <4 x float> @__ockl_image_sample_lod_2Da(ptr addrspace(4) nocapture noundef readonly %0, ptr addrspace(4) nocapture noundef readonly %1, <4 x float> noundef %2, float noundef %3) local_unnamed_addr #47 {
  %5 = extractelement <4 x float> %2, i64 2
  %6 = tail call float @llvm.rint.f32(float %5)
  %7 = extractelement <4 x float> %2, i64 0
  %8 = extractelement <4 x float> %2, i64 1
  %9 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %10 = load <4 x i32>, ptr addrspace(4) %1, align 16, !tbaa !49
  %11 = tail call fastcc <4 x float> @36(float noundef %7, float noundef %8, float noundef %6, float noundef %3, <8 x i32> noundef %9, <4 x i32> noundef %10) #40
  ret <4 x float> %11
}

; Function Attrs: mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc <4 x float> @36(float noundef %0, float noundef %1, float noundef %2, float noundef %3, <8 x i32> noundef %4, <4 x i32> noundef %5) unnamed_addr #46 {
  %7 = tail call <4 x float> @llvm.amdgcn.image.sample.l.2darray.v4f32.f32(i32 15, float %0, float %1, float %2, float %3, <8 x i32> %4, <4 x i32> %5, i1 false, i32 0, i32 0)
  ret <4 x float> %7
}

; Function Attrs: nounwind readonly willreturn
declare <4 x float> @llvm.amdgcn.image.sample.l.2darray.v4f32.f32(i32 immarg, float, float, float, float, <8 x i32>, <4 x i32>, i1 immarg, i32 immarg, i32 immarg) #40

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected float @__ockl_image_sample_lod_2Dad(ptr addrspace(4) nocapture noundef readonly %0, ptr addrspace(4) nocapture noundef readonly %1, <4 x float> noundef %2, float noundef %3) local_unnamed_addr #47 {
  %5 = extractelement <4 x float> %2, i64 2
  %6 = tail call float @llvm.rint.f32(float %5)
  %7 = extractelement <4 x float> %2, i64 0
  %8 = extractelement <4 x float> %2, i64 1
  %9 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %10 = load <4 x i32>, ptr addrspace(4) %1, align 16, !tbaa !49
  %11 = tail call fastcc float @37(float noundef %7, float noundef %8, float noundef %6, float noundef %3, <8 x i32> noundef %9, <4 x i32> noundef %10) #40
  ret float %11
}

; Function Attrs: mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc float @37(float noundef %0, float noundef %1, float noundef %2, float noundef %3, <8 x i32> noundef %4, <4 x i32> noundef %5) unnamed_addr #46 {
  %7 = tail call float @llvm.amdgcn.image.sample.l.2darray.f32.f32(i32 1, float %0, float %1, float %2, float %3, <8 x i32> %4, <4 x i32> %5, i1 false, i32 0, i32 0)
  ret float %7
}

; Function Attrs: nounwind readonly willreturn
declare float @llvm.amdgcn.image.sample.l.2darray.f32.f32(i32 immarg, float, float, float, float, <8 x i32>, <4 x i32>, i1 immarg, i32 immarg, i32 immarg) #40

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected float @__ockl_image_sample_lod_2Dd(ptr addrspace(4) nocapture noundef readonly %0, ptr addrspace(4) nocapture noundef readonly %1, <2 x float> noundef %2, float noundef %3) local_unnamed_addr #47 {
  %5 = extractelement <2 x float> %2, i64 0
  %6 = extractelement <2 x float> %2, i64 1
  %7 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %8 = load <4 x i32>, ptr addrspace(4) %1, align 16, !tbaa !49
  %9 = tail call fastcc float @38(float noundef %5, float noundef %6, float noundef %3, <8 x i32> noundef %7, <4 x i32> noundef %8) #40
  ret float %9
}

; Function Attrs: mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc float @38(float noundef %0, float noundef %1, float noundef %2, <8 x i32> noundef %3, <4 x i32> noundef %4) unnamed_addr #46 {
  %6 = tail call float @llvm.amdgcn.image.sample.l.2d.f32.f32(i32 1, float %0, float %1, float %2, <8 x i32> %3, <4 x i32> %4, i1 false, i32 0, i32 0)
  ret float %6
}

; Function Attrs: nounwind readonly willreturn
declare float @llvm.amdgcn.image.sample.l.2d.f32.f32(i32 immarg, float, float, float, <8 x i32>, <4 x i32>, i1 immarg, i32 immarg, i32 immarg) #40

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected <4 x float> @__ockl_image_sample_lod_3D(ptr addrspace(4) nocapture noundef readonly %0, ptr addrspace(4) nocapture noundef readonly %1, <4 x float> noundef %2, float noundef %3) local_unnamed_addr #47 {
  %5 = extractelement <4 x float> %2, i64 0
  %6 = extractelement <4 x float> %2, i64 1
  %7 = extractelement <4 x float> %2, i64 2
  %8 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %9 = load <4 x i32>, ptr addrspace(4) %1, align 16, !tbaa !49
  %10 = tail call fastcc <4 x float> @39(float noundef %5, float noundef %6, float noundef %7, float noundef %3, <8 x i32> noundef %8, <4 x i32> noundef %9) #40
  ret <4 x float> %10
}

; Function Attrs: mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc <4 x float> @39(float noundef %0, float noundef %1, float noundef %2, float noundef %3, <8 x i32> noundef %4, <4 x i32> noundef %5) unnamed_addr #46 {
  %7 = tail call <4 x float> @llvm.amdgcn.image.sample.l.3d.v4f32.f32(i32 15, float %0, float %1, float %2, float %3, <8 x i32> %4, <4 x i32> %5, i1 false, i32 0, i32 0)
  ret <4 x float> %7
}

; Function Attrs: nounwind readonly willreturn
declare <4 x float> @llvm.amdgcn.image.sample.l.3d.v4f32.f32(i32 immarg, float, float, float, float, <8 x i32>, <4 x i32>, i1 immarg, i32 immarg, i32 immarg) #40

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected <4 x float> @__ockl_image_sample_lod_CM(ptr addrspace(4) nocapture noundef readonly %0, ptr addrspace(4) nocapture noundef readonly %1, <4 x float> noundef %2, float noundef %3) local_unnamed_addr #47 {
  %5 = extractelement <4 x float> %2, i64 0
  %6 = extractelement <4 x float> %2, i64 1
  %7 = extractelement <4 x float> %2, i64 2
  %8 = tail call float @llvm.amdgcn.cubema(float %5, float %6, float %7)
  %9 = tail call float @llvm.amdgcn.rcp.f32(float %8)
  %10 = tail call float @llvm.amdgcn.cubesc(float %5, float %6, float %7)
  %11 = tail call float @llvm.fmuladd.f32(float %10, float %9, float 5.000000e-01)
  %12 = tail call float @llvm.amdgcn.cubetc(float %5, float %6, float %7)
  %13 = tail call float @llvm.fmuladd.f32(float %12, float %9, float 5.000000e-01)
  %14 = tail call float @llvm.amdgcn.cubeid(float %5, float %6, float %7)
  %15 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %16 = load <4 x i32>, ptr addrspace(4) %1, align 16, !tbaa !49
  %17 = tail call fastcc <4 x float> @40(float noundef %11, float noundef %13, float noundef %14, float noundef %3, <8 x i32> noundef %15, <4 x i32> noundef %16) #40
  ret <4 x float> %17
}

; Function Attrs: mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc <4 x float> @40(float noundef %0, float noundef %1, float noundef %2, float noundef %3, <8 x i32> noundef %4, <4 x i32> noundef %5) unnamed_addr #46 {
  %7 = tail call <4 x float> @llvm.amdgcn.image.sample.l.cube.v4f32.f32(i32 15, float %0, float %1, float %2, float %3, <8 x i32> %4, <4 x i32> %5, i1 false, i32 0, i32 0)
  ret <4 x float> %7
}

; Function Attrs: nounwind readonly willreturn
declare <4 x float> @llvm.amdgcn.image.sample.l.cube.v4f32.f32(i32 immarg, float, float, float, float, <8 x i32>, <4 x i32>, i1 immarg, i32 immarg, i32 immarg) #40

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected <4 x float> @__ockl_image_sample_lod_CMa(ptr addrspace(4) nocapture noundef readonly %0, ptr addrspace(4) nocapture noundef readonly %1, <4 x float> noundef %2, float noundef %3) local_unnamed_addr #47 {
  %5 = extractelement <4 x float> %2, i64 0
  %6 = extractelement <4 x float> %2, i64 1
  %7 = extractelement <4 x float> %2, i64 2
  %8 = tail call float @llvm.amdgcn.cubema(float %5, float %6, float %7)
  %9 = tail call float @llvm.amdgcn.rcp.f32(float %8)
  %10 = tail call float @llvm.amdgcn.cubesc(float %5, float %6, float %7)
  %11 = tail call float @llvm.fmuladd.f32(float %10, float %9, float 5.000000e-01)
  %12 = tail call float @llvm.amdgcn.cubetc(float %5, float %6, float %7)
  %13 = tail call float @llvm.fmuladd.f32(float %12, float %9, float 5.000000e-01)
  %14 = tail call float @llvm.amdgcn.cubeid(float %5, float %6, float %7)
  %15 = extractelement <4 x float> %2, i64 3
  %16 = tail call float @llvm.rint.f32(float %15)
  %17 = tail call float @llvm.fmuladd.f32(float %16, float 8.000000e+00, float %14)
  %18 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %19 = load <4 x i32>, ptr addrspace(4) %1, align 16, !tbaa !49
  %20 = tail call fastcc <4 x float> @40(float noundef %11, float noundef %13, float noundef %17, float noundef %3, <8 x i32> noundef %18, <4 x i32> noundef %19) #40
  ret <4 x float> %20
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected <4 x half> @__ockl_image_sampleh_1D(ptr addrspace(4) nocapture noundef readonly %0, ptr addrspace(4) nocapture noundef readonly %1, float noundef %2) local_unnamed_addr #45 {
  %4 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 10
  %5 = load i32, ptr addrspace(4) %4, align 4, !tbaa !11
  %6 = uitofp i32 %5 to float
  %7 = load i32, ptr addrspace(4) %1, align 4, !tbaa !11
  %8 = and i32 %7, 32768
  %9 = icmp eq i32 %8, 0
  %10 = select i1 %9, float %6, float 1.000000e+00
  %11 = fmul float %10, %2
  %12 = tail call float @llvm.floor.f32(float %11)
  %13 = tail call float @llvm.amdgcn.rcp.f32(float %10)
  %14 = fmul float %13, %12
  %15 = getelementptr inbounds i32, ptr addrspace(4) %1, i64 2
  %16 = load i32, ptr addrspace(4) %15, align 4, !tbaa !11
  %17 = and i32 %16, 1048576
  %18 = icmp eq i32 %17, 0
  %19 = select i1 %18, float %14, float %2
  %20 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %21 = icmp eq i32 %20, 9010
  %22 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %23 = load <4 x i32>, ptr addrspace(4) %1, align 16, !tbaa !49
  br i1 %21, label %26, label %24

24:                                               ; preds = %3
  %25 = tail call fastcc <4 x half> @41(float noundef %19, <8 x i32> noundef %22, <4 x i32> noundef %23) #40
  br label %28

26:                                               ; preds = %3
  %27 = tail call <4 x half> @llvm.amdgcn.image.sample.1d.v4f16.f32(i32 15, float %19, <8 x i32> %22, <4 x i32> %23, i1 false, i32 0, i32 0)
  br label %28

28:                                               ; preds = %26, %24
  %29 = phi <4 x half> [ %25, %24 ], [ %27, %26 ]
  ret <4 x half> %29
}

; Function Attrs: mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc <4 x half> @41(float noundef %0, <8 x i32> noundef %1, <4 x i32> noundef %2) unnamed_addr #46 {
  %4 = tail call <4 x half> @llvm.amdgcn.image.sample.lz.1d.v4f16.f32(i32 15, float %0, <8 x i32> %1, <4 x i32> %2, i1 false, i32 0, i32 0)
  ret <4 x half> %4
}

; Function Attrs: nounwind readonly willreturn
declare <4 x half> @llvm.amdgcn.image.sample.1d.v4f16.f32(i32 immarg, float, <8 x i32>, <4 x i32>, i1 immarg, i32 immarg, i32 immarg) #40

; Function Attrs: nounwind readonly willreturn
declare <4 x half> @llvm.amdgcn.image.sample.lz.1d.v4f16.f32(i32 immarg, float, <8 x i32>, <4 x i32>, i1 immarg, i32 immarg, i32 immarg) #40

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected <4 x half> @__ockl_image_sampleh_1Da(ptr addrspace(4) nocapture noundef readonly %0, ptr addrspace(4) nocapture noundef readonly %1, <2 x float> noundef %2) local_unnamed_addr #45 {
  %4 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 10
  %5 = load i32, ptr addrspace(4) %4, align 4, !tbaa !11
  %6 = uitofp i32 %5 to float
  %7 = load i32, ptr addrspace(4) %1, align 4, !tbaa !11
  %8 = and i32 %7, 32768
  %9 = icmp eq i32 %8, 0
  %10 = select i1 %9, float %6, float 1.000000e+00
  %11 = extractelement <2 x float> %2, i64 0
  %12 = fmul float %11, %10
  %13 = tail call float @llvm.floor.f32(float %12)
  %14 = tail call float @llvm.amdgcn.rcp.f32(float %10)
  %15 = fmul float %14, %13
  %16 = getelementptr inbounds i32, ptr addrspace(4) %1, i64 2
  %17 = load i32, ptr addrspace(4) %16, align 4, !tbaa !11
  %18 = and i32 %17, 1048576
  %19 = icmp eq i32 %18, 0
  %20 = select i1 %19, float %15, float %11
  %21 = extractelement <2 x float> %2, i64 1
  %22 = tail call float @llvm.rint.f32(float %21)
  %23 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %24 = icmp eq i32 %23, 9010
  %25 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %26 = load <4 x i32>, ptr addrspace(4) %1, align 16, !tbaa !49
  br i1 %24, label %29, label %27

27:                                               ; preds = %3
  %28 = tail call fastcc <4 x half> @42(float noundef %20, float noundef %22, <8 x i32> noundef %25, <4 x i32> noundef %26) #40
  br label %31

29:                                               ; preds = %3
  %30 = tail call <4 x half> @llvm.amdgcn.image.sample.1darray.v4f16.f32(i32 15, float %20, float %22, <8 x i32> %25, <4 x i32> %26, i1 false, i32 0, i32 0)
  br label %31

31:                                               ; preds = %29, %27
  %32 = phi <4 x half> [ %28, %27 ], [ %30, %29 ]
  ret <4 x half> %32
}

; Function Attrs: mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc <4 x half> @42(float noundef %0, float noundef %1, <8 x i32> noundef %2, <4 x i32> noundef %3) unnamed_addr #46 {
  %5 = tail call <4 x half> @llvm.amdgcn.image.sample.lz.1darray.v4f16.f32(i32 15, float %0, float %1, <8 x i32> %2, <4 x i32> %3, i1 false, i32 0, i32 0)
  ret <4 x half> %5
}

; Function Attrs: nounwind readonly willreturn
declare <4 x half> @llvm.amdgcn.image.sample.1darray.v4f16.f32(i32 immarg, float, float, <8 x i32>, <4 x i32>, i1 immarg, i32 immarg, i32 immarg) #40

; Function Attrs: nounwind readonly willreturn
declare <4 x half> @llvm.amdgcn.image.sample.lz.1darray.v4f16.f32(i32 immarg, float, float, <8 x i32>, <4 x i32>, i1 immarg, i32 immarg, i32 immarg) #40

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected <4 x half> @__ockl_image_sampleh_2D(ptr addrspace(4) nocapture noundef readonly %0, ptr addrspace(4) nocapture noundef readonly %1, <2 x float> noundef %2) local_unnamed_addr #45 {
  %4 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 10
  %5 = load i32, ptr addrspace(4) %4, align 4, !tbaa !11
  %6 = uitofp i32 %5 to float
  %7 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 2
  %8 = load i32, ptr addrspace(4) %7, align 4, !tbaa !11
  %9 = lshr i32 %8, 14
  %10 = and i32 %9, 16383
  %11 = add nuw nsw i32 %10, 1
  %12 = uitofp i32 %11 to float
  %13 = load i32, ptr addrspace(4) %1, align 4, !tbaa !11
  %14 = and i32 %13, 32768
  %15 = icmp eq i32 %14, 0
  %16 = select i1 %15, float %6, float 1.000000e+00
  %17 = select i1 %15, float %12, float 1.000000e+00
  %18 = extractelement <2 x float> %2, i64 0
  %19 = fmul float %18, %16
  %20 = tail call float @llvm.floor.f32(float %19)
  %21 = tail call float @llvm.amdgcn.rcp.f32(float %16)
  %22 = fmul float %21, %20
  %23 = extractelement <2 x float> %2, i64 1
  %24 = fmul float %23, %17
  %25 = tail call float @llvm.floor.f32(float %24)
  %26 = tail call float @llvm.amdgcn.rcp.f32(float %17)
  %27 = fmul float %26, %25
  %28 = getelementptr inbounds i32, ptr addrspace(4) %1, i64 2
  %29 = load i32, ptr addrspace(4) %28, align 4, !tbaa !11
  %30 = and i32 %29, 1048576
  %31 = icmp eq i32 %30, 0
  %32 = select i1 %31, float %22, float %18
  %33 = select i1 %31, float %27, float %23
  %34 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %35 = icmp eq i32 %34, 9010
  %36 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %37 = load <4 x i32>, ptr addrspace(4) %1, align 16, !tbaa !49
  br i1 %35, label %40, label %38

38:                                               ; preds = %3
  %39 = tail call fastcc <4 x half> @43(float noundef %32, float noundef %33, <8 x i32> noundef %36, <4 x i32> noundef %37) #40
  br label %42

40:                                               ; preds = %3
  %41 = tail call <4 x half> @llvm.amdgcn.image.sample.2d.v4f16.f32(i32 15, float %32, float %33, <8 x i32> %36, <4 x i32> %37, i1 false, i32 0, i32 0)
  br label %42

42:                                               ; preds = %40, %38
  %43 = phi <4 x half> [ %39, %38 ], [ %41, %40 ]
  ret <4 x half> %43
}

; Function Attrs: mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc <4 x half> @43(float noundef %0, float noundef %1, <8 x i32> noundef %2, <4 x i32> noundef %3) unnamed_addr #46 {
  %5 = tail call <4 x half> @llvm.amdgcn.image.sample.lz.2d.v4f16.f32(i32 15, float %0, float %1, <8 x i32> %2, <4 x i32> %3, i1 false, i32 0, i32 0)
  ret <4 x half> %5
}

; Function Attrs: nounwind readonly willreturn
declare <4 x half> @llvm.amdgcn.image.sample.2d.v4f16.f32(i32 immarg, float, float, <8 x i32>, <4 x i32>, i1 immarg, i32 immarg, i32 immarg) #40

; Function Attrs: nounwind readonly willreturn
declare <4 x half> @llvm.amdgcn.image.sample.lz.2d.v4f16.f32(i32 immarg, float, float, <8 x i32>, <4 x i32>, i1 immarg, i32 immarg, i32 immarg) #40

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected <4 x half> @__ockl_image_sampleh_2Da(ptr addrspace(4) nocapture noundef readonly %0, ptr addrspace(4) nocapture noundef readonly %1, <4 x float> noundef %2) local_unnamed_addr #45 {
  %4 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 10
  %5 = load i32, ptr addrspace(4) %4, align 4, !tbaa !11
  %6 = uitofp i32 %5 to float
  %7 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 2
  %8 = load i32, ptr addrspace(4) %7, align 4, !tbaa !11
  %9 = lshr i32 %8, 14
  %10 = and i32 %9, 16383
  %11 = add nuw nsw i32 %10, 1
  %12 = uitofp i32 %11 to float
  %13 = load i32, ptr addrspace(4) %1, align 4, !tbaa !11
  %14 = and i32 %13, 32768
  %15 = icmp eq i32 %14, 0
  %16 = select i1 %15, float %6, float 1.000000e+00
  %17 = select i1 %15, float %12, float 1.000000e+00
  %18 = extractelement <4 x float> %2, i64 0
  %19 = fmul float %18, %16
  %20 = tail call float @llvm.floor.f32(float %19)
  %21 = tail call float @llvm.amdgcn.rcp.f32(float %16)
  %22 = fmul float %21, %20
  %23 = extractelement <4 x float> %2, i64 1
  %24 = fmul float %23, %17
  %25 = tail call float @llvm.floor.f32(float %24)
  %26 = tail call float @llvm.amdgcn.rcp.f32(float %17)
  %27 = fmul float %26, %25
  %28 = getelementptr inbounds i32, ptr addrspace(4) %1, i64 2
  %29 = load i32, ptr addrspace(4) %28, align 4, !tbaa !11
  %30 = and i32 %29, 1048576
  %31 = icmp eq i32 %30, 0
  %32 = select i1 %31, float %22, float %18
  %33 = select i1 %31, float %27, float %23
  %34 = extractelement <4 x float> %2, i64 2
  %35 = tail call float @llvm.rint.f32(float %34)
  %36 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %37 = icmp eq i32 %36, 9010
  %38 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %39 = load <4 x i32>, ptr addrspace(4) %1, align 16, !tbaa !49
  br i1 %37, label %42, label %40

40:                                               ; preds = %3
  %41 = tail call fastcc <4 x half> @44(float noundef %32, float noundef %33, float noundef %35, <8 x i32> noundef %38, <4 x i32> noundef %39) #40
  br label %44

42:                                               ; preds = %3
  %43 = tail call <4 x half> @llvm.amdgcn.image.sample.2darray.v4f16.f32(i32 15, float %32, float %33, float %35, <8 x i32> %38, <4 x i32> %39, i1 false, i32 0, i32 0)
  br label %44

44:                                               ; preds = %42, %40
  %45 = phi <4 x half> [ %41, %40 ], [ %43, %42 ]
  ret <4 x half> %45
}

; Function Attrs: mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc <4 x half> @44(float noundef %0, float noundef %1, float noundef %2, <8 x i32> noundef %3, <4 x i32> noundef %4) unnamed_addr #46 {
  %6 = tail call <4 x half> @llvm.amdgcn.image.sample.lz.2darray.v4f16.f32(i32 15, float %0, float %1, float %2, <8 x i32> %3, <4 x i32> %4, i1 false, i32 0, i32 0)
  ret <4 x half> %6
}

; Function Attrs: nounwind readonly willreturn
declare <4 x half> @llvm.amdgcn.image.sample.2darray.v4f16.f32(i32 immarg, float, float, float, <8 x i32>, <4 x i32>, i1 immarg, i32 immarg, i32 immarg) #40

; Function Attrs: nounwind readonly willreturn
declare <4 x half> @llvm.amdgcn.image.sample.lz.2darray.v4f16.f32(i32 immarg, float, float, float, <8 x i32>, <4 x i32>, i1 immarg, i32 immarg, i32 immarg) #40

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected <4 x half> @__ockl_image_sampleh_3D(ptr addrspace(4) nocapture noundef readonly %0, ptr addrspace(4) nocapture noundef readonly %1, <4 x float> noundef %2) local_unnamed_addr #45 {
  %4 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 10
  %5 = load i32, ptr addrspace(4) %4, align 4, !tbaa !11
  %6 = uitofp i32 %5 to float
  %7 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 2
  %8 = load i32, ptr addrspace(4) %7, align 4, !tbaa !11
  %9 = lshr i32 %8, 14
  %10 = and i32 %9, 16383
  %11 = add nuw nsw i32 %10, 1
  %12 = uitofp i32 %11 to float
  %13 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 4
  %14 = load i32, ptr addrspace(4) %13, align 4, !tbaa !11
  %15 = and i32 %14, 8191
  %16 = add nuw nsw i32 %15, 1
  %17 = uitofp i32 %16 to float
  %18 = load i32, ptr addrspace(4) %1, align 4, !tbaa !11
  %19 = and i32 %18, 32768
  %20 = icmp eq i32 %19, 0
  %21 = select i1 %20, float %6, float 1.000000e+00
  %22 = select i1 %20, float %12, float 1.000000e+00
  %23 = select i1 %20, float %17, float 1.000000e+00
  %24 = extractelement <4 x float> %2, i64 0
  %25 = fmul float %24, %21
  %26 = tail call float @llvm.floor.f32(float %25)
  %27 = tail call float @llvm.amdgcn.rcp.f32(float %21)
  %28 = fmul float %27, %26
  %29 = extractelement <4 x float> %2, i64 1
  %30 = fmul float %29, %22
  %31 = tail call float @llvm.floor.f32(float %30)
  %32 = tail call float @llvm.amdgcn.rcp.f32(float %22)
  %33 = fmul float %32, %31
  %34 = extractelement <4 x float> %2, i64 2
  %35 = fmul float %34, %23
  %36 = tail call float @llvm.floor.f32(float %35)
  %37 = tail call float @llvm.amdgcn.rcp.f32(float %23)
  %38 = fmul float %37, %36
  %39 = getelementptr inbounds i32, ptr addrspace(4) %1, i64 2
  %40 = load i32, ptr addrspace(4) %39, align 4, !tbaa !11
  %41 = and i32 %40, 1048576
  %42 = icmp eq i32 %41, 0
  %43 = select i1 %42, float %28, float %24
  %44 = select i1 %42, float %33, float %29
  %45 = select i1 %42, float %38, float %34
  %46 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %47 = icmp eq i32 %46, 9010
  %48 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %49 = load <4 x i32>, ptr addrspace(4) %1, align 16, !tbaa !49
  br i1 %47, label %52, label %50

50:                                               ; preds = %3
  %51 = tail call fastcc <4 x half> @45(float noundef %43, float noundef %44, float noundef %45, <8 x i32> noundef %48, <4 x i32> noundef %49) #40
  br label %54

52:                                               ; preds = %3
  %53 = tail call <4 x half> @llvm.amdgcn.image.sample.3d.v4f16.f32(i32 15, float %43, float %44, float %45, <8 x i32> %48, <4 x i32> %49, i1 false, i32 0, i32 0)
  br label %54

54:                                               ; preds = %52, %50
  %55 = phi <4 x half> [ %51, %50 ], [ %53, %52 ]
  ret <4 x half> %55
}

; Function Attrs: mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc <4 x half> @45(float noundef %0, float noundef %1, float noundef %2, <8 x i32> noundef %3, <4 x i32> noundef %4) unnamed_addr #46 {
  %6 = tail call <4 x half> @llvm.amdgcn.image.sample.lz.3d.v4f16.f32(i32 15, float %0, float %1, float %2, <8 x i32> %3, <4 x i32> %4, i1 false, i32 0, i32 0)
  ret <4 x half> %6
}

; Function Attrs: nounwind readonly willreturn
declare <4 x half> @llvm.amdgcn.image.sample.3d.v4f16.f32(i32 immarg, float, float, float, <8 x i32>, <4 x i32>, i1 immarg, i32 immarg, i32 immarg) #40

; Function Attrs: nounwind readonly willreturn
declare <4 x half> @llvm.amdgcn.image.sample.lz.3d.v4f16.f32(i32 immarg, float, float, float, <8 x i32>, <4 x i32>, i1 immarg, i32 immarg, i32 immarg) #40

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected <4 x half> @__ockl_image_sampleh_CM(ptr addrspace(4) nocapture noundef readonly %0, ptr addrspace(4) nocapture noundef readonly %1, <4 x float> noundef %2) local_unnamed_addr #45 {
  %4 = extractelement <4 x float> %2, i64 0
  %5 = extractelement <4 x float> %2, i64 1
  %6 = extractelement <4 x float> %2, i64 2
  %7 = tail call float @llvm.amdgcn.cubema(float %4, float %5, float %6)
  %8 = tail call float @llvm.amdgcn.rcp.f32(float %7)
  %9 = tail call float @llvm.amdgcn.cubesc(float %4, float %5, float %6)
  %10 = tail call float @llvm.fmuladd.f32(float %9, float %8, float 5.000000e-01)
  %11 = tail call float @llvm.amdgcn.cubetc(float %4, float %5, float %6)
  %12 = tail call float @llvm.fmuladd.f32(float %11, float %8, float 5.000000e-01)
  %13 = tail call float @llvm.amdgcn.cubeid(float %4, float %5, float %6)
  %14 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %15 = icmp eq i32 %14, 9010
  %16 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %17 = load <4 x i32>, ptr addrspace(4) %1, align 16, !tbaa !49
  br i1 %15, label %20, label %18

18:                                               ; preds = %3
  %19 = tail call fastcc <4 x half> @46(float noundef %10, float noundef %12, float noundef %13, <8 x i32> noundef %16, <4 x i32> noundef %17) #40
  br label %22

20:                                               ; preds = %3
  %21 = tail call <4 x half> @llvm.amdgcn.image.sample.cube.v4f16.f32(i32 15, float %10, float %12, float %13, <8 x i32> %16, <4 x i32> %17, i1 false, i32 0, i32 0)
  br label %22

22:                                               ; preds = %20, %18
  %23 = phi <4 x half> [ %19, %18 ], [ %21, %20 ]
  ret <4 x half> %23
}

; Function Attrs: mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc <4 x half> @46(float noundef %0, float noundef %1, float noundef %2, <8 x i32> noundef %3, <4 x i32> noundef %4) unnamed_addr #46 {
  %6 = tail call <4 x half> @llvm.amdgcn.image.sample.lz.cube.v4f16.f32(i32 15, float %0, float %1, float %2, <8 x i32> %3, <4 x i32> %4, i1 false, i32 0, i32 0)
  ret <4 x half> %6
}

; Function Attrs: nounwind readonly willreturn
declare <4 x half> @llvm.amdgcn.image.sample.cube.v4f16.f32(i32 immarg, float, float, float, <8 x i32>, <4 x i32>, i1 immarg, i32 immarg, i32 immarg) #40

; Function Attrs: nounwind readonly willreturn
declare <4 x half> @llvm.amdgcn.image.sample.lz.cube.v4f16.f32(i32 immarg, float, float, float, <8 x i32>, <4 x i32>, i1 immarg, i32 immarg, i32 immarg) #40

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected <4 x half> @__ockl_image_sampleh_CMa(ptr addrspace(4) nocapture noundef readonly %0, ptr addrspace(4) nocapture noundef readonly %1, <4 x float> noundef %2) local_unnamed_addr #45 {
  %4 = extractelement <4 x float> %2, i64 0
  %5 = extractelement <4 x float> %2, i64 1
  %6 = extractelement <4 x float> %2, i64 2
  %7 = tail call float @llvm.amdgcn.cubema(float %4, float %5, float %6)
  %8 = tail call float @llvm.amdgcn.rcp.f32(float %7)
  %9 = tail call float @llvm.amdgcn.cubesc(float %4, float %5, float %6)
  %10 = tail call float @llvm.fmuladd.f32(float %9, float %8, float 5.000000e-01)
  %11 = tail call float @llvm.amdgcn.cubetc(float %4, float %5, float %6)
  %12 = tail call float @llvm.fmuladd.f32(float %11, float %8, float 5.000000e-01)
  %13 = tail call float @llvm.amdgcn.cubeid(float %4, float %5, float %6)
  %14 = extractelement <4 x float> %2, i64 3
  %15 = tail call float @llvm.rint.f32(float %14)
  %16 = tail call float @llvm.fmuladd.f32(float %15, float 8.000000e+00, float %13)
  %17 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %18 = icmp eq i32 %17, 9010
  %19 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %20 = load <4 x i32>, ptr addrspace(4) %1, align 16, !tbaa !49
  br i1 %18, label %23, label %21

21:                                               ; preds = %3
  %22 = tail call fastcc <4 x half> @46(float noundef %10, float noundef %12, float noundef %16, <8 x i32> noundef %19, <4 x i32> noundef %20) #40
  br label %25

23:                                               ; preds = %3
  %24 = tail call <4 x half> @llvm.amdgcn.image.sample.cube.v4f16.f32(i32 15, float %10, float %12, float %16, <8 x i32> %19, <4 x i32> %20, i1 false, i32 0, i32 0)
  br label %25

25:                                               ; preds = %23, %21
  %26 = phi <4 x half> [ %22, %21 ], [ %24, %23 ]
  ret <4 x half> %26
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected <4 x half> @__ockl_image_sampleh_grad_1D(ptr addrspace(4) nocapture noundef readonly %0, ptr addrspace(4) nocapture noundef readonly %1, float noundef %2, float noundef %3, float noundef %4) local_unnamed_addr #47 {
  %6 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 10
  %7 = load i32, ptr addrspace(4) %6, align 4, !tbaa !11
  %8 = uitofp i32 %7 to float
  %9 = load i32, ptr addrspace(4) %1, align 4, !tbaa !11
  %10 = and i32 %9, 32768
  %11 = icmp eq i32 %10, 0
  %12 = select i1 %11, float %8, float 1.000000e+00
  %13 = fmul float %12, %2
  %14 = tail call float @llvm.floor.f32(float %13)
  %15 = tail call float @llvm.amdgcn.rcp.f32(float %12)
  %16 = fmul float %15, %14
  %17 = getelementptr inbounds i32, ptr addrspace(4) %1, i64 2
  %18 = load i32, ptr addrspace(4) %17, align 4, !tbaa !11
  %19 = and i32 %18, 1048576
  %20 = icmp eq i32 %19, 0
  %21 = select i1 %20, float %16, float %2
  %22 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %23 = load <4 x i32>, ptr addrspace(4) %1, align 16, !tbaa !49
  %24 = tail call fastcc <4 x half> @47(float noundef %3, float noundef %4, float noundef %21, <8 x i32> noundef %22, <4 x i32> noundef %23) #40
  ret <4 x half> %24
}

; Function Attrs: mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc <4 x half> @47(float noundef %0, float noundef %1, float noundef %2, <8 x i32> noundef %3, <4 x i32> noundef %4) unnamed_addr #46 {
  %6 = tail call <4 x half> @llvm.amdgcn.image.sample.d.1d.v4f16.f32.f32(i32 15, float %0, float %1, float %2, <8 x i32> %3, <4 x i32> %4, i1 false, i32 0, i32 0)
  ret <4 x half> %6
}

; Function Attrs: nounwind readonly willreturn
declare <4 x half> @llvm.amdgcn.image.sample.d.1d.v4f16.f32.f32(i32 immarg, float, float, float, <8 x i32>, <4 x i32>, i1 immarg, i32 immarg, i32 immarg) #40

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected <4 x half> @__ockl_image_sampleh_grad_1Da(ptr addrspace(4) nocapture noundef readonly %0, ptr addrspace(4) nocapture noundef readonly %1, <2 x float> noundef %2, float noundef %3, float noundef %4) local_unnamed_addr #47 {
  %6 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 10
  %7 = load i32, ptr addrspace(4) %6, align 4, !tbaa !11
  %8 = uitofp i32 %7 to float
  %9 = load i32, ptr addrspace(4) %1, align 4, !tbaa !11
  %10 = and i32 %9, 32768
  %11 = icmp eq i32 %10, 0
  %12 = select i1 %11, float %8, float 1.000000e+00
  %13 = extractelement <2 x float> %2, i64 0
  %14 = fmul float %13, %12
  %15 = tail call float @llvm.floor.f32(float %14)
  %16 = tail call float @llvm.amdgcn.rcp.f32(float %12)
  %17 = fmul float %16, %15
  %18 = getelementptr inbounds i32, ptr addrspace(4) %1, i64 2
  %19 = load i32, ptr addrspace(4) %18, align 4, !tbaa !11
  %20 = and i32 %19, 1048576
  %21 = icmp eq i32 %20, 0
  %22 = select i1 %21, float %17, float %13
  %23 = extractelement <2 x float> %2, i64 1
  %24 = tail call float @llvm.rint.f32(float %23)
  %25 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %26 = load <4 x i32>, ptr addrspace(4) %1, align 16, !tbaa !49
  %27 = tail call fastcc <4 x half> @48(float noundef %3, float noundef %4, float noundef %22, float noundef %24, <8 x i32> noundef %25, <4 x i32> noundef %26) #40
  ret <4 x half> %27
}

; Function Attrs: mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc <4 x half> @48(float noundef %0, float noundef %1, float noundef %2, float noundef %3, <8 x i32> noundef %4, <4 x i32> noundef %5) unnamed_addr #46 {
  %7 = tail call <4 x half> @llvm.amdgcn.image.sample.d.1darray.v4f16.f32.f32(i32 15, float %0, float %1, float %2, float %3, <8 x i32> %4, <4 x i32> %5, i1 false, i32 0, i32 0)
  ret <4 x half> %7
}

; Function Attrs: nounwind readonly willreturn
declare <4 x half> @llvm.amdgcn.image.sample.d.1darray.v4f16.f32.f32(i32 immarg, float, float, float, float, <8 x i32>, <4 x i32>, i1 immarg, i32 immarg, i32 immarg) #40

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected <4 x half> @__ockl_image_sampleh_grad_2D(ptr addrspace(4) nocapture noundef readonly %0, ptr addrspace(4) nocapture noundef readonly %1, <2 x float> noundef %2, <2 x float> noundef %3, <2 x float> noundef %4) local_unnamed_addr #47 {
  %6 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 10
  %7 = load i32, ptr addrspace(4) %6, align 4, !tbaa !11
  %8 = uitofp i32 %7 to float
  %9 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 2
  %10 = load i32, ptr addrspace(4) %9, align 4, !tbaa !11
  %11 = lshr i32 %10, 14
  %12 = and i32 %11, 16383
  %13 = add nuw nsw i32 %12, 1
  %14 = uitofp i32 %13 to float
  %15 = load i32, ptr addrspace(4) %1, align 4, !tbaa !11
  %16 = and i32 %15, 32768
  %17 = icmp eq i32 %16, 0
  %18 = select i1 %17, float %8, float 1.000000e+00
  %19 = select i1 %17, float %14, float 1.000000e+00
  %20 = extractelement <2 x float> %2, i64 0
  %21 = fmul float %20, %18
  %22 = tail call float @llvm.floor.f32(float %21)
  %23 = tail call float @llvm.amdgcn.rcp.f32(float %18)
  %24 = fmul float %23, %22
  %25 = extractelement <2 x float> %2, i64 1
  %26 = fmul float %25, %19
  %27 = tail call float @llvm.floor.f32(float %26)
  %28 = tail call float @llvm.amdgcn.rcp.f32(float %19)
  %29 = fmul float %28, %27
  %30 = getelementptr inbounds i32, ptr addrspace(4) %1, i64 2
  %31 = load i32, ptr addrspace(4) %30, align 4, !tbaa !11
  %32 = and i32 %31, 1048576
  %33 = icmp eq i32 %32, 0
  %34 = select i1 %33, float %24, float %20
  %35 = select i1 %33, float %29, float %25
  %36 = extractelement <2 x float> %3, i64 0
  %37 = extractelement <2 x float> %3, i64 1
  %38 = extractelement <2 x float> %4, i64 0
  %39 = extractelement <2 x float> %4, i64 1
  %40 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %41 = load <4 x i32>, ptr addrspace(4) %1, align 16, !tbaa !49
  %42 = tail call fastcc <4 x half> @49(float noundef %36, float noundef %37, float noundef %38, float noundef %39, float noundef %34, float noundef %35, <8 x i32> noundef %40, <4 x i32> noundef %41) #40
  ret <4 x half> %42
}

; Function Attrs: mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc <4 x half> @49(float noundef %0, float noundef %1, float noundef %2, float noundef %3, float noundef %4, float noundef %5, <8 x i32> noundef %6, <4 x i32> noundef %7) unnamed_addr #46 {
  %9 = tail call <4 x half> @llvm.amdgcn.image.sample.d.2d.v4f16.f32.f32(i32 15, float %0, float %1, float %2, float %3, float %4, float %5, <8 x i32> %6, <4 x i32> %7, i1 false, i32 0, i32 0)
  ret <4 x half> %9
}

; Function Attrs: nounwind readonly willreturn
declare <4 x half> @llvm.amdgcn.image.sample.d.2d.v4f16.f32.f32(i32 immarg, float, float, float, float, float, float, <8 x i32>, <4 x i32>, i1 immarg, i32 immarg, i32 immarg) #40

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected <4 x half> @__ockl_image_sampleh_grad_2Da(ptr addrspace(4) nocapture noundef readonly %0, ptr addrspace(4) nocapture noundef readonly %1, <4 x float> noundef %2, <2 x float> noundef %3, <2 x float> noundef %4) local_unnamed_addr #47 {
  %6 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 10
  %7 = load i32, ptr addrspace(4) %6, align 4, !tbaa !11
  %8 = uitofp i32 %7 to float
  %9 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 2
  %10 = load i32, ptr addrspace(4) %9, align 4, !tbaa !11
  %11 = lshr i32 %10, 14
  %12 = and i32 %11, 16383
  %13 = add nuw nsw i32 %12, 1
  %14 = uitofp i32 %13 to float
  %15 = load i32, ptr addrspace(4) %1, align 4, !tbaa !11
  %16 = and i32 %15, 32768
  %17 = icmp eq i32 %16, 0
  %18 = select i1 %17, float %8, float 1.000000e+00
  %19 = select i1 %17, float %14, float 1.000000e+00
  %20 = extractelement <4 x float> %2, i64 0
  %21 = fmul float %20, %18
  %22 = tail call float @llvm.floor.f32(float %21)
  %23 = tail call float @llvm.amdgcn.rcp.f32(float %18)
  %24 = fmul float %23, %22
  %25 = extractelement <4 x float> %2, i64 1
  %26 = fmul float %25, %19
  %27 = tail call float @llvm.floor.f32(float %26)
  %28 = tail call float @llvm.amdgcn.rcp.f32(float %19)
  %29 = fmul float %28, %27
  %30 = getelementptr inbounds i32, ptr addrspace(4) %1, i64 2
  %31 = load i32, ptr addrspace(4) %30, align 4, !tbaa !11
  %32 = and i32 %31, 1048576
  %33 = icmp eq i32 %32, 0
  %34 = select i1 %33, float %24, float %20
  %35 = select i1 %33, float %29, float %25
  %36 = extractelement <4 x float> %2, i64 2
  %37 = tail call float @llvm.rint.f32(float %36)
  %38 = extractelement <2 x float> %3, i64 0
  %39 = extractelement <2 x float> %3, i64 1
  %40 = extractelement <2 x float> %4, i64 0
  %41 = extractelement <2 x float> %4, i64 1
  %42 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %43 = load <4 x i32>, ptr addrspace(4) %1, align 16, !tbaa !49
  %44 = tail call fastcc <4 x half> @50(float noundef %38, float noundef %39, float noundef %40, float noundef %41, float noundef %34, float noundef %35, float noundef %37, <8 x i32> noundef %42, <4 x i32> noundef %43) #40
  ret <4 x half> %44
}

; Function Attrs: mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc <4 x half> @50(float noundef %0, float noundef %1, float noundef %2, float noundef %3, float noundef %4, float noundef %5, float noundef %6, <8 x i32> noundef %7, <4 x i32> noundef %8) unnamed_addr #46 {
  %10 = tail call <4 x half> @llvm.amdgcn.image.sample.d.2darray.v4f16.f32.f32(i32 15, float %0, float %1, float %2, float %3, float %4, float %5, float %6, <8 x i32> %7, <4 x i32> %8, i1 false, i32 0, i32 0)
  ret <4 x half> %10
}

; Function Attrs: nounwind readonly willreturn
declare <4 x half> @llvm.amdgcn.image.sample.d.2darray.v4f16.f32.f32(i32 immarg, float, float, float, float, float, float, float, <8 x i32>, <4 x i32>, i1 immarg, i32 immarg, i32 immarg) #40

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected <4 x half> @__ockl_image_sampleh_grad_3D(ptr addrspace(4) nocapture noundef readonly %0, ptr addrspace(4) nocapture noundef readonly %1, <4 x float> noundef %2, <4 x float> noundef %3, <4 x float> noundef %4) local_unnamed_addr #47 {
  %6 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 10
  %7 = load i32, ptr addrspace(4) %6, align 4, !tbaa !11
  %8 = uitofp i32 %7 to float
  %9 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 2
  %10 = load i32, ptr addrspace(4) %9, align 4, !tbaa !11
  %11 = lshr i32 %10, 14
  %12 = and i32 %11, 16383
  %13 = add nuw nsw i32 %12, 1
  %14 = uitofp i32 %13 to float
  %15 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 4
  %16 = load i32, ptr addrspace(4) %15, align 4, !tbaa !11
  %17 = and i32 %16, 8191
  %18 = add nuw nsw i32 %17, 1
  %19 = uitofp i32 %18 to float
  %20 = load i32, ptr addrspace(4) %1, align 4, !tbaa !11
  %21 = and i32 %20, 32768
  %22 = icmp eq i32 %21, 0
  %23 = select i1 %22, float %8, float 1.000000e+00
  %24 = select i1 %22, float %14, float 1.000000e+00
  %25 = select i1 %22, float %19, float 1.000000e+00
  %26 = extractelement <4 x float> %2, i64 0
  %27 = fmul float %26, %23
  %28 = tail call float @llvm.floor.f32(float %27)
  %29 = tail call float @llvm.amdgcn.rcp.f32(float %23)
  %30 = fmul float %29, %28
  %31 = extractelement <4 x float> %2, i64 1
  %32 = fmul float %31, %24
  %33 = tail call float @llvm.floor.f32(float %32)
  %34 = tail call float @llvm.amdgcn.rcp.f32(float %24)
  %35 = fmul float %34, %33
  %36 = extractelement <4 x float> %2, i64 2
  %37 = fmul float %36, %25
  %38 = tail call float @llvm.floor.f32(float %37)
  %39 = tail call float @llvm.amdgcn.rcp.f32(float %25)
  %40 = fmul float %39, %38
  %41 = getelementptr inbounds i32, ptr addrspace(4) %1, i64 2
  %42 = load i32, ptr addrspace(4) %41, align 4, !tbaa !11
  %43 = and i32 %42, 1048576
  %44 = icmp eq i32 %43, 0
  %45 = select i1 %44, float %30, float %26
  %46 = select i1 %44, float %35, float %31
  %47 = select i1 %44, float %40, float %36
  %48 = extractelement <4 x float> %3, i64 0
  %49 = extractelement <4 x float> %3, i64 1
  %50 = extractelement <4 x float> %3, i64 2
  %51 = extractelement <4 x float> %4, i64 0
  %52 = extractelement <4 x float> %4, i64 1
  %53 = extractelement <4 x float> %4, i64 2
  %54 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %55 = load <4 x i32>, ptr addrspace(4) %1, align 16, !tbaa !49
  %56 = tail call fastcc <4 x half> @51(float noundef %48, float noundef %49, float noundef %50, float noundef %51, float noundef %52, float noundef %53, float noundef %45, float noundef %46, float noundef %47, <8 x i32> noundef %54, <4 x i32> noundef %55) #40
  ret <4 x half> %56
}

; Function Attrs: mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc <4 x half> @51(float noundef %0, float noundef %1, float noundef %2, float noundef %3, float noundef %4, float noundef %5, float noundef %6, float noundef %7, float noundef %8, <8 x i32> noundef %9, <4 x i32> noundef %10) unnamed_addr #46 {
  %12 = tail call <4 x half> @llvm.amdgcn.image.sample.d.3d.v4f16.f32.f32(i32 15, float %0, float %1, float %2, float %3, float %4, float %5, float %6, float %7, float %8, <8 x i32> %9, <4 x i32> %10, i1 false, i32 0, i32 0)
  ret <4 x half> %12
}

; Function Attrs: nounwind readonly willreturn
declare <4 x half> @llvm.amdgcn.image.sample.d.3d.v4f16.f32.f32(i32 immarg, float, float, float, float, float, float, float, float, float, <8 x i32>, <4 x i32>, i1 immarg, i32 immarg, i32 immarg) #40

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected <4 x half> @__ockl_image_sampleh_lod_1D(ptr addrspace(4) nocapture noundef readonly %0, ptr addrspace(4) nocapture noundef readonly %1, float noundef %2, float noundef %3) local_unnamed_addr #47 {
  %5 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %6 = load <4 x i32>, ptr addrspace(4) %1, align 16, !tbaa !49
  %7 = tail call fastcc <4 x half> @52(float noundef %2, float noundef %3, <8 x i32> noundef %5, <4 x i32> noundef %6) #40
  ret <4 x half> %7
}

; Function Attrs: mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc <4 x half> @52(float noundef %0, float noundef %1, <8 x i32> noundef %2, <4 x i32> noundef %3) unnamed_addr #46 {
  %5 = tail call <4 x half> @llvm.amdgcn.image.sample.l.1d.v4f16.f32(i32 15, float %0, float %1, <8 x i32> %2, <4 x i32> %3, i1 false, i32 0, i32 0)
  ret <4 x half> %5
}

; Function Attrs: nounwind readonly willreturn
declare <4 x half> @llvm.amdgcn.image.sample.l.1d.v4f16.f32(i32 immarg, float, float, <8 x i32>, <4 x i32>, i1 immarg, i32 immarg, i32 immarg) #40

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected <4 x half> @__ockl_image_sampleh_lod_1Da(ptr addrspace(4) nocapture noundef readonly %0, ptr addrspace(4) nocapture noundef readonly %1, <2 x float> noundef %2, float noundef %3) local_unnamed_addr #47 {
  %5 = extractelement <2 x float> %2, i64 1
  %6 = tail call float @llvm.rint.f32(float %5)
  %7 = extractelement <2 x float> %2, i64 0
  %8 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %9 = load <4 x i32>, ptr addrspace(4) %1, align 16, !tbaa !49
  %10 = tail call fastcc <4 x half> @53(float noundef %7, float noundef %6, float noundef %3, <8 x i32> noundef %8, <4 x i32> noundef %9) #40
  ret <4 x half> %10
}

; Function Attrs: mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc <4 x half> @53(float noundef %0, float noundef %1, float noundef %2, <8 x i32> noundef %3, <4 x i32> noundef %4) unnamed_addr #46 {
  %6 = tail call <4 x half> @llvm.amdgcn.image.sample.l.1darray.v4f16.f32(i32 15, float %0, float %1, float %2, <8 x i32> %3, <4 x i32> %4, i1 false, i32 0, i32 0)
  ret <4 x half> %6
}

; Function Attrs: nounwind readonly willreturn
declare <4 x half> @llvm.amdgcn.image.sample.l.1darray.v4f16.f32(i32 immarg, float, float, float, <8 x i32>, <4 x i32>, i1 immarg, i32 immarg, i32 immarg) #40

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected <4 x half> @__ockl_image_sampleh_lod_2D(ptr addrspace(4) nocapture noundef readonly %0, ptr addrspace(4) nocapture noundef readonly %1, <2 x float> noundef %2, float noundef %3) local_unnamed_addr #47 {
  %5 = extractelement <2 x float> %2, i64 0
  %6 = extractelement <2 x float> %2, i64 1
  %7 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %8 = load <4 x i32>, ptr addrspace(4) %1, align 16, !tbaa !49
  %9 = tail call fastcc <4 x half> @54(float noundef %5, float noundef %6, float noundef %3, <8 x i32> noundef %7, <4 x i32> noundef %8) #40
  ret <4 x half> %9
}

; Function Attrs: mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc <4 x half> @54(float noundef %0, float noundef %1, float noundef %2, <8 x i32> noundef %3, <4 x i32> noundef %4) unnamed_addr #46 {
  %6 = tail call <4 x half> @llvm.amdgcn.image.sample.l.2d.v4f16.f32(i32 15, float %0, float %1, float %2, <8 x i32> %3, <4 x i32> %4, i1 false, i32 0, i32 0)
  ret <4 x half> %6
}

; Function Attrs: nounwind readonly willreturn
declare <4 x half> @llvm.amdgcn.image.sample.l.2d.v4f16.f32(i32 immarg, float, float, float, <8 x i32>, <4 x i32>, i1 immarg, i32 immarg, i32 immarg) #40

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected <4 x half> @__ockl_image_sampleh_lod_2Da(ptr addrspace(4) nocapture noundef readonly %0, ptr addrspace(4) nocapture noundef readonly %1, <4 x float> noundef %2, float noundef %3) local_unnamed_addr #47 {
  %5 = extractelement <4 x float> %2, i64 2
  %6 = tail call float @llvm.rint.f32(float %5)
  %7 = extractelement <4 x float> %2, i64 0
  %8 = extractelement <4 x float> %2, i64 1
  %9 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %10 = load <4 x i32>, ptr addrspace(4) %1, align 16, !tbaa !49
  %11 = tail call fastcc <4 x half> @55(float noundef %7, float noundef %8, float noundef %6, float noundef %3, <8 x i32> noundef %9, <4 x i32> noundef %10) #40
  ret <4 x half> %11
}

; Function Attrs: mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc <4 x half> @55(float noundef %0, float noundef %1, float noundef %2, float noundef %3, <8 x i32> noundef %4, <4 x i32> noundef %5) unnamed_addr #46 {
  %7 = tail call <4 x half> @llvm.amdgcn.image.sample.l.2darray.v4f16.f32(i32 15, float %0, float %1, float %2, float %3, <8 x i32> %4, <4 x i32> %5, i1 false, i32 0, i32 0)
  ret <4 x half> %7
}

; Function Attrs: nounwind readonly willreturn
declare <4 x half> @llvm.amdgcn.image.sample.l.2darray.v4f16.f32(i32 immarg, float, float, float, float, <8 x i32>, <4 x i32>, i1 immarg, i32 immarg, i32 immarg) #40

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected <4 x half> @__ockl_image_sampleh_lod_3D(ptr addrspace(4) nocapture noundef readonly %0, ptr addrspace(4) nocapture noundef readonly %1, <4 x float> noundef %2, float noundef %3) local_unnamed_addr #47 {
  %5 = extractelement <4 x float> %2, i64 0
  %6 = extractelement <4 x float> %2, i64 1
  %7 = extractelement <4 x float> %2, i64 2
  %8 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %9 = load <4 x i32>, ptr addrspace(4) %1, align 16, !tbaa !49
  %10 = tail call fastcc <4 x half> @56(float noundef %5, float noundef %6, float noundef %7, float noundef %3, <8 x i32> noundef %8, <4 x i32> noundef %9) #40
  ret <4 x half> %10
}

; Function Attrs: mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc <4 x half> @56(float noundef %0, float noundef %1, float noundef %2, float noundef %3, <8 x i32> noundef %4, <4 x i32> noundef %5) unnamed_addr #46 {
  %7 = tail call <4 x half> @llvm.amdgcn.image.sample.l.3d.v4f16.f32(i32 15, float %0, float %1, float %2, float %3, <8 x i32> %4, <4 x i32> %5, i1 false, i32 0, i32 0)
  ret <4 x half> %7
}

; Function Attrs: nounwind readonly willreturn
declare <4 x half> @llvm.amdgcn.image.sample.l.3d.v4f16.f32(i32 immarg, float, float, float, float, <8 x i32>, <4 x i32>, i1 immarg, i32 immarg, i32 immarg) #40

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected <4 x half> @__ockl_image_sampleh_lod_CM(ptr addrspace(4) nocapture noundef readonly %0, ptr addrspace(4) nocapture noundef readonly %1, <4 x float> noundef %2, float noundef %3) local_unnamed_addr #47 {
  %5 = extractelement <4 x float> %2, i64 0
  %6 = extractelement <4 x float> %2, i64 1
  %7 = extractelement <4 x float> %2, i64 2
  %8 = tail call float @llvm.amdgcn.cubema(float %5, float %6, float %7)
  %9 = tail call float @llvm.amdgcn.rcp.f32(float %8)
  %10 = tail call float @llvm.amdgcn.cubesc(float %5, float %6, float %7)
  %11 = tail call float @llvm.fmuladd.f32(float %10, float %9, float 5.000000e-01)
  %12 = tail call float @llvm.amdgcn.cubetc(float %5, float %6, float %7)
  %13 = tail call float @llvm.fmuladd.f32(float %12, float %9, float 5.000000e-01)
  %14 = tail call float @llvm.amdgcn.cubeid(float %5, float %6, float %7)
  %15 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %16 = load <4 x i32>, ptr addrspace(4) %1, align 16, !tbaa !49
  %17 = tail call fastcc <4 x half> @57(float noundef %11, float noundef %13, float noundef %14, float noundef %3, <8 x i32> noundef %15, <4 x i32> noundef %16) #40
  ret <4 x half> %17
}

; Function Attrs: mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc <4 x half> @57(float noundef %0, float noundef %1, float noundef %2, float noundef %3, <8 x i32> noundef %4, <4 x i32> noundef %5) unnamed_addr #46 {
  %7 = tail call <4 x half> @llvm.amdgcn.image.sample.l.cube.v4f16.f32(i32 15, float %0, float %1, float %2, float %3, <8 x i32> %4, <4 x i32> %5, i1 false, i32 0, i32 0)
  ret <4 x half> %7
}

; Function Attrs: nounwind readonly willreturn
declare <4 x half> @llvm.amdgcn.image.sample.l.cube.v4f16.f32(i32 immarg, float, float, float, float, <8 x i32>, <4 x i32>, i1 immarg, i32 immarg, i32 immarg) #40

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected <4 x half> @__ockl_image_sampleh_lod_CMa(ptr addrspace(4) nocapture noundef readonly %0, ptr addrspace(4) nocapture noundef readonly %1, <4 x float> noundef %2, float noundef %3) local_unnamed_addr #47 {
  %5 = extractelement <4 x float> %2, i64 0
  %6 = extractelement <4 x float> %2, i64 1
  %7 = extractelement <4 x float> %2, i64 2
  %8 = tail call float @llvm.amdgcn.cubema(float %5, float %6, float %7)
  %9 = tail call float @llvm.amdgcn.rcp.f32(float %8)
  %10 = tail call float @llvm.amdgcn.cubesc(float %5, float %6, float %7)
  %11 = tail call float @llvm.fmuladd.f32(float %10, float %9, float 5.000000e-01)
  %12 = tail call float @llvm.amdgcn.cubetc(float %5, float %6, float %7)
  %13 = tail call float @llvm.fmuladd.f32(float %12, float %9, float 5.000000e-01)
  %14 = tail call float @llvm.amdgcn.cubeid(float %5, float %6, float %7)
  %15 = extractelement <4 x float> %2, i64 3
  %16 = tail call float @llvm.rint.f32(float %15)
  %17 = tail call float @llvm.fmuladd.f32(float %16, float 8.000000e+00, float %14)
  %18 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %19 = load <4 x i32>, ptr addrspace(4) %1, align 16, !tbaa !49
  %20 = tail call fastcc <4 x half> @57(float noundef %11, float noundef %13, float noundef %17, float noundef %3, <8 x i32> noundef %18, <4 x i32> noundef %19) #40
  ret <4 x half> %20
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected <4 x float> @__ockl_image_gather4r_2D(ptr addrspace(4) nocapture noundef readonly %0, ptr addrspace(4) nocapture noundef readonly %1, <2 x float> noundef %2) local_unnamed_addr #47 {
  %4 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 10
  %5 = load i32, ptr addrspace(4) %4, align 4, !tbaa !11
  %6 = uitofp i32 %5 to float
  %7 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 2
  %8 = load i32, ptr addrspace(4) %7, align 4, !tbaa !11
  %9 = lshr i32 %8, 14
  %10 = and i32 %9, 16383
  %11 = add nuw nsw i32 %10, 1
  %12 = uitofp i32 %11 to float
  %13 = load i32, ptr addrspace(4) %1, align 4, !tbaa !11
  %14 = and i32 %13, 32768
  %15 = icmp eq i32 %14, 0
  %16 = select i1 %15, float %6, float 1.000000e+00
  %17 = select i1 %15, float %12, float 1.000000e+00
  %18 = extractelement <2 x float> %2, i64 0
  %19 = fmul float %18, %16
  %20 = tail call float @llvm.floor.f32(float %19)
  %21 = tail call float @llvm.amdgcn.rcp.f32(float %16)
  %22 = fmul float %21, %20
  %23 = extractelement <2 x float> %2, i64 1
  %24 = fmul float %23, %17
  %25 = tail call float @llvm.floor.f32(float %24)
  %26 = tail call float @llvm.amdgcn.rcp.f32(float %17)
  %27 = fmul float %26, %25
  %28 = getelementptr inbounds i32, ptr addrspace(4) %1, i64 2
  %29 = load i32, ptr addrspace(4) %28, align 4, !tbaa !11
  %30 = and i32 %29, 1048576
  %31 = icmp eq i32 %30, 0
  %32 = select i1 %31, float %22, float %18
  %33 = select i1 %31, float %27, float %23
  %34 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %35 = load <4 x i32>, ptr addrspace(4) %1, align 16, !tbaa !49
  %36 = tail call fastcc <4 x float> @58(float noundef %32, float noundef %33, <8 x i32> noundef %34, <4 x i32> noundef %35) #40
  ret <4 x float> %36
}

; Function Attrs: mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc <4 x float> @58(float noundef %0, float noundef %1, <8 x i32> noundef %2, <4 x i32> noundef %3) unnamed_addr #46 {
  %5 = tail call <4 x float> @llvm.amdgcn.image.gather4.lz.2d.v4f32.f32(i32 1, float %0, float %1, <8 x i32> %2, <4 x i32> %3, i1 false, i32 0, i32 0)
  ret <4 x float> %5
}

; Function Attrs: nounwind readonly willreturn
declare <4 x float> @llvm.amdgcn.image.gather4.lz.2d.v4f32.f32(i32 immarg, float, float, <8 x i32>, <4 x i32>, i1 immarg, i32 immarg, i32 immarg) #40

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected <4 x float> @__ockl_image_gather4g_2D(ptr addrspace(4) nocapture noundef readonly %0, ptr addrspace(4) nocapture noundef readonly %1, <2 x float> noundef %2) local_unnamed_addr #47 {
  %4 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 10
  %5 = load i32, ptr addrspace(4) %4, align 4, !tbaa !11
  %6 = uitofp i32 %5 to float
  %7 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 2
  %8 = load i32, ptr addrspace(4) %7, align 4, !tbaa !11
  %9 = lshr i32 %8, 14
  %10 = and i32 %9, 16383
  %11 = add nuw nsw i32 %10, 1
  %12 = uitofp i32 %11 to float
  %13 = load i32, ptr addrspace(4) %1, align 4, !tbaa !11
  %14 = and i32 %13, 32768
  %15 = icmp eq i32 %14, 0
  %16 = select i1 %15, float %6, float 1.000000e+00
  %17 = select i1 %15, float %12, float 1.000000e+00
  %18 = extractelement <2 x float> %2, i64 0
  %19 = fmul float %18, %16
  %20 = tail call float @llvm.floor.f32(float %19)
  %21 = tail call float @llvm.amdgcn.rcp.f32(float %16)
  %22 = fmul float %21, %20
  %23 = extractelement <2 x float> %2, i64 1
  %24 = fmul float %23, %17
  %25 = tail call float @llvm.floor.f32(float %24)
  %26 = tail call float @llvm.amdgcn.rcp.f32(float %17)
  %27 = fmul float %26, %25
  %28 = getelementptr inbounds i32, ptr addrspace(4) %1, i64 2
  %29 = load i32, ptr addrspace(4) %28, align 4, !tbaa !11
  %30 = and i32 %29, 1048576
  %31 = icmp eq i32 %30, 0
  %32 = select i1 %31, float %22, float %18
  %33 = select i1 %31, float %27, float %23
  %34 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %35 = load <4 x i32>, ptr addrspace(4) %1, align 16, !tbaa !49
  %36 = tail call fastcc <4 x float> @59(float noundef %32, float noundef %33, <8 x i32> noundef %34, <4 x i32> noundef %35) #40
  ret <4 x float> %36
}

; Function Attrs: mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc <4 x float> @59(float noundef %0, float noundef %1, <8 x i32> noundef %2, <4 x i32> noundef %3) unnamed_addr #46 {
  %5 = tail call <4 x float> @llvm.amdgcn.image.gather4.lz.2d.v4f32.f32(i32 2, float %0, float %1, <8 x i32> %2, <4 x i32> %3, i1 false, i32 0, i32 0)
  ret <4 x float> %5
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected <4 x float> @__ockl_image_gather4b_2D(ptr addrspace(4) nocapture noundef readonly %0, ptr addrspace(4) nocapture noundef readonly %1, <2 x float> noundef %2) local_unnamed_addr #47 {
  %4 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 10
  %5 = load i32, ptr addrspace(4) %4, align 4, !tbaa !11
  %6 = uitofp i32 %5 to float
  %7 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 2
  %8 = load i32, ptr addrspace(4) %7, align 4, !tbaa !11
  %9 = lshr i32 %8, 14
  %10 = and i32 %9, 16383
  %11 = add nuw nsw i32 %10, 1
  %12 = uitofp i32 %11 to float
  %13 = load i32, ptr addrspace(4) %1, align 4, !tbaa !11
  %14 = and i32 %13, 32768
  %15 = icmp eq i32 %14, 0
  %16 = select i1 %15, float %6, float 1.000000e+00
  %17 = select i1 %15, float %12, float 1.000000e+00
  %18 = extractelement <2 x float> %2, i64 0
  %19 = fmul float %18, %16
  %20 = tail call float @llvm.floor.f32(float %19)
  %21 = tail call float @llvm.amdgcn.rcp.f32(float %16)
  %22 = fmul float %21, %20
  %23 = extractelement <2 x float> %2, i64 1
  %24 = fmul float %23, %17
  %25 = tail call float @llvm.floor.f32(float %24)
  %26 = tail call float @llvm.amdgcn.rcp.f32(float %17)
  %27 = fmul float %26, %25
  %28 = getelementptr inbounds i32, ptr addrspace(4) %1, i64 2
  %29 = load i32, ptr addrspace(4) %28, align 4, !tbaa !11
  %30 = and i32 %29, 1048576
  %31 = icmp eq i32 %30, 0
  %32 = select i1 %31, float %22, float %18
  %33 = select i1 %31, float %27, float %23
  %34 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %35 = load <4 x i32>, ptr addrspace(4) %1, align 16, !tbaa !49
  %36 = tail call fastcc <4 x float> @60(float noundef %32, float noundef %33, <8 x i32> noundef %34, <4 x i32> noundef %35) #40
  ret <4 x float> %36
}

; Function Attrs: mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc <4 x float> @60(float noundef %0, float noundef %1, <8 x i32> noundef %2, <4 x i32> noundef %3) unnamed_addr #46 {
  %5 = tail call <4 x float> @llvm.amdgcn.image.gather4.lz.2d.v4f32.f32(i32 4, float %0, float %1, <8 x i32> %2, <4 x i32> %3, i1 false, i32 0, i32 0)
  ret <4 x float> %5
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected <4 x float> @__ockl_image_gather4a_2D(ptr addrspace(4) nocapture noundef readonly %0, ptr addrspace(4) nocapture noundef readonly %1, <2 x float> noundef %2) local_unnamed_addr #47 {
  %4 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 10
  %5 = load i32, ptr addrspace(4) %4, align 4, !tbaa !11
  %6 = uitofp i32 %5 to float
  %7 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 2
  %8 = load i32, ptr addrspace(4) %7, align 4, !tbaa !11
  %9 = lshr i32 %8, 14
  %10 = and i32 %9, 16383
  %11 = add nuw nsw i32 %10, 1
  %12 = uitofp i32 %11 to float
  %13 = load i32, ptr addrspace(4) %1, align 4, !tbaa !11
  %14 = and i32 %13, 32768
  %15 = icmp eq i32 %14, 0
  %16 = select i1 %15, float %6, float 1.000000e+00
  %17 = select i1 %15, float %12, float 1.000000e+00
  %18 = extractelement <2 x float> %2, i64 0
  %19 = fmul float %18, %16
  %20 = tail call float @llvm.floor.f32(float %19)
  %21 = tail call float @llvm.amdgcn.rcp.f32(float %16)
  %22 = fmul float %21, %20
  %23 = extractelement <2 x float> %2, i64 1
  %24 = fmul float %23, %17
  %25 = tail call float @llvm.floor.f32(float %24)
  %26 = tail call float @llvm.amdgcn.rcp.f32(float %17)
  %27 = fmul float %26, %25
  %28 = getelementptr inbounds i32, ptr addrspace(4) %1, i64 2
  %29 = load i32, ptr addrspace(4) %28, align 4, !tbaa !11
  %30 = and i32 %29, 1048576
  %31 = icmp eq i32 %30, 0
  %32 = select i1 %31, float %22, float %18
  %33 = select i1 %31, float %27, float %23
  %34 = load <8 x i32>, ptr addrspace(4) %0, align 32, !tbaa !49
  %35 = load <4 x i32>, ptr addrspace(4) %1, align 16, !tbaa !49
  %36 = tail call fastcc <4 x float> @61(float noundef %32, float noundef %33, <8 x i32> noundef %34, <4 x i32> noundef %35) #40
  ret <4 x float> %36
}

; Function Attrs: mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc <4 x float> @61(float noundef %0, float noundef %1, <8 x i32> noundef %2, <4 x i32> noundef %3) unnamed_addr #46 {
  %5 = tail call <4 x float> @llvm.amdgcn.image.gather4.lz.2d.v4f32.f32(i32 8, float %0, float %1, <8 x i32> %2, <4 x i32> %3, i1 false, i32 0, i32 0)
  ret <4 x float> %5
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_image_array_size_1Da(ptr addrspace(4) nocapture noundef readonly %0) local_unnamed_addr #3 {
  %2 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %3 = icmp slt i32 %2, 9000
  br i1 %3, label %4, label %8

4:                                                ; preds = %1
  %5 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 5
  %6 = load i32, ptr addrspace(4) %5, align 4, !tbaa !11
  %7 = lshr i32 %6, 13
  br label %11

8:                                                ; preds = %1
  %9 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 4
  %10 = load i32, ptr addrspace(4) %9, align 4, !tbaa !11
  br label %11

11:                                               ; preds = %8, %4
  %12 = phi i32 [ %7, %4 ], [ %10, %8 ]
  %13 = and i32 %12, 8191
  %14 = add nuw nsw i32 %13, 1
  ret i32 %14
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_image_array_size_2Da(ptr addrspace(4) nocapture noundef readonly %0) local_unnamed_addr #3 {
  %2 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %3 = icmp slt i32 %2, 9000
  br i1 %3, label %4, label %8

4:                                                ; preds = %1
  %5 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 5
  %6 = load i32, ptr addrspace(4) %5, align 4, !tbaa !11
  %7 = lshr i32 %6, 13
  br label %11

8:                                                ; preds = %1
  %9 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 4
  %10 = load i32, ptr addrspace(4) %9, align 4, !tbaa !11
  br label %11

11:                                               ; preds = %8, %4
  %12 = phi i32 [ %7, %4 ], [ %10, %8 ]
  %13 = and i32 %12, 8191
  %14 = add nuw nsw i32 %13, 1
  ret i32 %14
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_image_array_size_2Dad(ptr addrspace(4) nocapture noundef readonly %0) local_unnamed_addr #3 {
  %2 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %3 = icmp slt i32 %2, 9000
  br i1 %3, label %4, label %8

4:                                                ; preds = %1
  %5 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 5
  %6 = load i32, ptr addrspace(4) %5, align 4, !tbaa !11
  %7 = lshr i32 %6, 13
  br label %11

8:                                                ; preds = %1
  %9 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 4
  %10 = load i32, ptr addrspace(4) %9, align 4, !tbaa !11
  br label %11

11:                                               ; preds = %8, %4
  %12 = phi i32 [ %7, %4 ], [ %10, %8 ]
  %13 = and i32 %12, 8191
  %14 = add nuw nsw i32 %13, 1
  ret i32 %14
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_image_array_size_CMa(ptr addrspace(4) nocapture noundef readonly %0) local_unnamed_addr #3 {
  %2 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %3 = icmp slt i32 %2, 9000
  br i1 %3, label %4, label %8

4:                                                ; preds = %1
  %5 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 5
  %6 = load i32, ptr addrspace(4) %5, align 4, !tbaa !11
  %7 = lshr i32 %6, 13
  br label %11

8:                                                ; preds = %1
  %9 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 4
  %10 = load i32, ptr addrspace(4) %9, align 4, !tbaa !11
  br label %11

11:                                               ; preds = %8, %4
  %12 = phi i32 [ %7, %4 ], [ %10, %8 ]
  %13 = and i32 %12, 8191
  %14 = add nuw nsw i32 %13, 1
  ret i32 %14
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_image_channel_data_type_1D(ptr addrspace(4) nocapture noundef readonly %0) local_unnamed_addr #3 {
  %2 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 8
  %3 = load i32, ptr addrspace(4) %2, align 4, !tbaa !11
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_image_channel_data_type_1Da(ptr addrspace(4) nocapture noundef readonly %0) local_unnamed_addr #3 {
  %2 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 8
  %3 = load i32, ptr addrspace(4) %2, align 4, !tbaa !11
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_image_channel_data_type_1Db(ptr addrspace(4) nocapture noundef readonly %0) local_unnamed_addr #3 {
  %2 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 8
  %3 = load i32, ptr addrspace(4) %2, align 4, !tbaa !11
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_image_channel_data_type_2D(ptr addrspace(4) nocapture noundef readonly %0) local_unnamed_addr #3 {
  %2 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 8
  %3 = load i32, ptr addrspace(4) %2, align 4, !tbaa !11
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_image_channel_data_type_2Da(ptr addrspace(4) nocapture noundef readonly %0) local_unnamed_addr #3 {
  %2 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 8
  %3 = load i32, ptr addrspace(4) %2, align 4, !tbaa !11
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_image_channel_data_type_2Dad(ptr addrspace(4) nocapture noundef readonly %0) local_unnamed_addr #3 {
  %2 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 8
  %3 = load i32, ptr addrspace(4) %2, align 4, !tbaa !11
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_image_channel_data_type_2Dd(ptr addrspace(4) nocapture noundef readonly %0) local_unnamed_addr #3 {
  %2 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 8
  %3 = load i32, ptr addrspace(4) %2, align 4, !tbaa !11
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_image_channel_data_type_3D(ptr addrspace(4) nocapture noundef readonly %0) local_unnamed_addr #3 {
  %2 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 8
  %3 = load i32, ptr addrspace(4) %2, align 4, !tbaa !11
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_image_channel_data_type_CM(ptr addrspace(4) nocapture noundef readonly %0) local_unnamed_addr #3 {
  %2 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 8
  %3 = load i32, ptr addrspace(4) %2, align 4, !tbaa !11
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_image_channel_data_type_CMa(ptr addrspace(4) nocapture noundef readonly %0) local_unnamed_addr #3 {
  %2 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 8
  %3 = load i32, ptr addrspace(4) %2, align 4, !tbaa !11
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_image_channel_order_1D(ptr addrspace(4) nocapture noundef readonly %0) local_unnamed_addr #3 {
  %2 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 9
  %3 = load i32, ptr addrspace(4) %2, align 4, !tbaa !11
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_image_channel_order_1Da(ptr addrspace(4) nocapture noundef readonly %0) local_unnamed_addr #3 {
  %2 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 9
  %3 = load i32, ptr addrspace(4) %2, align 4, !tbaa !11
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_image_channel_order_1Db(ptr addrspace(4) nocapture noundef readonly %0) local_unnamed_addr #3 {
  %2 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 9
  %3 = load i32, ptr addrspace(4) %2, align 4, !tbaa !11
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_image_channel_order_2D(ptr addrspace(4) nocapture noundef readonly %0) local_unnamed_addr #3 {
  %2 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 9
  %3 = load i32, ptr addrspace(4) %2, align 4, !tbaa !11
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_image_channel_order_2Da(ptr addrspace(4) nocapture noundef readonly %0) local_unnamed_addr #3 {
  %2 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 9
  %3 = load i32, ptr addrspace(4) %2, align 4, !tbaa !11
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_image_channel_order_2Dad(ptr addrspace(4) nocapture noundef readonly %0) local_unnamed_addr #3 {
  %2 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 9
  %3 = load i32, ptr addrspace(4) %2, align 4, !tbaa !11
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_image_channel_order_2Dd(ptr addrspace(4) nocapture noundef readonly %0) local_unnamed_addr #3 {
  %2 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 9
  %3 = load i32, ptr addrspace(4) %2, align 4, !tbaa !11
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_image_channel_order_3D(ptr addrspace(4) nocapture noundef readonly %0) local_unnamed_addr #3 {
  %2 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 9
  %3 = load i32, ptr addrspace(4) %2, align 4, !tbaa !11
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_image_channel_order_CM(ptr addrspace(4) nocapture noundef readonly %0) local_unnamed_addr #3 {
  %2 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 9
  %3 = load i32, ptr addrspace(4) %2, align 4, !tbaa !11
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_image_channel_order_CMa(ptr addrspace(4) nocapture noundef readonly %0) local_unnamed_addr #3 {
  %2 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 9
  %3 = load i32, ptr addrspace(4) %2, align 4, !tbaa !11
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_image_depth_3D(ptr addrspace(4) nocapture noundef readonly %0) local_unnamed_addr #3 {
  %2 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 4
  %3 = load i32, ptr addrspace(4) %2, align 4, !tbaa !11
  %4 = and i32 %3, 8191
  %5 = add nuw nsw i32 %4, 1
  ret i32 %5
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_image_height_2D(ptr addrspace(4) nocapture noundef readonly %0) local_unnamed_addr #3 {
  %2 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 2
  %3 = load i32, ptr addrspace(4) %2, align 4, !tbaa !11
  %4 = lshr i32 %3, 14
  %5 = and i32 %4, 16383
  %6 = add nuw nsw i32 %5, 1
  ret i32 %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_image_height_2Da(ptr addrspace(4) nocapture noundef readonly %0) local_unnamed_addr #3 {
  %2 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 2
  %3 = load i32, ptr addrspace(4) %2, align 4, !tbaa !11
  %4 = lshr i32 %3, 14
  %5 = and i32 %4, 16383
  %6 = add nuw nsw i32 %5, 1
  ret i32 %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_image_height_2Dad(ptr addrspace(4) nocapture noundef readonly %0) local_unnamed_addr #3 {
  %2 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 2
  %3 = load i32, ptr addrspace(4) %2, align 4, !tbaa !11
  %4 = lshr i32 %3, 14
  %5 = and i32 %4, 16383
  %6 = add nuw nsw i32 %5, 1
  ret i32 %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_image_height_2Dd(ptr addrspace(4) nocapture noundef readonly %0) local_unnamed_addr #3 {
  %2 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 2
  %3 = load i32, ptr addrspace(4) %2, align 4, !tbaa !11
  %4 = lshr i32 %3, 14
  %5 = and i32 %4, 16383
  %6 = add nuw nsw i32 %5, 1
  ret i32 %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_image_height_3D(ptr addrspace(4) nocapture noundef readonly %0) local_unnamed_addr #3 {
  %2 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 2
  %3 = load i32, ptr addrspace(4) %2, align 4, !tbaa !11
  %4 = lshr i32 %3, 14
  %5 = and i32 %4, 16383
  %6 = add nuw nsw i32 %5, 1
  ret i32 %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_image_height_CM(ptr addrspace(4) nocapture noundef readonly %0) local_unnamed_addr #3 {
  %2 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 2
  %3 = load i32, ptr addrspace(4) %2, align 4, !tbaa !11
  %4 = lshr i32 %3, 14
  %5 = and i32 %4, 16383
  %6 = add nuw nsw i32 %5, 1
  ret i32 %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_image_height_CMa(ptr addrspace(4) nocapture noundef readonly %0) local_unnamed_addr #3 {
  %2 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 2
  %3 = load i32, ptr addrspace(4) %2, align 4, !tbaa !11
  %4 = lshr i32 %3, 14
  %5 = and i32 %4, 16383
  %6 = add nuw nsw i32 %5, 1
  ret i32 %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_image_num_mip_levels_1D(ptr addrspace(4) nocapture noundef readonly %0) local_unnamed_addr #3 {
  %2 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 3
  %3 = load i32, ptr addrspace(4) %2, align 4, !tbaa !11
  %4 = lshr i32 %3, 16
  %5 = and i32 %4, 15
  ret i32 %5
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_image_num_mip_levels_1Da(ptr addrspace(4) nocapture noundef readonly %0) local_unnamed_addr #3 {
  %2 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 3
  %3 = load i32, ptr addrspace(4) %2, align 4, !tbaa !11
  %4 = lshr i32 %3, 16
  %5 = and i32 %4, 15
  ret i32 %5
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_image_num_mip_levels_2D(ptr addrspace(4) nocapture noundef readonly %0) local_unnamed_addr #3 {
  %2 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 3
  %3 = load i32, ptr addrspace(4) %2, align 4, !tbaa !11
  %4 = lshr i32 %3, 16
  %5 = and i32 %4, 15
  ret i32 %5
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_image_num_mip_levels_2Da(ptr addrspace(4) nocapture noundef readonly %0) local_unnamed_addr #3 {
  %2 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 3
  %3 = load i32, ptr addrspace(4) %2, align 4, !tbaa !11
  %4 = lshr i32 %3, 16
  %5 = and i32 %4, 15
  ret i32 %5
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_image_num_mip_levels_2Dad(ptr addrspace(4) nocapture noundef readonly %0) local_unnamed_addr #3 {
  %2 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 3
  %3 = load i32, ptr addrspace(4) %2, align 4, !tbaa !11
  %4 = lshr i32 %3, 16
  %5 = and i32 %4, 15
  ret i32 %5
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_image_num_mip_levels_2Dd(ptr addrspace(4) nocapture noundef readonly %0) local_unnamed_addr #3 {
  %2 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 3
  %3 = load i32, ptr addrspace(4) %2, align 4, !tbaa !11
  %4 = lshr i32 %3, 16
  %5 = and i32 %4, 15
  ret i32 %5
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_image_num_mip_levels_3D(ptr addrspace(4) nocapture noundef readonly %0) local_unnamed_addr #3 {
  %2 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 3
  %3 = load i32, ptr addrspace(4) %2, align 4, !tbaa !11
  %4 = lshr i32 %3, 16
  %5 = and i32 %4, 15
  ret i32 %5
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_image_num_mip_levels_CM(ptr addrspace(4) nocapture noundef readonly %0) local_unnamed_addr #3 {
  %2 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 3
  %3 = load i32, ptr addrspace(4) %2, align 4, !tbaa !11
  %4 = lshr i32 %3, 16
  %5 = and i32 %4, 15
  ret i32 %5
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_image_num_mip_levels_CMa(ptr addrspace(4) nocapture noundef readonly %0) local_unnamed_addr #3 {
  %2 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 3
  %3 = load i32, ptr addrspace(4) %2, align 4, !tbaa !11
  %4 = lshr i32 %3, 16
  %5 = and i32 %4, 15
  ret i32 %5
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_image_width_1D(ptr addrspace(4) nocapture noundef readonly %0) local_unnamed_addr #3 {
  %2 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 10
  %3 = load i32, ptr addrspace(4) %2, align 4, !tbaa !11
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_image_width_1Da(ptr addrspace(4) nocapture noundef readonly %0) local_unnamed_addr #3 {
  %2 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 10
  %3 = load i32, ptr addrspace(4) %2, align 4, !tbaa !11
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_image_width_2D(ptr addrspace(4) nocapture noundef readonly %0) local_unnamed_addr #3 {
  %2 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 10
  %3 = load i32, ptr addrspace(4) %2, align 4, !tbaa !11
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_image_width_2Da(ptr addrspace(4) nocapture noundef readonly %0) local_unnamed_addr #3 {
  %2 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 10
  %3 = load i32, ptr addrspace(4) %2, align 4, !tbaa !11
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_image_width_2Dad(ptr addrspace(4) nocapture noundef readonly %0) local_unnamed_addr #3 {
  %2 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 10
  %3 = load i32, ptr addrspace(4) %2, align 4, !tbaa !11
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_image_width_2Dd(ptr addrspace(4) nocapture noundef readonly %0) local_unnamed_addr #3 {
  %2 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 10
  %3 = load i32, ptr addrspace(4) %2, align 4, !tbaa !11
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_image_width_3D(ptr addrspace(4) nocapture noundef readonly %0) local_unnamed_addr #3 {
  %2 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 10
  %3 = load i32, ptr addrspace(4) %2, align 4, !tbaa !11
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_image_width_CM(ptr addrspace(4) nocapture noundef readonly %0) local_unnamed_addr #3 {
  %2 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 10
  %3 = load i32, ptr addrspace(4) %2, align 4, !tbaa !11
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_image_width_CMa(ptr addrspace(4) nocapture noundef readonly %0) local_unnamed_addr #3 {
  %2 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 10
  %3 = load i32, ptr addrspace(4) %2, align 4, !tbaa !11
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_image_width_1Db(ptr addrspace(4) nocapture noundef readonly %0) local_unnamed_addr #3 {
  %2 = getelementptr inbounds i32, ptr addrspace(4) %0, i64 10
  %3 = load i32, ptr addrspace(4) %2, align 4, !tbaa !11
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_bfm_u32(i32 noundef %0, i32 noundef %1) local_unnamed_addr #3 {
  %3 = and i32 %0, 31
  %4 = shl nsw i32 -1, %3
  %5 = xor i32 %4, -1
  %6 = and i32 %1, 31
  %7 = shl i32 %5, %6
  ret i32 %7
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_bfe_i32(i32 noundef %0, i32 noundef %1, i32 noundef %2) local_unnamed_addr #3 {
  %4 = tail call i32 @llvm.amdgcn.sbfe.i32(i32 %0, i32 %1, i32 %2)
  ret i32 %4
}

; Function Attrs: nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.sbfe.i32(i32, i32, i32) #9

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_bfe_u32(i32 noundef %0, i32 noundef %1, i32 noundef %2) local_unnamed_addr #3 {
  %4 = tail call i32 @llvm.amdgcn.ubfe.i32(i32 %0, i32 %1, i32 %2)
  ret i32 %4
}

; Function Attrs: nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.ubfe.i32(i32, i32, i32) #9

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_bitalign_u32(i32 noundef %0, i32 noundef %1, i32 noundef %2) local_unnamed_addr #3 {
  %4 = tail call i32 @llvm.fshr.i32(i32 %0, i32 %1, i32 %2)
  ret i32 %4
}

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.fshr.i32(i32, i32, i32) #4

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_bytealign_u32(i32 noundef %0, i32 noundef %1, i32 noundef %2) local_unnamed_addr #3 {
  %4 = tail call i32 @llvm.amdgcn.alignbyte(i32 %0, i32 %1, i32 %2)
  ret i32 %4
}

; Function Attrs: nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.alignbyte(i32, i32, i32) #9

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_lerp_u32(i32 noundef %0, i32 noundef %1, i32 noundef %2) local_unnamed_addr #3 {
  %4 = tail call i32 @llvm.amdgcn.lerp(i32 %0, i32 %1, i32 %2)
  ret i32 %4
}

; Function Attrs: nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.lerp(i32, i32, i32) #9

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected float @__ockl_max3_f32(float noundef %0, float noundef %1, float noundef %2) local_unnamed_addr #3 {
  %4 = tail call float @llvm.maxnum.f32(float %0, float %1)
  %5 = tail call float @llvm.maxnum.f32(float %4, float %2)
  ret float %5
}

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.maxnum.f32(float, float) #4

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected float @__ockl_median3_f32(float noundef %0, float noundef %1, float noundef %2) local_unnamed_addr #3 {
  %4 = tail call float @llvm.amdgcn.fmed3.f32(float %0, float %1, float %2)
  ret float %4
}

; Function Attrs: nounwind readnone speculatable willreturn
declare float @llvm.amdgcn.fmed3.f32(float, float, float) #9

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected float @__ockl_min3_f32(float noundef %0, float noundef %1, float noundef %2) local_unnamed_addr #3 {
  %4 = tail call float @llvm.minnum.f32(float %0, float %1)
  %5 = tail call float @llvm.minnum.f32(float %4, float %2)
  ret float %5
}

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.minnum.f32(float, float) #4

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected half @__ockl_max3_f16(half noundef %0, half noundef %1, half noundef %2) local_unnamed_addr #3 {
  %4 = tail call half @llvm.maxnum.f16(half %0, half %1)
  %5 = tail call half @llvm.maxnum.f16(half %4, half %2)
  ret half %5
}

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare half @llvm.maxnum.f16(half, half) #4

; Function Attrs: convergent mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected half @__ockl_median3_f16(half noundef %0, half noundef %1, half noundef %2) local_unnamed_addr #48 {
  %4 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %5 = icmp sgt i32 %4, 8999
  br i1 %5, label %6, label %8

6:                                                ; preds = %3
  %7 = tail call fastcc half @62(half noundef %0, half noundef %1, half noundef %2)
  br label %13

8:                                                ; preds = %3
  %9 = tail call half @llvm.minnum.f16(half %0, half %1)
  %10 = tail call half @llvm.maxnum.f16(half %0, half %1)
  %11 = tail call half @llvm.maxnum.f16(half %9, half %2)
  %12 = tail call half @llvm.minnum.f16(half %10, half %11)
  br label %13

13:                                               ; preds = %8, %6
  %14 = phi half [ %7, %6 ], [ %12, %8 ]
  ret half %14
}

; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind readnone willreturn
define internal fastcc half @62(half noundef %0, half noundef %1, half noundef %2) unnamed_addr #49 {
  %4 = tail call half @llvm.amdgcn.fmed3.f16(half %0, half %1, half %2)
  ret half %4
}

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare half @llvm.minnum.f16(half, half) #4

; Function Attrs: nounwind readnone speculatable willreturn
declare half @llvm.amdgcn.fmed3.f16(half, half, half) #9

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected half @__ockl_min3_f16(half noundef %0, half noundef %1, half noundef %2) local_unnamed_addr #3 {
  %4 = tail call half @llvm.minnum.f16(half %0, half %1)
  %5 = tail call half @llvm.minnum.f16(half %4, half %2)
  ret half %5
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_max3_i32(i32 noundef %0, i32 noundef %1, i32 noundef %2) local_unnamed_addr #3 {
  %4 = tail call i32 @llvm.smax.i32(i32 %0, i32 %1)
  %5 = tail call i32 @llvm.smax.i32(i32 %4, i32 %2)
  ret i32 %5
}

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.smax.i32(i32, i32) #4

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_median3_i32(i32 noundef %0, i32 noundef %1, i32 noundef %2) local_unnamed_addr #3 {
  %4 = tail call i32 @llvm.smin.i32(i32 %0, i32 %1)
  %5 = tail call i32 @llvm.smax.i32(i32 %0, i32 %1)
  %6 = tail call i32 @llvm.smax.i32(i32 %4, i32 %2)
  %7 = tail call i32 @llvm.smin.i32(i32 %5, i32 %6)
  ret i32 %7
}

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.smin.i32(i32, i32) #4

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_min3_i32(i32 noundef %0, i32 noundef %1, i32 noundef %2) local_unnamed_addr #3 {
  %4 = tail call i32 @llvm.smin.i32(i32 %0, i32 %1)
  %5 = tail call i32 @llvm.smin.i32(i32 %4, i32 %2)
  ret i32 %5
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_max3_u32(i32 noundef %0, i32 noundef %1, i32 noundef %2) local_unnamed_addr #3 {
  %4 = tail call i32 @llvm.umax.i32(i32 %0, i32 %1)
  %5 = tail call i32 @llvm.umax.i32(i32 %4, i32 %2)
  ret i32 %5
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_median3_u32(i32 noundef %0, i32 noundef %1, i32 noundef %2) local_unnamed_addr #3 {
  %4 = tail call i32 @llvm.umin.i32(i32 %0, i32 %1)
  %5 = tail call i32 @llvm.umax.i32(i32 %0, i32 %1)
  %6 = tail call i32 @llvm.umax.i32(i32 %4, i32 %2)
  %7 = tail call i32 @llvm.umin.i32(i32 %5, i32 %6)
  ret i32 %7
}

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.umin.i32(i32, i32) #4

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_min3_u32(i32 noundef %0, i32 noundef %1, i32 noundef %2) local_unnamed_addr #3 {
  %4 = tail call i32 @llvm.umin.i32(i32 %0, i32 %1)
  %5 = tail call i32 @llvm.umin.i32(i32 %4, i32 %2)
  ret i32 %5
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_msad_u32(i32 noundef %0, i32 noundef %1, i32 noundef %2) local_unnamed_addr #3 {
  %4 = tail call i32 @llvm.amdgcn.msad.u8(i32 %0, i32 %1, i32 %2)
  ret i32 %4
}

; Function Attrs: nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.msad.u8(i32, i32, i32) #9

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i64 @__ockl_mqsad_u64(i64 noundef %0, i32 noundef %1, i64 noundef %2) local_unnamed_addr #3 {
  %4 = tail call i64 @llvm.amdgcn.mqsad.pk.u16.u8(i64 %0, i32 %1, i64 %2)
  ret i64 %4
}

; Function Attrs: nounwind readnone speculatable willreturn
declare i64 @llvm.amdgcn.mqsad.pk.u16.u8(i64, i32, i64) #9

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_pack_u32(<4 x float> noundef %0) local_unnamed_addr #50 {
  %2 = extractelement <4 x float> %0, i64 3
  %3 = extractelement <4 x float> %0, i64 2
  %4 = extractelement <4 x float> %0, i64 1
  %5 = extractelement <4 x float> %0, i64 0
  %6 = tail call i32 @llvm.amdgcn.cvt.pk.u8.f32(float %5, i32 0, i32 0)
  %7 = tail call i32 @llvm.amdgcn.cvt.pk.u8.f32(float %4, i32 1, i32 %6)
  %8 = tail call i32 @llvm.amdgcn.cvt.pk.u8.f32(float %3, i32 2, i32 %7)
  %9 = tail call i32 @llvm.amdgcn.cvt.pk.u8.f32(float %2, i32 3, i32 %8)
  ret i32 %9
}

; Function Attrs: nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.cvt.pk.u8.f32(float, i32, i32) #9

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i64 @__ockl_qsad_u64(i64 noundef %0, i32 noundef %1, i64 noundef %2) local_unnamed_addr #3 {
  %4 = tail call i64 @llvm.amdgcn.qsad.pk.u16.u8(i64 %0, i32 %1, i64 %2)
  ret i64 %4
}

; Function Attrs: nounwind readnone speculatable willreturn
declare i64 @llvm.amdgcn.qsad.pk.u16.u8(i64, i32, i64) #9

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_sad_u32(i32 noundef %0, i32 noundef %1, i32 noundef %2) local_unnamed_addr #3 {
  %4 = tail call i32 @llvm.amdgcn.sad.u8(i32 %0, i32 %1, i32 %2)
  ret i32 %4
}

; Function Attrs: nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.sad.u8(i32, i32, i32) #9

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_sadd_u32(i32 noundef %0, i32 noundef %1, i32 noundef %2) local_unnamed_addr #3 {
  %4 = tail call i32 @llvm.umax.i32(i32 %0, i32 %1)
  %5 = tail call i32 @llvm.umin.i32(i32 %0, i32 %1)
  %6 = sub i32 %4, %5
  %7 = add i32 %6, %2
  ret i32 %7
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_sadhi_u32(i32 noundef %0, i32 noundef %1, i32 noundef %2) local_unnamed_addr #3 {
  %4 = tail call i32 @llvm.amdgcn.sad.hi.u8(i32 %0, i32 %1, i32 %2)
  ret i32 %4
}

; Function Attrs: nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.sad.hi.u8(i32, i32, i32) #9

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_sadw_u32(i32 noundef %0, i32 noundef %1, i32 noundef %2) local_unnamed_addr #3 {
  %4 = tail call i32 @llvm.amdgcn.sad.u16(i32 %0, i32 %1, i32 %2)
  ret i32 %4
}

; Function Attrs: nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.sad.u16(i32, i32, i32) #9

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected float @__ockl_unpack0_f32(i32 noundef %0) local_unnamed_addr #3 {
  %2 = trunc i32 %0 to i8
  %3 = uitofp i8 %2 to float
  ret float %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected float @__ockl_unpack1_f32(i32 noundef %0) local_unnamed_addr #3 {
  %2 = lshr i32 %0, 8
  %3 = trunc i32 %2 to i8
  %4 = uitofp i8 %3 to float
  ret float %4
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected float @__ockl_unpack2_f32(i32 noundef %0) local_unnamed_addr #3 {
  %2 = lshr i32 %0, 16
  %3 = trunc i32 %2 to i8
  %4 = uitofp i8 %3 to float
  ret float %4
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected float @__ockl_unpack3_f32(i32 noundef %0) local_unnamed_addr #3 {
  %2 = lshr i32 %0, 24
  %3 = trunc i32 %2 to i8
  %4 = uitofp i8 %3 to float
  ret float %4
}

; Function Attrs: mustprogress norecurse nounwind willreturn
define linkonce_odr protected i64 @__ockl_memtime_u64() local_unnamed_addr #51 {
  %1 = tail call i64 @llvm.amdgcn.s.memtime()
  ret i64 %1
}

; Function Attrs: nounwind willreturn
declare i64 @llvm.amdgcn.s.memtime() #13

; Function Attrs: mustprogress norecurse nounwind willreturn
define linkonce_odr protected i64 @__ockl_memrealtime_u64() local_unnamed_addr #26 {
  %1 = tail call i64 @llvm.amdgcn.s.memrealtime()
  ret i64 %1
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_mul24_i32(i32 noundef %0, i32 noundef %1) local_unnamed_addr #3 {
  %3 = shl i32 %0, 8
  %4 = ashr exact i32 %3, 8
  %5 = shl i32 %1, 8
  %6 = ashr exact i32 %5, 8
  %7 = mul nsw i32 %6, %4
  ret i32 %7
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_mul24_u32(i32 noundef %0, i32 noundef %1) local_unnamed_addr #3 {
  %3 = and i32 %0, 16777215
  %4 = and i32 %1, 16777215
  %5 = mul i32 %4, %3
  ret i32 %5
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_mul_hi_i32(i32 noundef %0, i32 noundef %1) local_unnamed_addr #3 {
  %3 = sext i32 %0 to i64
  %4 = sext i32 %1 to i64
  %5 = mul nsw i64 %4, %3
  %6 = lshr i64 %5, 32
  %7 = trunc i64 %6 to i32
  ret i32 %7
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_mul_hi_u32(i32 noundef %0, i32 noundef %1) local_unnamed_addr #3 {
  %3 = zext i32 %0 to i64
  %4 = zext i32 %1 to i64
  %5 = mul nuw i64 %4, %3
  %6 = lshr i64 %5, 32
  %7 = trunc i64 %6 to i32
  ret i32 %7
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i64 @__ockl_mul_hi_i64(i64 noundef %0, i64 noundef %1) local_unnamed_addr #3 {
  %3 = and i64 %0, 4294967295
  %4 = ashr i64 %0, 32
  %5 = and i64 %1, 4294967295
  %6 = ashr i64 %1, 32
  %7 = mul nuw i64 %5, %3
  %8 = mul nsw i64 %5, %4
  %9 = lshr i64 %7, 32
  %10 = add nsw i64 %9, %8
  %11 = and i64 %10, 4294967295
  %12 = ashr i64 %10, 32
  %13 = mul nsw i64 %6, %3
  %14 = add nsw i64 %11, %13
  %15 = mul nsw i64 %6, %4
  %16 = add nsw i64 %12, %15
  %17 = ashr i64 %14, 32
  %18 = add nsw i64 %16, %17
  ret i64 %18
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i64 @__ockl_mul_hi_u64(i64 noundef %0, i64 noundef %1) local_unnamed_addr #3 {
  %3 = and i64 %0, 4294967295
  %4 = lshr i64 %0, 32
  %5 = and i64 %1, 4294967295
  %6 = lshr i64 %1, 32
  %7 = mul nuw i64 %5, %3
  %8 = mul nuw i64 %5, %4
  %9 = lshr i64 %7, 32
  %10 = add nuw i64 %9, %8
  %11 = and i64 %10, 4294967295
  %12 = lshr i64 %10, 32
  %13 = mul nuw i64 %6, %3
  %14 = add nuw i64 %11, %13
  %15 = mul nuw i64 %6, %4
  %16 = add nuw i64 %12, %15
  %17 = lshr i64 %14, 32
  %18 = add nuw i64 %16, %17
  ret i64 %18
}

; Function Attrs: alwaysinline mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_popcount_u32(i32 noundef %0) local_unnamed_addr #21 {
  %2 = tail call i32 @llvm.ctpop.i32(i32 %0), !range !34
  ret i32 %2
}

; Function Attrs: alwaysinline mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i64 @__ockl_popcount_u64(i64 noundef %0) local_unnamed_addr #21 {
  %2 = tail call i64 @llvm.ctpop.i64(i64 %0), !range !35
  ret i64 %2
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_readuplane_i32(i32 noundef %0, i32 noundef %1) local_unnamed_addr #11 {
  %3 = tail call i32 @__ockl_lane_u32() #58
  %4 = and i32 %3, 63
  %5 = add i32 %4, %1
  %6 = icmp ugt i32 %5, 63
  %7 = select i1 %6, i32 0, i32 %1
  %8 = add i32 %7, %3
  %9 = shl i32 %8, 2
  %10 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %9, i32 %0)
  ret i32 %10
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define linkonce_odr protected i64 @__ockl_readuplane_i64(i64 noundef %0, i32 noundef %1) local_unnamed_addr #11 {
  %3 = tail call i32 @__ockl_lane_u32() #58
  %4 = and i32 %3, 63
  %5 = add nsw i32 %4, %1
  %6 = icmp ugt i32 %5, 63
  %7 = select i1 %6, i32 0, i32 %1
  %8 = add nsw i32 %7, %3
  %9 = shl i32 %8, 2
  %10 = trunc i64 %0 to i32
  %11 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %9, i32 %10)
  %12 = insertelement <2 x i32> poison, i32 %11, i64 0
  %13 = lshr i64 %0, 32
  %14 = trunc i64 %13 to i32
  %15 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %9, i32 %14)
  %16 = insertelement <2 x i32> %12, i32 %15, i64 1
  %17 = bitcast <2 x i32> %16 to i64
  ret i64 %17
}

; Function Attrs: convergent norecurse nounwind
define linkonce_odr protected <2 x i64> @__ockl_call_host_function(i64 noundef %0, i64 noundef %1, i64 noundef %2, i64 noundef %3, i64 noundef %4, i64 noundef %5, i64 noundef %6, i64 noundef %7) local_unnamed_addr #16 {
  %9 = tail call <2 x i64> @__ockl_hostcall_preview(i32 noundef 1, i64 noundef %0, i64 noundef %1, i64 noundef %2, i64 noundef %3, i64 noundef %4, i64 noundef %5, i64 noundef %6, i64 noundef %7) #58
  ret <2 x i64> %9
}

; Function Attrs: convergent norecurse nounwind
define linkonce_odr protected i64 @__ockl_fprintf_stdout_begin() local_unnamed_addr #16 {
  %1 = tail call <2 x i64> @__ockl_hostcall_preview(i32 noundef 2, i64 noundef 33, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #58
  %2 = extractelement <2 x i64> %1, i64 0
  ret i64 %2
}

; Function Attrs: convergent norecurse nounwind
define linkonce_odr protected i64 @__ockl_fprintf_stderr_begin() local_unnamed_addr #16 {
  %1 = tail call <2 x i64> @__ockl_hostcall_preview(i32 noundef 2, i64 noundef 33, i64 noundef 1, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #58
  %2 = extractelement <2 x i64> %1, i64 0
  ret i64 %2
}

; Function Attrs: convergent norecurse nounwind
define linkonce_odr protected i64 @__ockl_fprintf_append_args(i64 noundef %0, i32 noundef %1, i64 noundef %2, i64 noundef %3, i64 noundef %4, i64 noundef %5, i64 noundef %6, i64 noundef %7, i64 noundef %8, i32 noundef %9) local_unnamed_addr #16 {
  %11 = icmp eq i32 %9, 0
  %12 = or i64 %0, 2
  %13 = select i1 %11, i64 %0, i64 %12
  %14 = and i64 %13, -225
  %15 = zext i32 %1 to i64
  %16 = shl nuw nsw i64 %15, 5
  %17 = or i64 %14, %16
  %18 = tail call <2 x i64> @__ockl_hostcall_preview(i32 noundef 2, i64 noundef %17, i64 noundef %2, i64 noundef %3, i64 noundef %4, i64 noundef %5, i64 noundef %6, i64 noundef %7, i64 noundef %8) #58
  %19 = extractelement <2 x i64> %18, i64 0
  ret i64 %19
}

; Function Attrs: convergent norecurse nounwind
define linkonce_odr protected i64 @__ockl_fprintf_append_string_n(i64 noundef %0, ptr noundef readonly %1, i64 noundef %2, i32 noundef %3) local_unnamed_addr #16 {
  %5 = icmp eq i32 %3, 0
  %6 = or i64 %0, 2
  %7 = select i1 %5, i64 %0, i64 %6
  %8 = icmp eq ptr %1, null
  br i1 %8, label %9, label %13

9:                                                ; preds = %4
  %10 = and i64 %7, -225
  %11 = or i64 %10, 32
  %12 = tail call <2 x i64> @__ockl_hostcall_preview(i32 noundef 2, i64 noundef %11, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #58
  br label %454

13:                                               ; preds = %4
  %14 = and i64 %7, 2
  %15 = and i64 %7, -3
  %16 = insertelement <2 x i64> <i64 poison, i64 0>, i64 %15, i64 0
  br label %17

17:                                               ; preds = %443, %13
  %18 = phi i64 [ %2, %13 ], [ %451, %443 ]
  %19 = phi ptr [ %1, %13 ], [ %452, %443 ]
  %20 = phi <2 x i64> [ %16, %13 ], [ %450, %443 ]
  %21 = icmp ugt i64 %18, 56
  %22 = extractelement <2 x i64> %20, i64 0
  %23 = or i64 %22, %14
  %24 = insertelement <2 x i64> poison, i64 %23, i64 0
  %25 = select i1 %21, <2 x i64> %20, <2 x i64> %24
  %26 = tail call i64 @llvm.umin.i64(i64 %18, i64 56)
  %27 = trunc i64 %26 to i32
  %28 = extractelement <2 x i64> %25, i64 0
  %29 = icmp ugt i32 %27, 7
  br i1 %29, label %32, label %30

30:                                               ; preds = %17
  %31 = icmp eq i32 %27, 0
  br i1 %31, label %85, label %72

32:                                               ; preds = %17
  %33 = load i8, ptr %19, align 1, !tbaa !49
  %34 = zext i8 %33 to i64
  %35 = getelementptr inbounds i8, ptr %19, i64 1
  %36 = load i8, ptr %35, align 1, !tbaa !49
  %37 = zext i8 %36 to i64
  %38 = shl nuw nsw i64 %37, 8
  %39 = or i64 %38, %34
  %40 = getelementptr inbounds i8, ptr %19, i64 2
  %41 = load i8, ptr %40, align 1, !tbaa !49
  %42 = zext i8 %41 to i64
  %43 = shl nuw nsw i64 %42, 16
  %44 = or i64 %39, %43
  %45 = getelementptr inbounds i8, ptr %19, i64 3
  %46 = load i8, ptr %45, align 1, !tbaa !49
  %47 = zext i8 %46 to i64
  %48 = shl nuw nsw i64 %47, 24
  %49 = or i64 %44, %48
  %50 = getelementptr inbounds i8, ptr %19, i64 4
  %51 = load i8, ptr %50, align 1, !tbaa !49
  %52 = zext i8 %51 to i64
  %53 = shl nuw nsw i64 %52, 32
  %54 = or i64 %49, %53
  %55 = getelementptr inbounds i8, ptr %19, i64 5
  %56 = load i8, ptr %55, align 1, !tbaa !49
  %57 = zext i8 %56 to i64
  %58 = shl nuw nsw i64 %57, 40
  %59 = or i64 %54, %58
  %60 = getelementptr inbounds i8, ptr %19, i64 6
  %61 = load i8, ptr %60, align 1, !tbaa !49
  %62 = zext i8 %61 to i64
  %63 = shl nuw nsw i64 %62, 48
  %64 = or i64 %59, %63
  %65 = getelementptr inbounds i8, ptr %19, i64 7
  %66 = load i8, ptr %65, align 1, !tbaa !49
  %67 = zext i8 %66 to i64
  %68 = shl nuw i64 %67, 56
  %69 = or i64 %64, %68
  %70 = add nsw i32 %27, -8
  %71 = getelementptr inbounds i8, ptr %19, i64 8
  br label %85

72:                                               ; preds = %72, %30
  %73 = phi i32 [ %83, %72 ], [ 0, %30 ]
  %74 = phi i64 [ %82, %72 ], [ 0, %30 ]
  %75 = zext i32 %73 to i64
  %76 = getelementptr inbounds i8, ptr %19, i64 %75
  %77 = load i8, ptr %76, align 1, !tbaa !49
  %78 = zext i8 %77 to i64
  %79 = shl i32 %73, 3
  %80 = zext i32 %79 to i64
  %81 = shl nuw i64 %78, %80
  %82 = or i64 %81, %74
  %83 = add nuw nsw i32 %73, 1
  %84 = icmp eq i32 %83, %27
  br i1 %84, label %85, label %72

85:                                               ; preds = %72, %32, %30
  %86 = phi ptr [ %71, %32 ], [ %19, %30 ], [ %19, %72 ]
  %87 = phi i32 [ %70, %32 ], [ 0, %30 ], [ 0, %72 ]
  %88 = phi i64 [ %69, %32 ], [ 0, %30 ], [ %82, %72 ]
  %89 = icmp ugt i32 %87, 7
  br i1 %89, label %92, label %90

90:                                               ; preds = %85
  %91 = icmp eq i32 %87, 0
  br i1 %91, label %145, label %132

92:                                               ; preds = %85
  %93 = load i8, ptr %86, align 1, !tbaa !49
  %94 = zext i8 %93 to i64
  %95 = getelementptr inbounds i8, ptr %86, i64 1
  %96 = load i8, ptr %95, align 1, !tbaa !49
  %97 = zext i8 %96 to i64
  %98 = shl nuw nsw i64 %97, 8
  %99 = or i64 %98, %94
  %100 = getelementptr inbounds i8, ptr %86, i64 2
  %101 = load i8, ptr %100, align 1, !tbaa !49
  %102 = zext i8 %101 to i64
  %103 = shl nuw nsw i64 %102, 16
  %104 = or i64 %99, %103
  %105 = getelementptr inbounds i8, ptr %86, i64 3
  %106 = load i8, ptr %105, align 1, !tbaa !49
  %107 = zext i8 %106 to i64
  %108 = shl nuw nsw i64 %107, 24
  %109 = or i64 %104, %108
  %110 = getelementptr inbounds i8, ptr %86, i64 4
  %111 = load i8, ptr %110, align 1, !tbaa !49
  %112 = zext i8 %111 to i64
  %113 = shl nuw nsw i64 %112, 32
  %114 = or i64 %109, %113
  %115 = getelementptr inbounds i8, ptr %86, i64 5
  %116 = load i8, ptr %115, align 1, !tbaa !49
  %117 = zext i8 %116 to i64
  %118 = shl nuw nsw i64 %117, 40
  %119 = or i64 %114, %118
  %120 = getelementptr inbounds i8, ptr %86, i64 6
  %121 = load i8, ptr %120, align 1, !tbaa !49
  %122 = zext i8 %121 to i64
  %123 = shl nuw nsw i64 %122, 48
  %124 = or i64 %119, %123
  %125 = getelementptr inbounds i8, ptr %86, i64 7
  %126 = load i8, ptr %125, align 1, !tbaa !49
  %127 = zext i8 %126 to i64
  %128 = shl nuw i64 %127, 56
  %129 = or i64 %124, %128
  %130 = add nsw i32 %87, -8
  %131 = getelementptr inbounds i8, ptr %86, i64 8
  br label %145

132:                                              ; preds = %132, %90
  %133 = phi i32 [ %143, %132 ], [ 0, %90 ]
  %134 = phi i64 [ %142, %132 ], [ 0, %90 ]
  %135 = zext i32 %133 to i64
  %136 = getelementptr inbounds i8, ptr %86, i64 %135
  %137 = load i8, ptr %136, align 1, !tbaa !49
  %138 = zext i8 %137 to i64
  %139 = shl i32 %133, 3
  %140 = zext i32 %139 to i64
  %141 = shl nuw i64 %138, %140
  %142 = or i64 %141, %134
  %143 = add nuw nsw i32 %133, 1
  %144 = icmp eq i32 %143, %87
  br i1 %144, label %145, label %132

145:                                              ; preds = %132, %92, %90
  %146 = phi ptr [ %131, %92 ], [ %86, %90 ], [ %86, %132 ]
  %147 = phi i32 [ %130, %92 ], [ 0, %90 ], [ 0, %132 ]
  %148 = phi i64 [ %129, %92 ], [ 0, %90 ], [ %142, %132 ]
  %149 = icmp ugt i32 %147, 7
  br i1 %149, label %152, label %150

150:                                              ; preds = %145
  %151 = icmp eq i32 %147, 0
  br i1 %151, label %205, label %192

152:                                              ; preds = %145
  %153 = load i8, ptr %146, align 1, !tbaa !49
  %154 = zext i8 %153 to i64
  %155 = getelementptr inbounds i8, ptr %146, i64 1
  %156 = load i8, ptr %155, align 1, !tbaa !49
  %157 = zext i8 %156 to i64
  %158 = shl nuw nsw i64 %157, 8
  %159 = or i64 %158, %154
  %160 = getelementptr inbounds i8, ptr %146, i64 2
  %161 = load i8, ptr %160, align 1, !tbaa !49
  %162 = zext i8 %161 to i64
  %163 = shl nuw nsw i64 %162, 16
  %164 = or i64 %159, %163
  %165 = getelementptr inbounds i8, ptr %146, i64 3
  %166 = load i8, ptr %165, align 1, !tbaa !49
  %167 = zext i8 %166 to i64
  %168 = shl nuw nsw i64 %167, 24
  %169 = or i64 %164, %168
  %170 = getelementptr inbounds i8, ptr %146, i64 4
  %171 = load i8, ptr %170, align 1, !tbaa !49
  %172 = zext i8 %171 to i64
  %173 = shl nuw nsw i64 %172, 32
  %174 = or i64 %169, %173
  %175 = getelementptr inbounds i8, ptr %146, i64 5
  %176 = load i8, ptr %175, align 1, !tbaa !49
  %177 = zext i8 %176 to i64
  %178 = shl nuw nsw i64 %177, 40
  %179 = or i64 %174, %178
  %180 = getelementptr inbounds i8, ptr %146, i64 6
  %181 = load i8, ptr %180, align 1, !tbaa !49
  %182 = zext i8 %181 to i64
  %183 = shl nuw nsw i64 %182, 48
  %184 = or i64 %179, %183
  %185 = getelementptr inbounds i8, ptr %146, i64 7
  %186 = load i8, ptr %185, align 1, !tbaa !49
  %187 = zext i8 %186 to i64
  %188 = shl nuw i64 %187, 56
  %189 = or i64 %184, %188
  %190 = add nsw i32 %147, -8
  %191 = getelementptr inbounds i8, ptr %146, i64 8
  br label %205

192:                                              ; preds = %192, %150
  %193 = phi i32 [ %203, %192 ], [ 0, %150 ]
  %194 = phi i64 [ %202, %192 ], [ 0, %150 ]
  %195 = zext i32 %193 to i64
  %196 = getelementptr inbounds i8, ptr %146, i64 %195
  %197 = load i8, ptr %196, align 1, !tbaa !49
  %198 = zext i8 %197 to i64
  %199 = shl i32 %193, 3
  %200 = zext i32 %199 to i64
  %201 = shl nuw i64 %198, %200
  %202 = or i64 %201, %194
  %203 = add nuw nsw i32 %193, 1
  %204 = icmp eq i32 %203, %147
  br i1 %204, label %205, label %192

205:                                              ; preds = %192, %152, %150
  %206 = phi ptr [ %191, %152 ], [ %146, %150 ], [ %146, %192 ]
  %207 = phi i32 [ %190, %152 ], [ 0, %150 ], [ 0, %192 ]
  %208 = phi i64 [ %189, %152 ], [ 0, %150 ], [ %202, %192 ]
  %209 = icmp ugt i32 %207, 7
  br i1 %209, label %212, label %210

210:                                              ; preds = %205
  %211 = icmp eq i32 %207, 0
  br i1 %211, label %265, label %252

212:                                              ; preds = %205
  %213 = load i8, ptr %206, align 1, !tbaa !49
  %214 = zext i8 %213 to i64
  %215 = getelementptr inbounds i8, ptr %206, i64 1
  %216 = load i8, ptr %215, align 1, !tbaa !49
  %217 = zext i8 %216 to i64
  %218 = shl nuw nsw i64 %217, 8
  %219 = or i64 %218, %214
  %220 = getelementptr inbounds i8, ptr %206, i64 2
  %221 = load i8, ptr %220, align 1, !tbaa !49
  %222 = zext i8 %221 to i64
  %223 = shl nuw nsw i64 %222, 16
  %224 = or i64 %219, %223
  %225 = getelementptr inbounds i8, ptr %206, i64 3
  %226 = load i8, ptr %225, align 1, !tbaa !49
  %227 = zext i8 %226 to i64
  %228 = shl nuw nsw i64 %227, 24
  %229 = or i64 %224, %228
  %230 = getelementptr inbounds i8, ptr %206, i64 4
  %231 = load i8, ptr %230, align 1, !tbaa !49
  %232 = zext i8 %231 to i64
  %233 = shl nuw nsw i64 %232, 32
  %234 = or i64 %229, %233
  %235 = getelementptr inbounds i8, ptr %206, i64 5
  %236 = load i8, ptr %235, align 1, !tbaa !49
  %237 = zext i8 %236 to i64
  %238 = shl nuw nsw i64 %237, 40
  %239 = or i64 %234, %238
  %240 = getelementptr inbounds i8, ptr %206, i64 6
  %241 = load i8, ptr %240, align 1, !tbaa !49
  %242 = zext i8 %241 to i64
  %243 = shl nuw nsw i64 %242, 48
  %244 = or i64 %239, %243
  %245 = getelementptr inbounds i8, ptr %206, i64 7
  %246 = load i8, ptr %245, align 1, !tbaa !49
  %247 = zext i8 %246 to i64
  %248 = shl nuw i64 %247, 56
  %249 = or i64 %244, %248
  %250 = add nsw i32 %207, -8
  %251 = getelementptr inbounds i8, ptr %206, i64 8
  br label %265

252:                                              ; preds = %252, %210
  %253 = phi i32 [ %263, %252 ], [ 0, %210 ]
  %254 = phi i64 [ %262, %252 ], [ 0, %210 ]
  %255 = zext i32 %253 to i64
  %256 = getelementptr inbounds i8, ptr %206, i64 %255
  %257 = load i8, ptr %256, align 1, !tbaa !49
  %258 = zext i8 %257 to i64
  %259 = shl i32 %253, 3
  %260 = zext i32 %259 to i64
  %261 = shl nuw i64 %258, %260
  %262 = or i64 %261, %254
  %263 = add nuw nsw i32 %253, 1
  %264 = icmp eq i32 %263, %207
  br i1 %264, label %265, label %252

265:                                              ; preds = %252, %212, %210
  %266 = phi ptr [ %251, %212 ], [ %206, %210 ], [ %206, %252 ]
  %267 = phi i32 [ %250, %212 ], [ 0, %210 ], [ 0, %252 ]
  %268 = phi i64 [ %249, %212 ], [ 0, %210 ], [ %262, %252 ]
  %269 = icmp ugt i32 %267, 7
  br i1 %269, label %272, label %270

270:                                              ; preds = %265
  %271 = icmp eq i32 %267, 0
  br i1 %271, label %325, label %312

272:                                              ; preds = %265
  %273 = load i8, ptr %266, align 1, !tbaa !49
  %274 = zext i8 %273 to i64
  %275 = getelementptr inbounds i8, ptr %266, i64 1
  %276 = load i8, ptr %275, align 1, !tbaa !49
  %277 = zext i8 %276 to i64
  %278 = shl nuw nsw i64 %277, 8
  %279 = or i64 %278, %274
  %280 = getelementptr inbounds i8, ptr %266, i64 2
  %281 = load i8, ptr %280, align 1, !tbaa !49
  %282 = zext i8 %281 to i64
  %283 = shl nuw nsw i64 %282, 16
  %284 = or i64 %279, %283
  %285 = getelementptr inbounds i8, ptr %266, i64 3
  %286 = load i8, ptr %285, align 1, !tbaa !49
  %287 = zext i8 %286 to i64
  %288 = shl nuw nsw i64 %287, 24
  %289 = or i64 %284, %288
  %290 = getelementptr inbounds i8, ptr %266, i64 4
  %291 = load i8, ptr %290, align 1, !tbaa !49
  %292 = zext i8 %291 to i64
  %293 = shl nuw nsw i64 %292, 32
  %294 = or i64 %289, %293
  %295 = getelementptr inbounds i8, ptr %266, i64 5
  %296 = load i8, ptr %295, align 1, !tbaa !49
  %297 = zext i8 %296 to i64
  %298 = shl nuw nsw i64 %297, 40
  %299 = or i64 %294, %298
  %300 = getelementptr inbounds i8, ptr %266, i64 6
  %301 = load i8, ptr %300, align 1, !tbaa !49
  %302 = zext i8 %301 to i64
  %303 = shl nuw nsw i64 %302, 48
  %304 = or i64 %299, %303
  %305 = getelementptr inbounds i8, ptr %266, i64 7
  %306 = load i8, ptr %305, align 1, !tbaa !49
  %307 = zext i8 %306 to i64
  %308 = shl nuw i64 %307, 56
  %309 = or i64 %304, %308
  %310 = add nsw i32 %267, -8
  %311 = getelementptr inbounds i8, ptr %266, i64 8
  br label %325

312:                                              ; preds = %312, %270
  %313 = phi i32 [ %323, %312 ], [ 0, %270 ]
  %314 = phi i64 [ %322, %312 ], [ 0, %270 ]
  %315 = zext i32 %313 to i64
  %316 = getelementptr inbounds i8, ptr %266, i64 %315
  %317 = load i8, ptr %316, align 1, !tbaa !49
  %318 = zext i8 %317 to i64
  %319 = shl i32 %313, 3
  %320 = zext i32 %319 to i64
  %321 = shl nuw i64 %318, %320
  %322 = or i64 %321, %314
  %323 = add nuw nsw i32 %313, 1
  %324 = icmp eq i32 %323, %267
  br i1 %324, label %325, label %312

325:                                              ; preds = %312, %272, %270
  %326 = phi ptr [ %311, %272 ], [ %266, %270 ], [ %266, %312 ]
  %327 = phi i32 [ %310, %272 ], [ 0, %270 ], [ 0, %312 ]
  %328 = phi i64 [ %309, %272 ], [ 0, %270 ], [ %322, %312 ]
  %329 = icmp ugt i32 %327, 7
  br i1 %329, label %332, label %330

330:                                              ; preds = %325
  %331 = icmp eq i32 %327, 0
  br i1 %331, label %385, label %372

332:                                              ; preds = %325
  %333 = load i8, ptr %326, align 1, !tbaa !49
  %334 = zext i8 %333 to i64
  %335 = getelementptr inbounds i8, ptr %326, i64 1
  %336 = load i8, ptr %335, align 1, !tbaa !49
  %337 = zext i8 %336 to i64
  %338 = shl nuw nsw i64 %337, 8
  %339 = or i64 %338, %334
  %340 = getelementptr inbounds i8, ptr %326, i64 2
  %341 = load i8, ptr %340, align 1, !tbaa !49
  %342 = zext i8 %341 to i64
  %343 = shl nuw nsw i64 %342, 16
  %344 = or i64 %339, %343
  %345 = getelementptr inbounds i8, ptr %326, i64 3
  %346 = load i8, ptr %345, align 1, !tbaa !49
  %347 = zext i8 %346 to i64
  %348 = shl nuw nsw i64 %347, 24
  %349 = or i64 %344, %348
  %350 = getelementptr inbounds i8, ptr %326, i64 4
  %351 = load i8, ptr %350, align 1, !tbaa !49
  %352 = zext i8 %351 to i64
  %353 = shl nuw nsw i64 %352, 32
  %354 = or i64 %349, %353
  %355 = getelementptr inbounds i8, ptr %326, i64 5
  %356 = load i8, ptr %355, align 1, !tbaa !49
  %357 = zext i8 %356 to i64
  %358 = shl nuw nsw i64 %357, 40
  %359 = or i64 %354, %358
  %360 = getelementptr inbounds i8, ptr %326, i64 6
  %361 = load i8, ptr %360, align 1, !tbaa !49
  %362 = zext i8 %361 to i64
  %363 = shl nuw nsw i64 %362, 48
  %364 = or i64 %359, %363
  %365 = getelementptr inbounds i8, ptr %326, i64 7
  %366 = load i8, ptr %365, align 1, !tbaa !49
  %367 = zext i8 %366 to i64
  %368 = shl nuw i64 %367, 56
  %369 = or i64 %364, %368
  %370 = add nsw i32 %327, -8
  %371 = getelementptr inbounds i8, ptr %326, i64 8
  br label %385

372:                                              ; preds = %372, %330
  %373 = phi i32 [ %383, %372 ], [ 0, %330 ]
  %374 = phi i64 [ %382, %372 ], [ 0, %330 ]
  %375 = zext i32 %373 to i64
  %376 = getelementptr inbounds i8, ptr %326, i64 %375
  %377 = load i8, ptr %376, align 1, !tbaa !49
  %378 = zext i8 %377 to i64
  %379 = shl i32 %373, 3
  %380 = zext i32 %379 to i64
  %381 = shl nuw i64 %378, %380
  %382 = or i64 %381, %374
  %383 = add nuw nsw i32 %373, 1
  %384 = icmp eq i32 %383, %327
  br i1 %384, label %385, label %372

385:                                              ; preds = %372, %332, %330
  %386 = phi ptr [ %371, %332 ], [ %326, %330 ], [ %326, %372 ]
  %387 = phi i32 [ %370, %332 ], [ 0, %330 ], [ 0, %372 ]
  %388 = phi i64 [ %369, %332 ], [ 0, %330 ], [ %382, %372 ]
  %389 = icmp ugt i32 %387, 7
  br i1 %389, label %392, label %390

390:                                              ; preds = %385
  %391 = icmp eq i32 %387, 0
  br i1 %391, label %443, label %430

392:                                              ; preds = %385
  %393 = load i8, ptr %386, align 1, !tbaa !49
  %394 = zext i8 %393 to i64
  %395 = getelementptr inbounds i8, ptr %386, i64 1
  %396 = load i8, ptr %395, align 1, !tbaa !49
  %397 = zext i8 %396 to i64
  %398 = shl nuw nsw i64 %397, 8
  %399 = or i64 %398, %394
  %400 = getelementptr inbounds i8, ptr %386, i64 2
  %401 = load i8, ptr %400, align 1, !tbaa !49
  %402 = zext i8 %401 to i64
  %403 = shl nuw nsw i64 %402, 16
  %404 = or i64 %399, %403
  %405 = getelementptr inbounds i8, ptr %386, i64 3
  %406 = load i8, ptr %405, align 1, !tbaa !49
  %407 = zext i8 %406 to i64
  %408 = shl nuw nsw i64 %407, 24
  %409 = or i64 %404, %408
  %410 = getelementptr inbounds i8, ptr %386, i64 4
  %411 = load i8, ptr %410, align 1, !tbaa !49
  %412 = zext i8 %411 to i64
  %413 = shl nuw nsw i64 %412, 32
  %414 = or i64 %409, %413
  %415 = getelementptr inbounds i8, ptr %386, i64 5
  %416 = load i8, ptr %415, align 1, !tbaa !49
  %417 = zext i8 %416 to i64
  %418 = shl nuw nsw i64 %417, 40
  %419 = or i64 %414, %418
  %420 = getelementptr inbounds i8, ptr %386, i64 6
  %421 = load i8, ptr %420, align 1, !tbaa !49
  %422 = zext i8 %421 to i64
  %423 = shl nuw nsw i64 %422, 48
  %424 = or i64 %419, %423
  %425 = getelementptr inbounds i8, ptr %386, i64 7
  %426 = load i8, ptr %425, align 1, !tbaa !49
  %427 = zext i8 %426 to i64
  %428 = shl nuw i64 %427, 56
  %429 = or i64 %424, %428
  br label %443

430:                                              ; preds = %430, %390
  %431 = phi i32 [ %441, %430 ], [ 0, %390 ]
  %432 = phi i64 [ %440, %430 ], [ 0, %390 ]
  %433 = zext i32 %431 to i64
  %434 = getelementptr inbounds i8, ptr %386, i64 %433
  %435 = load i8, ptr %434, align 1, !tbaa !49
  %436 = zext i8 %435 to i64
  %437 = shl i32 %431, 3
  %438 = zext i32 %437 to i64
  %439 = shl nuw i64 %436, %438
  %440 = or i64 %439, %432
  %441 = add nuw nsw i32 %431, 1
  %442 = icmp eq i32 %441, %387
  br i1 %442, label %443, label %430

443:                                              ; preds = %430, %392, %390
  %444 = phi i64 [ %429, %392 ], [ 0, %390 ], [ %440, %430 ]
  %445 = shl nuw nsw i64 %26, 2
  %446 = add nuw nsw i64 %445, 28
  %447 = and i64 %446, 480
  %448 = and i64 %28, -225
  %449 = or i64 %448, %447
  %450 = tail call <2 x i64> @__ockl_hostcall_preview(i32 noundef 2, i64 noundef %449, i64 noundef %88, i64 noundef %148, i64 noundef %208, i64 noundef %268, i64 noundef %328, i64 noundef %388, i64 noundef %444) #58
  %451 = sub i64 %18, %26
  %452 = getelementptr inbounds i8, ptr %19, i64 %26
  %453 = icmp eq i64 %451, 0
  br i1 %453, label %454, label %17

454:                                              ; preds = %443, %9
  %455 = phi <2 x i64> [ %12, %9 ], [ %450, %443 ]
  %456 = extractelement <2 x i64> %455, i64 0
  ret i64 %456
}

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare i64 @llvm.umin.i64(i64, i64) #4

; Function Attrs: convergent norecurse nounwind
define linkonce_odr protected i64 @__ockl_printf_begin(i64 noundef %0) local_unnamed_addr #16 {
  %2 = tail call <2 x i64> @__ockl_hostcall_preview(i32 noundef 2, i64 noundef 33, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #58
  %3 = extractelement <2 x i64> %2, i64 0
  ret i64 %3
}

; Function Attrs: convergent norecurse nounwind
define linkonce_odr protected i64 @__ockl_printf_append_args(i64 noundef %0, i32 noundef %1, i64 noundef %2, i64 noundef %3, i64 noundef %4, i64 noundef %5, i64 noundef %6, i64 noundef %7, i64 noundef %8, i32 noundef %9) local_unnamed_addr #16 {
  %11 = icmp eq i32 %9, 0
  %12 = or i64 %0, 2
  %13 = select i1 %11, i64 %0, i64 %12
  %14 = and i64 %13, -225
  %15 = zext i32 %1 to i64
  %16 = shl nuw nsw i64 %15, 5
  %17 = or i64 %14, %16
  %18 = tail call <2 x i64> @__ockl_hostcall_preview(i32 noundef 2, i64 noundef %17, i64 noundef %2, i64 noundef %3, i64 noundef %4, i64 noundef %5, i64 noundef %6, i64 noundef %7, i64 noundef %8) #58
  %19 = extractelement <2 x i64> %18, i64 0
  ret i64 %19
}

; Function Attrs: convergent norecurse nounwind
define linkonce_odr protected i64 @__ockl_printf_append_string_n(i64 noundef %0, ptr noundef readonly %1, i64 noundef %2, i32 noundef %3) local_unnamed_addr #16 {
  %5 = icmp eq i32 %3, 0
  %6 = or i64 %0, 2
  %7 = select i1 %5, i64 %0, i64 %6
  %8 = icmp eq ptr %1, null
  br i1 %8, label %9, label %13

9:                                                ; preds = %4
  %10 = and i64 %7, -225
  %11 = or i64 %10, 32
  %12 = tail call <2 x i64> @__ockl_hostcall_preview(i32 noundef 2, i64 noundef %11, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0, i64 noundef 0) #58
  br label %454

13:                                               ; preds = %4
  %14 = and i64 %7, 2
  %15 = and i64 %7, -3
  %16 = insertelement <2 x i64> <i64 poison, i64 0>, i64 %15, i64 0
  br label %17

17:                                               ; preds = %443, %13
  %18 = phi i64 [ %2, %13 ], [ %451, %443 ]
  %19 = phi ptr [ %1, %13 ], [ %452, %443 ]
  %20 = phi <2 x i64> [ %16, %13 ], [ %450, %443 ]
  %21 = icmp ugt i64 %18, 56
  %22 = extractelement <2 x i64> %20, i64 0
  %23 = or i64 %22, %14
  %24 = insertelement <2 x i64> poison, i64 %23, i64 0
  %25 = select i1 %21, <2 x i64> %20, <2 x i64> %24
  %26 = tail call i64 @llvm.umin.i64(i64 %18, i64 56)
  %27 = trunc i64 %26 to i32
  %28 = extractelement <2 x i64> %25, i64 0
  %29 = icmp ugt i32 %27, 7
  br i1 %29, label %32, label %30

30:                                               ; preds = %17
  %31 = icmp eq i32 %27, 0
  br i1 %31, label %85, label %72

32:                                               ; preds = %17
  %33 = load i8, ptr %19, align 1, !tbaa !49
  %34 = zext i8 %33 to i64
  %35 = getelementptr inbounds i8, ptr %19, i64 1
  %36 = load i8, ptr %35, align 1, !tbaa !49
  %37 = zext i8 %36 to i64
  %38 = shl nuw nsw i64 %37, 8
  %39 = or i64 %38, %34
  %40 = getelementptr inbounds i8, ptr %19, i64 2
  %41 = load i8, ptr %40, align 1, !tbaa !49
  %42 = zext i8 %41 to i64
  %43 = shl nuw nsw i64 %42, 16
  %44 = or i64 %39, %43
  %45 = getelementptr inbounds i8, ptr %19, i64 3
  %46 = load i8, ptr %45, align 1, !tbaa !49
  %47 = zext i8 %46 to i64
  %48 = shl nuw nsw i64 %47, 24
  %49 = or i64 %44, %48
  %50 = getelementptr inbounds i8, ptr %19, i64 4
  %51 = load i8, ptr %50, align 1, !tbaa !49
  %52 = zext i8 %51 to i64
  %53 = shl nuw nsw i64 %52, 32
  %54 = or i64 %49, %53
  %55 = getelementptr inbounds i8, ptr %19, i64 5
  %56 = load i8, ptr %55, align 1, !tbaa !49
  %57 = zext i8 %56 to i64
  %58 = shl nuw nsw i64 %57, 40
  %59 = or i64 %54, %58
  %60 = getelementptr inbounds i8, ptr %19, i64 6
  %61 = load i8, ptr %60, align 1, !tbaa !49
  %62 = zext i8 %61 to i64
  %63 = shl nuw nsw i64 %62, 48
  %64 = or i64 %59, %63
  %65 = getelementptr inbounds i8, ptr %19, i64 7
  %66 = load i8, ptr %65, align 1, !tbaa !49
  %67 = zext i8 %66 to i64
  %68 = shl nuw i64 %67, 56
  %69 = or i64 %64, %68
  %70 = add nsw i32 %27, -8
  %71 = getelementptr inbounds i8, ptr %19, i64 8
  br label %85

72:                                               ; preds = %72, %30
  %73 = phi i32 [ %83, %72 ], [ 0, %30 ]
  %74 = phi i64 [ %82, %72 ], [ 0, %30 ]
  %75 = zext i32 %73 to i64
  %76 = getelementptr inbounds i8, ptr %19, i64 %75
  %77 = load i8, ptr %76, align 1, !tbaa !49
  %78 = zext i8 %77 to i64
  %79 = shl i32 %73, 3
  %80 = zext i32 %79 to i64
  %81 = shl nuw i64 %78, %80
  %82 = or i64 %81, %74
  %83 = add nuw nsw i32 %73, 1
  %84 = icmp eq i32 %83, %27
  br i1 %84, label %85, label %72

85:                                               ; preds = %72, %32, %30
  %86 = phi ptr [ %71, %32 ], [ %19, %30 ], [ %19, %72 ]
  %87 = phi i32 [ %70, %32 ], [ 0, %30 ], [ 0, %72 ]
  %88 = phi i64 [ %69, %32 ], [ 0, %30 ], [ %82, %72 ]
  %89 = icmp ugt i32 %87, 7
  br i1 %89, label %92, label %90

90:                                               ; preds = %85
  %91 = icmp eq i32 %87, 0
  br i1 %91, label %145, label %132

92:                                               ; preds = %85
  %93 = load i8, ptr %86, align 1, !tbaa !49
  %94 = zext i8 %93 to i64
  %95 = getelementptr inbounds i8, ptr %86, i64 1
  %96 = load i8, ptr %95, align 1, !tbaa !49
  %97 = zext i8 %96 to i64
  %98 = shl nuw nsw i64 %97, 8
  %99 = or i64 %98, %94
  %100 = getelementptr inbounds i8, ptr %86, i64 2
  %101 = load i8, ptr %100, align 1, !tbaa !49
  %102 = zext i8 %101 to i64
  %103 = shl nuw nsw i64 %102, 16
  %104 = or i64 %99, %103
  %105 = getelementptr inbounds i8, ptr %86, i64 3
  %106 = load i8, ptr %105, align 1, !tbaa !49
  %107 = zext i8 %106 to i64
  %108 = shl nuw nsw i64 %107, 24
  %109 = or i64 %104, %108
  %110 = getelementptr inbounds i8, ptr %86, i64 4
  %111 = load i8, ptr %110, align 1, !tbaa !49
  %112 = zext i8 %111 to i64
  %113 = shl nuw nsw i64 %112, 32
  %114 = or i64 %109, %113
  %115 = getelementptr inbounds i8, ptr %86, i64 5
  %116 = load i8, ptr %115, align 1, !tbaa !49
  %117 = zext i8 %116 to i64
  %118 = shl nuw nsw i64 %117, 40
  %119 = or i64 %114, %118
  %120 = getelementptr inbounds i8, ptr %86, i64 6
  %121 = load i8, ptr %120, align 1, !tbaa !49
  %122 = zext i8 %121 to i64
  %123 = shl nuw nsw i64 %122, 48
  %124 = or i64 %119, %123
  %125 = getelementptr inbounds i8, ptr %86, i64 7
  %126 = load i8, ptr %125, align 1, !tbaa !49
  %127 = zext i8 %126 to i64
  %128 = shl nuw i64 %127, 56
  %129 = or i64 %124, %128
  %130 = add nsw i32 %87, -8
  %131 = getelementptr inbounds i8, ptr %86, i64 8
  br label %145

132:                                              ; preds = %132, %90
  %133 = phi i32 [ %143, %132 ], [ 0, %90 ]
  %134 = phi i64 [ %142, %132 ], [ 0, %90 ]
  %135 = zext i32 %133 to i64
  %136 = getelementptr inbounds i8, ptr %86, i64 %135
  %137 = load i8, ptr %136, align 1, !tbaa !49
  %138 = zext i8 %137 to i64
  %139 = shl i32 %133, 3
  %140 = zext i32 %139 to i64
  %141 = shl nuw i64 %138, %140
  %142 = or i64 %141, %134
  %143 = add nuw nsw i32 %133, 1
  %144 = icmp eq i32 %143, %87
  br i1 %144, label %145, label %132

145:                                              ; preds = %132, %92, %90
  %146 = phi ptr [ %131, %92 ], [ %86, %90 ], [ %86, %132 ]
  %147 = phi i32 [ %130, %92 ], [ 0, %90 ], [ 0, %132 ]
  %148 = phi i64 [ %129, %92 ], [ 0, %90 ], [ %142, %132 ]
  %149 = icmp ugt i32 %147, 7
  br i1 %149, label %152, label %150

150:                                              ; preds = %145
  %151 = icmp eq i32 %147, 0
  br i1 %151, label %205, label %192

152:                                              ; preds = %145
  %153 = load i8, ptr %146, align 1, !tbaa !49
  %154 = zext i8 %153 to i64
  %155 = getelementptr inbounds i8, ptr %146, i64 1
  %156 = load i8, ptr %155, align 1, !tbaa !49
  %157 = zext i8 %156 to i64
  %158 = shl nuw nsw i64 %157, 8
  %159 = or i64 %158, %154
  %160 = getelementptr inbounds i8, ptr %146, i64 2
  %161 = load i8, ptr %160, align 1, !tbaa !49
  %162 = zext i8 %161 to i64
  %163 = shl nuw nsw i64 %162, 16
  %164 = or i64 %159, %163
  %165 = getelementptr inbounds i8, ptr %146, i64 3
  %166 = load i8, ptr %165, align 1, !tbaa !49
  %167 = zext i8 %166 to i64
  %168 = shl nuw nsw i64 %167, 24
  %169 = or i64 %164, %168
  %170 = getelementptr inbounds i8, ptr %146, i64 4
  %171 = load i8, ptr %170, align 1, !tbaa !49
  %172 = zext i8 %171 to i64
  %173 = shl nuw nsw i64 %172, 32
  %174 = or i64 %169, %173
  %175 = getelementptr inbounds i8, ptr %146, i64 5
  %176 = load i8, ptr %175, align 1, !tbaa !49
  %177 = zext i8 %176 to i64
  %178 = shl nuw nsw i64 %177, 40
  %179 = or i64 %174, %178
  %180 = getelementptr inbounds i8, ptr %146, i64 6
  %181 = load i8, ptr %180, align 1, !tbaa !49
  %182 = zext i8 %181 to i64
  %183 = shl nuw nsw i64 %182, 48
  %184 = or i64 %179, %183
  %185 = getelementptr inbounds i8, ptr %146, i64 7
  %186 = load i8, ptr %185, align 1, !tbaa !49
  %187 = zext i8 %186 to i64
  %188 = shl nuw i64 %187, 56
  %189 = or i64 %184, %188
  %190 = add nsw i32 %147, -8
  %191 = getelementptr inbounds i8, ptr %146, i64 8
  br label %205

192:                                              ; preds = %192, %150
  %193 = phi i32 [ %203, %192 ], [ 0, %150 ]
  %194 = phi i64 [ %202, %192 ], [ 0, %150 ]
  %195 = zext i32 %193 to i64
  %196 = getelementptr inbounds i8, ptr %146, i64 %195
  %197 = load i8, ptr %196, align 1, !tbaa !49
  %198 = zext i8 %197 to i64
  %199 = shl i32 %193, 3
  %200 = zext i32 %199 to i64
  %201 = shl nuw i64 %198, %200
  %202 = or i64 %201, %194
  %203 = add nuw nsw i32 %193, 1
  %204 = icmp eq i32 %203, %147
  br i1 %204, label %205, label %192

205:                                              ; preds = %192, %152, %150
  %206 = phi ptr [ %191, %152 ], [ %146, %150 ], [ %146, %192 ]
  %207 = phi i32 [ %190, %152 ], [ 0, %150 ], [ 0, %192 ]
  %208 = phi i64 [ %189, %152 ], [ 0, %150 ], [ %202, %192 ]
  %209 = icmp ugt i32 %207, 7
  br i1 %209, label %212, label %210

210:                                              ; preds = %205
  %211 = icmp eq i32 %207, 0
  br i1 %211, label %265, label %252

212:                                              ; preds = %205
  %213 = load i8, ptr %206, align 1, !tbaa !49
  %214 = zext i8 %213 to i64
  %215 = getelementptr inbounds i8, ptr %206, i64 1
  %216 = load i8, ptr %215, align 1, !tbaa !49
  %217 = zext i8 %216 to i64
  %218 = shl nuw nsw i64 %217, 8
  %219 = or i64 %218, %214
  %220 = getelementptr inbounds i8, ptr %206, i64 2
  %221 = load i8, ptr %220, align 1, !tbaa !49
  %222 = zext i8 %221 to i64
  %223 = shl nuw nsw i64 %222, 16
  %224 = or i64 %219, %223
  %225 = getelementptr inbounds i8, ptr %206, i64 3
  %226 = load i8, ptr %225, align 1, !tbaa !49
  %227 = zext i8 %226 to i64
  %228 = shl nuw nsw i64 %227, 24
  %229 = or i64 %224, %228
  %230 = getelementptr inbounds i8, ptr %206, i64 4
  %231 = load i8, ptr %230, align 1, !tbaa !49
  %232 = zext i8 %231 to i64
  %233 = shl nuw nsw i64 %232, 32
  %234 = or i64 %229, %233
  %235 = getelementptr inbounds i8, ptr %206, i64 5
  %236 = load i8, ptr %235, align 1, !tbaa !49
  %237 = zext i8 %236 to i64
  %238 = shl nuw nsw i64 %237, 40
  %239 = or i64 %234, %238
  %240 = getelementptr inbounds i8, ptr %206, i64 6
  %241 = load i8, ptr %240, align 1, !tbaa !49
  %242 = zext i8 %241 to i64
  %243 = shl nuw nsw i64 %242, 48
  %244 = or i64 %239, %243
  %245 = getelementptr inbounds i8, ptr %206, i64 7
  %246 = load i8, ptr %245, align 1, !tbaa !49
  %247 = zext i8 %246 to i64
  %248 = shl nuw i64 %247, 56
  %249 = or i64 %244, %248
  %250 = add nsw i32 %207, -8
  %251 = getelementptr inbounds i8, ptr %206, i64 8
  br label %265

252:                                              ; preds = %252, %210
  %253 = phi i32 [ %263, %252 ], [ 0, %210 ]
  %254 = phi i64 [ %262, %252 ], [ 0, %210 ]
  %255 = zext i32 %253 to i64
  %256 = getelementptr inbounds i8, ptr %206, i64 %255
  %257 = load i8, ptr %256, align 1, !tbaa !49
  %258 = zext i8 %257 to i64
  %259 = shl i32 %253, 3
  %260 = zext i32 %259 to i64
  %261 = shl nuw i64 %258, %260
  %262 = or i64 %261, %254
  %263 = add nuw nsw i32 %253, 1
  %264 = icmp eq i32 %263, %207
  br i1 %264, label %265, label %252

265:                                              ; preds = %252, %212, %210
  %266 = phi ptr [ %251, %212 ], [ %206, %210 ], [ %206, %252 ]
  %267 = phi i32 [ %250, %212 ], [ 0, %210 ], [ 0, %252 ]
  %268 = phi i64 [ %249, %212 ], [ 0, %210 ], [ %262, %252 ]
  %269 = icmp ugt i32 %267, 7
  br i1 %269, label %272, label %270

270:                                              ; preds = %265
  %271 = icmp eq i32 %267, 0
  br i1 %271, label %325, label %312

272:                                              ; preds = %265
  %273 = load i8, ptr %266, align 1, !tbaa !49
  %274 = zext i8 %273 to i64
  %275 = getelementptr inbounds i8, ptr %266, i64 1
  %276 = load i8, ptr %275, align 1, !tbaa !49
  %277 = zext i8 %276 to i64
  %278 = shl nuw nsw i64 %277, 8
  %279 = or i64 %278, %274
  %280 = getelementptr inbounds i8, ptr %266, i64 2
  %281 = load i8, ptr %280, align 1, !tbaa !49
  %282 = zext i8 %281 to i64
  %283 = shl nuw nsw i64 %282, 16
  %284 = or i64 %279, %283
  %285 = getelementptr inbounds i8, ptr %266, i64 3
  %286 = load i8, ptr %285, align 1, !tbaa !49
  %287 = zext i8 %286 to i64
  %288 = shl nuw nsw i64 %287, 24
  %289 = or i64 %284, %288
  %290 = getelementptr inbounds i8, ptr %266, i64 4
  %291 = load i8, ptr %290, align 1, !tbaa !49
  %292 = zext i8 %291 to i64
  %293 = shl nuw nsw i64 %292, 32
  %294 = or i64 %289, %293
  %295 = getelementptr inbounds i8, ptr %266, i64 5
  %296 = load i8, ptr %295, align 1, !tbaa !49
  %297 = zext i8 %296 to i64
  %298 = shl nuw nsw i64 %297, 40
  %299 = or i64 %294, %298
  %300 = getelementptr inbounds i8, ptr %266, i64 6
  %301 = load i8, ptr %300, align 1, !tbaa !49
  %302 = zext i8 %301 to i64
  %303 = shl nuw nsw i64 %302, 48
  %304 = or i64 %299, %303
  %305 = getelementptr inbounds i8, ptr %266, i64 7
  %306 = load i8, ptr %305, align 1, !tbaa !49
  %307 = zext i8 %306 to i64
  %308 = shl nuw i64 %307, 56
  %309 = or i64 %304, %308
  %310 = add nsw i32 %267, -8
  %311 = getelementptr inbounds i8, ptr %266, i64 8
  br label %325

312:                                              ; preds = %312, %270
  %313 = phi i32 [ %323, %312 ], [ 0, %270 ]
  %314 = phi i64 [ %322, %312 ], [ 0, %270 ]
  %315 = zext i32 %313 to i64
  %316 = getelementptr inbounds i8, ptr %266, i64 %315
  %317 = load i8, ptr %316, align 1, !tbaa !49
  %318 = zext i8 %317 to i64
  %319 = shl i32 %313, 3
  %320 = zext i32 %319 to i64
  %321 = shl nuw i64 %318, %320
  %322 = or i64 %321, %314
  %323 = add nuw nsw i32 %313, 1
  %324 = icmp eq i32 %323, %267
  br i1 %324, label %325, label %312

325:                                              ; preds = %312, %272, %270
  %326 = phi ptr [ %311, %272 ], [ %266, %270 ], [ %266, %312 ]
  %327 = phi i32 [ %310, %272 ], [ 0, %270 ], [ 0, %312 ]
  %328 = phi i64 [ %309, %272 ], [ 0, %270 ], [ %322, %312 ]
  %329 = icmp ugt i32 %327, 7
  br i1 %329, label %332, label %330

330:                                              ; preds = %325
  %331 = icmp eq i32 %327, 0
  br i1 %331, label %385, label %372

332:                                              ; preds = %325
  %333 = load i8, ptr %326, align 1, !tbaa !49
  %334 = zext i8 %333 to i64
  %335 = getelementptr inbounds i8, ptr %326, i64 1
  %336 = load i8, ptr %335, align 1, !tbaa !49
  %337 = zext i8 %336 to i64
  %338 = shl nuw nsw i64 %337, 8
  %339 = or i64 %338, %334
  %340 = getelementptr inbounds i8, ptr %326, i64 2
  %341 = load i8, ptr %340, align 1, !tbaa !49
  %342 = zext i8 %341 to i64
  %343 = shl nuw nsw i64 %342, 16
  %344 = or i64 %339, %343
  %345 = getelementptr inbounds i8, ptr %326, i64 3
  %346 = load i8, ptr %345, align 1, !tbaa !49
  %347 = zext i8 %346 to i64
  %348 = shl nuw nsw i64 %347, 24
  %349 = or i64 %344, %348
  %350 = getelementptr inbounds i8, ptr %326, i64 4
  %351 = load i8, ptr %350, align 1, !tbaa !49
  %352 = zext i8 %351 to i64
  %353 = shl nuw nsw i64 %352, 32
  %354 = or i64 %349, %353
  %355 = getelementptr inbounds i8, ptr %326, i64 5
  %356 = load i8, ptr %355, align 1, !tbaa !49
  %357 = zext i8 %356 to i64
  %358 = shl nuw nsw i64 %357, 40
  %359 = or i64 %354, %358
  %360 = getelementptr inbounds i8, ptr %326, i64 6
  %361 = load i8, ptr %360, align 1, !tbaa !49
  %362 = zext i8 %361 to i64
  %363 = shl nuw nsw i64 %362, 48
  %364 = or i64 %359, %363
  %365 = getelementptr inbounds i8, ptr %326, i64 7
  %366 = load i8, ptr %365, align 1, !tbaa !49
  %367 = zext i8 %366 to i64
  %368 = shl nuw i64 %367, 56
  %369 = or i64 %364, %368
  %370 = add nsw i32 %327, -8
  %371 = getelementptr inbounds i8, ptr %326, i64 8
  br label %385

372:                                              ; preds = %372, %330
  %373 = phi i32 [ %383, %372 ], [ 0, %330 ]
  %374 = phi i64 [ %382, %372 ], [ 0, %330 ]
  %375 = zext i32 %373 to i64
  %376 = getelementptr inbounds i8, ptr %326, i64 %375
  %377 = load i8, ptr %376, align 1, !tbaa !49
  %378 = zext i8 %377 to i64
  %379 = shl i32 %373, 3
  %380 = zext i32 %379 to i64
  %381 = shl nuw i64 %378, %380
  %382 = or i64 %381, %374
  %383 = add nuw nsw i32 %373, 1
  %384 = icmp eq i32 %383, %327
  br i1 %384, label %385, label %372

385:                                              ; preds = %372, %332, %330
  %386 = phi ptr [ %371, %332 ], [ %326, %330 ], [ %326, %372 ]
  %387 = phi i32 [ %370, %332 ], [ 0, %330 ], [ 0, %372 ]
  %388 = phi i64 [ %369, %332 ], [ 0, %330 ], [ %382, %372 ]
  %389 = icmp ugt i32 %387, 7
  br i1 %389, label %392, label %390

390:                                              ; preds = %385
  %391 = icmp eq i32 %387, 0
  br i1 %391, label %443, label %430

392:                                              ; preds = %385
  %393 = load i8, ptr %386, align 1, !tbaa !49
  %394 = zext i8 %393 to i64
  %395 = getelementptr inbounds i8, ptr %386, i64 1
  %396 = load i8, ptr %395, align 1, !tbaa !49
  %397 = zext i8 %396 to i64
  %398 = shl nuw nsw i64 %397, 8
  %399 = or i64 %398, %394
  %400 = getelementptr inbounds i8, ptr %386, i64 2
  %401 = load i8, ptr %400, align 1, !tbaa !49
  %402 = zext i8 %401 to i64
  %403 = shl nuw nsw i64 %402, 16
  %404 = or i64 %399, %403
  %405 = getelementptr inbounds i8, ptr %386, i64 3
  %406 = load i8, ptr %405, align 1, !tbaa !49
  %407 = zext i8 %406 to i64
  %408 = shl nuw nsw i64 %407, 24
  %409 = or i64 %404, %408
  %410 = getelementptr inbounds i8, ptr %386, i64 4
  %411 = load i8, ptr %410, align 1, !tbaa !49
  %412 = zext i8 %411 to i64
  %413 = shl nuw nsw i64 %412, 32
  %414 = or i64 %409, %413
  %415 = getelementptr inbounds i8, ptr %386, i64 5
  %416 = load i8, ptr %415, align 1, !tbaa !49
  %417 = zext i8 %416 to i64
  %418 = shl nuw nsw i64 %417, 40
  %419 = or i64 %414, %418
  %420 = getelementptr inbounds i8, ptr %386, i64 6
  %421 = load i8, ptr %420, align 1, !tbaa !49
  %422 = zext i8 %421 to i64
  %423 = shl nuw nsw i64 %422, 48
  %424 = or i64 %419, %423
  %425 = getelementptr inbounds i8, ptr %386, i64 7
  %426 = load i8, ptr %425, align 1, !tbaa !49
  %427 = zext i8 %426 to i64
  %428 = shl nuw i64 %427, 56
  %429 = or i64 %424, %428
  br label %443

430:                                              ; preds = %430, %390
  %431 = phi i32 [ %441, %430 ], [ 0, %390 ]
  %432 = phi i64 [ %440, %430 ], [ 0, %390 ]
  %433 = zext i32 %431 to i64
  %434 = getelementptr inbounds i8, ptr %386, i64 %433
  %435 = load i8, ptr %434, align 1, !tbaa !49
  %436 = zext i8 %435 to i64
  %437 = shl i32 %431, 3
  %438 = zext i32 %437 to i64
  %439 = shl nuw i64 %436, %438
  %440 = or i64 %439, %432
  %441 = add nuw nsw i32 %431, 1
  %442 = icmp eq i32 %441, %387
  br i1 %442, label %443, label %430

443:                                              ; preds = %430, %392, %390
  %444 = phi i64 [ %429, %392 ], [ 0, %390 ], [ %440, %430 ]
  %445 = shl nuw nsw i64 %26, 2
  %446 = add nuw nsw i64 %445, 28
  %447 = and i64 %446, 480
  %448 = and i64 %28, -225
  %449 = or i64 %448, %447
  %450 = tail call <2 x i64> @__ockl_hostcall_preview(i32 noundef 2, i64 noundef %449, i64 noundef %88, i64 noundef %148, i64 noundef %208, i64 noundef %268, i64 noundef %328, i64 noundef %388, i64 noundef %444) #58
  %451 = sub i64 %18, %26
  %452 = getelementptr inbounds i8, ptr %19, i64 %26
  %453 = icmp eq i64 %451, 0
  br i1 %453, label %454, label %17

454:                                              ; preds = %443, %9
  %455 = phi <2 x i64> [ %12, %9 ], [ %450, %443 ]
  %456 = extractelement <2 x i64> %455, i64 0
  ret i64 %456
}

; Function Attrs: convergent norecurse nounwind
define weak protected void @__ockl_sanitizer_report(i64 noundef %0, i64 noundef %1, i64 noundef %2, i64 noundef %3, i64 noundef %4, i64 noundef %5, i64 noundef %6, i64 noundef %7) local_unnamed_addr #16 {
  %9 = tail call <2 x i64> @__ockl_hostcall_preview(i32 noundef 4, i64 noundef %0, i64 noundef %1, i64 noundef %2, i64 noundef %3, i64 noundef %4, i64 noundef %5, i64 noundef %6, i64 noundef %7) #58
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_sub_sat_i32(i32 noundef %0, i32 noundef %1) local_unnamed_addr #3 {
  %3 = tail call i32 @llvm.ssub.sat.i32(i32 %0, i32 %1)
  ret i32 %3
}

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.ssub.sat.i32(i32, i32) #4

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_sub_sat_u32(i32 noundef %0, i32 noundef %1) local_unnamed_addr #3 {
  %3 = tail call i32 @llvm.usub.sat.i32(i32 %0, i32 %1)
  ret i32 %3
}

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.usub.sat.i32(i32, i32) #4

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i64 @__ockl_sub_sat_i64(i64 noundef %0, i64 noundef %1) local_unnamed_addr #3 {
  %3 = tail call i64 @llvm.ssub.sat.i64(i64 %0, i64 %1)
  ret i64 %3
}

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare i64 @llvm.ssub.sat.i64(i64, i64) #4

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i64 @__ockl_sub_sat_u64(i64 noundef %0, i64 noundef %1) local_unnamed_addr #3 {
  %3 = tail call i64 @llvm.usub.sat.i64(i64 %0, i64 %1)
  ret i64 %3
}

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare i64 @llvm.usub.sat.i64(i64, i64) #4

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected ptr addrspace(1) @__ockl_to_global(ptr noundef readnone %0) local_unnamed_addr #3 {
  %2 = tail call i1 @llvm.amdgcn.is.shared(ptr %0)
  %3 = tail call i1 @llvm.amdgcn.is.private(ptr %0)
  %4 = or i1 %2, %3
  %5 = addrspacecast ptr %0 to ptr addrspace(1)
  %6 = select i1 %4, ptr addrspace(1) null, ptr addrspace(1) %5
  ret ptr addrspace(1) %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected ptr addrspace(3) @__ockl_to_local(ptr noundef readnone %0) local_unnamed_addr #3 {
  %2 = tail call i1 @llvm.amdgcn.is.shared(ptr %0)
  %3 = addrspacecast ptr %0 to ptr addrspace(3)
  %4 = select i1 %2, ptr addrspace(3) %3, ptr addrspace(3) addrspacecast (ptr null to ptr addrspace(3))
  ret ptr addrspace(3) %4
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected ptr addrspace(5) @__ockl_to_private(ptr noundef readnone %0) local_unnamed_addr #3 {
  %2 = tail call i1 @llvm.amdgcn.is.private(ptr %0)
  %3 = addrspacecast ptr %0 to ptr addrspace(5)
  %4 = select i1 %2, ptr addrspace(5) %3, ptr addrspace(5) addrspacecast (ptr null to ptr addrspace(5))
  ret ptr addrspace(5) %4
}

; Function Attrs: alwaysinline convergent norecurse nounwind
define linkonce_odr protected zeroext i1 @__ockl_wfall_i32(i32 noundef %0) local_unnamed_addr #18 {
  %2 = tail call i32 asm sideeffect "; ockl ballot hoisting hack $0", "=v,0"(i32 %0) #58, !srcloc !43
  %3 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %9, label %5

5:                                                ; preds = %1
  %6 = tail call i64 @llvm.amdgcn.icmp.i64.i32(i32 noundef %2, i32 noundef 0, i32 noundef 33) #17
  %7 = tail call i64 @llvm.read_register.i64(metadata !36) #57
  %8 = icmp eq i64 %6, %7
  br label %13

9:                                                ; preds = %1
  %10 = tail call i32 @llvm.amdgcn.icmp.i32.i32(i32 noundef %2, i32 noundef 0, i32 noundef 33) #17
  %11 = tail call i32 @llvm.read_register.i32(metadata !10) #57
  %12 = icmp eq i32 %10, %11
  br label %13

13:                                               ; preds = %9, %5
  %14 = phi i1 [ %8, %5 ], [ %12, %9 ]
  ret i1 %14
}

; Function Attrs: alwaysinline convergent norecurse nounwind
define linkonce_odr protected zeroext i1 @__ockl_wfsame_i32(i32 noundef %0) local_unnamed_addr #18 {
  %2 = tail call i32 asm sideeffect "; ockl ballot hoisting hack $0", "=v,0"(i32 %0) #58, !srcloc !43
  %3 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %13, label %5

5:                                                ; preds = %1
  %6 = tail call i64 @llvm.amdgcn.icmp.i64.i32(i32 noundef %2, i32 noundef 0, i32 noundef 33) #17
  %7 = icmp ne i64 %6, 0
  %8 = zext i1 %7 to i64
  %9 = xor i1 %7, true
  %10 = tail call i64 @llvm.read_register.i64(metadata !36) #57
  %11 = icmp eq i64 %10, %8
  %12 = or i1 %11, %9
  br label %21

13:                                               ; preds = %1
  %14 = tail call i32 @llvm.amdgcn.icmp.i32.i32(i32 noundef %2, i32 noundef 0, i32 noundef 33) #17
  %15 = icmp ne i32 %14, 0
  %16 = zext i1 %15 to i32
  %17 = xor i1 %15, true
  %18 = tail call i32 @llvm.read_register.i32(metadata !10) #57
  %19 = icmp eq i32 %18, %16
  %20 = or i1 %19, %17
  br label %21

21:                                               ; preds = %13, %5
  %22 = phi i1 [ %12, %5 ], [ %20, %13 ]
  ret i1 %22
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_wfbcast_u32(i32 noundef %0, i32 noundef %1) local_unnamed_addr #11 {
  %3 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %1)
  %4 = tail call i32 @llvm.amdgcn.readlane(i32 %0, i32 %3)
  ret i32 %4
}

; Function Attrs: convergent nounwind readnone willreturn
declare i32 @llvm.amdgcn.readlane(i32, i32) #17

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define linkonce_odr protected i64 @__ockl_wfbcast_u64(i64 noundef %0, i32 noundef %1) local_unnamed_addr #11 {
  %3 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %1)
  %4 = trunc i64 %0 to i32
  %5 = tail call i32 @llvm.amdgcn.readlane(i32 %4, i32 %3)
  %6 = insertelement <2 x i32> poison, i32 %5, i64 0
  %7 = lshr i64 %0, 32
  %8 = trunc i64 %7 to i32
  %9 = tail call i32 @llvm.amdgcn.readlane(i32 %8, i32 %3)
  %10 = insertelement <2 x i32> %6, i32 %9, i64 1
  %11 = bitcast <2 x i32> %10 to i64
  ret i64 %11
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected i32 @__ockl_wfred_add_i32(i32 noundef %0) local_unnamed_addr #0 {
  %2 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %3 = icmp slt i32 %2, 8000
  br i1 %3, label %4, label %37

4:                                                ; preds = %1
  %5 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %10, label %7

7:                                                ; preds = %4
  %8 = tail call i64 @llvm.read_register.i64(metadata !36) #57
  %9 = icmp eq i64 %8, -1
  br label %13

10:                                               ; preds = %4
  %11 = tail call i32 @llvm.read_register.i32(metadata !10) #57
  %12 = icmp eq i32 %11, -1
  br label %13

13:                                               ; preds = %10, %7
  %14 = phi i1 [ %9, %7 ], [ %12, %10 ]
  %15 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %0, i32 32945)
  %16 = add nsw i32 %15, %0
  %17 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %16, i32 32846)
  %18 = add nsw i32 %16, %17
  %19 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %18, i32 4127)
  %20 = add nsw i32 %18, %19
  %21 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %20, i32 8223)
  %22 = add nsw i32 %20, %21
  %23 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %22, i32 16415)
  %24 = add nsw i32 %22, %23
  br i1 %14, label %25, label %29

25:                                               ; preds = %13
  %26 = tail call i32 @llvm.amdgcn.readlane(i32 %24, i32 0)
  %27 = tail call i32 @llvm.amdgcn.readlane(i32 %24, i32 32)
  %28 = add nsw i32 %27, %26
  br label %43

29:                                               ; preds = %13
  %30 = tail call i32 @llvm.amdgcn.readlane(i32 %24, i32 32)
  %31 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %32 = and i32 %31, 1
  %33 = icmp eq i32 %32, 0
  %34 = select i1 %33, i32 0, i32 %30
  %35 = tail call i32 @llvm.amdgcn.readlane(i32 %24, i32 0)
  %36 = add nsw i32 %34, %35
  br label %43

37:                                               ; preds = %1
  %38 = icmp ult i32 %2, 10000
  br i1 %38, label %39, label %41

39:                                               ; preds = %37
  %40 = tail call fastcc i32 @63(i32 noundef %0) #57
  br label %43

41:                                               ; preds = %37
  %42 = tail call fastcc i32 @64(i32 noundef %0) #57
  br label %43

43:                                               ; preds = %41, %39, %29, %25
  %44 = phi i32 [ %28, %25 ], [ %36, %29 ], [ %40, %39 ], [ %42, %41 ]
  ret i32 %44
}

; Function Attrs: convergent nounwind readnone willreturn
declare i32 @llvm.amdgcn.ds.swizzle(i32, i32 immarg) #17

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc i32 @63(i32 noundef %0) unnamed_addr #52 {
  %2 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %0, i32 257, i32 15, i32 15, i1 true)
  %3 = add nsw i32 %2, %0
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %3, i32 258, i32 15, i32 15, i1 true)
  %5 = add nsw i32 %3, %4
  %6 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %5, i32 260, i32 15, i32 15, i1 true)
  %7 = add nsw i32 %5, %6
  %8 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %7, i32 264, i32 15, i32 15, i1 true)
  %9 = add nsw i32 %7, %8
  %10 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %9, i32 304, i32 15, i32 15, i1 true)
  %11 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %10, i32 320, i32 15, i32 15, i1 true)
  %12 = add nsw i32 %11, %9
  %13 = tail call i32 @llvm.amdgcn.readlane(i32 %12, i32 32)
  %14 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %15 = and i32 %14, 1
  %16 = icmp eq i32 %15, 0
  %17 = select i1 %16, i32 0, i32 %13
  %18 = tail call i32 @llvm.amdgcn.readlane(i32 %12, i32 0)
  %19 = add nsw i32 %17, %18
  ret i32 %19
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc i32 @64(i32 noundef %0) unnamed_addr #53 {
  %2 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %0, i32 257, i32 15, i32 15, i1 true)
  %3 = add nsw i32 %2, %0
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %3, i32 258, i32 15, i32 15, i1 true)
  %5 = add nsw i32 %3, %4
  %6 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %5, i32 260, i32 15, i32 15, i1 true)
  %7 = add nsw i32 %5, %6
  %8 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %7, i32 264, i32 15, i32 15, i1 true)
  %9 = add nsw i32 %7, %8
  %10 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %9, i32 336, i32 15, i32 15, i1 true)
  %11 = tail call i32 @llvm.amdgcn.permlanex16(i32 undef, i32 %10, i32 0, i32 0, i1 false, i1 true)
  %12 = add nsw i32 %11, %10
  %13 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %23, label %15

15:                                               ; preds = %1
  %16 = tail call i32 @llvm.amdgcn.readlane(i32 %12, i32 32)
  %17 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %18 = and i32 %17, 1
  %19 = icmp eq i32 %18, 0
  %20 = select i1 %19, i32 0, i32 %16
  %21 = tail call i32 @llvm.amdgcn.readlane(i32 %12, i32 0)
  %22 = add nsw i32 %20, %21
  br label %23

23:                                               ; preds = %15, %1
  %24 = phi i32 [ %22, %15 ], [ %12, %1 ]
  ret i32 %24
}

; Function Attrs: convergent nounwind readnone willreturn
declare i32 @llvm.amdgcn.update.dpp.i32(i32, i32, i32 immarg, i32 immarg, i32 immarg, i1 immarg) #17

; Function Attrs: convergent nounwind readnone willreturn
declare i32 @llvm.amdgcn.permlanex16(i32, i32, i32, i32, i1 immarg, i1 immarg) #17

; Function Attrs: convergent norecurse nounwind
define linkonce_odr protected i32 @__ockl_wfscan_add_i32(i32 noundef %0, i1 noundef zeroext %1) local_unnamed_addr #12 {
  %3 = tail call i32 @__ockl_lane_u32() #58
  %4 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %5 = icmp slt i32 %4, 8000
  br i1 %5, label %6, label %36

6:                                                ; preds = %2
  %7 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %0, i32 30)
  %8 = and i32 %3, 1
  %9 = icmp eq i32 %8, 0
  %10 = select i1 %9, i32 0, i32 %7
  %11 = add nsw i32 %10, %0
  %12 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %11, i32 60)
  %13 = and i32 %3, 2
  %14 = icmp eq i32 %13, 0
  %15 = select i1 %14, i32 0, i32 %12
  %16 = add nsw i32 %11, %15
  %17 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %16, i32 120)
  %18 = and i32 %3, 4
  %19 = icmp eq i32 %18, 0
  %20 = select i1 %19, i32 0, i32 %17
  %21 = add nsw i32 %16, %20
  %22 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %21, i32 240)
  %23 = and i32 %3, 8
  %24 = icmp eq i32 %23, 0
  %25 = select i1 %24, i32 0, i32 %22
  %26 = add nsw i32 %21, %25
  %27 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %26, i32 480)
  %28 = and i32 %3, 16
  %29 = icmp eq i32 %28, 0
  %30 = select i1 %29, i32 0, i32 %27
  %31 = add nsw i32 %26, %30
  %32 = tail call i32 @llvm.amdgcn.readlane(i32 %31, i32 31)
  %33 = icmp ugt i32 %3, 31
  %34 = select i1 %33, i32 %32, i32 0
  %35 = add nsw i32 %31, %34
  br label %42

36:                                               ; preds = %2
  %37 = icmp ult i32 %4, 10000
  br i1 %37, label %38, label %40

38:                                               ; preds = %36
  %39 = tail call fastcc i32 @65(i32 noundef %0) #57
  br label %42

40:                                               ; preds = %36
  %41 = tail call fastcc i32 @66(i32 noundef %0, i32 noundef %3) #57
  br label %42

42:                                               ; preds = %40, %38, %6
  %43 = phi i32 [ %35, %6 ], [ %39, %38 ], [ %41, %40 ]
  br i1 %1, label %70, label %44

44:                                               ; preds = %42
  br i1 %5, label %45, label %64

45:                                               ; preds = %44
  %46 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %43, i32 32912)
  %47 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %43, i32 120)
  %48 = and i32 %3, 7
  %49 = icmp eq i32 %48, 4
  %50 = select i1 %49, i32 %47, i32 %46
  %51 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %43, i32 240)
  %52 = and i32 %3, 15
  %53 = icmp eq i32 %52, 8
  %54 = select i1 %53, i32 %51, i32 %50
  %55 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %43, i32 480)
  %56 = and i32 %3, 31
  %57 = icmp eq i32 %56, 16
  %58 = select i1 %57, i32 %55, i32 %54
  %59 = tail call i32 @llvm.amdgcn.readlane(i32 %43, i32 31)
  %60 = icmp eq i32 %3, 32
  %61 = select i1 %60, i32 %59, i32 %58
  %62 = icmp eq i32 %3, 0
  %63 = select i1 %62, i32 0, i32 %61
  br label %70

64:                                               ; preds = %44
  %65 = icmp ult i32 %4, 10000
  br i1 %65, label %66, label %68

66:                                               ; preds = %64
  %67 = tail call fastcc i32 @67(i32 noundef %43) #57
  br label %70

68:                                               ; preds = %64
  %69 = tail call fastcc i32 @68(i32 noundef %43, i32 noundef %3) #57
  br label %70

70:                                               ; preds = %68, %66, %45, %42
  %71 = phi i32 [ %43, %42 ], [ %63, %45 ], [ %67, %66 ], [ %69, %68 ]
  ret i32 %71
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i32 @65(i32 noundef %0) unnamed_addr #54 {
  %2 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %0, i32 273, i32 15, i32 15, i1 true)
  %3 = add nsw i32 %2, %0
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %3, i32 274, i32 15, i32 15, i1 true)
  %5 = add nsw i32 %3, %4
  %6 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %5, i32 276, i32 15, i32 15, i1 true)
  %7 = add nsw i32 %5, %6
  %8 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %7, i32 280, i32 15, i32 15, i1 true)
  %9 = add nsw i32 %7, %8
  %10 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %9, i32 322, i32 10, i32 15, i1 false)
  %11 = add nsw i32 %9, %10
  %12 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %11, i32 323, i32 12, i32 15, i1 false)
  %13 = add nsw i32 %11, %12
  ret i32 %13
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i32 @66(i32 noundef %0, i32 noundef %1) unnamed_addr #55 {
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %0, i32 273, i32 15, i32 15, i1 true)
  %4 = add nsw i32 %3, %0
  %5 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %4, i32 274, i32 15, i32 15, i1 true)
  %6 = add nsw i32 %4, %5
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %6, i32 276, i32 15, i32 15, i1 true)
  %8 = add nsw i32 %6, %7
  %9 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %8, i32 280, i32 15, i32 15, i1 true)
  %10 = add nsw i32 %8, %9
  %11 = tail call i32 @llvm.amdgcn.permlanex16(i32 undef, i32 %10, i32 -1, i32 -1, i1 false, i1 true)
  %12 = and i32 %1, 16
  %13 = icmp eq i32 %12, 0
  %14 = select i1 %13, i32 0, i32 %11
  %15 = add nsw i32 %14, %10
  %16 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %23, label %18

18:                                               ; preds = %2
  %19 = icmp ugt i32 %1, 31
  %20 = tail call i32 @llvm.amdgcn.readlane(i32 %15, i32 31)
  %21 = select i1 %19, i32 %20, i32 0
  %22 = add nsw i32 %21, %15
  br label %23

23:                                               ; preds = %18, %2
  %24 = phi i32 [ %22, %18 ], [ %15, %2 ]
  ret i32 %24
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i32 @67(i32 noundef %0) unnamed_addr #54 {
  %2 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %0, i32 312, i32 15, i32 15, i1 true)
  ret i32 %2
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i32 @68(i32 noundef %0, i32 noundef %1) unnamed_addr #55 {
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %0, i32 273, i32 15, i32 15, i1 true)
  %4 = tail call i32 @llvm.amdgcn.permlanex16(i32 undef, i32 %0, i32 -1, i32 -1, i1 false, i1 true)
  %5 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %15, label %7

7:                                                ; preds = %2
  %8 = tail call i32 @llvm.amdgcn.readlane(i32 %0, i32 31)
  %9 = icmp eq i32 %1, 32
  %10 = select i1 %9, i32 %8, i32 %4
  %11 = and i32 %1, 31
  %12 = icmp eq i32 %11, 16
  %13 = or i1 %9, %12
  %14 = select i1 %13, i32 %10, i32 %3
  br label %18

15:                                               ; preds = %2
  %16 = icmp eq i32 %1, 16
  %17 = select i1 %16, i32 %4, i32 %3
  br label %18

18:                                               ; preds = %15, %7
  %19 = phi i32 [ %14, %7 ], [ %17, %15 ]
  ret i32 %19
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected i32 @__ockl_wfred_add_u32(i32 noundef %0) local_unnamed_addr #0 {
  %2 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %3 = icmp slt i32 %2, 8000
  br i1 %3, label %4, label %37

4:                                                ; preds = %1
  %5 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %10, label %7

7:                                                ; preds = %4
  %8 = tail call i64 @llvm.read_register.i64(metadata !36) #57
  %9 = icmp eq i64 %8, -1
  br label %13

10:                                               ; preds = %4
  %11 = tail call i32 @llvm.read_register.i32(metadata !10) #57
  %12 = icmp eq i32 %11, -1
  br label %13

13:                                               ; preds = %10, %7
  %14 = phi i1 [ %9, %7 ], [ %12, %10 ]
  %15 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %0, i32 32945)
  %16 = add i32 %15, %0
  %17 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %16, i32 32846)
  %18 = add i32 %16, %17
  %19 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %18, i32 4127)
  %20 = add i32 %18, %19
  %21 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %20, i32 8223)
  %22 = add i32 %20, %21
  %23 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %22, i32 16415)
  %24 = add i32 %22, %23
  br i1 %14, label %25, label %29

25:                                               ; preds = %13
  %26 = tail call i32 @llvm.amdgcn.readlane(i32 %24, i32 0)
  %27 = tail call i32 @llvm.amdgcn.readlane(i32 %24, i32 32)
  %28 = add nsw i32 %27, %26
  br label %43

29:                                               ; preds = %13
  %30 = tail call i32 @llvm.amdgcn.readlane(i32 %24, i32 32)
  %31 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %32 = and i32 %31, 1
  %33 = icmp eq i32 %32, 0
  %34 = select i1 %33, i32 0, i32 %30
  %35 = tail call i32 @llvm.amdgcn.readlane(i32 %24, i32 0)
  %36 = add i32 %34, %35
  br label %43

37:                                               ; preds = %1
  %38 = icmp ult i32 %2, 10000
  br i1 %38, label %39, label %41

39:                                               ; preds = %37
  %40 = tail call fastcc i32 @69(i32 noundef %0) #57
  br label %43

41:                                               ; preds = %37
  %42 = tail call fastcc i32 @70(i32 noundef %0) #57
  br label %43

43:                                               ; preds = %41, %39, %29, %25
  %44 = phi i32 [ %28, %25 ], [ %36, %29 ], [ %40, %39 ], [ %42, %41 ]
  ret i32 %44
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc i32 @69(i32 noundef %0) unnamed_addr #52 {
  %2 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %0, i32 257, i32 15, i32 15, i1 true)
  %3 = add i32 %2, %0
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %3, i32 258, i32 15, i32 15, i1 true)
  %5 = add i32 %3, %4
  %6 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %5, i32 260, i32 15, i32 15, i1 true)
  %7 = add i32 %5, %6
  %8 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %7, i32 264, i32 15, i32 15, i1 true)
  %9 = add i32 %7, %8
  %10 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %9, i32 304, i32 15, i32 15, i1 true)
  %11 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %10, i32 320, i32 15, i32 15, i1 true)
  %12 = add i32 %11, %9
  %13 = tail call i32 @llvm.amdgcn.readlane(i32 %12, i32 32)
  %14 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %15 = and i32 %14, 1
  %16 = icmp eq i32 %15, 0
  %17 = select i1 %16, i32 0, i32 %13
  %18 = tail call i32 @llvm.amdgcn.readlane(i32 %12, i32 0)
  %19 = add i32 %17, %18
  ret i32 %19
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc i32 @70(i32 noundef %0) unnamed_addr #53 {
  %2 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %0, i32 257, i32 15, i32 15, i1 true)
  %3 = add i32 %2, %0
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %3, i32 258, i32 15, i32 15, i1 true)
  %5 = add i32 %3, %4
  %6 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %5, i32 260, i32 15, i32 15, i1 true)
  %7 = add i32 %5, %6
  %8 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %7, i32 264, i32 15, i32 15, i1 true)
  %9 = add i32 %7, %8
  %10 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %9, i32 336, i32 15, i32 15, i1 true)
  %11 = tail call i32 @llvm.amdgcn.permlanex16(i32 undef, i32 %10, i32 0, i32 0, i1 false, i1 true)
  %12 = add i32 %11, %10
  %13 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %23, label %15

15:                                               ; preds = %1
  %16 = tail call i32 @llvm.amdgcn.readlane(i32 %12, i32 32)
  %17 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %18 = and i32 %17, 1
  %19 = icmp eq i32 %18, 0
  %20 = select i1 %19, i32 0, i32 %16
  %21 = tail call i32 @llvm.amdgcn.readlane(i32 %12, i32 0)
  %22 = add i32 %20, %21
  br label %23

23:                                               ; preds = %15, %1
  %24 = phi i32 [ %22, %15 ], [ %12, %1 ]
  ret i32 %24
}

; Function Attrs: convergent norecurse nounwind
define linkonce_odr protected i32 @__ockl_wfscan_add_u32(i32 noundef %0, i1 noundef zeroext %1) local_unnamed_addr #12 {
  %3 = tail call i32 @__ockl_lane_u32() #58
  %4 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %5 = icmp slt i32 %4, 8000
  br i1 %5, label %6, label %36

6:                                                ; preds = %2
  %7 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %0, i32 30)
  %8 = and i32 %3, 1
  %9 = icmp eq i32 %8, 0
  %10 = select i1 %9, i32 0, i32 %7
  %11 = add i32 %10, %0
  %12 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %11, i32 60)
  %13 = and i32 %3, 2
  %14 = icmp eq i32 %13, 0
  %15 = select i1 %14, i32 0, i32 %12
  %16 = add i32 %11, %15
  %17 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %16, i32 120)
  %18 = and i32 %3, 4
  %19 = icmp eq i32 %18, 0
  %20 = select i1 %19, i32 0, i32 %17
  %21 = add i32 %16, %20
  %22 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %21, i32 240)
  %23 = and i32 %3, 8
  %24 = icmp eq i32 %23, 0
  %25 = select i1 %24, i32 0, i32 %22
  %26 = add i32 %21, %25
  %27 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %26, i32 480)
  %28 = and i32 %3, 16
  %29 = icmp eq i32 %28, 0
  %30 = select i1 %29, i32 0, i32 %27
  %31 = add i32 %26, %30
  %32 = tail call i32 @llvm.amdgcn.readlane(i32 %31, i32 31)
  %33 = icmp ugt i32 %3, 31
  %34 = select i1 %33, i32 %32, i32 0
  %35 = add i32 %31, %34
  br label %42

36:                                               ; preds = %2
  %37 = icmp ult i32 %4, 10000
  br i1 %37, label %38, label %40

38:                                               ; preds = %36
  %39 = tail call fastcc i32 @71(i32 noundef %0) #57
  br label %42

40:                                               ; preds = %36
  %41 = tail call fastcc i32 @72(i32 noundef %0, i32 noundef %3) #57
  br label %42

42:                                               ; preds = %40, %38, %6
  %43 = phi i32 [ %35, %6 ], [ %39, %38 ], [ %41, %40 ]
  br i1 %1, label %70, label %44

44:                                               ; preds = %42
  br i1 %5, label %45, label %64

45:                                               ; preds = %44
  %46 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %43, i32 32912)
  %47 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %43, i32 120)
  %48 = and i32 %3, 7
  %49 = icmp eq i32 %48, 4
  %50 = select i1 %49, i32 %47, i32 %46
  %51 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %43, i32 240)
  %52 = and i32 %3, 15
  %53 = icmp eq i32 %52, 8
  %54 = select i1 %53, i32 %51, i32 %50
  %55 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %43, i32 480)
  %56 = and i32 %3, 31
  %57 = icmp eq i32 %56, 16
  %58 = select i1 %57, i32 %55, i32 %54
  %59 = tail call i32 @llvm.amdgcn.readlane(i32 %43, i32 31)
  %60 = icmp eq i32 %3, 32
  %61 = select i1 %60, i32 %59, i32 %58
  %62 = icmp eq i32 %3, 0
  %63 = select i1 %62, i32 0, i32 %61
  br label %70

64:                                               ; preds = %44
  %65 = icmp ult i32 %4, 10000
  br i1 %65, label %66, label %68

66:                                               ; preds = %64
  %67 = tail call fastcc i32 @73(i32 noundef %43) #57
  br label %70

68:                                               ; preds = %64
  %69 = tail call fastcc i32 @74(i32 noundef %43, i32 noundef %3) #57
  br label %70

70:                                               ; preds = %68, %66, %45, %42
  %71 = phi i32 [ %43, %42 ], [ %63, %45 ], [ %67, %66 ], [ %69, %68 ]
  ret i32 %71
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i32 @71(i32 noundef %0) unnamed_addr #54 {
  %2 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %0, i32 273, i32 15, i32 15, i1 true)
  %3 = add i32 %2, %0
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %3, i32 274, i32 15, i32 15, i1 true)
  %5 = add i32 %3, %4
  %6 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %5, i32 276, i32 15, i32 15, i1 true)
  %7 = add i32 %5, %6
  %8 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %7, i32 280, i32 15, i32 15, i1 true)
  %9 = add i32 %7, %8
  %10 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %9, i32 322, i32 10, i32 15, i1 false)
  %11 = add i32 %9, %10
  %12 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %11, i32 323, i32 12, i32 15, i1 false)
  %13 = add i32 %11, %12
  ret i32 %13
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i32 @72(i32 noundef %0, i32 noundef %1) unnamed_addr #55 {
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %0, i32 273, i32 15, i32 15, i1 true)
  %4 = add i32 %3, %0
  %5 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %4, i32 274, i32 15, i32 15, i1 true)
  %6 = add i32 %4, %5
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %6, i32 276, i32 15, i32 15, i1 true)
  %8 = add i32 %6, %7
  %9 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %8, i32 280, i32 15, i32 15, i1 true)
  %10 = add i32 %8, %9
  %11 = tail call i32 @llvm.amdgcn.permlanex16(i32 undef, i32 %10, i32 -1, i32 -1, i1 false, i1 true)
  %12 = and i32 %1, 16
  %13 = icmp eq i32 %12, 0
  %14 = select i1 %13, i32 0, i32 %11
  %15 = add i32 %14, %10
  %16 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %23, label %18

18:                                               ; preds = %2
  %19 = icmp ugt i32 %1, 31
  %20 = tail call i32 @llvm.amdgcn.readlane(i32 %15, i32 31)
  %21 = select i1 %19, i32 %20, i32 0
  %22 = add i32 %21, %15
  br label %23

23:                                               ; preds = %18, %2
  %24 = phi i32 [ %22, %18 ], [ %15, %2 ]
  ret i32 %24
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i32 @73(i32 noundef %0) unnamed_addr #54 {
  %2 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %0, i32 312, i32 15, i32 15, i1 true)
  ret i32 %2
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i32 @74(i32 noundef %0, i32 noundef %1) unnamed_addr #55 {
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %0, i32 273, i32 15, i32 15, i1 true)
  %4 = tail call i32 @llvm.amdgcn.permlanex16(i32 undef, i32 %0, i32 -1, i32 -1, i1 false, i1 true)
  %5 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %15, label %7

7:                                                ; preds = %2
  %8 = tail call i32 @llvm.amdgcn.readlane(i32 %0, i32 31)
  %9 = icmp eq i32 %1, 32
  %10 = select i1 %9, i32 %8, i32 %4
  %11 = and i32 %1, 31
  %12 = icmp eq i32 %11, 16
  %13 = or i1 %9, %12
  %14 = select i1 %13, i32 %10, i32 %3
  br label %18

15:                                               ; preds = %2
  %16 = icmp eq i32 %1, 16
  %17 = select i1 %16, i32 %4, i32 %3
  br label %18

18:                                               ; preds = %15, %7
  %19 = phi i32 [ %14, %7 ], [ %17, %15 ]
  ret i32 %19
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected i64 @__ockl_wfred_add_i64(i64 noundef %0) local_unnamed_addr #0 {
  %2 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %3 = icmp slt i32 %2, 8000
  br i1 %3, label %4, label %93

4:                                                ; preds = %1
  %5 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %10, label %7

7:                                                ; preds = %4
  %8 = tail call i64 @llvm.read_register.i64(metadata !36) #57
  %9 = icmp eq i64 %8, -1
  br label %13

10:                                               ; preds = %4
  %11 = tail call i32 @llvm.read_register.i32(metadata !10) #57
  %12 = icmp eq i32 %11, -1
  br label %13

13:                                               ; preds = %10, %7
  %14 = phi i1 [ %9, %7 ], [ %12, %10 ]
  %15 = trunc i64 %0 to i32
  %16 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %15, i32 32945)
  %17 = insertelement <2 x i32> undef, i32 %16, i64 0
  %18 = lshr i64 %0, 32
  %19 = trunc i64 %18 to i32
  %20 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %19, i32 32945)
  %21 = insertelement <2 x i32> %17, i32 %20, i64 1
  %22 = bitcast <2 x i32> %21 to i64
  %23 = add nsw i64 %22, %0
  %24 = trunc i64 %23 to i32
  %25 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %24, i32 32846)
  %26 = insertelement <2 x i32> undef, i32 %25, i64 0
  %27 = lshr i64 %23, 32
  %28 = trunc i64 %27 to i32
  %29 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %28, i32 32846)
  %30 = insertelement <2 x i32> %26, i32 %29, i64 1
  %31 = bitcast <2 x i32> %30 to i64
  %32 = add nsw i64 %23, %31
  %33 = trunc i64 %32 to i32
  %34 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %33, i32 4127)
  %35 = insertelement <2 x i32> undef, i32 %34, i64 0
  %36 = lshr i64 %32, 32
  %37 = trunc i64 %36 to i32
  %38 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %37, i32 4127)
  %39 = insertelement <2 x i32> %35, i32 %38, i64 1
  %40 = bitcast <2 x i32> %39 to i64
  %41 = add nsw i64 %32, %40
  %42 = trunc i64 %41 to i32
  %43 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %42, i32 8223)
  %44 = insertelement <2 x i32> undef, i32 %43, i64 0
  %45 = lshr i64 %41, 32
  %46 = trunc i64 %45 to i32
  %47 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %46, i32 8223)
  %48 = insertelement <2 x i32> %44, i32 %47, i64 1
  %49 = bitcast <2 x i32> %48 to i64
  %50 = add nsw i64 %41, %49
  %51 = trunc i64 %50 to i32
  %52 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %51, i32 16415)
  %53 = insertelement <2 x i32> undef, i32 %52, i64 0
  %54 = lshr i64 %50, 32
  %55 = trunc i64 %54 to i32
  %56 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %55, i32 16415)
  %57 = insertelement <2 x i32> %53, i32 %56, i64 1
  %58 = bitcast <2 x i32> %57 to i64
  %59 = add nsw i64 %50, %58
  %60 = trunc i64 %59 to i32
  br i1 %14, label %61, label %75

61:                                               ; preds = %13
  %62 = tail call i32 @llvm.amdgcn.readlane(i32 %60, i32 0)
  %63 = insertelement <2 x i32> undef, i32 %62, i64 0
  %64 = lshr i64 %59, 32
  %65 = trunc i64 %64 to i32
  %66 = tail call i32 @llvm.amdgcn.readlane(i32 %65, i32 0)
  %67 = insertelement <2 x i32> %63, i32 %66, i64 1
  %68 = bitcast <2 x i32> %67 to i64
  %69 = tail call i32 @llvm.amdgcn.readlane(i32 %60, i32 32)
  %70 = insertelement <2 x i32> undef, i32 %69, i64 0
  %71 = tail call i32 @llvm.amdgcn.readlane(i32 %65, i32 32)
  %72 = insertelement <2 x i32> %70, i32 %71, i64 1
  %73 = bitcast <2 x i32> %72 to i64
  %74 = add nsw i64 %73, %68
  br label %99

75:                                               ; preds = %13
  %76 = tail call i32 @llvm.amdgcn.readlane(i32 %60, i32 32)
  %77 = insertelement <2 x i32> undef, i32 %76, i64 0
  %78 = lshr i64 %59, 32
  %79 = trunc i64 %78 to i32
  %80 = tail call i32 @llvm.amdgcn.readlane(i32 %79, i32 32)
  %81 = insertelement <2 x i32> %77, i32 %80, i64 1
  %82 = bitcast <2 x i32> %81 to i64
  %83 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %84 = and i32 %83, 1
  %85 = icmp eq i32 %84, 0
  %86 = select i1 %85, i64 0, i64 %82
  %87 = tail call i32 @llvm.amdgcn.readlane(i32 %60, i32 0)
  %88 = insertelement <2 x i32> undef, i32 %87, i64 0
  %89 = tail call i32 @llvm.amdgcn.readlane(i32 %79, i32 0)
  %90 = insertelement <2 x i32> %88, i32 %89, i64 1
  %91 = bitcast <2 x i32> %90 to i64
  %92 = add nsw i64 %86, %91
  br label %99

93:                                               ; preds = %1
  %94 = icmp ult i32 %2, 10000
  br i1 %94, label %95, label %97

95:                                               ; preds = %93
  %96 = tail call fastcc i64 @75(i64 noundef %0) #57
  br label %99

97:                                               ; preds = %93
  %98 = tail call fastcc i64 @76(i64 noundef %0) #57
  br label %99

99:                                               ; preds = %97, %95, %75, %61
  %100 = phi i64 [ %74, %61 ], [ %92, %75 ], [ %96, %95 ], [ %98, %97 ]
  ret i64 %100
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc i64 @75(i64 noundef %0) unnamed_addr #52 {
  %2 = trunc i64 %0 to i32
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %2, i32 257, i32 15, i32 15, i1 true)
  %4 = insertelement <2 x i32> undef, i32 %3, i64 0
  %5 = lshr i64 %0, 32
  %6 = trunc i64 %5 to i32
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %6, i32 257, i32 15, i32 15, i1 true)
  %8 = insertelement <2 x i32> %4, i32 %7, i64 1
  %9 = bitcast <2 x i32> %8 to i64
  %10 = add nsw i64 %9, %0
  %11 = trunc i64 %10 to i32
  %12 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %11, i32 258, i32 15, i32 15, i1 true)
  %13 = insertelement <2 x i32> undef, i32 %12, i64 0
  %14 = lshr i64 %10, 32
  %15 = trunc i64 %14 to i32
  %16 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %15, i32 258, i32 15, i32 15, i1 true)
  %17 = insertelement <2 x i32> %13, i32 %16, i64 1
  %18 = bitcast <2 x i32> %17 to i64
  %19 = add nsw i64 %10, %18
  %20 = trunc i64 %19 to i32
  %21 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %20, i32 260, i32 15, i32 15, i1 true)
  %22 = insertelement <2 x i32> undef, i32 %21, i64 0
  %23 = lshr i64 %19, 32
  %24 = trunc i64 %23 to i32
  %25 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %24, i32 260, i32 15, i32 15, i1 true)
  %26 = insertelement <2 x i32> %22, i32 %25, i64 1
  %27 = bitcast <2 x i32> %26 to i64
  %28 = add nsw i64 %19, %27
  %29 = trunc i64 %28 to i32
  %30 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %29, i32 264, i32 15, i32 15, i1 true)
  %31 = insertelement <2 x i32> undef, i32 %30, i64 0
  %32 = lshr i64 %28, 32
  %33 = trunc i64 %32 to i32
  %34 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %33, i32 264, i32 15, i32 15, i1 true)
  %35 = insertelement <2 x i32> %31, i32 %34, i64 1
  %36 = bitcast <2 x i32> %35 to i64
  %37 = add nsw i64 %28, %36
  %38 = trunc i64 %37 to i32
  %39 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %38, i32 304, i32 15, i32 15, i1 true)
  %40 = lshr i64 %37, 32
  %41 = trunc i64 %40 to i32
  %42 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %41, i32 304, i32 15, i32 15, i1 true)
  %43 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %39, i32 320, i32 15, i32 15, i1 true)
  %44 = insertelement <2 x i32> undef, i32 %43, i64 0
  %45 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %42, i32 320, i32 15, i32 15, i1 true)
  %46 = insertelement <2 x i32> %44, i32 %45, i64 1
  %47 = bitcast <2 x i32> %46 to i64
  %48 = add nsw i64 %37, %47
  %49 = trunc i64 %48 to i32
  %50 = tail call i32 @llvm.amdgcn.readlane(i32 %49, i32 32)
  %51 = insertelement <2 x i32> undef, i32 %50, i64 0
  %52 = lshr i64 %48, 32
  %53 = trunc i64 %52 to i32
  %54 = tail call i32 @llvm.amdgcn.readlane(i32 %53, i32 32)
  %55 = insertelement <2 x i32> %51, i32 %54, i64 1
  %56 = bitcast <2 x i32> %55 to i64
  %57 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %58 = and i32 %57, 1
  %59 = icmp eq i32 %58, 0
  %60 = select i1 %59, i64 0, i64 %56
  %61 = tail call i32 @llvm.amdgcn.readlane(i32 %49, i32 0)
  %62 = insertelement <2 x i32> undef, i32 %61, i64 0
  %63 = tail call i32 @llvm.amdgcn.readlane(i32 %53, i32 0)
  %64 = insertelement <2 x i32> %62, i32 %63, i64 1
  %65 = bitcast <2 x i32> %64 to i64
  %66 = add nsw i64 %60, %65
  ret i64 %66
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc i64 @76(i64 noundef %0) unnamed_addr #53 {
  %2 = trunc i64 %0 to i32
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %2, i32 257, i32 15, i32 15, i1 true)
  %4 = insertelement <2 x i32> undef, i32 %3, i64 0
  %5 = lshr i64 %0, 32
  %6 = trunc i64 %5 to i32
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %6, i32 257, i32 15, i32 15, i1 true)
  %8 = insertelement <2 x i32> %4, i32 %7, i64 1
  %9 = bitcast <2 x i32> %8 to i64
  %10 = add nsw i64 %9, %0
  %11 = trunc i64 %10 to i32
  %12 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %11, i32 258, i32 15, i32 15, i1 true)
  %13 = insertelement <2 x i32> undef, i32 %12, i64 0
  %14 = lshr i64 %10, 32
  %15 = trunc i64 %14 to i32
  %16 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %15, i32 258, i32 15, i32 15, i1 true)
  %17 = insertelement <2 x i32> %13, i32 %16, i64 1
  %18 = bitcast <2 x i32> %17 to i64
  %19 = add nsw i64 %10, %18
  %20 = trunc i64 %19 to i32
  %21 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %20, i32 260, i32 15, i32 15, i1 true)
  %22 = insertelement <2 x i32> undef, i32 %21, i64 0
  %23 = lshr i64 %19, 32
  %24 = trunc i64 %23 to i32
  %25 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %24, i32 260, i32 15, i32 15, i1 true)
  %26 = insertelement <2 x i32> %22, i32 %25, i64 1
  %27 = bitcast <2 x i32> %26 to i64
  %28 = add nsw i64 %19, %27
  %29 = trunc i64 %28 to i32
  %30 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %29, i32 264, i32 15, i32 15, i1 true)
  %31 = insertelement <2 x i32> undef, i32 %30, i64 0
  %32 = lshr i64 %28, 32
  %33 = trunc i64 %32 to i32
  %34 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %33, i32 264, i32 15, i32 15, i1 true)
  %35 = insertelement <2 x i32> %31, i32 %34, i64 1
  %36 = bitcast <2 x i32> %35 to i64
  %37 = add nsw i64 %28, %36
  %38 = trunc i64 %37 to i32
  %39 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %38, i32 336, i32 15, i32 15, i1 true)
  %40 = insertelement <2 x i32> undef, i32 %39, i64 0
  %41 = lshr i64 %37, 32
  %42 = trunc i64 %41 to i32
  %43 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %42, i32 336, i32 15, i32 15, i1 true)
  %44 = insertelement <2 x i32> %40, i32 %43, i64 1
  %45 = bitcast <2 x i32> %44 to i64
  %46 = tail call i32 @llvm.amdgcn.permlanex16(i32 undef, i32 %39, i32 0, i32 0, i1 false, i1 true)
  %47 = insertelement <2 x i32> undef, i32 %46, i64 0
  %48 = tail call i32 @llvm.amdgcn.permlanex16(i32 undef, i32 %43, i32 0, i32 0, i1 false, i1 true)
  %49 = insertelement <2 x i32> %47, i32 %48, i64 1
  %50 = bitcast <2 x i32> %49 to i64
  %51 = add nsw i64 %50, %45
  %52 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %53 = icmp eq i8 %52, 0
  br i1 %53, label %73, label %54

54:                                               ; preds = %1
  %55 = trunc i64 %51 to i32
  %56 = tail call i32 @llvm.amdgcn.readlane(i32 %55, i32 32)
  %57 = insertelement <2 x i32> undef, i32 %56, i64 0
  %58 = lshr i64 %51, 32
  %59 = trunc i64 %58 to i32
  %60 = tail call i32 @llvm.amdgcn.readlane(i32 %59, i32 32)
  %61 = insertelement <2 x i32> %57, i32 %60, i64 1
  %62 = bitcast <2 x i32> %61 to i64
  %63 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %64 = and i32 %63, 1
  %65 = icmp eq i32 %64, 0
  %66 = select i1 %65, i64 0, i64 %62
  %67 = tail call i32 @llvm.amdgcn.readlane(i32 %55, i32 0)
  %68 = insertelement <2 x i32> undef, i32 %67, i64 0
  %69 = tail call i32 @llvm.amdgcn.readlane(i32 %59, i32 0)
  %70 = insertelement <2 x i32> %68, i32 %69, i64 1
  %71 = bitcast <2 x i32> %70 to i64
  %72 = add nsw i64 %66, %71
  br label %73

73:                                               ; preds = %54, %1
  %74 = phi i64 [ %72, %54 ], [ %51, %1 ]
  ret i64 %74
}

; Function Attrs: convergent norecurse nounwind
define linkonce_odr protected i64 @__ockl_wfscan_add_i64(i64 noundef %0, i1 noundef zeroext %1) local_unnamed_addr #12 {
  %3 = tail call i32 @__ockl_lane_u32() #58
  %4 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %5 = icmp slt i32 %4, 8000
  br i1 %5, label %6, label %78

6:                                                ; preds = %2
  %7 = trunc i64 %0 to i32
  %8 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %7, i32 30)
  %9 = insertelement <2 x i32> undef, i32 %8, i64 0
  %10 = lshr i64 %0, 32
  %11 = trunc i64 %10 to i32
  %12 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %11, i32 30)
  %13 = insertelement <2 x i32> %9, i32 %12, i64 1
  %14 = bitcast <2 x i32> %13 to i64
  %15 = and i32 %3, 1
  %16 = icmp eq i32 %15, 0
  %17 = select i1 %16, i64 0, i64 %14
  %18 = add nsw i64 %17, %0
  %19 = trunc i64 %18 to i32
  %20 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %19, i32 60)
  %21 = insertelement <2 x i32> undef, i32 %20, i64 0
  %22 = lshr i64 %18, 32
  %23 = trunc i64 %22 to i32
  %24 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %23, i32 60)
  %25 = insertelement <2 x i32> %21, i32 %24, i64 1
  %26 = bitcast <2 x i32> %25 to i64
  %27 = and i32 %3, 2
  %28 = icmp eq i32 %27, 0
  %29 = select i1 %28, i64 0, i64 %26
  %30 = add nsw i64 %29, %18
  %31 = trunc i64 %30 to i32
  %32 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %31, i32 120)
  %33 = insertelement <2 x i32> undef, i32 %32, i64 0
  %34 = lshr i64 %30, 32
  %35 = trunc i64 %34 to i32
  %36 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %35, i32 120)
  %37 = insertelement <2 x i32> %33, i32 %36, i64 1
  %38 = bitcast <2 x i32> %37 to i64
  %39 = and i32 %3, 4
  %40 = icmp eq i32 %39, 0
  %41 = select i1 %40, i64 0, i64 %38
  %42 = add nsw i64 %41, %30
  %43 = trunc i64 %42 to i32
  %44 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %43, i32 240)
  %45 = insertelement <2 x i32> undef, i32 %44, i64 0
  %46 = lshr i64 %42, 32
  %47 = trunc i64 %46 to i32
  %48 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %47, i32 240)
  %49 = insertelement <2 x i32> %45, i32 %48, i64 1
  %50 = bitcast <2 x i32> %49 to i64
  %51 = and i32 %3, 8
  %52 = icmp eq i32 %51, 0
  %53 = select i1 %52, i64 0, i64 %50
  %54 = add nsw i64 %53, %42
  %55 = trunc i64 %54 to i32
  %56 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %55, i32 480)
  %57 = insertelement <2 x i32> undef, i32 %56, i64 0
  %58 = lshr i64 %54, 32
  %59 = trunc i64 %58 to i32
  %60 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %59, i32 480)
  %61 = insertelement <2 x i32> %57, i32 %60, i64 1
  %62 = bitcast <2 x i32> %61 to i64
  %63 = and i32 %3, 16
  %64 = icmp eq i32 %63, 0
  %65 = select i1 %64, i64 0, i64 %62
  %66 = add nsw i64 %65, %54
  %67 = trunc i64 %66 to i32
  %68 = tail call i32 @llvm.amdgcn.readlane(i32 %67, i32 31)
  %69 = insertelement <2 x i32> undef, i32 %68, i64 0
  %70 = lshr i64 %66, 32
  %71 = trunc i64 %70 to i32
  %72 = tail call i32 @llvm.amdgcn.readlane(i32 %71, i32 31)
  %73 = insertelement <2 x i32> %69, i32 %72, i64 1
  %74 = bitcast <2 x i32> %73 to i64
  %75 = icmp ugt i32 %3, 31
  %76 = select i1 %75, i64 %74, i64 0
  %77 = add nsw i64 %76, %66
  br label %84

78:                                               ; preds = %2
  %79 = icmp ult i32 %4, 10000
  br i1 %79, label %80, label %82

80:                                               ; preds = %78
  %81 = tail call fastcc i64 @77(i64 noundef %0) #57
  br label %84

82:                                               ; preds = %78
  %83 = tail call fastcc i64 @78(i64 noundef %0, i32 noundef %3) #57
  br label %84

84:                                               ; preds = %82, %80, %6
  %85 = phi i64 [ %77, %6 ], [ %81, %80 ], [ %83, %82 ]
  br i1 %1, label %131, label %86

86:                                               ; preds = %84
  br i1 %5, label %87, label %125

87:                                               ; preds = %86
  %88 = trunc i64 %85 to i32
  %89 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %88, i32 32912)
  %90 = insertelement <2 x i32> undef, i32 %89, i64 0
  %91 = lshr i64 %85, 32
  %92 = trunc i64 %91 to i32
  %93 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %92, i32 32912)
  %94 = insertelement <2 x i32> %90, i32 %93, i64 1
  %95 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %88, i32 120)
  %96 = insertelement <2 x i32> undef, i32 %95, i64 0
  %97 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %92, i32 120)
  %98 = insertelement <2 x i32> %96, i32 %97, i64 1
  %99 = and i32 %3, 7
  %100 = icmp eq i32 %99, 4
  %101 = select i1 %100, <2 x i32> %98, <2 x i32> %94
  %102 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %88, i32 240)
  %103 = insertelement <2 x i32> undef, i32 %102, i64 0
  %104 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %92, i32 240)
  %105 = insertelement <2 x i32> %103, i32 %104, i64 1
  %106 = and i32 %3, 15
  %107 = icmp eq i32 %106, 8
  %108 = select i1 %107, <2 x i32> %105, <2 x i32> %101
  %109 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %88, i32 480)
  %110 = insertelement <2 x i32> undef, i32 %109, i64 0
  %111 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %92, i32 480)
  %112 = insertelement <2 x i32> %110, i32 %111, i64 1
  %113 = and i32 %3, 31
  %114 = icmp eq i32 %113, 16
  %115 = select i1 %114, <2 x i32> %112, <2 x i32> %108
  %116 = tail call i32 @llvm.amdgcn.readlane(i32 %88, i32 31)
  %117 = insertelement <2 x i32> undef, i32 %116, i64 0
  %118 = tail call i32 @llvm.amdgcn.readlane(i32 %92, i32 31)
  %119 = insertelement <2 x i32> %117, i32 %118, i64 1
  %120 = icmp eq i32 %3, 32
  %121 = select i1 %120, <2 x i32> %119, <2 x i32> %115
  %122 = bitcast <2 x i32> %121 to i64
  %123 = icmp eq i32 %3, 0
  %124 = select i1 %123, i64 0, i64 %122
  br label %131

125:                                              ; preds = %86
  %126 = icmp ult i32 %4, 10000
  br i1 %126, label %127, label %129

127:                                              ; preds = %125
  %128 = tail call fastcc i64 @79(i64 noundef %85) #57
  br label %131

129:                                              ; preds = %125
  %130 = tail call fastcc i64 @80(i64 noundef %85, i32 noundef %3) #57
  br label %131

131:                                              ; preds = %129, %127, %87, %84
  %132 = phi i64 [ %85, %84 ], [ %124, %87 ], [ %128, %127 ], [ %130, %129 ]
  ret i64 %132
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i64 @77(i64 noundef %0) unnamed_addr #54 {
  %2 = trunc i64 %0 to i32
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %2, i32 273, i32 15, i32 15, i1 true)
  %4 = insertelement <2 x i32> undef, i32 %3, i64 0
  %5 = lshr i64 %0, 32
  %6 = trunc i64 %5 to i32
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %6, i32 273, i32 15, i32 15, i1 true)
  %8 = insertelement <2 x i32> %4, i32 %7, i64 1
  %9 = bitcast <2 x i32> %8 to i64
  %10 = add nsw i64 %9, %0
  %11 = trunc i64 %10 to i32
  %12 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %11, i32 274, i32 15, i32 15, i1 true)
  %13 = insertelement <2 x i32> undef, i32 %12, i64 0
  %14 = lshr i64 %10, 32
  %15 = trunc i64 %14 to i32
  %16 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %15, i32 274, i32 15, i32 15, i1 true)
  %17 = insertelement <2 x i32> %13, i32 %16, i64 1
  %18 = bitcast <2 x i32> %17 to i64
  %19 = add nsw i64 %10, %18
  %20 = trunc i64 %19 to i32
  %21 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %20, i32 276, i32 15, i32 15, i1 true)
  %22 = insertelement <2 x i32> undef, i32 %21, i64 0
  %23 = lshr i64 %19, 32
  %24 = trunc i64 %23 to i32
  %25 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %24, i32 276, i32 15, i32 15, i1 true)
  %26 = insertelement <2 x i32> %22, i32 %25, i64 1
  %27 = bitcast <2 x i32> %26 to i64
  %28 = add nsw i64 %19, %27
  %29 = trunc i64 %28 to i32
  %30 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %29, i32 280, i32 15, i32 15, i1 true)
  %31 = insertelement <2 x i32> undef, i32 %30, i64 0
  %32 = lshr i64 %28, 32
  %33 = trunc i64 %32 to i32
  %34 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %33, i32 280, i32 15, i32 15, i1 true)
  %35 = insertelement <2 x i32> %31, i32 %34, i64 1
  %36 = bitcast <2 x i32> %35 to i64
  %37 = add nsw i64 %28, %36
  %38 = trunc i64 %37 to i32
  %39 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %38, i32 322, i32 10, i32 15, i1 false)
  %40 = insertelement <2 x i32> undef, i32 %39, i64 0
  %41 = lshr i64 %37, 32
  %42 = trunc i64 %41 to i32
  %43 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %42, i32 322, i32 10, i32 15, i1 false)
  %44 = insertelement <2 x i32> %40, i32 %43, i64 1
  %45 = bitcast <2 x i32> %44 to i64
  %46 = add nsw i64 %37, %45
  %47 = trunc i64 %46 to i32
  %48 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %47, i32 323, i32 12, i32 15, i1 false)
  %49 = insertelement <2 x i32> undef, i32 %48, i64 0
  %50 = lshr i64 %46, 32
  %51 = trunc i64 %50 to i32
  %52 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %51, i32 323, i32 12, i32 15, i1 false)
  %53 = insertelement <2 x i32> %49, i32 %52, i64 1
  %54 = bitcast <2 x i32> %53 to i64
  %55 = add nsw i64 %46, %54
  ret i64 %55
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i64 @78(i64 noundef %0, i32 noundef %1) unnamed_addr #55 {
  %3 = trunc i64 %0 to i32
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %3, i32 273, i32 15, i32 15, i1 true)
  %5 = insertelement <2 x i32> undef, i32 %4, i64 0
  %6 = lshr i64 %0, 32
  %7 = trunc i64 %6 to i32
  %8 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %7, i32 273, i32 15, i32 15, i1 true)
  %9 = insertelement <2 x i32> %5, i32 %8, i64 1
  %10 = bitcast <2 x i32> %9 to i64
  %11 = add nsw i64 %10, %0
  %12 = trunc i64 %11 to i32
  %13 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %12, i32 274, i32 15, i32 15, i1 true)
  %14 = insertelement <2 x i32> undef, i32 %13, i64 0
  %15 = lshr i64 %11, 32
  %16 = trunc i64 %15 to i32
  %17 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %16, i32 274, i32 15, i32 15, i1 true)
  %18 = insertelement <2 x i32> %14, i32 %17, i64 1
  %19 = bitcast <2 x i32> %18 to i64
  %20 = add nsw i64 %11, %19
  %21 = trunc i64 %20 to i32
  %22 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %21, i32 276, i32 15, i32 15, i1 true)
  %23 = insertelement <2 x i32> undef, i32 %22, i64 0
  %24 = lshr i64 %20, 32
  %25 = trunc i64 %24 to i32
  %26 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %25, i32 276, i32 15, i32 15, i1 true)
  %27 = insertelement <2 x i32> %23, i32 %26, i64 1
  %28 = bitcast <2 x i32> %27 to i64
  %29 = add nsw i64 %20, %28
  %30 = trunc i64 %29 to i32
  %31 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %30, i32 280, i32 15, i32 15, i1 true)
  %32 = insertelement <2 x i32> undef, i32 %31, i64 0
  %33 = lshr i64 %29, 32
  %34 = trunc i64 %33 to i32
  %35 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %34, i32 280, i32 15, i32 15, i1 true)
  %36 = insertelement <2 x i32> %32, i32 %35, i64 1
  %37 = bitcast <2 x i32> %36 to i64
  %38 = add nsw i64 %29, %37
  %39 = trunc i64 %38 to i32
  %40 = tail call i32 @llvm.amdgcn.permlanex16(i32 undef, i32 %39, i32 -1, i32 -1, i1 false, i1 true)
  %41 = insertelement <2 x i32> undef, i32 %40, i64 0
  %42 = lshr i64 %38, 32
  %43 = trunc i64 %42 to i32
  %44 = tail call i32 @llvm.amdgcn.permlanex16(i32 undef, i32 %43, i32 -1, i32 -1, i1 false, i1 true)
  %45 = insertelement <2 x i32> %41, i32 %44, i64 1
  %46 = bitcast <2 x i32> %45 to i64
  %47 = and i32 %1, 16
  %48 = icmp eq i32 %47, 0
  %49 = select i1 %48, i64 0, i64 %46
  %50 = add nsw i64 %49, %38
  %51 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %52 = icmp eq i8 %51, 0
  br i1 %52, label %65, label %53

53:                                               ; preds = %2
  %54 = trunc i64 %50 to i32
  %55 = tail call i32 @llvm.amdgcn.readlane(i32 %54, i32 31)
  %56 = insertelement <2 x i32> undef, i32 %55, i64 0
  %57 = lshr i64 %50, 32
  %58 = trunc i64 %57 to i32
  %59 = tail call i32 @llvm.amdgcn.readlane(i32 %58, i32 31)
  %60 = insertelement <2 x i32> %56, i32 %59, i64 1
  %61 = bitcast <2 x i32> %60 to i64
  %62 = icmp ugt i32 %1, 31
  %63 = select i1 %62, i64 %61, i64 0
  %64 = add nsw i64 %63, %50
  br label %65

65:                                               ; preds = %53, %2
  %66 = phi i64 [ %64, %53 ], [ %50, %2 ]
  ret i64 %66
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i64 @79(i64 noundef %0) unnamed_addr #54 {
  %2 = trunc i64 %0 to i32
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %2, i32 312, i32 15, i32 15, i1 true)
  %4 = insertelement <2 x i32> undef, i32 %3, i64 0
  %5 = lshr i64 %0, 32
  %6 = trunc i64 %5 to i32
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %6, i32 312, i32 15, i32 15, i1 true)
  %8 = insertelement <2 x i32> %4, i32 %7, i64 1
  %9 = bitcast <2 x i32> %8 to i64
  ret i64 %9
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i64 @80(i64 noundef %0, i32 noundef %1) unnamed_addr #55 {
  %3 = trunc i64 %0 to i32
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %3, i32 273, i32 15, i32 15, i1 true)
  %5 = insertelement <2 x i32> undef, i32 %4, i64 0
  %6 = lshr i64 %0, 32
  %7 = trunc i64 %6 to i32
  %8 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %7, i32 273, i32 15, i32 15, i1 true)
  %9 = insertelement <2 x i32> %5, i32 %8, i64 1
  %10 = bitcast <2 x i32> %9 to i64
  %11 = tail call i32 @llvm.amdgcn.permlanex16(i32 undef, i32 %3, i32 -1, i32 -1, i1 false, i1 true)
  %12 = insertelement <2 x i32> undef, i32 %11, i64 0
  %13 = tail call i32 @llvm.amdgcn.permlanex16(i32 undef, i32 %7, i32 -1, i32 -1, i1 false, i1 true)
  %14 = insertelement <2 x i32> %12, i32 %13, i64 1
  %15 = bitcast <2 x i32> %14 to i64
  %16 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %30, label %18

18:                                               ; preds = %2
  %19 = tail call i32 @llvm.amdgcn.readlane(i32 %3, i32 31)
  %20 = insertelement <2 x i32> undef, i32 %19, i64 0
  %21 = tail call i32 @llvm.amdgcn.readlane(i32 %7, i32 31)
  %22 = insertelement <2 x i32> %20, i32 %21, i64 1
  %23 = bitcast <2 x i32> %22 to i64
  %24 = icmp eq i32 %1, 32
  %25 = select i1 %24, i64 %23, i64 %15
  %26 = and i32 %1, 31
  %27 = icmp eq i32 %26, 16
  %28 = or i1 %24, %27
  %29 = select i1 %28, i64 %25, i64 %10
  br label %33

30:                                               ; preds = %2
  %31 = icmp eq i32 %1, 16
  %32 = select i1 %31, i64 %15, i64 %10
  br label %33

33:                                               ; preds = %30, %18
  %34 = phi i64 [ %29, %18 ], [ %32, %30 ]
  ret i64 %34
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected i64 @__ockl_wfred_add_u64(i64 noundef %0) local_unnamed_addr #0 {
  %2 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %3 = icmp slt i32 %2, 8000
  br i1 %3, label %4, label %93

4:                                                ; preds = %1
  %5 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %10, label %7

7:                                                ; preds = %4
  %8 = tail call i64 @llvm.read_register.i64(metadata !36) #57
  %9 = icmp eq i64 %8, -1
  br label %13

10:                                               ; preds = %4
  %11 = tail call i32 @llvm.read_register.i32(metadata !10) #57
  %12 = icmp eq i32 %11, -1
  br label %13

13:                                               ; preds = %10, %7
  %14 = phi i1 [ %9, %7 ], [ %12, %10 ]
  %15 = trunc i64 %0 to i32
  %16 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %15, i32 32945)
  %17 = insertelement <2 x i32> undef, i32 %16, i64 0
  %18 = lshr i64 %0, 32
  %19 = trunc i64 %18 to i32
  %20 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %19, i32 32945)
  %21 = insertelement <2 x i32> %17, i32 %20, i64 1
  %22 = bitcast <2 x i32> %21 to i64
  %23 = add i64 %22, %0
  %24 = trunc i64 %23 to i32
  %25 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %24, i32 32846)
  %26 = insertelement <2 x i32> undef, i32 %25, i64 0
  %27 = lshr i64 %23, 32
  %28 = trunc i64 %27 to i32
  %29 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %28, i32 32846)
  %30 = insertelement <2 x i32> %26, i32 %29, i64 1
  %31 = bitcast <2 x i32> %30 to i64
  %32 = add i64 %23, %31
  %33 = trunc i64 %32 to i32
  %34 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %33, i32 4127)
  %35 = insertelement <2 x i32> undef, i32 %34, i64 0
  %36 = lshr i64 %32, 32
  %37 = trunc i64 %36 to i32
  %38 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %37, i32 4127)
  %39 = insertelement <2 x i32> %35, i32 %38, i64 1
  %40 = bitcast <2 x i32> %39 to i64
  %41 = add i64 %32, %40
  %42 = trunc i64 %41 to i32
  %43 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %42, i32 8223)
  %44 = insertelement <2 x i32> undef, i32 %43, i64 0
  %45 = lshr i64 %41, 32
  %46 = trunc i64 %45 to i32
  %47 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %46, i32 8223)
  %48 = insertelement <2 x i32> %44, i32 %47, i64 1
  %49 = bitcast <2 x i32> %48 to i64
  %50 = add i64 %41, %49
  %51 = trunc i64 %50 to i32
  %52 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %51, i32 16415)
  %53 = insertelement <2 x i32> undef, i32 %52, i64 0
  %54 = lshr i64 %50, 32
  %55 = trunc i64 %54 to i32
  %56 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %55, i32 16415)
  %57 = insertelement <2 x i32> %53, i32 %56, i64 1
  %58 = bitcast <2 x i32> %57 to i64
  %59 = add i64 %50, %58
  %60 = trunc i64 %59 to i32
  br i1 %14, label %61, label %75

61:                                               ; preds = %13
  %62 = tail call i32 @llvm.amdgcn.readlane(i32 %60, i32 0)
  %63 = insertelement <2 x i32> undef, i32 %62, i64 0
  %64 = lshr i64 %59, 32
  %65 = trunc i64 %64 to i32
  %66 = tail call i32 @llvm.amdgcn.readlane(i32 %65, i32 0)
  %67 = insertelement <2 x i32> %63, i32 %66, i64 1
  %68 = bitcast <2 x i32> %67 to i64
  %69 = tail call i32 @llvm.amdgcn.readlane(i32 %60, i32 32)
  %70 = insertelement <2 x i32> undef, i32 %69, i64 0
  %71 = tail call i32 @llvm.amdgcn.readlane(i32 %65, i32 32)
  %72 = insertelement <2 x i32> %70, i32 %71, i64 1
  %73 = bitcast <2 x i32> %72 to i64
  %74 = add i64 %73, %68
  br label %99

75:                                               ; preds = %13
  %76 = tail call i32 @llvm.amdgcn.readlane(i32 %60, i32 32)
  %77 = insertelement <2 x i32> undef, i32 %76, i64 0
  %78 = lshr i64 %59, 32
  %79 = trunc i64 %78 to i32
  %80 = tail call i32 @llvm.amdgcn.readlane(i32 %79, i32 32)
  %81 = insertelement <2 x i32> %77, i32 %80, i64 1
  %82 = bitcast <2 x i32> %81 to i64
  %83 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %84 = and i32 %83, 1
  %85 = icmp eq i32 %84, 0
  %86 = select i1 %85, i64 0, i64 %82
  %87 = tail call i32 @llvm.amdgcn.readlane(i32 %60, i32 0)
  %88 = insertelement <2 x i32> undef, i32 %87, i64 0
  %89 = tail call i32 @llvm.amdgcn.readlane(i32 %79, i32 0)
  %90 = insertelement <2 x i32> %88, i32 %89, i64 1
  %91 = bitcast <2 x i32> %90 to i64
  %92 = add i64 %86, %91
  br label %99

93:                                               ; preds = %1
  %94 = icmp ult i32 %2, 10000
  br i1 %94, label %95, label %97

95:                                               ; preds = %93
  %96 = tail call fastcc i64 @81(i64 noundef %0) #57
  br label %99

97:                                               ; preds = %93
  %98 = tail call fastcc i64 @82(i64 noundef %0) #57
  br label %99

99:                                               ; preds = %97, %95, %75, %61
  %100 = phi i64 [ %74, %61 ], [ %92, %75 ], [ %96, %95 ], [ %98, %97 ]
  ret i64 %100
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc i64 @81(i64 noundef %0) unnamed_addr #52 {
  %2 = trunc i64 %0 to i32
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %2, i32 257, i32 15, i32 15, i1 true)
  %4 = insertelement <2 x i32> undef, i32 %3, i64 0
  %5 = lshr i64 %0, 32
  %6 = trunc i64 %5 to i32
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %6, i32 257, i32 15, i32 15, i1 true)
  %8 = insertelement <2 x i32> %4, i32 %7, i64 1
  %9 = bitcast <2 x i32> %8 to i64
  %10 = add i64 %9, %0
  %11 = trunc i64 %10 to i32
  %12 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %11, i32 258, i32 15, i32 15, i1 true)
  %13 = insertelement <2 x i32> undef, i32 %12, i64 0
  %14 = lshr i64 %10, 32
  %15 = trunc i64 %14 to i32
  %16 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %15, i32 258, i32 15, i32 15, i1 true)
  %17 = insertelement <2 x i32> %13, i32 %16, i64 1
  %18 = bitcast <2 x i32> %17 to i64
  %19 = add i64 %10, %18
  %20 = trunc i64 %19 to i32
  %21 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %20, i32 260, i32 15, i32 15, i1 true)
  %22 = insertelement <2 x i32> undef, i32 %21, i64 0
  %23 = lshr i64 %19, 32
  %24 = trunc i64 %23 to i32
  %25 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %24, i32 260, i32 15, i32 15, i1 true)
  %26 = insertelement <2 x i32> %22, i32 %25, i64 1
  %27 = bitcast <2 x i32> %26 to i64
  %28 = add i64 %19, %27
  %29 = trunc i64 %28 to i32
  %30 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %29, i32 264, i32 15, i32 15, i1 true)
  %31 = insertelement <2 x i32> undef, i32 %30, i64 0
  %32 = lshr i64 %28, 32
  %33 = trunc i64 %32 to i32
  %34 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %33, i32 264, i32 15, i32 15, i1 true)
  %35 = insertelement <2 x i32> %31, i32 %34, i64 1
  %36 = bitcast <2 x i32> %35 to i64
  %37 = add i64 %28, %36
  %38 = trunc i64 %37 to i32
  %39 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %38, i32 304, i32 15, i32 15, i1 true)
  %40 = lshr i64 %37, 32
  %41 = trunc i64 %40 to i32
  %42 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %41, i32 304, i32 15, i32 15, i1 true)
  %43 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %39, i32 320, i32 15, i32 15, i1 true)
  %44 = insertelement <2 x i32> undef, i32 %43, i64 0
  %45 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %42, i32 320, i32 15, i32 15, i1 true)
  %46 = insertelement <2 x i32> %44, i32 %45, i64 1
  %47 = bitcast <2 x i32> %46 to i64
  %48 = add i64 %37, %47
  %49 = trunc i64 %48 to i32
  %50 = tail call i32 @llvm.amdgcn.readlane(i32 %49, i32 32)
  %51 = insertelement <2 x i32> undef, i32 %50, i64 0
  %52 = lshr i64 %48, 32
  %53 = trunc i64 %52 to i32
  %54 = tail call i32 @llvm.amdgcn.readlane(i32 %53, i32 32)
  %55 = insertelement <2 x i32> %51, i32 %54, i64 1
  %56 = bitcast <2 x i32> %55 to i64
  %57 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %58 = and i32 %57, 1
  %59 = icmp eq i32 %58, 0
  %60 = select i1 %59, i64 0, i64 %56
  %61 = tail call i32 @llvm.amdgcn.readlane(i32 %49, i32 0)
  %62 = insertelement <2 x i32> undef, i32 %61, i64 0
  %63 = tail call i32 @llvm.amdgcn.readlane(i32 %53, i32 0)
  %64 = insertelement <2 x i32> %62, i32 %63, i64 1
  %65 = bitcast <2 x i32> %64 to i64
  %66 = add i64 %60, %65
  ret i64 %66
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc i64 @82(i64 noundef %0) unnamed_addr #53 {
  %2 = trunc i64 %0 to i32
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %2, i32 257, i32 15, i32 15, i1 true)
  %4 = insertelement <2 x i32> undef, i32 %3, i64 0
  %5 = lshr i64 %0, 32
  %6 = trunc i64 %5 to i32
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %6, i32 257, i32 15, i32 15, i1 true)
  %8 = insertelement <2 x i32> %4, i32 %7, i64 1
  %9 = bitcast <2 x i32> %8 to i64
  %10 = add i64 %9, %0
  %11 = trunc i64 %10 to i32
  %12 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %11, i32 258, i32 15, i32 15, i1 true)
  %13 = insertelement <2 x i32> undef, i32 %12, i64 0
  %14 = lshr i64 %10, 32
  %15 = trunc i64 %14 to i32
  %16 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %15, i32 258, i32 15, i32 15, i1 true)
  %17 = insertelement <2 x i32> %13, i32 %16, i64 1
  %18 = bitcast <2 x i32> %17 to i64
  %19 = add i64 %10, %18
  %20 = trunc i64 %19 to i32
  %21 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %20, i32 260, i32 15, i32 15, i1 true)
  %22 = insertelement <2 x i32> undef, i32 %21, i64 0
  %23 = lshr i64 %19, 32
  %24 = trunc i64 %23 to i32
  %25 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %24, i32 260, i32 15, i32 15, i1 true)
  %26 = insertelement <2 x i32> %22, i32 %25, i64 1
  %27 = bitcast <2 x i32> %26 to i64
  %28 = add i64 %19, %27
  %29 = trunc i64 %28 to i32
  %30 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %29, i32 264, i32 15, i32 15, i1 true)
  %31 = insertelement <2 x i32> undef, i32 %30, i64 0
  %32 = lshr i64 %28, 32
  %33 = trunc i64 %32 to i32
  %34 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %33, i32 264, i32 15, i32 15, i1 true)
  %35 = insertelement <2 x i32> %31, i32 %34, i64 1
  %36 = bitcast <2 x i32> %35 to i64
  %37 = add i64 %28, %36
  %38 = trunc i64 %37 to i32
  %39 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %38, i32 336, i32 15, i32 15, i1 true)
  %40 = insertelement <2 x i32> undef, i32 %39, i64 0
  %41 = lshr i64 %37, 32
  %42 = trunc i64 %41 to i32
  %43 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %42, i32 336, i32 15, i32 15, i1 true)
  %44 = insertelement <2 x i32> %40, i32 %43, i64 1
  %45 = bitcast <2 x i32> %44 to i64
  %46 = tail call i32 @llvm.amdgcn.permlanex16(i32 undef, i32 %39, i32 0, i32 0, i1 false, i1 true)
  %47 = insertelement <2 x i32> undef, i32 %46, i64 0
  %48 = tail call i32 @llvm.amdgcn.permlanex16(i32 undef, i32 %43, i32 0, i32 0, i1 false, i1 true)
  %49 = insertelement <2 x i32> %47, i32 %48, i64 1
  %50 = bitcast <2 x i32> %49 to i64
  %51 = add i64 %50, %45
  %52 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %53 = icmp eq i8 %52, 0
  br i1 %53, label %73, label %54

54:                                               ; preds = %1
  %55 = trunc i64 %51 to i32
  %56 = tail call i32 @llvm.amdgcn.readlane(i32 %55, i32 32)
  %57 = insertelement <2 x i32> undef, i32 %56, i64 0
  %58 = lshr i64 %51, 32
  %59 = trunc i64 %58 to i32
  %60 = tail call i32 @llvm.amdgcn.readlane(i32 %59, i32 32)
  %61 = insertelement <2 x i32> %57, i32 %60, i64 1
  %62 = bitcast <2 x i32> %61 to i64
  %63 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %64 = and i32 %63, 1
  %65 = icmp eq i32 %64, 0
  %66 = select i1 %65, i64 0, i64 %62
  %67 = tail call i32 @llvm.amdgcn.readlane(i32 %55, i32 0)
  %68 = insertelement <2 x i32> undef, i32 %67, i64 0
  %69 = tail call i32 @llvm.amdgcn.readlane(i32 %59, i32 0)
  %70 = insertelement <2 x i32> %68, i32 %69, i64 1
  %71 = bitcast <2 x i32> %70 to i64
  %72 = add i64 %66, %71
  br label %73

73:                                               ; preds = %54, %1
  %74 = phi i64 [ %72, %54 ], [ %51, %1 ]
  ret i64 %74
}

; Function Attrs: convergent norecurse nounwind
define linkonce_odr protected i64 @__ockl_wfscan_add_u64(i64 noundef %0, i1 noundef zeroext %1) local_unnamed_addr #12 {
  %3 = tail call i32 @__ockl_lane_u32() #58
  %4 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %5 = icmp slt i32 %4, 8000
  br i1 %5, label %6, label %78

6:                                                ; preds = %2
  %7 = trunc i64 %0 to i32
  %8 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %7, i32 30)
  %9 = insertelement <2 x i32> undef, i32 %8, i64 0
  %10 = lshr i64 %0, 32
  %11 = trunc i64 %10 to i32
  %12 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %11, i32 30)
  %13 = insertelement <2 x i32> %9, i32 %12, i64 1
  %14 = bitcast <2 x i32> %13 to i64
  %15 = and i32 %3, 1
  %16 = icmp eq i32 %15, 0
  %17 = select i1 %16, i64 0, i64 %14
  %18 = add i64 %17, %0
  %19 = trunc i64 %18 to i32
  %20 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %19, i32 60)
  %21 = insertelement <2 x i32> undef, i32 %20, i64 0
  %22 = lshr i64 %18, 32
  %23 = trunc i64 %22 to i32
  %24 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %23, i32 60)
  %25 = insertelement <2 x i32> %21, i32 %24, i64 1
  %26 = bitcast <2 x i32> %25 to i64
  %27 = and i32 %3, 2
  %28 = icmp eq i32 %27, 0
  %29 = select i1 %28, i64 0, i64 %26
  %30 = add i64 %29, %18
  %31 = trunc i64 %30 to i32
  %32 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %31, i32 120)
  %33 = insertelement <2 x i32> undef, i32 %32, i64 0
  %34 = lshr i64 %30, 32
  %35 = trunc i64 %34 to i32
  %36 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %35, i32 120)
  %37 = insertelement <2 x i32> %33, i32 %36, i64 1
  %38 = bitcast <2 x i32> %37 to i64
  %39 = and i32 %3, 4
  %40 = icmp eq i32 %39, 0
  %41 = select i1 %40, i64 0, i64 %38
  %42 = add i64 %41, %30
  %43 = trunc i64 %42 to i32
  %44 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %43, i32 240)
  %45 = insertelement <2 x i32> undef, i32 %44, i64 0
  %46 = lshr i64 %42, 32
  %47 = trunc i64 %46 to i32
  %48 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %47, i32 240)
  %49 = insertelement <2 x i32> %45, i32 %48, i64 1
  %50 = bitcast <2 x i32> %49 to i64
  %51 = and i32 %3, 8
  %52 = icmp eq i32 %51, 0
  %53 = select i1 %52, i64 0, i64 %50
  %54 = add i64 %53, %42
  %55 = trunc i64 %54 to i32
  %56 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %55, i32 480)
  %57 = insertelement <2 x i32> undef, i32 %56, i64 0
  %58 = lshr i64 %54, 32
  %59 = trunc i64 %58 to i32
  %60 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %59, i32 480)
  %61 = insertelement <2 x i32> %57, i32 %60, i64 1
  %62 = bitcast <2 x i32> %61 to i64
  %63 = and i32 %3, 16
  %64 = icmp eq i32 %63, 0
  %65 = select i1 %64, i64 0, i64 %62
  %66 = add i64 %65, %54
  %67 = trunc i64 %66 to i32
  %68 = tail call i32 @llvm.amdgcn.readlane(i32 %67, i32 31)
  %69 = insertelement <2 x i32> undef, i32 %68, i64 0
  %70 = lshr i64 %66, 32
  %71 = trunc i64 %70 to i32
  %72 = tail call i32 @llvm.amdgcn.readlane(i32 %71, i32 31)
  %73 = insertelement <2 x i32> %69, i32 %72, i64 1
  %74 = bitcast <2 x i32> %73 to i64
  %75 = icmp ugt i32 %3, 31
  %76 = select i1 %75, i64 %74, i64 0
  %77 = add i64 %76, %66
  br label %84

78:                                               ; preds = %2
  %79 = icmp ult i32 %4, 10000
  br i1 %79, label %80, label %82

80:                                               ; preds = %78
  %81 = tail call fastcc i64 @83(i64 noundef %0) #57
  br label %84

82:                                               ; preds = %78
  %83 = tail call fastcc i64 @84(i64 noundef %0, i32 noundef %3) #57
  br label %84

84:                                               ; preds = %82, %80, %6
  %85 = phi i64 [ %77, %6 ], [ %81, %80 ], [ %83, %82 ]
  br i1 %1, label %131, label %86

86:                                               ; preds = %84
  br i1 %5, label %87, label %125

87:                                               ; preds = %86
  %88 = trunc i64 %85 to i32
  %89 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %88, i32 32912)
  %90 = insertelement <2 x i32> undef, i32 %89, i64 0
  %91 = lshr i64 %85, 32
  %92 = trunc i64 %91 to i32
  %93 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %92, i32 32912)
  %94 = insertelement <2 x i32> %90, i32 %93, i64 1
  %95 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %88, i32 120)
  %96 = insertelement <2 x i32> undef, i32 %95, i64 0
  %97 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %92, i32 120)
  %98 = insertelement <2 x i32> %96, i32 %97, i64 1
  %99 = and i32 %3, 7
  %100 = icmp eq i32 %99, 4
  %101 = select i1 %100, <2 x i32> %98, <2 x i32> %94
  %102 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %88, i32 240)
  %103 = insertelement <2 x i32> undef, i32 %102, i64 0
  %104 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %92, i32 240)
  %105 = insertelement <2 x i32> %103, i32 %104, i64 1
  %106 = and i32 %3, 15
  %107 = icmp eq i32 %106, 8
  %108 = select i1 %107, <2 x i32> %105, <2 x i32> %101
  %109 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %88, i32 480)
  %110 = insertelement <2 x i32> undef, i32 %109, i64 0
  %111 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %92, i32 480)
  %112 = insertelement <2 x i32> %110, i32 %111, i64 1
  %113 = and i32 %3, 31
  %114 = icmp eq i32 %113, 16
  %115 = select i1 %114, <2 x i32> %112, <2 x i32> %108
  %116 = tail call i32 @llvm.amdgcn.readlane(i32 %88, i32 31)
  %117 = insertelement <2 x i32> undef, i32 %116, i64 0
  %118 = tail call i32 @llvm.amdgcn.readlane(i32 %92, i32 31)
  %119 = insertelement <2 x i32> %117, i32 %118, i64 1
  %120 = icmp eq i32 %3, 32
  %121 = select i1 %120, <2 x i32> %119, <2 x i32> %115
  %122 = bitcast <2 x i32> %121 to i64
  %123 = icmp eq i32 %3, 0
  %124 = select i1 %123, i64 0, i64 %122
  br label %131

125:                                              ; preds = %86
  %126 = icmp ult i32 %4, 10000
  br i1 %126, label %127, label %129

127:                                              ; preds = %125
  %128 = tail call fastcc i64 @85(i64 noundef %85) #57
  br label %131

129:                                              ; preds = %125
  %130 = tail call fastcc i64 @86(i64 noundef %85, i32 noundef %3) #57
  br label %131

131:                                              ; preds = %129, %127, %87, %84
  %132 = phi i64 [ %85, %84 ], [ %124, %87 ], [ %128, %127 ], [ %130, %129 ]
  ret i64 %132
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i64 @83(i64 noundef %0) unnamed_addr #54 {
  %2 = trunc i64 %0 to i32
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %2, i32 273, i32 15, i32 15, i1 true)
  %4 = insertelement <2 x i32> undef, i32 %3, i64 0
  %5 = lshr i64 %0, 32
  %6 = trunc i64 %5 to i32
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %6, i32 273, i32 15, i32 15, i1 true)
  %8 = insertelement <2 x i32> %4, i32 %7, i64 1
  %9 = bitcast <2 x i32> %8 to i64
  %10 = add i64 %9, %0
  %11 = trunc i64 %10 to i32
  %12 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %11, i32 274, i32 15, i32 15, i1 true)
  %13 = insertelement <2 x i32> undef, i32 %12, i64 0
  %14 = lshr i64 %10, 32
  %15 = trunc i64 %14 to i32
  %16 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %15, i32 274, i32 15, i32 15, i1 true)
  %17 = insertelement <2 x i32> %13, i32 %16, i64 1
  %18 = bitcast <2 x i32> %17 to i64
  %19 = add i64 %10, %18
  %20 = trunc i64 %19 to i32
  %21 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %20, i32 276, i32 15, i32 15, i1 true)
  %22 = insertelement <2 x i32> undef, i32 %21, i64 0
  %23 = lshr i64 %19, 32
  %24 = trunc i64 %23 to i32
  %25 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %24, i32 276, i32 15, i32 15, i1 true)
  %26 = insertelement <2 x i32> %22, i32 %25, i64 1
  %27 = bitcast <2 x i32> %26 to i64
  %28 = add i64 %19, %27
  %29 = trunc i64 %28 to i32
  %30 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %29, i32 280, i32 15, i32 15, i1 true)
  %31 = insertelement <2 x i32> undef, i32 %30, i64 0
  %32 = lshr i64 %28, 32
  %33 = trunc i64 %32 to i32
  %34 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %33, i32 280, i32 15, i32 15, i1 true)
  %35 = insertelement <2 x i32> %31, i32 %34, i64 1
  %36 = bitcast <2 x i32> %35 to i64
  %37 = add i64 %28, %36
  %38 = trunc i64 %37 to i32
  %39 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %38, i32 322, i32 10, i32 15, i1 false)
  %40 = insertelement <2 x i32> undef, i32 %39, i64 0
  %41 = lshr i64 %37, 32
  %42 = trunc i64 %41 to i32
  %43 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %42, i32 322, i32 10, i32 15, i1 false)
  %44 = insertelement <2 x i32> %40, i32 %43, i64 1
  %45 = bitcast <2 x i32> %44 to i64
  %46 = add i64 %37, %45
  %47 = trunc i64 %46 to i32
  %48 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %47, i32 323, i32 12, i32 15, i1 false)
  %49 = insertelement <2 x i32> undef, i32 %48, i64 0
  %50 = lshr i64 %46, 32
  %51 = trunc i64 %50 to i32
  %52 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %51, i32 323, i32 12, i32 15, i1 false)
  %53 = insertelement <2 x i32> %49, i32 %52, i64 1
  %54 = bitcast <2 x i32> %53 to i64
  %55 = add i64 %46, %54
  ret i64 %55
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i64 @84(i64 noundef %0, i32 noundef %1) unnamed_addr #55 {
  %3 = trunc i64 %0 to i32
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %3, i32 273, i32 15, i32 15, i1 true)
  %5 = insertelement <2 x i32> undef, i32 %4, i64 0
  %6 = lshr i64 %0, 32
  %7 = trunc i64 %6 to i32
  %8 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %7, i32 273, i32 15, i32 15, i1 true)
  %9 = insertelement <2 x i32> %5, i32 %8, i64 1
  %10 = bitcast <2 x i32> %9 to i64
  %11 = add i64 %10, %0
  %12 = trunc i64 %11 to i32
  %13 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %12, i32 274, i32 15, i32 15, i1 true)
  %14 = insertelement <2 x i32> undef, i32 %13, i64 0
  %15 = lshr i64 %11, 32
  %16 = trunc i64 %15 to i32
  %17 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %16, i32 274, i32 15, i32 15, i1 true)
  %18 = insertelement <2 x i32> %14, i32 %17, i64 1
  %19 = bitcast <2 x i32> %18 to i64
  %20 = add i64 %11, %19
  %21 = trunc i64 %20 to i32
  %22 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %21, i32 276, i32 15, i32 15, i1 true)
  %23 = insertelement <2 x i32> undef, i32 %22, i64 0
  %24 = lshr i64 %20, 32
  %25 = trunc i64 %24 to i32
  %26 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %25, i32 276, i32 15, i32 15, i1 true)
  %27 = insertelement <2 x i32> %23, i32 %26, i64 1
  %28 = bitcast <2 x i32> %27 to i64
  %29 = add i64 %20, %28
  %30 = trunc i64 %29 to i32
  %31 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %30, i32 280, i32 15, i32 15, i1 true)
  %32 = insertelement <2 x i32> undef, i32 %31, i64 0
  %33 = lshr i64 %29, 32
  %34 = trunc i64 %33 to i32
  %35 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %34, i32 280, i32 15, i32 15, i1 true)
  %36 = insertelement <2 x i32> %32, i32 %35, i64 1
  %37 = bitcast <2 x i32> %36 to i64
  %38 = add i64 %29, %37
  %39 = trunc i64 %38 to i32
  %40 = tail call i32 @llvm.amdgcn.permlanex16(i32 undef, i32 %39, i32 -1, i32 -1, i1 false, i1 true)
  %41 = insertelement <2 x i32> undef, i32 %40, i64 0
  %42 = lshr i64 %38, 32
  %43 = trunc i64 %42 to i32
  %44 = tail call i32 @llvm.amdgcn.permlanex16(i32 undef, i32 %43, i32 -1, i32 -1, i1 false, i1 true)
  %45 = insertelement <2 x i32> %41, i32 %44, i64 1
  %46 = bitcast <2 x i32> %45 to i64
  %47 = and i32 %1, 16
  %48 = icmp eq i32 %47, 0
  %49 = select i1 %48, i64 0, i64 %46
  %50 = add i64 %49, %38
  %51 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %52 = icmp eq i8 %51, 0
  br i1 %52, label %65, label %53

53:                                               ; preds = %2
  %54 = trunc i64 %50 to i32
  %55 = tail call i32 @llvm.amdgcn.readlane(i32 %54, i32 31)
  %56 = insertelement <2 x i32> undef, i32 %55, i64 0
  %57 = lshr i64 %50, 32
  %58 = trunc i64 %57 to i32
  %59 = tail call i32 @llvm.amdgcn.readlane(i32 %58, i32 31)
  %60 = insertelement <2 x i32> %56, i32 %59, i64 1
  %61 = bitcast <2 x i32> %60 to i64
  %62 = icmp ugt i32 %1, 31
  %63 = select i1 %62, i64 %61, i64 0
  %64 = add i64 %63, %50
  br label %65

65:                                               ; preds = %53, %2
  %66 = phi i64 [ %64, %53 ], [ %50, %2 ]
  ret i64 %66
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i64 @85(i64 noundef %0) unnamed_addr #54 {
  %2 = trunc i64 %0 to i32
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %2, i32 312, i32 15, i32 15, i1 true)
  %4 = insertelement <2 x i32> undef, i32 %3, i64 0
  %5 = lshr i64 %0, 32
  %6 = trunc i64 %5 to i32
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %6, i32 312, i32 15, i32 15, i1 true)
  %8 = insertelement <2 x i32> %4, i32 %7, i64 1
  %9 = bitcast <2 x i32> %8 to i64
  ret i64 %9
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i64 @86(i64 noundef %0, i32 noundef %1) unnamed_addr #55 {
  %3 = trunc i64 %0 to i32
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %3, i32 273, i32 15, i32 15, i1 true)
  %5 = insertelement <2 x i32> undef, i32 %4, i64 0
  %6 = lshr i64 %0, 32
  %7 = trunc i64 %6 to i32
  %8 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %7, i32 273, i32 15, i32 15, i1 true)
  %9 = insertelement <2 x i32> %5, i32 %8, i64 1
  %10 = bitcast <2 x i32> %9 to i64
  %11 = tail call i32 @llvm.amdgcn.permlanex16(i32 undef, i32 %3, i32 -1, i32 -1, i1 false, i1 true)
  %12 = insertelement <2 x i32> undef, i32 %11, i64 0
  %13 = tail call i32 @llvm.amdgcn.permlanex16(i32 undef, i32 %7, i32 -1, i32 -1, i1 false, i1 true)
  %14 = insertelement <2 x i32> %12, i32 %13, i64 1
  %15 = bitcast <2 x i32> %14 to i64
  %16 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %30, label %18

18:                                               ; preds = %2
  %19 = tail call i32 @llvm.amdgcn.readlane(i32 %3, i32 31)
  %20 = insertelement <2 x i32> undef, i32 %19, i64 0
  %21 = tail call i32 @llvm.amdgcn.readlane(i32 %7, i32 31)
  %22 = insertelement <2 x i32> %20, i32 %21, i64 1
  %23 = bitcast <2 x i32> %22 to i64
  %24 = icmp eq i32 %1, 32
  %25 = select i1 %24, i64 %23, i64 %15
  %26 = and i32 %1, 31
  %27 = icmp eq i32 %26, 16
  %28 = or i1 %24, %27
  %29 = select i1 %28, i64 %25, i64 %10
  br label %33

30:                                               ; preds = %2
  %31 = icmp eq i32 %1, 16
  %32 = select i1 %31, i64 %15, i64 %10
  br label %33

33:                                               ; preds = %30, %18
  %34 = phi i64 [ %29, %18 ], [ %32, %30 ]
  ret i64 %34
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected float @__ockl_wfred_add_f32(float noundef %0) local_unnamed_addr #0 {
  %2 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %3 = icmp slt i32 %2, 8000
  br i1 %3, label %4, label %52

4:                                                ; preds = %1
  %5 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %10, label %7

7:                                                ; preds = %4
  %8 = tail call i64 @llvm.read_register.i64(metadata !36) #57
  %9 = icmp eq i64 %8, -1
  br label %13

10:                                               ; preds = %4
  %11 = tail call i32 @llvm.read_register.i32(metadata !10) #57
  %12 = icmp eq i32 %11, -1
  br label %13

13:                                               ; preds = %10, %7
  %14 = phi i1 [ %9, %7 ], [ %12, %10 ]
  %15 = bitcast float %0 to i32
  %16 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %15, i32 32945)
  %17 = bitcast i32 %16 to float
  %18 = fadd float %17, %0
  %19 = bitcast float %18 to i32
  %20 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %19, i32 32846)
  %21 = bitcast i32 %20 to float
  %22 = fadd float %18, %21
  %23 = bitcast float %22 to i32
  %24 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %23, i32 4127)
  %25 = bitcast i32 %24 to float
  %26 = fadd float %22, %25
  %27 = bitcast float %26 to i32
  %28 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %27, i32 8223)
  %29 = bitcast i32 %28 to float
  %30 = fadd float %26, %29
  %31 = bitcast float %30 to i32
  %32 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %31, i32 16415)
  %33 = bitcast i32 %32 to float
  %34 = fadd float %30, %33
  %35 = bitcast float %34 to i32
  br i1 %14, label %36, label %42

36:                                               ; preds = %13
  %37 = tail call i32 @llvm.amdgcn.readlane(i32 %35, i32 0)
  %38 = bitcast i32 %37 to float
  %39 = tail call i32 @llvm.amdgcn.readlane(i32 %35, i32 32)
  %40 = bitcast i32 %39 to float
  %41 = fadd float %38, %40
  br label %58

42:                                               ; preds = %13
  %43 = tail call i32 @llvm.amdgcn.readlane(i32 %35, i32 32)
  %44 = bitcast i32 %43 to float
  %45 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %46 = and i32 %45, 1
  %47 = icmp eq i32 %46, 0
  %48 = select i1 %47, float 0.000000e+00, float %44
  %49 = tail call i32 @llvm.amdgcn.readlane(i32 %35, i32 0)
  %50 = bitcast i32 %49 to float
  %51 = fadd float %48, %50
  br label %58

52:                                               ; preds = %1
  %53 = icmp ult i32 %2, 10000
  br i1 %53, label %54, label %56

54:                                               ; preds = %52
  %55 = tail call fastcc float @87(float noundef %0) #57
  br label %58

56:                                               ; preds = %52
  %57 = tail call fastcc float @88(float noundef %0) #57
  br label %58

58:                                               ; preds = %56, %54, %42, %36
  %59 = phi float [ %41, %36 ], [ %51, %42 ], [ %55, %54 ], [ %57, %56 ]
  ret float %59
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc float @87(float noundef %0) unnamed_addr #52 {
  %2 = bitcast float %0 to i32
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %2, i32 257, i32 15, i32 15, i1 true)
  %4 = bitcast i32 %3 to float
  %5 = fadd float %4, %0
  %6 = bitcast float %5 to i32
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %6, i32 258, i32 15, i32 15, i1 true)
  %8 = bitcast i32 %7 to float
  %9 = fadd float %5, %8
  %10 = bitcast float %9 to i32
  %11 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %10, i32 260, i32 15, i32 15, i1 true)
  %12 = bitcast i32 %11 to float
  %13 = fadd float %9, %12
  %14 = bitcast float %13 to i32
  %15 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %14, i32 264, i32 15, i32 15, i1 true)
  %16 = bitcast i32 %15 to float
  %17 = fadd float %13, %16
  %18 = bitcast float %17 to i32
  %19 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %18, i32 304, i32 15, i32 15, i1 true)
  %20 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %19, i32 320, i32 15, i32 15, i1 true)
  %21 = bitcast i32 %20 to float
  %22 = fadd float %17, %21
  %23 = bitcast float %22 to i32
  %24 = tail call i32 @llvm.amdgcn.readlane(i32 %23, i32 32)
  %25 = bitcast i32 %24 to float
  %26 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %27 = and i32 %26, 1
  %28 = icmp eq i32 %27, 0
  %29 = select i1 %28, float 0.000000e+00, float %25
  %30 = tail call i32 @llvm.amdgcn.readlane(i32 %23, i32 0)
  %31 = bitcast i32 %30 to float
  %32 = fadd float %29, %31
  ret float %32
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc float @88(float noundef %0) unnamed_addr #53 {
  %2 = bitcast float %0 to i32
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %2, i32 257, i32 15, i32 15, i1 true)
  %4 = bitcast i32 %3 to float
  %5 = fadd float %4, %0
  %6 = bitcast float %5 to i32
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %6, i32 258, i32 15, i32 15, i1 true)
  %8 = bitcast i32 %7 to float
  %9 = fadd float %5, %8
  %10 = bitcast float %9 to i32
  %11 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %10, i32 260, i32 15, i32 15, i1 true)
  %12 = bitcast i32 %11 to float
  %13 = fadd float %9, %12
  %14 = bitcast float %13 to i32
  %15 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %14, i32 264, i32 15, i32 15, i1 true)
  %16 = bitcast i32 %15 to float
  %17 = fadd float %13, %16
  %18 = bitcast float %17 to i32
  %19 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %18, i32 336, i32 15, i32 15, i1 true)
  %20 = bitcast i32 %19 to float
  %21 = tail call i32 @llvm.amdgcn.permlanex16(i32 undef, i32 %19, i32 0, i32 0, i1 false, i1 true)
  %22 = bitcast i32 %21 to float
  %23 = fadd float %20, %22
  %24 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %37, label %26

26:                                               ; preds = %1
  %27 = bitcast float %23 to i32
  %28 = tail call i32 @llvm.amdgcn.readlane(i32 %27, i32 32)
  %29 = bitcast i32 %28 to float
  %30 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %31 = and i32 %30, 1
  %32 = icmp eq i32 %31, 0
  %33 = select i1 %32, float 0.000000e+00, float %29
  %34 = tail call i32 @llvm.amdgcn.readlane(i32 %27, i32 0)
  %35 = bitcast i32 %34 to float
  %36 = fadd float %33, %35
  br label %37

37:                                               ; preds = %26, %1
  %38 = phi float [ %36, %26 ], [ %23, %1 ]
  ret float %38
}

; Function Attrs: convergent norecurse nounwind
define linkonce_odr protected float @__ockl_wfscan_add_f32(float noundef %0, i1 noundef zeroext %1) local_unnamed_addr #12 {
  %3 = tail call i32 @__ockl_lane_u32() #58
  %4 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %5 = icmp slt i32 %4, 8000
  br i1 %5, label %6, label %48

6:                                                ; preds = %2
  %7 = bitcast float %0 to i32
  %8 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %7, i32 30)
  %9 = bitcast i32 %8 to float
  %10 = and i32 %3, 1
  %11 = icmp eq i32 %10, 0
  %12 = select i1 %11, float 0.000000e+00, float %9
  %13 = fadd float %12, %0
  %14 = bitcast float %13 to i32
  %15 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %14, i32 60)
  %16 = bitcast i32 %15 to float
  %17 = and i32 %3, 2
  %18 = icmp eq i32 %17, 0
  %19 = select i1 %18, float 0.000000e+00, float %16
  %20 = fadd float %13, %19
  %21 = bitcast float %20 to i32
  %22 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %21, i32 120)
  %23 = bitcast i32 %22 to float
  %24 = and i32 %3, 4
  %25 = icmp eq i32 %24, 0
  %26 = select i1 %25, float 0.000000e+00, float %23
  %27 = fadd float %20, %26
  %28 = bitcast float %27 to i32
  %29 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %28, i32 240)
  %30 = bitcast i32 %29 to float
  %31 = and i32 %3, 8
  %32 = icmp eq i32 %31, 0
  %33 = select i1 %32, float 0.000000e+00, float %30
  %34 = fadd float %27, %33
  %35 = bitcast float %34 to i32
  %36 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %35, i32 480)
  %37 = bitcast i32 %36 to float
  %38 = and i32 %3, 16
  %39 = icmp eq i32 %38, 0
  %40 = select i1 %39, float 0.000000e+00, float %37
  %41 = fadd float %34, %40
  %42 = bitcast float %41 to i32
  %43 = tail call i32 @llvm.amdgcn.readlane(i32 %42, i32 31)
  %44 = bitcast i32 %43 to float
  %45 = icmp ugt i32 %3, 31
  %46 = select i1 %45, float %44, float 0.000000e+00
  %47 = fadd float %41, %46
  br label %54

48:                                               ; preds = %2
  %49 = icmp ult i32 %4, 10000
  br i1 %49, label %50, label %52

50:                                               ; preds = %48
  %51 = tail call fastcc float @89(float noundef %0) #57
  br label %54

52:                                               ; preds = %48
  %53 = tail call fastcc float @90(float noundef %0, i32 noundef %3) #57
  br label %54

54:                                               ; preds = %52, %50, %6
  %55 = phi float [ %47, %6 ], [ %51, %50 ], [ %53, %52 ]
  br i1 %1, label %84, label %56

56:                                               ; preds = %54
  br i1 %5, label %57, label %78

57:                                               ; preds = %56
  %58 = bitcast float %55 to i32
  %59 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %58, i32 32912)
  %60 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %58, i32 120)
  %61 = and i32 %3, 7
  %62 = icmp eq i32 %61, 4
  %63 = select i1 %62, i32 %60, i32 %59
  %64 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %58, i32 240)
  %65 = and i32 %3, 15
  %66 = icmp eq i32 %65, 8
  %67 = select i1 %66, i32 %64, i32 %63
  %68 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %58, i32 480)
  %69 = and i32 %3, 31
  %70 = icmp eq i32 %69, 16
  %71 = select i1 %70, i32 %68, i32 %67
  %72 = tail call i32 @llvm.amdgcn.readlane(i32 %58, i32 31)
  %73 = icmp eq i32 %3, 32
  %74 = select i1 %73, i32 %72, i32 %71
  %75 = bitcast i32 %74 to float
  %76 = icmp eq i32 %3, 0
  %77 = select i1 %76, float 0.000000e+00, float %75
  br label %84

78:                                               ; preds = %56
  %79 = icmp ult i32 %4, 10000
  br i1 %79, label %80, label %82

80:                                               ; preds = %78
  %81 = tail call fastcc float @91(float noundef %55) #57
  br label %84

82:                                               ; preds = %78
  %83 = tail call fastcc float @92(float noundef %55, i32 noundef %3) #57
  br label %84

84:                                               ; preds = %82, %80, %57, %54
  %85 = phi float [ %55, %54 ], [ %77, %57 ], [ %81, %80 ], [ %83, %82 ]
  ret float %85
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc float @89(float noundef %0) unnamed_addr #54 {
  %2 = bitcast float %0 to i32
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %2, i32 273, i32 15, i32 15, i1 true)
  %4 = bitcast i32 %3 to float
  %5 = fadd float %4, %0
  %6 = bitcast float %5 to i32
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %6, i32 274, i32 15, i32 15, i1 true)
  %8 = bitcast i32 %7 to float
  %9 = fadd float %5, %8
  %10 = bitcast float %9 to i32
  %11 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %10, i32 276, i32 15, i32 15, i1 true)
  %12 = bitcast i32 %11 to float
  %13 = fadd float %9, %12
  %14 = bitcast float %13 to i32
  %15 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %14, i32 280, i32 15, i32 15, i1 true)
  %16 = bitcast i32 %15 to float
  %17 = fadd float %13, %16
  %18 = bitcast float %17 to i32
  %19 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %18, i32 322, i32 10, i32 15, i1 false)
  %20 = bitcast i32 %19 to float
  %21 = fadd float %17, %20
  %22 = bitcast float %21 to i32
  %23 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %22, i32 323, i32 12, i32 15, i1 false)
  %24 = bitcast i32 %23 to float
  %25 = fadd float %21, %24
  ret float %25
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc float @90(float noundef %0, i32 noundef %1) unnamed_addr #55 {
  %3 = bitcast float %0 to i32
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %3, i32 273, i32 15, i32 15, i1 true)
  %5 = bitcast i32 %4 to float
  %6 = fadd float %5, %0
  %7 = bitcast float %6 to i32
  %8 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %7, i32 274, i32 15, i32 15, i1 true)
  %9 = bitcast i32 %8 to float
  %10 = fadd float %6, %9
  %11 = bitcast float %10 to i32
  %12 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %11, i32 276, i32 15, i32 15, i1 true)
  %13 = bitcast i32 %12 to float
  %14 = fadd float %10, %13
  %15 = bitcast float %14 to i32
  %16 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %15, i32 280, i32 15, i32 15, i1 true)
  %17 = bitcast i32 %16 to float
  %18 = fadd float %14, %17
  %19 = bitcast float %18 to i32
  %20 = tail call i32 @llvm.amdgcn.permlanex16(i32 undef, i32 %19, i32 -1, i32 -1, i1 false, i1 true)
  %21 = bitcast i32 %20 to float
  %22 = and i32 %1, 16
  %23 = icmp eq i32 %22, 0
  %24 = select i1 %23, float 0.000000e+00, float %21
  %25 = fadd float %18, %24
  %26 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %27 = icmp eq i8 %26, 0
  br i1 %27, label %35, label %28

28:                                               ; preds = %2
  %29 = icmp ugt i32 %1, 31
  %30 = bitcast float %25 to i32
  %31 = tail call i32 @llvm.amdgcn.readlane(i32 %30, i32 31)
  %32 = bitcast i32 %31 to float
  %33 = select i1 %29, float %32, float 0.000000e+00
  %34 = fadd float %25, %33
  br label %35

35:                                               ; preds = %28, %2
  %36 = phi float [ %34, %28 ], [ %25, %2 ]
  ret float %36
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc float @91(float noundef %0) unnamed_addr #54 {
  %2 = bitcast float %0 to i32
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %2, i32 312, i32 15, i32 15, i1 true)
  %4 = bitcast i32 %3 to float
  ret float %4
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc float @92(float noundef %0, i32 noundef %1) unnamed_addr #55 {
  %3 = bitcast float %0 to i32
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %3, i32 273, i32 15, i32 15, i1 true)
  %5 = bitcast i32 %4 to float
  %6 = tail call i32 @llvm.amdgcn.permlanex16(i32 undef, i32 %3, i32 -1, i32 -1, i1 false, i1 true)
  %7 = bitcast i32 %6 to float
  %8 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %19, label %10

10:                                               ; preds = %2
  %11 = tail call i32 @llvm.amdgcn.readlane(i32 %3, i32 31)
  %12 = bitcast i32 %11 to float
  %13 = icmp eq i32 %1, 32
  %14 = select i1 %13, float %12, float %7
  %15 = and i32 %1, 31
  %16 = icmp eq i32 %15, 16
  %17 = or i1 %13, %16
  %18 = select i1 %17, float %14, float %5
  br label %22

19:                                               ; preds = %2
  %20 = icmp eq i32 %1, 16
  %21 = select i1 %20, float %7, float %5
  br label %22

22:                                               ; preds = %19, %10
  %23 = phi float [ %18, %10 ], [ %21, %19 ]
  ret float %23
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected double @__ockl_wfred_add_f64(double noundef %0) local_unnamed_addr #0 {
  %2 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %3 = icmp slt i32 %2, 8000
  br i1 %3, label %4, label %92

4:                                                ; preds = %1
  %5 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %10, label %7

7:                                                ; preds = %4
  %8 = tail call i64 @llvm.read_register.i64(metadata !36) #57
  %9 = icmp eq i64 %8, -1
  br label %13

10:                                               ; preds = %4
  %11 = tail call i32 @llvm.read_register.i32(metadata !10) #57
  %12 = icmp eq i32 %11, -1
  br label %13

13:                                               ; preds = %10, %7
  %14 = phi i1 [ %9, %7 ], [ %12, %10 ]
  %15 = bitcast double %0 to <2 x i32>
  %16 = extractelement <2 x i32> %15, i64 0
  %17 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %16, i32 32945)
  %18 = insertelement <2 x i32> undef, i32 %17, i64 0
  %19 = extractelement <2 x i32> %15, i64 1
  %20 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %19, i32 32945)
  %21 = insertelement <2 x i32> %18, i32 %20, i64 1
  %22 = bitcast <2 x i32> %21 to double
  %23 = fadd double %22, %0
  %24 = bitcast double %23 to <2 x i32>
  %25 = extractelement <2 x i32> %24, i64 0
  %26 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %25, i32 32846)
  %27 = insertelement <2 x i32> undef, i32 %26, i64 0
  %28 = extractelement <2 x i32> %24, i64 1
  %29 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %28, i32 32846)
  %30 = insertelement <2 x i32> %27, i32 %29, i64 1
  %31 = bitcast <2 x i32> %30 to double
  %32 = fadd double %23, %31
  %33 = bitcast double %32 to <2 x i32>
  %34 = extractelement <2 x i32> %33, i64 0
  %35 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %34, i32 4127)
  %36 = insertelement <2 x i32> undef, i32 %35, i64 0
  %37 = extractelement <2 x i32> %33, i64 1
  %38 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %37, i32 4127)
  %39 = insertelement <2 x i32> %36, i32 %38, i64 1
  %40 = bitcast <2 x i32> %39 to double
  %41 = fadd double %32, %40
  %42 = bitcast double %41 to <2 x i32>
  %43 = extractelement <2 x i32> %42, i64 0
  %44 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %43, i32 8223)
  %45 = insertelement <2 x i32> undef, i32 %44, i64 0
  %46 = extractelement <2 x i32> %42, i64 1
  %47 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %46, i32 8223)
  %48 = insertelement <2 x i32> %45, i32 %47, i64 1
  %49 = bitcast <2 x i32> %48 to double
  %50 = fadd double %41, %49
  %51 = bitcast double %50 to <2 x i32>
  %52 = extractelement <2 x i32> %51, i64 0
  %53 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %52, i32 16415)
  %54 = insertelement <2 x i32> undef, i32 %53, i64 0
  %55 = extractelement <2 x i32> %51, i64 1
  %56 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %55, i32 16415)
  %57 = insertelement <2 x i32> %54, i32 %56, i64 1
  %58 = bitcast <2 x i32> %57 to double
  %59 = fadd double %50, %58
  %60 = bitcast double %59 to <2 x i32>
  %61 = extractelement <2 x i32> %60, i64 0
  br i1 %14, label %62, label %75

62:                                               ; preds = %13
  %63 = tail call i32 @llvm.amdgcn.readlane(i32 %61, i32 0)
  %64 = insertelement <2 x i32> undef, i32 %63, i64 0
  %65 = extractelement <2 x i32> %60, i64 1
  %66 = tail call i32 @llvm.amdgcn.readlane(i32 %65, i32 0)
  %67 = insertelement <2 x i32> %64, i32 %66, i64 1
  %68 = bitcast <2 x i32> %67 to double
  %69 = tail call i32 @llvm.amdgcn.readlane(i32 %61, i32 32)
  %70 = insertelement <2 x i32> undef, i32 %69, i64 0
  %71 = tail call i32 @llvm.amdgcn.readlane(i32 %65, i32 32)
  %72 = insertelement <2 x i32> %70, i32 %71, i64 1
  %73 = bitcast <2 x i32> %72 to double
  %74 = fadd double %68, %73
  br label %98

75:                                               ; preds = %13
  %76 = tail call i32 @llvm.amdgcn.readlane(i32 %61, i32 32)
  %77 = insertelement <2 x i32> undef, i32 %76, i64 0
  %78 = extractelement <2 x i32> %60, i64 1
  %79 = tail call i32 @llvm.amdgcn.readlane(i32 %78, i32 32)
  %80 = insertelement <2 x i32> %77, i32 %79, i64 1
  %81 = bitcast <2 x i32> %80 to double
  %82 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %83 = and i32 %82, 1
  %84 = icmp eq i32 %83, 0
  %85 = select i1 %84, double 0.000000e+00, double %81
  %86 = tail call i32 @llvm.amdgcn.readlane(i32 %61, i32 0)
  %87 = insertelement <2 x i32> undef, i32 %86, i64 0
  %88 = tail call i32 @llvm.amdgcn.readlane(i32 %78, i32 0)
  %89 = insertelement <2 x i32> %87, i32 %88, i64 1
  %90 = bitcast <2 x i32> %89 to double
  %91 = fadd double %85, %90
  br label %98

92:                                               ; preds = %1
  %93 = icmp ult i32 %2, 10000
  br i1 %93, label %94, label %96

94:                                               ; preds = %92
  %95 = tail call fastcc double @93(double noundef %0) #57
  br label %98

96:                                               ; preds = %92
  %97 = tail call fastcc double @94(double noundef %0) #57
  br label %98

98:                                               ; preds = %96, %94, %75, %62
  %99 = phi double [ %74, %62 ], [ %91, %75 ], [ %95, %94 ], [ %97, %96 ]
  ret double %99
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc double @93(double noundef %0) unnamed_addr #52 {
  %2 = bitcast double %0 to <2 x i32>
  %3 = extractelement <2 x i32> %2, i64 0
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %3, i32 257, i32 15, i32 15, i1 true)
  %5 = insertelement <2 x i32> undef, i32 %4, i64 0
  %6 = extractelement <2 x i32> %2, i64 1
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %6, i32 257, i32 15, i32 15, i1 true)
  %8 = insertelement <2 x i32> %5, i32 %7, i64 1
  %9 = bitcast <2 x i32> %8 to double
  %10 = fadd double %9, %0
  %11 = bitcast double %10 to <2 x i32>
  %12 = extractelement <2 x i32> %11, i64 0
  %13 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %12, i32 258, i32 15, i32 15, i1 true)
  %14 = insertelement <2 x i32> undef, i32 %13, i64 0
  %15 = extractelement <2 x i32> %11, i64 1
  %16 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %15, i32 258, i32 15, i32 15, i1 true)
  %17 = insertelement <2 x i32> %14, i32 %16, i64 1
  %18 = bitcast <2 x i32> %17 to double
  %19 = fadd double %10, %18
  %20 = bitcast double %19 to <2 x i32>
  %21 = extractelement <2 x i32> %20, i64 0
  %22 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %21, i32 260, i32 15, i32 15, i1 true)
  %23 = insertelement <2 x i32> undef, i32 %22, i64 0
  %24 = extractelement <2 x i32> %20, i64 1
  %25 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %24, i32 260, i32 15, i32 15, i1 true)
  %26 = insertelement <2 x i32> %23, i32 %25, i64 1
  %27 = bitcast <2 x i32> %26 to double
  %28 = fadd double %19, %27
  %29 = bitcast double %28 to <2 x i32>
  %30 = extractelement <2 x i32> %29, i64 0
  %31 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %30, i32 264, i32 15, i32 15, i1 true)
  %32 = insertelement <2 x i32> undef, i32 %31, i64 0
  %33 = extractelement <2 x i32> %29, i64 1
  %34 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %33, i32 264, i32 15, i32 15, i1 true)
  %35 = insertelement <2 x i32> %32, i32 %34, i64 1
  %36 = bitcast <2 x i32> %35 to double
  %37 = fadd double %28, %36
  %38 = bitcast double %37 to <2 x i32>
  %39 = extractelement <2 x i32> %38, i64 0
  %40 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %39, i32 304, i32 15, i32 15, i1 true)
  %41 = extractelement <2 x i32> %38, i64 1
  %42 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %41, i32 304, i32 15, i32 15, i1 true)
  %43 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %40, i32 320, i32 15, i32 15, i1 true)
  %44 = insertelement <2 x i32> undef, i32 %43, i64 0
  %45 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %42, i32 320, i32 15, i32 15, i1 true)
  %46 = insertelement <2 x i32> %44, i32 %45, i64 1
  %47 = bitcast <2 x i32> %46 to double
  %48 = fadd double %37, %47
  %49 = bitcast double %48 to <2 x i32>
  %50 = extractelement <2 x i32> %49, i64 0
  %51 = tail call i32 @llvm.amdgcn.readlane(i32 %50, i32 32)
  %52 = insertelement <2 x i32> undef, i32 %51, i64 0
  %53 = extractelement <2 x i32> %49, i64 1
  %54 = tail call i32 @llvm.amdgcn.readlane(i32 %53, i32 32)
  %55 = insertelement <2 x i32> %52, i32 %54, i64 1
  %56 = bitcast <2 x i32> %55 to double
  %57 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %58 = and i32 %57, 1
  %59 = icmp eq i32 %58, 0
  %60 = select i1 %59, double 0.000000e+00, double %56
  %61 = tail call i32 @llvm.amdgcn.readlane(i32 %50, i32 0)
  %62 = insertelement <2 x i32> undef, i32 %61, i64 0
  %63 = tail call i32 @llvm.amdgcn.readlane(i32 %53, i32 0)
  %64 = insertelement <2 x i32> %62, i32 %63, i64 1
  %65 = bitcast <2 x i32> %64 to double
  %66 = fadd double %60, %65
  ret double %66
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc double @94(double noundef %0) unnamed_addr #53 {
  %2 = bitcast double %0 to <2 x i32>
  %3 = extractelement <2 x i32> %2, i64 0
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %3, i32 257, i32 15, i32 15, i1 true)
  %5 = insertelement <2 x i32> undef, i32 %4, i64 0
  %6 = extractelement <2 x i32> %2, i64 1
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %6, i32 257, i32 15, i32 15, i1 true)
  %8 = insertelement <2 x i32> %5, i32 %7, i64 1
  %9 = bitcast <2 x i32> %8 to double
  %10 = fadd double %9, %0
  %11 = bitcast double %10 to <2 x i32>
  %12 = extractelement <2 x i32> %11, i64 0
  %13 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %12, i32 258, i32 15, i32 15, i1 true)
  %14 = insertelement <2 x i32> undef, i32 %13, i64 0
  %15 = extractelement <2 x i32> %11, i64 1
  %16 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %15, i32 258, i32 15, i32 15, i1 true)
  %17 = insertelement <2 x i32> %14, i32 %16, i64 1
  %18 = bitcast <2 x i32> %17 to double
  %19 = fadd double %10, %18
  %20 = bitcast double %19 to <2 x i32>
  %21 = extractelement <2 x i32> %20, i64 0
  %22 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %21, i32 260, i32 15, i32 15, i1 true)
  %23 = insertelement <2 x i32> undef, i32 %22, i64 0
  %24 = extractelement <2 x i32> %20, i64 1
  %25 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %24, i32 260, i32 15, i32 15, i1 true)
  %26 = insertelement <2 x i32> %23, i32 %25, i64 1
  %27 = bitcast <2 x i32> %26 to double
  %28 = fadd double %19, %27
  %29 = bitcast double %28 to <2 x i32>
  %30 = extractelement <2 x i32> %29, i64 0
  %31 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %30, i32 264, i32 15, i32 15, i1 true)
  %32 = insertelement <2 x i32> undef, i32 %31, i64 0
  %33 = extractelement <2 x i32> %29, i64 1
  %34 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %33, i32 264, i32 15, i32 15, i1 true)
  %35 = insertelement <2 x i32> %32, i32 %34, i64 1
  %36 = bitcast <2 x i32> %35 to double
  %37 = fadd double %28, %36
  %38 = bitcast double %37 to <2 x i32>
  %39 = extractelement <2 x i32> %38, i64 0
  %40 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %39, i32 336, i32 15, i32 15, i1 true)
  %41 = insertelement <2 x i32> undef, i32 %40, i64 0
  %42 = extractelement <2 x i32> %38, i64 1
  %43 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %42, i32 336, i32 15, i32 15, i1 true)
  %44 = insertelement <2 x i32> %41, i32 %43, i64 1
  %45 = bitcast <2 x i32> %44 to double
  %46 = tail call i32 @llvm.amdgcn.permlanex16(i32 undef, i32 %40, i32 0, i32 0, i1 false, i1 true)
  %47 = insertelement <2 x i32> undef, i32 %46, i64 0
  %48 = tail call i32 @llvm.amdgcn.permlanex16(i32 undef, i32 %43, i32 0, i32 0, i1 false, i1 true)
  %49 = insertelement <2 x i32> %47, i32 %48, i64 1
  %50 = bitcast <2 x i32> %49 to double
  %51 = fadd double %45, %50
  %52 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %53 = icmp eq i8 %52, 0
  br i1 %53, label %73, label %54

54:                                               ; preds = %1
  %55 = bitcast double %51 to <2 x i32>
  %56 = extractelement <2 x i32> %55, i64 0
  %57 = tail call i32 @llvm.amdgcn.readlane(i32 %56, i32 32)
  %58 = insertelement <2 x i32> undef, i32 %57, i64 0
  %59 = extractelement <2 x i32> %55, i64 1
  %60 = tail call i32 @llvm.amdgcn.readlane(i32 %59, i32 32)
  %61 = insertelement <2 x i32> %58, i32 %60, i64 1
  %62 = bitcast <2 x i32> %61 to double
  %63 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %64 = and i32 %63, 1
  %65 = icmp eq i32 %64, 0
  %66 = select i1 %65, double 0.000000e+00, double %62
  %67 = tail call i32 @llvm.amdgcn.readlane(i32 %56, i32 0)
  %68 = insertelement <2 x i32> undef, i32 %67, i64 0
  %69 = tail call i32 @llvm.amdgcn.readlane(i32 %59, i32 0)
  %70 = insertelement <2 x i32> %68, i32 %69, i64 1
  %71 = bitcast <2 x i32> %70 to double
  %72 = fadd double %66, %71
  br label %73

73:                                               ; preds = %54, %1
  %74 = phi double [ %72, %54 ], [ %51, %1 ]
  ret double %74
}

; Function Attrs: convergent norecurse nounwind
define linkonce_odr protected double @__ockl_wfscan_add_f64(double noundef %0, i1 noundef zeroext %1) local_unnamed_addr #12 {
  %3 = tail call i32 @__ockl_lane_u32() #58
  %4 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %5 = icmp slt i32 %4, 8000
  br i1 %5, label %6, label %78

6:                                                ; preds = %2
  %7 = bitcast double %0 to <2 x i32>
  %8 = extractelement <2 x i32> %7, i64 0
  %9 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %8, i32 30)
  %10 = insertelement <2 x i32> undef, i32 %9, i64 0
  %11 = extractelement <2 x i32> %7, i64 1
  %12 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %11, i32 30)
  %13 = insertelement <2 x i32> %10, i32 %12, i64 1
  %14 = bitcast <2 x i32> %13 to double
  %15 = and i32 %3, 1
  %16 = icmp eq i32 %15, 0
  %17 = select i1 %16, double 0.000000e+00, double %14
  %18 = fadd double %17, %0
  %19 = bitcast double %18 to <2 x i32>
  %20 = extractelement <2 x i32> %19, i64 0
  %21 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %20, i32 60)
  %22 = insertelement <2 x i32> undef, i32 %21, i64 0
  %23 = extractelement <2 x i32> %19, i64 1
  %24 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %23, i32 60)
  %25 = insertelement <2 x i32> %22, i32 %24, i64 1
  %26 = bitcast <2 x i32> %25 to double
  %27 = and i32 %3, 2
  %28 = icmp eq i32 %27, 0
  %29 = select i1 %28, double 0.000000e+00, double %26
  %30 = fadd double %18, %29
  %31 = bitcast double %30 to <2 x i32>
  %32 = extractelement <2 x i32> %31, i64 0
  %33 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %32, i32 120)
  %34 = insertelement <2 x i32> undef, i32 %33, i64 0
  %35 = extractelement <2 x i32> %31, i64 1
  %36 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %35, i32 120)
  %37 = insertelement <2 x i32> %34, i32 %36, i64 1
  %38 = bitcast <2 x i32> %37 to double
  %39 = and i32 %3, 4
  %40 = icmp eq i32 %39, 0
  %41 = select i1 %40, double 0.000000e+00, double %38
  %42 = fadd double %30, %41
  %43 = bitcast double %42 to <2 x i32>
  %44 = extractelement <2 x i32> %43, i64 0
  %45 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %44, i32 240)
  %46 = insertelement <2 x i32> undef, i32 %45, i64 0
  %47 = extractelement <2 x i32> %43, i64 1
  %48 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %47, i32 240)
  %49 = insertelement <2 x i32> %46, i32 %48, i64 1
  %50 = bitcast <2 x i32> %49 to double
  %51 = and i32 %3, 8
  %52 = icmp eq i32 %51, 0
  %53 = select i1 %52, double 0.000000e+00, double %50
  %54 = fadd double %42, %53
  %55 = bitcast double %54 to <2 x i32>
  %56 = extractelement <2 x i32> %55, i64 0
  %57 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %56, i32 480)
  %58 = insertelement <2 x i32> undef, i32 %57, i64 0
  %59 = extractelement <2 x i32> %55, i64 1
  %60 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %59, i32 480)
  %61 = insertelement <2 x i32> %58, i32 %60, i64 1
  %62 = bitcast <2 x i32> %61 to double
  %63 = and i32 %3, 16
  %64 = icmp eq i32 %63, 0
  %65 = select i1 %64, double 0.000000e+00, double %62
  %66 = fadd double %54, %65
  %67 = bitcast double %66 to <2 x i32>
  %68 = extractelement <2 x i32> %67, i64 0
  %69 = tail call i32 @llvm.amdgcn.readlane(i32 %68, i32 31)
  %70 = insertelement <2 x i32> undef, i32 %69, i64 0
  %71 = extractelement <2 x i32> %67, i64 1
  %72 = tail call i32 @llvm.amdgcn.readlane(i32 %71, i32 31)
  %73 = insertelement <2 x i32> %70, i32 %72, i64 1
  %74 = bitcast <2 x i32> %73 to double
  %75 = icmp ugt i32 %3, 31
  %76 = select i1 %75, double %74, double 0.000000e+00
  %77 = fadd double %66, %76
  br label %84

78:                                               ; preds = %2
  %79 = icmp ult i32 %4, 10000
  br i1 %79, label %80, label %82

80:                                               ; preds = %78
  %81 = tail call fastcc double @95(double noundef %0) #57
  br label %84

82:                                               ; preds = %78
  %83 = tail call fastcc double @96(double noundef %0, i32 noundef %3) #57
  br label %84

84:                                               ; preds = %82, %80, %6
  %85 = phi double [ %77, %6 ], [ %81, %80 ], [ %83, %82 ]
  br i1 %1, label %131, label %86

86:                                               ; preds = %84
  br i1 %5, label %87, label %125

87:                                               ; preds = %86
  %88 = bitcast double %85 to <2 x i32>
  %89 = extractelement <2 x i32> %88, i64 0
  %90 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %89, i32 32912)
  %91 = insertelement <2 x i32> undef, i32 %90, i64 0
  %92 = extractelement <2 x i32> %88, i64 1
  %93 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %92, i32 32912)
  %94 = insertelement <2 x i32> %91, i32 %93, i64 1
  %95 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %89, i32 120)
  %96 = insertelement <2 x i32> undef, i32 %95, i64 0
  %97 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %92, i32 120)
  %98 = insertelement <2 x i32> %96, i32 %97, i64 1
  %99 = and i32 %3, 7
  %100 = icmp eq i32 %99, 4
  %101 = select i1 %100, <2 x i32> %98, <2 x i32> %94
  %102 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %89, i32 240)
  %103 = insertelement <2 x i32> undef, i32 %102, i64 0
  %104 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %92, i32 240)
  %105 = insertelement <2 x i32> %103, i32 %104, i64 1
  %106 = and i32 %3, 15
  %107 = icmp eq i32 %106, 8
  %108 = select i1 %107, <2 x i32> %105, <2 x i32> %101
  %109 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %89, i32 480)
  %110 = insertelement <2 x i32> undef, i32 %109, i64 0
  %111 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %92, i32 480)
  %112 = insertelement <2 x i32> %110, i32 %111, i64 1
  %113 = and i32 %3, 31
  %114 = icmp eq i32 %113, 16
  %115 = select i1 %114, <2 x i32> %112, <2 x i32> %108
  %116 = tail call i32 @llvm.amdgcn.readlane(i32 %89, i32 31)
  %117 = insertelement <2 x i32> undef, i32 %116, i64 0
  %118 = tail call i32 @llvm.amdgcn.readlane(i32 %92, i32 31)
  %119 = insertelement <2 x i32> %117, i32 %118, i64 1
  %120 = icmp eq i32 %3, 32
  %121 = select i1 %120, <2 x i32> %119, <2 x i32> %115
  %122 = bitcast <2 x i32> %121 to double
  %123 = icmp eq i32 %3, 0
  %124 = select i1 %123, double 0.000000e+00, double %122
  br label %131

125:                                              ; preds = %86
  %126 = icmp ult i32 %4, 10000
  br i1 %126, label %127, label %129

127:                                              ; preds = %125
  %128 = tail call fastcc double @97(double noundef %85) #57
  br label %131

129:                                              ; preds = %125
  %130 = tail call fastcc double @98(double noundef %85, i32 noundef %3) #57
  br label %131

131:                                              ; preds = %129, %127, %87, %84
  %132 = phi double [ %85, %84 ], [ %124, %87 ], [ %128, %127 ], [ %130, %129 ]
  ret double %132
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc double @95(double noundef %0) unnamed_addr #54 {
  %2 = bitcast double %0 to <2 x i32>
  %3 = extractelement <2 x i32> %2, i64 0
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %3, i32 273, i32 15, i32 15, i1 true)
  %5 = insertelement <2 x i32> undef, i32 %4, i64 0
  %6 = extractelement <2 x i32> %2, i64 1
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %6, i32 273, i32 15, i32 15, i1 true)
  %8 = insertelement <2 x i32> %5, i32 %7, i64 1
  %9 = bitcast <2 x i32> %8 to double
  %10 = fadd double %9, %0
  %11 = bitcast double %10 to <2 x i32>
  %12 = extractelement <2 x i32> %11, i64 0
  %13 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %12, i32 274, i32 15, i32 15, i1 true)
  %14 = insertelement <2 x i32> undef, i32 %13, i64 0
  %15 = extractelement <2 x i32> %11, i64 1
  %16 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %15, i32 274, i32 15, i32 15, i1 true)
  %17 = insertelement <2 x i32> %14, i32 %16, i64 1
  %18 = bitcast <2 x i32> %17 to double
  %19 = fadd double %10, %18
  %20 = bitcast double %19 to <2 x i32>
  %21 = extractelement <2 x i32> %20, i64 0
  %22 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %21, i32 276, i32 15, i32 15, i1 true)
  %23 = insertelement <2 x i32> undef, i32 %22, i64 0
  %24 = extractelement <2 x i32> %20, i64 1
  %25 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %24, i32 276, i32 15, i32 15, i1 true)
  %26 = insertelement <2 x i32> %23, i32 %25, i64 1
  %27 = bitcast <2 x i32> %26 to double
  %28 = fadd double %19, %27
  %29 = bitcast double %28 to <2 x i32>
  %30 = extractelement <2 x i32> %29, i64 0
  %31 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %30, i32 280, i32 15, i32 15, i1 true)
  %32 = insertelement <2 x i32> undef, i32 %31, i64 0
  %33 = extractelement <2 x i32> %29, i64 1
  %34 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %33, i32 280, i32 15, i32 15, i1 true)
  %35 = insertelement <2 x i32> %32, i32 %34, i64 1
  %36 = bitcast <2 x i32> %35 to double
  %37 = fadd double %28, %36
  %38 = bitcast double %37 to <2 x i32>
  %39 = extractelement <2 x i32> %38, i64 0
  %40 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %39, i32 322, i32 10, i32 15, i1 false)
  %41 = insertelement <2 x i32> undef, i32 %40, i64 0
  %42 = extractelement <2 x i32> %38, i64 1
  %43 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %42, i32 322, i32 10, i32 15, i1 false)
  %44 = insertelement <2 x i32> %41, i32 %43, i64 1
  %45 = bitcast <2 x i32> %44 to double
  %46 = fadd double %37, %45
  %47 = bitcast double %46 to <2 x i32>
  %48 = extractelement <2 x i32> %47, i64 0
  %49 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %48, i32 323, i32 12, i32 15, i1 false)
  %50 = insertelement <2 x i32> undef, i32 %49, i64 0
  %51 = extractelement <2 x i32> %47, i64 1
  %52 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %51, i32 323, i32 12, i32 15, i1 false)
  %53 = insertelement <2 x i32> %50, i32 %52, i64 1
  %54 = bitcast <2 x i32> %53 to double
  %55 = fadd double %46, %54
  ret double %55
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc double @96(double noundef %0, i32 noundef %1) unnamed_addr #55 {
  %3 = bitcast double %0 to <2 x i32>
  %4 = extractelement <2 x i32> %3, i64 0
  %5 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %4, i32 273, i32 15, i32 15, i1 true)
  %6 = insertelement <2 x i32> undef, i32 %5, i64 0
  %7 = extractelement <2 x i32> %3, i64 1
  %8 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %7, i32 273, i32 15, i32 15, i1 true)
  %9 = insertelement <2 x i32> %6, i32 %8, i64 1
  %10 = bitcast <2 x i32> %9 to double
  %11 = fadd double %10, %0
  %12 = bitcast double %11 to <2 x i32>
  %13 = extractelement <2 x i32> %12, i64 0
  %14 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %13, i32 274, i32 15, i32 15, i1 true)
  %15 = insertelement <2 x i32> undef, i32 %14, i64 0
  %16 = extractelement <2 x i32> %12, i64 1
  %17 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %16, i32 274, i32 15, i32 15, i1 true)
  %18 = insertelement <2 x i32> %15, i32 %17, i64 1
  %19 = bitcast <2 x i32> %18 to double
  %20 = fadd double %11, %19
  %21 = bitcast double %20 to <2 x i32>
  %22 = extractelement <2 x i32> %21, i64 0
  %23 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %22, i32 276, i32 15, i32 15, i1 true)
  %24 = insertelement <2 x i32> undef, i32 %23, i64 0
  %25 = extractelement <2 x i32> %21, i64 1
  %26 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %25, i32 276, i32 15, i32 15, i1 true)
  %27 = insertelement <2 x i32> %24, i32 %26, i64 1
  %28 = bitcast <2 x i32> %27 to double
  %29 = fadd double %20, %28
  %30 = bitcast double %29 to <2 x i32>
  %31 = extractelement <2 x i32> %30, i64 0
  %32 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %31, i32 280, i32 15, i32 15, i1 true)
  %33 = insertelement <2 x i32> undef, i32 %32, i64 0
  %34 = extractelement <2 x i32> %30, i64 1
  %35 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %34, i32 280, i32 15, i32 15, i1 true)
  %36 = insertelement <2 x i32> %33, i32 %35, i64 1
  %37 = bitcast <2 x i32> %36 to double
  %38 = fadd double %29, %37
  %39 = bitcast double %38 to <2 x i32>
  %40 = extractelement <2 x i32> %39, i64 0
  %41 = tail call i32 @llvm.amdgcn.permlanex16(i32 undef, i32 %40, i32 -1, i32 -1, i1 false, i1 true)
  %42 = insertelement <2 x i32> undef, i32 %41, i64 0
  %43 = extractelement <2 x i32> %39, i64 1
  %44 = tail call i32 @llvm.amdgcn.permlanex16(i32 undef, i32 %43, i32 -1, i32 -1, i1 false, i1 true)
  %45 = insertelement <2 x i32> %42, i32 %44, i64 1
  %46 = bitcast <2 x i32> %45 to double
  %47 = and i32 %1, 16
  %48 = icmp eq i32 %47, 0
  %49 = select i1 %48, double 0.000000e+00, double %46
  %50 = fadd double %38, %49
  %51 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %52 = icmp eq i8 %51, 0
  br i1 %52, label %65, label %53

53:                                               ; preds = %2
  %54 = bitcast double %50 to <2 x i32>
  %55 = extractelement <2 x i32> %54, i64 0
  %56 = tail call i32 @llvm.amdgcn.readlane(i32 %55, i32 31)
  %57 = insertelement <2 x i32> undef, i32 %56, i64 0
  %58 = extractelement <2 x i32> %54, i64 1
  %59 = tail call i32 @llvm.amdgcn.readlane(i32 %58, i32 31)
  %60 = insertelement <2 x i32> %57, i32 %59, i64 1
  %61 = bitcast <2 x i32> %60 to double
  %62 = icmp ugt i32 %1, 31
  %63 = select i1 %62, double %61, double 0.000000e+00
  %64 = fadd double %50, %63
  br label %65

65:                                               ; preds = %53, %2
  %66 = phi double [ %64, %53 ], [ %50, %2 ]
  ret double %66
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc double @97(double noundef %0) unnamed_addr #54 {
  %2 = bitcast double %0 to <2 x i32>
  %3 = extractelement <2 x i32> %2, i64 0
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %3, i32 312, i32 15, i32 15, i1 true)
  %5 = insertelement <2 x i32> undef, i32 %4, i64 0
  %6 = extractelement <2 x i32> %2, i64 1
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %6, i32 312, i32 15, i32 15, i1 true)
  %8 = insertelement <2 x i32> %5, i32 %7, i64 1
  %9 = bitcast <2 x i32> %8 to double
  ret double %9
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc double @98(double noundef %0, i32 noundef %1) unnamed_addr #55 {
  %3 = bitcast double %0 to <2 x i32>
  %4 = extractelement <2 x i32> %3, i64 0
  %5 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %4, i32 273, i32 15, i32 15, i1 true)
  %6 = insertelement <2 x i32> undef, i32 %5, i64 0
  %7 = extractelement <2 x i32> %3, i64 1
  %8 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %7, i32 273, i32 15, i32 15, i1 true)
  %9 = insertelement <2 x i32> %6, i32 %8, i64 1
  %10 = bitcast <2 x i32> %9 to double
  %11 = tail call i32 @llvm.amdgcn.permlanex16(i32 undef, i32 %4, i32 -1, i32 -1, i1 false, i1 true)
  %12 = insertelement <2 x i32> undef, i32 %11, i64 0
  %13 = tail call i32 @llvm.amdgcn.permlanex16(i32 undef, i32 %7, i32 -1, i32 -1, i1 false, i1 true)
  %14 = insertelement <2 x i32> %12, i32 %13, i64 1
  %15 = bitcast <2 x i32> %14 to double
  %16 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %30, label %18

18:                                               ; preds = %2
  %19 = tail call i32 @llvm.amdgcn.readlane(i32 %4, i32 31)
  %20 = insertelement <2 x i32> undef, i32 %19, i64 0
  %21 = tail call i32 @llvm.amdgcn.readlane(i32 %7, i32 31)
  %22 = insertelement <2 x i32> %20, i32 %21, i64 1
  %23 = bitcast <2 x i32> %22 to double
  %24 = icmp eq i32 %1, 32
  %25 = select i1 %24, double %23, double %15
  %26 = and i32 %1, 31
  %27 = icmp eq i32 %26, 16
  %28 = or i1 %24, %27
  %29 = select i1 %28, double %25, double %10
  br label %33

30:                                               ; preds = %2
  %31 = icmp eq i32 %1, 16
  %32 = select i1 %31, double %15, double %10
  br label %33

33:                                               ; preds = %30, %18
  %34 = phi double [ %29, %18 ], [ %32, %30 ]
  ret double %34
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected half @__ockl_wfred_add_f16(half noundef %0) local_unnamed_addr #0 {
  %2 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %3 = icmp slt i32 %2, 8000
  br i1 %3, label %4, label %67

4:                                                ; preds = %1
  %5 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %10, label %7

7:                                                ; preds = %4
  %8 = tail call i64 @llvm.read_register.i64(metadata !36) #57
  %9 = icmp eq i64 %8, -1
  br label %13

10:                                               ; preds = %4
  %11 = tail call i32 @llvm.read_register.i32(metadata !10) #57
  %12 = icmp eq i32 %11, -1
  br label %13

13:                                               ; preds = %10, %7
  %14 = phi i1 [ %9, %7 ], [ %12, %10 ]
  %15 = bitcast half %0 to i16
  %16 = zext i16 %15 to i32
  %17 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %16, i32 32945)
  %18 = trunc i32 %17 to i16
  %19 = bitcast i16 %18 to half
  %20 = fadd half %19, %0
  %21 = bitcast half %20 to i16
  %22 = zext i16 %21 to i32
  %23 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %22, i32 32846)
  %24 = trunc i32 %23 to i16
  %25 = bitcast i16 %24 to half
  %26 = fadd half %20, %25
  %27 = bitcast half %26 to i16
  %28 = zext i16 %27 to i32
  %29 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %28, i32 4127)
  %30 = trunc i32 %29 to i16
  %31 = bitcast i16 %30 to half
  %32 = fadd half %26, %31
  %33 = bitcast half %32 to i16
  %34 = zext i16 %33 to i32
  %35 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %34, i32 8223)
  %36 = trunc i32 %35 to i16
  %37 = bitcast i16 %36 to half
  %38 = fadd half %32, %37
  %39 = bitcast half %38 to i16
  %40 = zext i16 %39 to i32
  %41 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %40, i32 16415)
  %42 = trunc i32 %41 to i16
  %43 = bitcast i16 %42 to half
  %44 = fadd half %38, %43
  %45 = bitcast half %44 to i16
  %46 = zext i16 %45 to i32
  br i1 %14, label %47, label %55

47:                                               ; preds = %13
  %48 = tail call i32 @llvm.amdgcn.readlane(i32 %46, i32 0)
  %49 = trunc i32 %48 to i16
  %50 = bitcast i16 %49 to half
  %51 = tail call i32 @llvm.amdgcn.readlane(i32 %46, i32 32)
  %52 = trunc i32 %51 to i16
  %53 = bitcast i16 %52 to half
  %54 = fadd half %50, %53
  br label %73

55:                                               ; preds = %13
  %56 = tail call i32 @llvm.amdgcn.readlane(i32 %46, i32 32)
  %57 = trunc i32 %56 to i16
  %58 = bitcast i16 %57 to half
  %59 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %60 = and i32 %59, 1
  %61 = icmp eq i32 %60, 0
  %62 = select i1 %61, half 0xH0000, half %58
  %63 = tail call i32 @llvm.amdgcn.readlane(i32 %46, i32 0)
  %64 = trunc i32 %63 to i16
  %65 = bitcast i16 %64 to half
  %66 = fadd half %62, %65
  br label %73

67:                                               ; preds = %1
  %68 = icmp ult i32 %2, 10000
  br i1 %68, label %69, label %71

69:                                               ; preds = %67
  %70 = tail call fastcc half @99(half noundef %0) #57
  br label %73

71:                                               ; preds = %67
  %72 = tail call fastcc half @100(half noundef %0) #57
  br label %73

73:                                               ; preds = %71, %69, %55, %47
  %74 = phi half [ %54, %47 ], [ %66, %55 ], [ %70, %69 ], [ %72, %71 ]
  ret half %74
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc half @99(half noundef %0) unnamed_addr #52 {
  %2 = bitcast half %0 to i16
  %3 = zext i16 %2 to i32
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %3, i32 257, i32 15, i32 15, i1 true)
  %5 = trunc i32 %4 to i16
  %6 = bitcast i16 %5 to half
  %7 = fadd half %6, %0
  %8 = bitcast half %7 to i16
  %9 = zext i16 %8 to i32
  %10 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %9, i32 258, i32 15, i32 15, i1 true)
  %11 = trunc i32 %10 to i16
  %12 = bitcast i16 %11 to half
  %13 = fadd half %7, %12
  %14 = bitcast half %13 to i16
  %15 = zext i16 %14 to i32
  %16 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %15, i32 260, i32 15, i32 15, i1 true)
  %17 = trunc i32 %16 to i16
  %18 = bitcast i16 %17 to half
  %19 = fadd half %13, %18
  %20 = bitcast half %19 to i16
  %21 = zext i16 %20 to i32
  %22 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %21, i32 264, i32 15, i32 15, i1 true)
  %23 = trunc i32 %22 to i16
  %24 = bitcast i16 %23 to half
  %25 = fadd half %19, %24
  %26 = bitcast half %25 to i16
  %27 = zext i16 %26 to i32
  %28 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %27, i32 304, i32 15, i32 15, i1 true)
  %29 = and i32 %28, 65535
  %30 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %29, i32 320, i32 15, i32 15, i1 true)
  %31 = trunc i32 %30 to i16
  %32 = bitcast i16 %31 to half
  %33 = fadd half %25, %32
  %34 = bitcast half %33 to i16
  %35 = zext i16 %34 to i32
  %36 = tail call i32 @llvm.amdgcn.readlane(i32 %35, i32 32)
  %37 = trunc i32 %36 to i16
  %38 = bitcast i16 %37 to half
  %39 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %40 = and i32 %39, 1
  %41 = icmp eq i32 %40, 0
  %42 = select i1 %41, half 0xH0000, half %38
  %43 = tail call i32 @llvm.amdgcn.readlane(i32 %35, i32 0)
  %44 = trunc i32 %43 to i16
  %45 = bitcast i16 %44 to half
  %46 = fadd half %42, %45
  ret half %46
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc half @100(half noundef %0) unnamed_addr #53 {
  %2 = bitcast half %0 to i16
  %3 = zext i16 %2 to i32
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %3, i32 257, i32 15, i32 15, i1 true)
  %5 = trunc i32 %4 to i16
  %6 = bitcast i16 %5 to half
  %7 = fadd half %6, %0
  %8 = bitcast half %7 to i16
  %9 = zext i16 %8 to i32
  %10 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %9, i32 258, i32 15, i32 15, i1 true)
  %11 = trunc i32 %10 to i16
  %12 = bitcast i16 %11 to half
  %13 = fadd half %7, %12
  %14 = bitcast half %13 to i16
  %15 = zext i16 %14 to i32
  %16 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %15, i32 260, i32 15, i32 15, i1 true)
  %17 = trunc i32 %16 to i16
  %18 = bitcast i16 %17 to half
  %19 = fadd half %13, %18
  %20 = bitcast half %19 to i16
  %21 = zext i16 %20 to i32
  %22 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %21, i32 264, i32 15, i32 15, i1 true)
  %23 = trunc i32 %22 to i16
  %24 = bitcast i16 %23 to half
  %25 = fadd half %19, %24
  %26 = bitcast half %25 to i16
  %27 = zext i16 %26 to i32
  %28 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %27, i32 336, i32 15, i32 15, i1 true)
  %29 = trunc i32 %28 to i16
  %30 = bitcast i16 %29 to half
  %31 = and i32 %28, 65535
  %32 = tail call i32 @llvm.amdgcn.permlanex16(i32 undef, i32 %31, i32 0, i32 0, i1 false, i1 true)
  %33 = trunc i32 %32 to i16
  %34 = bitcast i16 %33 to half
  %35 = fadd half %30, %34
  %36 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %37 = icmp eq i8 %36, 0
  br i1 %37, label %52, label %38

38:                                               ; preds = %1
  %39 = bitcast half %35 to i16
  %40 = zext i16 %39 to i32
  %41 = tail call i32 @llvm.amdgcn.readlane(i32 %40, i32 32)
  %42 = trunc i32 %41 to i16
  %43 = bitcast i16 %42 to half
  %44 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %45 = and i32 %44, 1
  %46 = icmp eq i32 %45, 0
  %47 = select i1 %46, half 0xH0000, half %43
  %48 = tail call i32 @llvm.amdgcn.readlane(i32 %40, i32 0)
  %49 = trunc i32 %48 to i16
  %50 = bitcast i16 %49 to half
  %51 = fadd half %47, %50
  br label %52

52:                                               ; preds = %38, %1
  %53 = phi half [ %51, %38 ], [ %35, %1 ]
  ret half %53
}

; Function Attrs: convergent norecurse nounwind
define linkonce_odr protected half @__ockl_wfscan_add_f16(half noundef %0, i1 noundef zeroext %1) local_unnamed_addr #12 {
  %3 = tail call i32 @__ockl_lane_u32() #58
  %4 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %5 = icmp slt i32 %4, 8000
  br i1 %5, label %6, label %60

6:                                                ; preds = %2
  %7 = bitcast half %0 to i16
  %8 = zext i16 %7 to i32
  %9 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %8, i32 30)
  %10 = trunc i32 %9 to i16
  %11 = bitcast i16 %10 to half
  %12 = and i32 %3, 1
  %13 = icmp eq i32 %12, 0
  %14 = select i1 %13, half 0xH0000, half %11
  %15 = fadd half %14, %0
  %16 = bitcast half %15 to i16
  %17 = zext i16 %16 to i32
  %18 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %17, i32 60)
  %19 = trunc i32 %18 to i16
  %20 = bitcast i16 %19 to half
  %21 = and i32 %3, 2
  %22 = icmp eq i32 %21, 0
  %23 = select i1 %22, half 0xH0000, half %20
  %24 = fadd half %15, %23
  %25 = bitcast half %24 to i16
  %26 = zext i16 %25 to i32
  %27 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %26, i32 120)
  %28 = trunc i32 %27 to i16
  %29 = bitcast i16 %28 to half
  %30 = and i32 %3, 4
  %31 = icmp eq i32 %30, 0
  %32 = select i1 %31, half 0xH0000, half %29
  %33 = fadd half %24, %32
  %34 = bitcast half %33 to i16
  %35 = zext i16 %34 to i32
  %36 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %35, i32 240)
  %37 = trunc i32 %36 to i16
  %38 = bitcast i16 %37 to half
  %39 = and i32 %3, 8
  %40 = icmp eq i32 %39, 0
  %41 = select i1 %40, half 0xH0000, half %38
  %42 = fadd half %33, %41
  %43 = bitcast half %42 to i16
  %44 = zext i16 %43 to i32
  %45 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %44, i32 480)
  %46 = trunc i32 %45 to i16
  %47 = bitcast i16 %46 to half
  %48 = and i32 %3, 16
  %49 = icmp eq i32 %48, 0
  %50 = select i1 %49, half 0xH0000, half %47
  %51 = fadd half %42, %50
  %52 = bitcast half %51 to i16
  %53 = zext i16 %52 to i32
  %54 = tail call i32 @llvm.amdgcn.readlane(i32 %53, i32 31)
  %55 = trunc i32 %54 to i16
  %56 = bitcast i16 %55 to half
  %57 = icmp ugt i32 %3, 31
  %58 = select i1 %57, half %56, half 0xH0000
  %59 = fadd half %51, %58
  br label %66

60:                                               ; preds = %2
  %61 = icmp ult i32 %4, 10000
  br i1 %61, label %62, label %64

62:                                               ; preds = %60
  %63 = tail call fastcc half @101(half noundef %0) #57
  br label %66

64:                                               ; preds = %60
  %65 = tail call fastcc half @102(half noundef %0, i32 noundef %3) #57
  br label %66

66:                                               ; preds = %64, %62, %6
  %67 = phi half [ %59, %6 ], [ %63, %62 ], [ %65, %64 ]
  br i1 %1, label %98, label %68

68:                                               ; preds = %66
  br i1 %5, label %69, label %92

69:                                               ; preds = %68
  %70 = bitcast half %67 to i16
  %71 = zext i16 %70 to i32
  %72 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %71, i32 32912)
  %73 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %71, i32 120)
  %74 = and i32 %3, 7
  %75 = icmp eq i32 %74, 4
  %76 = select i1 %75, i32 %73, i32 %72
  %77 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %71, i32 240)
  %78 = and i32 %3, 15
  %79 = icmp eq i32 %78, 8
  %80 = select i1 %79, i32 %77, i32 %76
  %81 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %71, i32 480)
  %82 = and i32 %3, 31
  %83 = icmp eq i32 %82, 16
  %84 = select i1 %83, i32 %81, i32 %80
  %85 = tail call i32 @llvm.amdgcn.readlane(i32 %71, i32 31)
  %86 = icmp eq i32 %3, 32
  %87 = select i1 %86, i32 %85, i32 %84
  %88 = trunc i32 %87 to i16
  %89 = bitcast i16 %88 to half
  %90 = icmp eq i32 %3, 0
  %91 = select i1 %90, half 0xH0000, half %89
  br label %98

92:                                               ; preds = %68
  %93 = icmp ult i32 %4, 10000
  br i1 %93, label %94, label %96

94:                                               ; preds = %92
  %95 = tail call fastcc half @103(half noundef %67) #57
  br label %98

96:                                               ; preds = %92
  %97 = tail call fastcc half @104(half noundef %67, i32 noundef %3) #57
  br label %98

98:                                               ; preds = %96, %94, %69, %66
  %99 = phi half [ %67, %66 ], [ %91, %69 ], [ %95, %94 ], [ %97, %96 ]
  ret half %99
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc half @101(half noundef %0) unnamed_addr #54 {
  %2 = bitcast half %0 to i16
  %3 = zext i16 %2 to i32
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %3, i32 273, i32 15, i32 15, i1 true)
  %5 = trunc i32 %4 to i16
  %6 = bitcast i16 %5 to half
  %7 = fadd half %6, %0
  %8 = bitcast half %7 to i16
  %9 = zext i16 %8 to i32
  %10 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %9, i32 274, i32 15, i32 15, i1 true)
  %11 = trunc i32 %10 to i16
  %12 = bitcast i16 %11 to half
  %13 = fadd half %7, %12
  %14 = bitcast half %13 to i16
  %15 = zext i16 %14 to i32
  %16 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %15, i32 276, i32 15, i32 15, i1 true)
  %17 = trunc i32 %16 to i16
  %18 = bitcast i16 %17 to half
  %19 = fadd half %13, %18
  %20 = bitcast half %19 to i16
  %21 = zext i16 %20 to i32
  %22 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %21, i32 280, i32 15, i32 15, i1 true)
  %23 = trunc i32 %22 to i16
  %24 = bitcast i16 %23 to half
  %25 = fadd half %19, %24
  %26 = bitcast half %25 to i16
  %27 = zext i16 %26 to i32
  %28 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %27, i32 322, i32 10, i32 15, i1 false)
  %29 = trunc i32 %28 to i16
  %30 = bitcast i16 %29 to half
  %31 = fadd half %25, %30
  %32 = bitcast half %31 to i16
  %33 = zext i16 %32 to i32
  %34 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %33, i32 323, i32 12, i32 15, i1 false)
  %35 = trunc i32 %34 to i16
  %36 = bitcast i16 %35 to half
  %37 = fadd half %31, %36
  ret half %37
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc half @102(half noundef %0, i32 noundef %1) unnamed_addr #55 {
  %3 = bitcast half %0 to i16
  %4 = zext i16 %3 to i32
  %5 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %4, i32 273, i32 15, i32 15, i1 true)
  %6 = trunc i32 %5 to i16
  %7 = bitcast i16 %6 to half
  %8 = fadd half %7, %0
  %9 = bitcast half %8 to i16
  %10 = zext i16 %9 to i32
  %11 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %10, i32 274, i32 15, i32 15, i1 true)
  %12 = trunc i32 %11 to i16
  %13 = bitcast i16 %12 to half
  %14 = fadd half %8, %13
  %15 = bitcast half %14 to i16
  %16 = zext i16 %15 to i32
  %17 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %16, i32 276, i32 15, i32 15, i1 true)
  %18 = trunc i32 %17 to i16
  %19 = bitcast i16 %18 to half
  %20 = fadd half %14, %19
  %21 = bitcast half %20 to i16
  %22 = zext i16 %21 to i32
  %23 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %22, i32 280, i32 15, i32 15, i1 true)
  %24 = trunc i32 %23 to i16
  %25 = bitcast i16 %24 to half
  %26 = fadd half %20, %25
  %27 = bitcast half %26 to i16
  %28 = zext i16 %27 to i32
  %29 = tail call i32 @llvm.amdgcn.permlanex16(i32 undef, i32 %28, i32 -1, i32 -1, i1 false, i1 true)
  %30 = trunc i32 %29 to i16
  %31 = bitcast i16 %30 to half
  %32 = and i32 %1, 16
  %33 = icmp eq i32 %32, 0
  %34 = select i1 %33, half 0xH0000, half %31
  %35 = fadd half %26, %34
  %36 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %37 = icmp eq i8 %36, 0
  br i1 %37, label %47, label %38

38:                                               ; preds = %2
  %39 = bitcast half %35 to i16
  %40 = zext i16 %39 to i32
  %41 = tail call i32 @llvm.amdgcn.readlane(i32 %40, i32 31)
  %42 = trunc i32 %41 to i16
  %43 = bitcast i16 %42 to half
  %44 = icmp ugt i32 %1, 31
  %45 = select i1 %44, half %43, half 0xH0000
  %46 = fadd half %35, %45
  br label %47

47:                                               ; preds = %38, %2
  %48 = phi half [ %46, %38 ], [ %35, %2 ]
  ret half %48
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc half @103(half noundef %0) unnamed_addr #54 {
  %2 = bitcast half %0 to i16
  %3 = zext i16 %2 to i32
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %3, i32 312, i32 15, i32 15, i1 true)
  %5 = trunc i32 %4 to i16
  %6 = bitcast i16 %5 to half
  ret half %6
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc half @104(half noundef %0, i32 noundef %1) unnamed_addr #55 {
  %3 = bitcast half %0 to i16
  %4 = zext i16 %3 to i32
  %5 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %4, i32 273, i32 15, i32 15, i1 true)
  %6 = trunc i32 %5 to i16
  %7 = bitcast i16 %6 to half
  %8 = tail call i32 @llvm.amdgcn.permlanex16(i32 undef, i32 %4, i32 -1, i32 -1, i1 false, i1 true)
  %9 = trunc i32 %8 to i16
  %10 = bitcast i16 %9 to half
  %11 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %12 = icmp eq i8 %11, 0
  br i1 %12, label %23, label %13

13:                                               ; preds = %2
  %14 = tail call i32 @llvm.amdgcn.readlane(i32 %4, i32 31)
  %15 = trunc i32 %14 to i16
  %16 = bitcast i16 %15 to half
  %17 = icmp eq i32 %1, 32
  %18 = select i1 %17, half %16, half %10
  %19 = and i32 %1, 31
  %20 = icmp eq i32 %19, 16
  %21 = or i1 %17, %20
  %22 = select i1 %21, half %18, half %7
  br label %26

23:                                               ; preds = %2
  %24 = icmp eq i32 %1, 16
  %25 = select i1 %24, half %10, half %7
  br label %26

26:                                               ; preds = %23, %13
  %27 = phi half [ %22, %13 ], [ %25, %23 ]
  ret half %27
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected i32 @__ockl_wfred_min_i32(i32 noundef %0) local_unnamed_addr #0 {
  %2 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %3 = icmp slt i32 %2, 8000
  br i1 %3, label %4, label %71

4:                                                ; preds = %1
  %5 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %10, label %7

7:                                                ; preds = %4
  %8 = tail call i64 @llvm.read_register.i64(metadata !36) #57
  %9 = icmp eq i64 %8, -1
  br label %13

10:                                               ; preds = %4
  %11 = tail call i32 @llvm.read_register.i32(metadata !10) #57
  %12 = icmp eq i32 %11, -1
  br label %13

13:                                               ; preds = %10, %7
  %14 = phi i1 [ %9, %7 ], [ %12, %10 ]
  %15 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %0, i32 32945)
  br i1 %14, label %16, label %29

16:                                               ; preds = %13
  %17 = tail call i32 @llvm.smin.i32(i32 %0, i32 %15)
  %18 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %17, i32 32846)
  %19 = tail call i32 @llvm.smin.i32(i32 %17, i32 %18)
  %20 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %19, i32 4127)
  %21 = tail call i32 @llvm.smin.i32(i32 %19, i32 %20)
  %22 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %21, i32 8223)
  %23 = tail call i32 @llvm.smin.i32(i32 %21, i32 %22)
  %24 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %23, i32 16415)
  %25 = tail call i32 @llvm.smin.i32(i32 %23, i32 %24)
  %26 = tail call i32 @llvm.amdgcn.readlane(i32 %25, i32 0)
  %27 = tail call i32 @llvm.amdgcn.readlane(i32 %25, i32 32)
  %28 = tail call i32 @llvm.smin.i32(i32 %26, i32 %27)
  br label %77

29:                                               ; preds = %13
  %30 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 32945)
  %31 = and i32 %30, %15
  %32 = and i32 %30, 2147483647
  %33 = xor i32 %32, 2147483647
  %34 = or i32 %33, %31
  %35 = tail call i32 @llvm.smin.i32(i32 %0, i32 %34)
  %36 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %35, i32 32846)
  %37 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 32846)
  %38 = and i32 %37, %36
  %39 = and i32 %37, 2147483647
  %40 = xor i32 %39, 2147483647
  %41 = or i32 %40, %38
  %42 = tail call i32 @llvm.smin.i32(i32 %35, i32 %41)
  %43 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %42, i32 4127)
  %44 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 4127)
  %45 = and i32 %44, %43
  %46 = and i32 %44, 2147483647
  %47 = xor i32 %46, 2147483647
  %48 = or i32 %47, %45
  %49 = tail call i32 @llvm.smin.i32(i32 %42, i32 %48)
  %50 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %49, i32 8223)
  %51 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 8223)
  %52 = and i32 %51, %50
  %53 = and i32 %51, 2147483647
  %54 = xor i32 %53, 2147483647
  %55 = or i32 %54, %52
  %56 = tail call i32 @llvm.smin.i32(i32 %49, i32 %55)
  %57 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %56, i32 16415)
  %58 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 16415)
  %59 = and i32 %58, %57
  %60 = and i32 %58, 2147483647
  %61 = xor i32 %60, 2147483647
  %62 = or i32 %61, %59
  %63 = tail call i32 @llvm.smin.i32(i32 %56, i32 %62)
  %64 = tail call i32 @llvm.amdgcn.readlane(i32 %63, i32 32)
  %65 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %66 = and i32 %65, 1
  %67 = icmp eq i32 %66, 0
  %68 = select i1 %67, i32 2147483647, i32 %64
  %69 = tail call i32 @llvm.amdgcn.readlane(i32 %63, i32 0)
  %70 = tail call i32 @llvm.smin.i32(i32 %69, i32 %68)
  br label %77

71:                                               ; preds = %1
  %72 = icmp ult i32 %2, 10000
  br i1 %72, label %73, label %75

73:                                               ; preds = %71
  %74 = tail call fastcc i32 @105(i32 noundef %0) #57
  br label %77

75:                                               ; preds = %71
  %76 = tail call fastcc i32 @106(i32 noundef %0) #57
  br label %77

77:                                               ; preds = %75, %73, %29, %16
  %78 = phi i32 [ %28, %16 ], [ %70, %29 ], [ %74, %73 ], [ %76, %75 ]
  ret i32 %78
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc i32 @105(i32 noundef %0) unnamed_addr #52 {
  %2 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2147483647, i32 %0, i32 257, i32 15, i32 15, i1 false)
  %3 = tail call i32 @llvm.smin.i32(i32 %0, i32 %2)
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2147483647, i32 %3, i32 258, i32 15, i32 15, i1 false)
  %5 = tail call i32 @llvm.smin.i32(i32 %3, i32 %4)
  %6 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2147483647, i32 %5, i32 260, i32 15, i32 15, i1 false)
  %7 = tail call i32 @llvm.smin.i32(i32 %5, i32 %6)
  %8 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2147483647, i32 %7, i32 264, i32 15, i32 15, i1 false)
  %9 = tail call i32 @llvm.smin.i32(i32 %7, i32 %8)
  %10 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2147483647, i32 %9, i32 304, i32 15, i32 15, i1 false)
  %11 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2147483647, i32 %10, i32 320, i32 15, i32 15, i1 false)
  %12 = tail call i32 @llvm.smin.i32(i32 %9, i32 %11)
  %13 = tail call i32 @llvm.amdgcn.readlane(i32 %12, i32 32)
  %14 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %15 = and i32 %14, 1
  %16 = icmp eq i32 %15, 0
  %17 = select i1 %16, i32 2147483647, i32 %13
  %18 = tail call i32 @llvm.amdgcn.readlane(i32 %12, i32 0)
  %19 = tail call i32 @llvm.smin.i32(i32 %18, i32 %17)
  ret i32 %19
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc i32 @106(i32 noundef %0) unnamed_addr #53 {
  %2 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2147483647, i32 %0, i32 257, i32 15, i32 15, i1 false)
  %3 = tail call i32 @llvm.smin.i32(i32 %0, i32 %2)
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2147483647, i32 %3, i32 258, i32 15, i32 15, i1 false)
  %5 = tail call i32 @llvm.smin.i32(i32 %3, i32 %4)
  %6 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2147483647, i32 %5, i32 260, i32 15, i32 15, i1 false)
  %7 = tail call i32 @llvm.smin.i32(i32 %5, i32 %6)
  %8 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2147483647, i32 %7, i32 264, i32 15, i32 15, i1 false)
  %9 = tail call i32 @llvm.smin.i32(i32 %7, i32 %8)
  %10 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2147483647, i32 %9, i32 336, i32 15, i32 15, i1 false)
  %11 = tail call i32 @llvm.amdgcn.permlanex16(i32 2147483647, i32 %10, i32 0, i32 0, i1 false, i1 false)
  %12 = tail call i32 @llvm.smin.i32(i32 %10, i32 %11)
  %13 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %23, label %15

15:                                               ; preds = %1
  %16 = tail call i32 @llvm.amdgcn.readlane(i32 %12, i32 32)
  %17 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %18 = and i32 %17, 1
  %19 = icmp eq i32 %18, 0
  %20 = select i1 %19, i32 2147483647, i32 %16
  %21 = tail call i32 @llvm.amdgcn.readlane(i32 %12, i32 0)
  %22 = tail call i32 @llvm.smin.i32(i32 %21, i32 %20)
  br label %23

23:                                               ; preds = %15, %1
  %24 = phi i32 [ %22, %15 ], [ %12, %1 ]
  ret i32 %24
}

; Function Attrs: convergent norecurse nounwind
define linkonce_odr protected i32 @__ockl_wfscan_min_i32(i32 noundef %0, i1 noundef zeroext %1) local_unnamed_addr #12 {
  %3 = tail call i32 @__ockl_lane_u32() #58
  %4 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %5 = icmp slt i32 %4, 8000
  br i1 %5, label %6, label %36

6:                                                ; preds = %2
  %7 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %0, i32 30)
  %8 = and i32 %3, 1
  %9 = icmp eq i32 %8, 0
  %10 = select i1 %9, i32 2147483647, i32 %7
  %11 = tail call i32 @llvm.smin.i32(i32 %0, i32 %10)
  %12 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %11, i32 60)
  %13 = and i32 %3, 2
  %14 = icmp eq i32 %13, 0
  %15 = select i1 %14, i32 2147483647, i32 %12
  %16 = tail call i32 @llvm.smin.i32(i32 %11, i32 %15)
  %17 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %16, i32 120)
  %18 = and i32 %3, 4
  %19 = icmp eq i32 %18, 0
  %20 = select i1 %19, i32 2147483647, i32 %17
  %21 = tail call i32 @llvm.smin.i32(i32 %16, i32 %20)
  %22 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %21, i32 240)
  %23 = and i32 %3, 8
  %24 = icmp eq i32 %23, 0
  %25 = select i1 %24, i32 2147483647, i32 %22
  %26 = tail call i32 @llvm.smin.i32(i32 %21, i32 %25)
  %27 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %26, i32 480)
  %28 = and i32 %3, 16
  %29 = icmp eq i32 %28, 0
  %30 = select i1 %29, i32 2147483647, i32 %27
  %31 = tail call i32 @llvm.smin.i32(i32 %26, i32 %30)
  %32 = tail call i32 @llvm.amdgcn.readlane(i32 %31, i32 31)
  %33 = icmp ugt i32 %3, 31
  %34 = select i1 %33, i32 %32, i32 2147483647
  %35 = tail call i32 @llvm.smin.i32(i32 %31, i32 %34)
  br label %42

36:                                               ; preds = %2
  %37 = icmp ult i32 %4, 10000
  br i1 %37, label %38, label %40

38:                                               ; preds = %36
  %39 = tail call fastcc i32 @107(i32 noundef %0) #57
  br label %42

40:                                               ; preds = %36
  %41 = tail call fastcc i32 @108(i32 noundef %0, i32 noundef %3) #57
  br label %42

42:                                               ; preds = %40, %38, %6
  %43 = phi i32 [ %35, %6 ], [ %39, %38 ], [ %41, %40 ]
  br i1 %1, label %70, label %44

44:                                               ; preds = %42
  br i1 %5, label %45, label %64

45:                                               ; preds = %44
  %46 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %43, i32 32912)
  %47 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %43, i32 120)
  %48 = and i32 %3, 7
  %49 = icmp eq i32 %48, 4
  %50 = select i1 %49, i32 %47, i32 %46
  %51 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %43, i32 240)
  %52 = and i32 %3, 15
  %53 = icmp eq i32 %52, 8
  %54 = select i1 %53, i32 %51, i32 %50
  %55 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %43, i32 480)
  %56 = and i32 %3, 31
  %57 = icmp eq i32 %56, 16
  %58 = select i1 %57, i32 %55, i32 %54
  %59 = tail call i32 @llvm.amdgcn.readlane(i32 %43, i32 31)
  %60 = icmp eq i32 %3, 32
  %61 = select i1 %60, i32 %59, i32 %58
  %62 = icmp eq i32 %3, 0
  %63 = select i1 %62, i32 2147483647, i32 %61
  br label %70

64:                                               ; preds = %44
  %65 = icmp ult i32 %4, 10000
  br i1 %65, label %66, label %68

66:                                               ; preds = %64
  %67 = tail call fastcc i32 @109(i32 noundef %43) #57
  br label %70

68:                                               ; preds = %64
  %69 = tail call fastcc i32 @110(i32 noundef %43, i32 noundef %3) #57
  br label %70

70:                                               ; preds = %68, %66, %45, %42
  %71 = phi i32 [ %43, %42 ], [ %63, %45 ], [ %67, %66 ], [ %69, %68 ]
  ret i32 %71
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i32 @107(i32 noundef %0) unnamed_addr #54 {
  %2 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2147483647, i32 %0, i32 273, i32 15, i32 15, i1 false)
  %3 = tail call i32 @llvm.smin.i32(i32 %0, i32 %2)
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2147483647, i32 %3, i32 274, i32 15, i32 15, i1 false)
  %5 = tail call i32 @llvm.smin.i32(i32 %3, i32 %4)
  %6 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2147483647, i32 %5, i32 276, i32 15, i32 15, i1 false)
  %7 = tail call i32 @llvm.smin.i32(i32 %5, i32 %6)
  %8 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2147483647, i32 %7, i32 280, i32 15, i32 15, i1 false)
  %9 = tail call i32 @llvm.smin.i32(i32 %7, i32 %8)
  %10 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2147483647, i32 %9, i32 322, i32 10, i32 15, i1 false)
  %11 = tail call i32 @llvm.smin.i32(i32 %9, i32 %10)
  %12 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2147483647, i32 %11, i32 323, i32 12, i32 15, i1 false)
  %13 = tail call i32 @llvm.smin.i32(i32 %11, i32 %12)
  ret i32 %13
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i32 @108(i32 noundef %0, i32 noundef %1) unnamed_addr #55 {
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2147483647, i32 %0, i32 273, i32 15, i32 15, i1 false)
  %4 = tail call i32 @llvm.smin.i32(i32 %0, i32 %3)
  %5 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2147483647, i32 %4, i32 274, i32 15, i32 15, i1 false)
  %6 = tail call i32 @llvm.smin.i32(i32 %4, i32 %5)
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2147483647, i32 %6, i32 276, i32 15, i32 15, i1 false)
  %8 = tail call i32 @llvm.smin.i32(i32 %6, i32 %7)
  %9 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2147483647, i32 %8, i32 280, i32 15, i32 15, i1 false)
  %10 = tail call i32 @llvm.smin.i32(i32 %8, i32 %9)
  %11 = tail call i32 @llvm.amdgcn.permlanex16(i32 2147483647, i32 %10, i32 -1, i32 -1, i1 false, i1 false)
  %12 = and i32 %1, 16
  %13 = icmp eq i32 %12, 0
  %14 = select i1 %13, i32 2147483647, i32 %11
  %15 = tail call i32 @llvm.smin.i32(i32 %10, i32 %14)
  %16 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %23, label %18

18:                                               ; preds = %2
  %19 = icmp ugt i32 %1, 31
  %20 = tail call i32 @llvm.amdgcn.readlane(i32 %15, i32 31)
  %21 = select i1 %19, i32 %20, i32 2147483647
  %22 = tail call i32 @llvm.smin.i32(i32 %15, i32 %21)
  br label %23

23:                                               ; preds = %18, %2
  %24 = phi i32 [ %22, %18 ], [ %15, %2 ]
  ret i32 %24
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i32 @109(i32 noundef %0) unnamed_addr #54 {
  %2 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2147483647, i32 %0, i32 312, i32 15, i32 15, i1 false)
  ret i32 %2
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i32 @110(i32 noundef %0, i32 noundef %1) unnamed_addr #55 {
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2147483647, i32 %0, i32 273, i32 15, i32 15, i1 false)
  %4 = tail call i32 @llvm.amdgcn.permlanex16(i32 2147483647, i32 %0, i32 -1, i32 -1, i1 false, i1 false)
  %5 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %15, label %7

7:                                                ; preds = %2
  %8 = tail call i32 @llvm.amdgcn.readlane(i32 %0, i32 31)
  %9 = icmp eq i32 %1, 32
  %10 = select i1 %9, i32 %8, i32 %4
  %11 = and i32 %1, 31
  %12 = icmp eq i32 %11, 16
  %13 = or i1 %9, %12
  %14 = select i1 %13, i32 %10, i32 %3
  br label %18

15:                                               ; preds = %2
  %16 = icmp eq i32 %1, 16
  %17 = select i1 %16, i32 %4, i32 %3
  br label %18

18:                                               ; preds = %15, %7
  %19 = phi i32 [ %14, %7 ], [ %17, %15 ]
  ret i32 %19
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected i32 @__ockl_wfred_min_u32(i32 noundef %0) local_unnamed_addr #0 {
  %2 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %3 = icmp slt i32 %2, 8000
  br i1 %3, label %4, label %61

4:                                                ; preds = %1
  %5 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %10, label %7

7:                                                ; preds = %4
  %8 = tail call i64 @llvm.read_register.i64(metadata !36) #57
  %9 = icmp eq i64 %8, -1
  br label %13

10:                                               ; preds = %4
  %11 = tail call i32 @llvm.read_register.i32(metadata !10) #57
  %12 = icmp eq i32 %11, -1
  br label %13

13:                                               ; preds = %10, %7
  %14 = phi i1 [ %9, %7 ], [ %12, %10 ]
  %15 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %0, i32 32945)
  br i1 %14, label %16, label %29

16:                                               ; preds = %13
  %17 = tail call i32 @llvm.umin.i32(i32 %0, i32 %15)
  %18 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %17, i32 32846)
  %19 = tail call i32 @llvm.umin.i32(i32 %17, i32 %18)
  %20 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %19, i32 4127)
  %21 = tail call i32 @llvm.umin.i32(i32 %19, i32 %20)
  %22 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %21, i32 8223)
  %23 = tail call i32 @llvm.umin.i32(i32 %21, i32 %22)
  %24 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %23, i32 16415)
  %25 = tail call i32 @llvm.umin.i32(i32 %23, i32 %24)
  %26 = tail call i32 @llvm.amdgcn.readlane(i32 %25, i32 0)
  %27 = tail call i32 @llvm.amdgcn.readlane(i32 %25, i32 32)
  %28 = tail call i32 @llvm.umin.i32(i32 %26, i32 %27)
  br label %67

29:                                               ; preds = %13
  %30 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 32945)
  %31 = xor i32 %30, -1
  %32 = or i32 %15, %31
  %33 = tail call i32 @llvm.umin.i32(i32 %0, i32 %32)
  %34 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %33, i32 32846)
  %35 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 32846)
  %36 = xor i32 %35, -1
  %37 = or i32 %34, %36
  %38 = tail call i32 @llvm.umin.i32(i32 %33, i32 %37)
  %39 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %38, i32 4127)
  %40 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 4127)
  %41 = xor i32 %40, -1
  %42 = or i32 %39, %41
  %43 = tail call i32 @llvm.umin.i32(i32 %38, i32 %42)
  %44 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %43, i32 8223)
  %45 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 8223)
  %46 = xor i32 %45, -1
  %47 = or i32 %44, %46
  %48 = tail call i32 @llvm.umin.i32(i32 %43, i32 %47)
  %49 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %48, i32 16415)
  %50 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 16415)
  %51 = xor i32 %50, -1
  %52 = or i32 %49, %51
  %53 = tail call i32 @llvm.umin.i32(i32 %48, i32 %52)
  %54 = tail call i32 @llvm.amdgcn.readlane(i32 %53, i32 32)
  %55 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %56 = and i32 %55, 1
  %57 = icmp eq i32 %56, 0
  %58 = select i1 %57, i32 -1, i32 %54
  %59 = tail call i32 @llvm.amdgcn.readlane(i32 %53, i32 0)
  %60 = tail call i32 @llvm.umin.i32(i32 %59, i32 %58)
  br label %67

61:                                               ; preds = %1
  %62 = icmp ult i32 %2, 10000
  br i1 %62, label %63, label %65

63:                                               ; preds = %61
  %64 = tail call fastcc i32 @111(i32 noundef %0) #57
  br label %67

65:                                               ; preds = %61
  %66 = tail call fastcc i32 @112(i32 noundef %0) #57
  br label %67

67:                                               ; preds = %65, %63, %29, %16
  %68 = phi i32 [ %28, %16 ], [ %60, %29 ], [ %64, %63 ], [ %66, %65 ]
  ret i32 %68
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc i32 @111(i32 noundef %0) unnamed_addr #52 {
  %2 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %0, i32 257, i32 15, i32 15, i1 false)
  %3 = tail call i32 @llvm.umin.i32(i32 %0, i32 %2)
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %3, i32 258, i32 15, i32 15, i1 false)
  %5 = tail call i32 @llvm.umin.i32(i32 %3, i32 %4)
  %6 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %5, i32 260, i32 15, i32 15, i1 false)
  %7 = tail call i32 @llvm.umin.i32(i32 %5, i32 %6)
  %8 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %7, i32 264, i32 15, i32 15, i1 false)
  %9 = tail call i32 @llvm.umin.i32(i32 %7, i32 %8)
  %10 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %9, i32 304, i32 15, i32 15, i1 false)
  %11 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %10, i32 320, i32 15, i32 15, i1 false)
  %12 = tail call i32 @llvm.umin.i32(i32 %9, i32 %11)
  %13 = tail call i32 @llvm.amdgcn.readlane(i32 %12, i32 32)
  %14 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %15 = and i32 %14, 1
  %16 = icmp eq i32 %15, 0
  %17 = select i1 %16, i32 -1, i32 %13
  %18 = tail call i32 @llvm.amdgcn.readlane(i32 %12, i32 0)
  %19 = tail call i32 @llvm.umin.i32(i32 %18, i32 %17)
  ret i32 %19
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc i32 @112(i32 noundef %0) unnamed_addr #53 {
  %2 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %0, i32 257, i32 15, i32 15, i1 false)
  %3 = tail call i32 @llvm.umin.i32(i32 %0, i32 %2)
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %3, i32 258, i32 15, i32 15, i1 false)
  %5 = tail call i32 @llvm.umin.i32(i32 %3, i32 %4)
  %6 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %5, i32 260, i32 15, i32 15, i1 false)
  %7 = tail call i32 @llvm.umin.i32(i32 %5, i32 %6)
  %8 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %7, i32 264, i32 15, i32 15, i1 false)
  %9 = tail call i32 @llvm.umin.i32(i32 %7, i32 %8)
  %10 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %9, i32 336, i32 15, i32 15, i1 false)
  %11 = tail call i32 @llvm.amdgcn.permlanex16(i32 -1, i32 %10, i32 0, i32 0, i1 false, i1 false)
  %12 = tail call i32 @llvm.umin.i32(i32 %10, i32 %11)
  %13 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %23, label %15

15:                                               ; preds = %1
  %16 = tail call i32 @llvm.amdgcn.readlane(i32 %12, i32 32)
  %17 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %18 = and i32 %17, 1
  %19 = icmp eq i32 %18, 0
  %20 = select i1 %19, i32 -1, i32 %16
  %21 = tail call i32 @llvm.amdgcn.readlane(i32 %12, i32 0)
  %22 = tail call i32 @llvm.umin.i32(i32 %21, i32 %20)
  br label %23

23:                                               ; preds = %15, %1
  %24 = phi i32 [ %22, %15 ], [ %12, %1 ]
  ret i32 %24
}

; Function Attrs: convergent norecurse nounwind
define linkonce_odr protected i32 @__ockl_wfscan_min_u32(i32 noundef %0, i1 noundef zeroext %1) local_unnamed_addr #12 {
  %3 = tail call i32 @__ockl_lane_u32() #58
  %4 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %5 = icmp slt i32 %4, 8000
  br i1 %5, label %6, label %36

6:                                                ; preds = %2
  %7 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %0, i32 30)
  %8 = and i32 %3, 1
  %9 = icmp eq i32 %8, 0
  %10 = select i1 %9, i32 -1, i32 %7
  %11 = tail call i32 @llvm.umin.i32(i32 %0, i32 %10)
  %12 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %11, i32 60)
  %13 = and i32 %3, 2
  %14 = icmp eq i32 %13, 0
  %15 = select i1 %14, i32 -1, i32 %12
  %16 = tail call i32 @llvm.umin.i32(i32 %11, i32 %15)
  %17 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %16, i32 120)
  %18 = and i32 %3, 4
  %19 = icmp eq i32 %18, 0
  %20 = select i1 %19, i32 -1, i32 %17
  %21 = tail call i32 @llvm.umin.i32(i32 %16, i32 %20)
  %22 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %21, i32 240)
  %23 = and i32 %3, 8
  %24 = icmp eq i32 %23, 0
  %25 = select i1 %24, i32 -1, i32 %22
  %26 = tail call i32 @llvm.umin.i32(i32 %21, i32 %25)
  %27 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %26, i32 480)
  %28 = and i32 %3, 16
  %29 = icmp eq i32 %28, 0
  %30 = select i1 %29, i32 -1, i32 %27
  %31 = tail call i32 @llvm.umin.i32(i32 %26, i32 %30)
  %32 = tail call i32 @llvm.amdgcn.readlane(i32 %31, i32 31)
  %33 = icmp ugt i32 %3, 31
  %34 = select i1 %33, i32 %32, i32 -1
  %35 = tail call i32 @llvm.umin.i32(i32 %31, i32 %34)
  br label %42

36:                                               ; preds = %2
  %37 = icmp ult i32 %4, 10000
  br i1 %37, label %38, label %40

38:                                               ; preds = %36
  %39 = tail call fastcc i32 @113(i32 noundef %0) #57
  br label %42

40:                                               ; preds = %36
  %41 = tail call fastcc i32 @114(i32 noundef %0, i32 noundef %3) #57
  br label %42

42:                                               ; preds = %40, %38, %6
  %43 = phi i32 [ %35, %6 ], [ %39, %38 ], [ %41, %40 ]
  br i1 %1, label %70, label %44

44:                                               ; preds = %42
  br i1 %5, label %45, label %64

45:                                               ; preds = %44
  %46 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %43, i32 32912)
  %47 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %43, i32 120)
  %48 = and i32 %3, 7
  %49 = icmp eq i32 %48, 4
  %50 = select i1 %49, i32 %47, i32 %46
  %51 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %43, i32 240)
  %52 = and i32 %3, 15
  %53 = icmp eq i32 %52, 8
  %54 = select i1 %53, i32 %51, i32 %50
  %55 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %43, i32 480)
  %56 = and i32 %3, 31
  %57 = icmp eq i32 %56, 16
  %58 = select i1 %57, i32 %55, i32 %54
  %59 = tail call i32 @llvm.amdgcn.readlane(i32 %43, i32 31)
  %60 = icmp eq i32 %3, 32
  %61 = select i1 %60, i32 %59, i32 %58
  %62 = icmp eq i32 %3, 0
  %63 = select i1 %62, i32 -1, i32 %61
  br label %70

64:                                               ; preds = %44
  %65 = icmp ult i32 %4, 10000
  br i1 %65, label %66, label %68

66:                                               ; preds = %64
  %67 = tail call fastcc i32 @115(i32 noundef %43) #57
  br label %70

68:                                               ; preds = %64
  %69 = tail call fastcc i32 @116(i32 noundef %43, i32 noundef %3) #57
  br label %70

70:                                               ; preds = %68, %66, %45, %42
  %71 = phi i32 [ %43, %42 ], [ %63, %45 ], [ %67, %66 ], [ %69, %68 ]
  ret i32 %71
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i32 @113(i32 noundef %0) unnamed_addr #54 {
  %2 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %0, i32 273, i32 15, i32 15, i1 false)
  %3 = tail call i32 @llvm.umin.i32(i32 %0, i32 %2)
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %3, i32 274, i32 15, i32 15, i1 false)
  %5 = tail call i32 @llvm.umin.i32(i32 %3, i32 %4)
  %6 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %5, i32 276, i32 15, i32 15, i1 false)
  %7 = tail call i32 @llvm.umin.i32(i32 %5, i32 %6)
  %8 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %7, i32 280, i32 15, i32 15, i1 false)
  %9 = tail call i32 @llvm.umin.i32(i32 %7, i32 %8)
  %10 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %9, i32 322, i32 10, i32 15, i1 false)
  %11 = tail call i32 @llvm.umin.i32(i32 %9, i32 %10)
  %12 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %11, i32 323, i32 12, i32 15, i1 false)
  %13 = tail call i32 @llvm.umin.i32(i32 %11, i32 %12)
  ret i32 %13
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i32 @114(i32 noundef %0, i32 noundef %1) unnamed_addr #55 {
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %0, i32 273, i32 15, i32 15, i1 false)
  %4 = tail call i32 @llvm.umin.i32(i32 %0, i32 %3)
  %5 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %4, i32 274, i32 15, i32 15, i1 false)
  %6 = tail call i32 @llvm.umin.i32(i32 %4, i32 %5)
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %6, i32 276, i32 15, i32 15, i1 false)
  %8 = tail call i32 @llvm.umin.i32(i32 %6, i32 %7)
  %9 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %8, i32 280, i32 15, i32 15, i1 false)
  %10 = tail call i32 @llvm.umin.i32(i32 %8, i32 %9)
  %11 = tail call i32 @llvm.amdgcn.permlanex16(i32 -1, i32 %10, i32 -1, i32 -1, i1 false, i1 false)
  %12 = and i32 %1, 16
  %13 = icmp eq i32 %12, 0
  %14 = select i1 %13, i32 -1, i32 %11
  %15 = tail call i32 @llvm.umin.i32(i32 %10, i32 %14)
  %16 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %23, label %18

18:                                               ; preds = %2
  %19 = icmp ugt i32 %1, 31
  %20 = tail call i32 @llvm.amdgcn.readlane(i32 %15, i32 31)
  %21 = select i1 %19, i32 %20, i32 -1
  %22 = tail call i32 @llvm.umin.i32(i32 %15, i32 %21)
  br label %23

23:                                               ; preds = %18, %2
  %24 = phi i32 [ %22, %18 ], [ %15, %2 ]
  ret i32 %24
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i32 @115(i32 noundef %0) unnamed_addr #54 {
  %2 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %0, i32 312, i32 15, i32 15, i1 false)
  ret i32 %2
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i32 @116(i32 noundef %0, i32 noundef %1) unnamed_addr #55 {
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %0, i32 273, i32 15, i32 15, i1 false)
  %4 = tail call i32 @llvm.amdgcn.permlanex16(i32 -1, i32 %0, i32 -1, i32 -1, i1 false, i1 false)
  %5 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %15, label %7

7:                                                ; preds = %2
  %8 = tail call i32 @llvm.amdgcn.readlane(i32 %0, i32 31)
  %9 = icmp eq i32 %1, 32
  %10 = select i1 %9, i32 %8, i32 %4
  %11 = and i32 %1, 31
  %12 = icmp eq i32 %11, 16
  %13 = or i1 %9, %12
  %14 = select i1 %13, i32 %10, i32 %3
  br label %18

15:                                               ; preds = %2
  %16 = icmp eq i32 %1, 16
  %17 = select i1 %16, i32 %4, i32 %3
  br label %18

18:                                               ; preds = %15, %7
  %19 = phi i32 [ %14, %7 ], [ %17, %15 ]
  ret i32 %19
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected i64 @__ockl_wfred_min_i64(i64 noundef %0) local_unnamed_addr #0 {
  %2 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %3 = icmp slt i32 %2, 8000
  br i1 %3, label %4, label %167

4:                                                ; preds = %1
  %5 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %10, label %7

7:                                                ; preds = %4
  %8 = tail call i64 @llvm.read_register.i64(metadata !36) #57
  %9 = icmp eq i64 %8, -1
  br label %13

10:                                               ; preds = %4
  %11 = tail call i32 @llvm.read_register.i32(metadata !10) #57
  %12 = icmp eq i32 %11, -1
  br label %13

13:                                               ; preds = %10, %7
  %14 = phi i1 [ %9, %7 ], [ %12, %10 ]
  %15 = trunc i64 %0 to i32
  %16 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %15, i32 32945)
  br i1 %14, label %17, label %75

17:                                               ; preds = %13
  %18 = insertelement <2 x i32> undef, i32 %16, i64 0
  %19 = lshr i64 %0, 32
  %20 = trunc i64 %19 to i32
  %21 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %20, i32 32945)
  %22 = insertelement <2 x i32> %18, i32 %21, i64 1
  %23 = bitcast <2 x i32> %22 to i64
  %24 = tail call i64 @llvm.smin.i64(i64 %0, i64 %23)
  %25 = trunc i64 %24 to i32
  %26 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %25, i32 32846)
  %27 = insertelement <2 x i32> undef, i32 %26, i64 0
  %28 = lshr i64 %24, 32
  %29 = trunc i64 %28 to i32
  %30 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %29, i32 32846)
  %31 = insertelement <2 x i32> %27, i32 %30, i64 1
  %32 = bitcast <2 x i32> %31 to i64
  %33 = tail call i64 @llvm.smin.i64(i64 %24, i64 %32)
  %34 = trunc i64 %33 to i32
  %35 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %34, i32 4127)
  %36 = insertelement <2 x i32> undef, i32 %35, i64 0
  %37 = lshr i64 %33, 32
  %38 = trunc i64 %37 to i32
  %39 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %38, i32 4127)
  %40 = insertelement <2 x i32> %36, i32 %39, i64 1
  %41 = bitcast <2 x i32> %40 to i64
  %42 = tail call i64 @llvm.smin.i64(i64 %33, i64 %41)
  %43 = trunc i64 %42 to i32
  %44 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %43, i32 8223)
  %45 = insertelement <2 x i32> undef, i32 %44, i64 0
  %46 = lshr i64 %42, 32
  %47 = trunc i64 %46 to i32
  %48 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %47, i32 8223)
  %49 = insertelement <2 x i32> %45, i32 %48, i64 1
  %50 = bitcast <2 x i32> %49 to i64
  %51 = tail call i64 @llvm.smin.i64(i64 %42, i64 %50)
  %52 = trunc i64 %51 to i32
  %53 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %52, i32 16415)
  %54 = insertelement <2 x i32> undef, i32 %53, i64 0
  %55 = lshr i64 %51, 32
  %56 = trunc i64 %55 to i32
  %57 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %56, i32 16415)
  %58 = insertelement <2 x i32> %54, i32 %57, i64 1
  %59 = bitcast <2 x i32> %58 to i64
  %60 = tail call i64 @llvm.smin.i64(i64 %51, i64 %59)
  %61 = trunc i64 %60 to i32
  %62 = tail call i32 @llvm.amdgcn.readlane(i32 %61, i32 0)
  %63 = insertelement <2 x i32> undef, i32 %62, i64 0
  %64 = lshr i64 %60, 32
  %65 = trunc i64 %64 to i32
  %66 = tail call i32 @llvm.amdgcn.readlane(i32 %65, i32 0)
  %67 = insertelement <2 x i32> %63, i32 %66, i64 1
  %68 = bitcast <2 x i32> %67 to i64
  %69 = tail call i32 @llvm.amdgcn.readlane(i32 %61, i32 32)
  %70 = insertelement <2 x i32> undef, i32 %69, i64 0
  %71 = tail call i32 @llvm.amdgcn.readlane(i32 %65, i32 32)
  %72 = insertelement <2 x i32> %70, i32 %71, i64 1
  %73 = bitcast <2 x i32> %72 to i64
  %74 = tail call i64 @llvm.smin.i64(i64 %68, i64 %73)
  br label %173

75:                                               ; preds = %13
  %76 = lshr i64 %0, 32
  %77 = trunc i64 %76 to i32
  %78 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %77, i32 32945)
  %79 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 32945)
  %80 = xor i32 %79, -1
  %81 = or i32 %16, %80
  %82 = insertelement <2 x i32> undef, i32 %81, i64 0
  %83 = and i32 %79, %78
  %84 = and i32 %80, 2147483647
  %85 = or i32 %83, %84
  %86 = insertelement <2 x i32> %82, i32 %85, i64 1
  %87 = bitcast <2 x i32> %86 to i64
  %88 = tail call i64 @llvm.smin.i64(i64 %0, i64 %87)
  %89 = trunc i64 %88 to i32
  %90 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %89, i32 32846)
  %91 = lshr i64 %88, 32
  %92 = trunc i64 %91 to i32
  %93 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %92, i32 32846)
  %94 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 32846)
  %95 = xor i32 %94, -1
  %96 = or i32 %90, %95
  %97 = insertelement <2 x i32> undef, i32 %96, i64 0
  %98 = and i32 %94, %93
  %99 = and i32 %95, 2147483647
  %100 = or i32 %98, %99
  %101 = insertelement <2 x i32> %97, i32 %100, i64 1
  %102 = bitcast <2 x i32> %101 to i64
  %103 = tail call i64 @llvm.smin.i64(i64 %88, i64 %102)
  %104 = trunc i64 %103 to i32
  %105 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %104, i32 4127)
  %106 = lshr i64 %103, 32
  %107 = trunc i64 %106 to i32
  %108 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %107, i32 4127)
  %109 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 4127)
  %110 = xor i32 %109, -1
  %111 = or i32 %105, %110
  %112 = insertelement <2 x i32> undef, i32 %111, i64 0
  %113 = and i32 %109, %108
  %114 = and i32 %110, 2147483647
  %115 = or i32 %113, %114
  %116 = insertelement <2 x i32> %112, i32 %115, i64 1
  %117 = bitcast <2 x i32> %116 to i64
  %118 = tail call i64 @llvm.smin.i64(i64 %103, i64 %117)
  %119 = trunc i64 %118 to i32
  %120 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %119, i32 8223)
  %121 = lshr i64 %118, 32
  %122 = trunc i64 %121 to i32
  %123 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %122, i32 8223)
  %124 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 8223)
  %125 = xor i32 %124, -1
  %126 = or i32 %120, %125
  %127 = insertelement <2 x i32> undef, i32 %126, i64 0
  %128 = and i32 %124, %123
  %129 = and i32 %125, 2147483647
  %130 = or i32 %128, %129
  %131 = insertelement <2 x i32> %127, i32 %130, i64 1
  %132 = bitcast <2 x i32> %131 to i64
  %133 = tail call i64 @llvm.smin.i64(i64 %118, i64 %132)
  %134 = trunc i64 %133 to i32
  %135 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %134, i32 16415)
  %136 = lshr i64 %133, 32
  %137 = trunc i64 %136 to i32
  %138 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %137, i32 16415)
  %139 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 16415)
  %140 = xor i32 %139, -1
  %141 = or i32 %135, %140
  %142 = insertelement <2 x i32> undef, i32 %141, i64 0
  %143 = and i32 %139, %138
  %144 = and i32 %140, 2147483647
  %145 = or i32 %143, %144
  %146 = insertelement <2 x i32> %142, i32 %145, i64 1
  %147 = bitcast <2 x i32> %146 to i64
  %148 = tail call i64 @llvm.smin.i64(i64 %133, i64 %147)
  %149 = trunc i64 %148 to i32
  %150 = tail call i32 @llvm.amdgcn.readlane(i32 %149, i32 32)
  %151 = insertelement <2 x i32> undef, i32 %150, i64 0
  %152 = lshr i64 %148, 32
  %153 = trunc i64 %152 to i32
  %154 = tail call i32 @llvm.amdgcn.readlane(i32 %153, i32 32)
  %155 = insertelement <2 x i32> %151, i32 %154, i64 1
  %156 = bitcast <2 x i32> %155 to i64
  %157 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %158 = and i32 %157, 1
  %159 = icmp eq i32 %158, 0
  %160 = select i1 %159, i64 9223372036854775807, i64 %156
  %161 = tail call i32 @llvm.amdgcn.readlane(i32 %149, i32 0)
  %162 = insertelement <2 x i32> undef, i32 %161, i64 0
  %163 = tail call i32 @llvm.amdgcn.readlane(i32 %153, i32 0)
  %164 = insertelement <2 x i32> %162, i32 %163, i64 1
  %165 = bitcast <2 x i32> %164 to i64
  %166 = tail call i64 @llvm.smin.i64(i64 %165, i64 %160)
  br label %173

167:                                              ; preds = %1
  %168 = icmp ult i32 %2, 10000
  br i1 %168, label %169, label %171

169:                                              ; preds = %167
  %170 = tail call fastcc i64 @117(i64 noundef %0) #57
  br label %173

171:                                              ; preds = %167
  %172 = tail call fastcc i64 @118(i64 noundef %0) #57
  br label %173

173:                                              ; preds = %171, %169, %75, %17
  %174 = phi i64 [ %74, %17 ], [ %166, %75 ], [ %170, %169 ], [ %172, %171 ]
  ret i64 %174
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc i64 @117(i64 noundef %0) unnamed_addr #52 {
  %2 = trunc i64 %0 to i32
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %2, i32 257, i32 15, i32 15, i1 false)
  %4 = insertelement <2 x i32> undef, i32 %3, i64 0
  %5 = lshr i64 %0, 32
  %6 = trunc i64 %5 to i32
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2147483647, i32 %6, i32 257, i32 15, i32 15, i1 false)
  %8 = insertelement <2 x i32> %4, i32 %7, i64 1
  %9 = bitcast <2 x i32> %8 to i64
  %10 = tail call i64 @llvm.smin.i64(i64 %0, i64 %9)
  %11 = trunc i64 %10 to i32
  %12 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %11, i32 258, i32 15, i32 15, i1 false)
  %13 = insertelement <2 x i32> undef, i32 %12, i64 0
  %14 = lshr i64 %10, 32
  %15 = trunc i64 %14 to i32
  %16 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2147483647, i32 %15, i32 258, i32 15, i32 15, i1 false)
  %17 = insertelement <2 x i32> %13, i32 %16, i64 1
  %18 = bitcast <2 x i32> %17 to i64
  %19 = tail call i64 @llvm.smin.i64(i64 %10, i64 %18)
  %20 = trunc i64 %19 to i32
  %21 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %20, i32 260, i32 15, i32 15, i1 false)
  %22 = insertelement <2 x i32> undef, i32 %21, i64 0
  %23 = lshr i64 %19, 32
  %24 = trunc i64 %23 to i32
  %25 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2147483647, i32 %24, i32 260, i32 15, i32 15, i1 false)
  %26 = insertelement <2 x i32> %22, i32 %25, i64 1
  %27 = bitcast <2 x i32> %26 to i64
  %28 = tail call i64 @llvm.smin.i64(i64 %19, i64 %27)
  %29 = trunc i64 %28 to i32
  %30 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %29, i32 264, i32 15, i32 15, i1 false)
  %31 = insertelement <2 x i32> undef, i32 %30, i64 0
  %32 = lshr i64 %28, 32
  %33 = trunc i64 %32 to i32
  %34 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2147483647, i32 %33, i32 264, i32 15, i32 15, i1 false)
  %35 = insertelement <2 x i32> %31, i32 %34, i64 1
  %36 = bitcast <2 x i32> %35 to i64
  %37 = tail call i64 @llvm.smin.i64(i64 %28, i64 %36)
  %38 = trunc i64 %37 to i32
  %39 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %38, i32 304, i32 15, i32 15, i1 false)
  %40 = lshr i64 %37, 32
  %41 = trunc i64 %40 to i32
  %42 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2147483647, i32 %41, i32 304, i32 15, i32 15, i1 false)
  %43 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %39, i32 320, i32 15, i32 15, i1 false)
  %44 = insertelement <2 x i32> undef, i32 %43, i64 0
  %45 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2147483647, i32 %42, i32 320, i32 15, i32 15, i1 false)
  %46 = insertelement <2 x i32> %44, i32 %45, i64 1
  %47 = bitcast <2 x i32> %46 to i64
  %48 = tail call i64 @llvm.smin.i64(i64 %37, i64 %47)
  %49 = trunc i64 %48 to i32
  %50 = tail call i32 @llvm.amdgcn.readlane(i32 %49, i32 32)
  %51 = insertelement <2 x i32> undef, i32 %50, i64 0
  %52 = lshr i64 %48, 32
  %53 = trunc i64 %52 to i32
  %54 = tail call i32 @llvm.amdgcn.readlane(i32 %53, i32 32)
  %55 = insertelement <2 x i32> %51, i32 %54, i64 1
  %56 = bitcast <2 x i32> %55 to i64
  %57 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %58 = and i32 %57, 1
  %59 = icmp eq i32 %58, 0
  %60 = select i1 %59, i64 9223372036854775807, i64 %56
  %61 = tail call i32 @llvm.amdgcn.readlane(i32 %49, i32 0)
  %62 = insertelement <2 x i32> undef, i32 %61, i64 0
  %63 = tail call i32 @llvm.amdgcn.readlane(i32 %53, i32 0)
  %64 = insertelement <2 x i32> %62, i32 %63, i64 1
  %65 = bitcast <2 x i32> %64 to i64
  %66 = tail call i64 @llvm.smin.i64(i64 %65, i64 %60)
  ret i64 %66
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc i64 @118(i64 noundef %0) unnamed_addr #53 {
  %2 = trunc i64 %0 to i32
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %2, i32 257, i32 15, i32 15, i1 false)
  %4 = insertelement <2 x i32> undef, i32 %3, i64 0
  %5 = lshr i64 %0, 32
  %6 = trunc i64 %5 to i32
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2147483647, i32 %6, i32 257, i32 15, i32 15, i1 false)
  %8 = insertelement <2 x i32> %4, i32 %7, i64 1
  %9 = bitcast <2 x i32> %8 to i64
  %10 = tail call i64 @llvm.smin.i64(i64 %0, i64 %9)
  %11 = trunc i64 %10 to i32
  %12 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %11, i32 258, i32 15, i32 15, i1 false)
  %13 = insertelement <2 x i32> undef, i32 %12, i64 0
  %14 = lshr i64 %10, 32
  %15 = trunc i64 %14 to i32
  %16 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2147483647, i32 %15, i32 258, i32 15, i32 15, i1 false)
  %17 = insertelement <2 x i32> %13, i32 %16, i64 1
  %18 = bitcast <2 x i32> %17 to i64
  %19 = tail call i64 @llvm.smin.i64(i64 %10, i64 %18)
  %20 = trunc i64 %19 to i32
  %21 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %20, i32 260, i32 15, i32 15, i1 false)
  %22 = insertelement <2 x i32> undef, i32 %21, i64 0
  %23 = lshr i64 %19, 32
  %24 = trunc i64 %23 to i32
  %25 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2147483647, i32 %24, i32 260, i32 15, i32 15, i1 false)
  %26 = insertelement <2 x i32> %22, i32 %25, i64 1
  %27 = bitcast <2 x i32> %26 to i64
  %28 = tail call i64 @llvm.smin.i64(i64 %19, i64 %27)
  %29 = trunc i64 %28 to i32
  %30 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %29, i32 264, i32 15, i32 15, i1 false)
  %31 = insertelement <2 x i32> undef, i32 %30, i64 0
  %32 = lshr i64 %28, 32
  %33 = trunc i64 %32 to i32
  %34 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2147483647, i32 %33, i32 264, i32 15, i32 15, i1 false)
  %35 = insertelement <2 x i32> %31, i32 %34, i64 1
  %36 = bitcast <2 x i32> %35 to i64
  %37 = tail call i64 @llvm.smin.i64(i64 %28, i64 %36)
  %38 = trunc i64 %37 to i32
  %39 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %38, i32 336, i32 15, i32 15, i1 false)
  %40 = insertelement <2 x i32> undef, i32 %39, i64 0
  %41 = lshr i64 %37, 32
  %42 = trunc i64 %41 to i32
  %43 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2147483647, i32 %42, i32 336, i32 15, i32 15, i1 false)
  %44 = insertelement <2 x i32> %40, i32 %43, i64 1
  %45 = bitcast <2 x i32> %44 to i64
  %46 = tail call i32 @llvm.amdgcn.permlanex16(i32 -1, i32 %39, i32 0, i32 0, i1 false, i1 false)
  %47 = insertelement <2 x i32> undef, i32 %46, i64 0
  %48 = tail call i32 @llvm.amdgcn.permlanex16(i32 2147483647, i32 %43, i32 0, i32 0, i1 false, i1 false)
  %49 = insertelement <2 x i32> %47, i32 %48, i64 1
  %50 = bitcast <2 x i32> %49 to i64
  %51 = tail call i64 @llvm.smin.i64(i64 %45, i64 %50)
  %52 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %53 = icmp eq i8 %52, 0
  br i1 %53, label %73, label %54

54:                                               ; preds = %1
  %55 = trunc i64 %51 to i32
  %56 = tail call i32 @llvm.amdgcn.readlane(i32 %55, i32 32)
  %57 = insertelement <2 x i32> undef, i32 %56, i64 0
  %58 = lshr i64 %51, 32
  %59 = trunc i64 %58 to i32
  %60 = tail call i32 @llvm.amdgcn.readlane(i32 %59, i32 32)
  %61 = insertelement <2 x i32> %57, i32 %60, i64 1
  %62 = bitcast <2 x i32> %61 to i64
  %63 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %64 = and i32 %63, 1
  %65 = icmp eq i32 %64, 0
  %66 = select i1 %65, i64 9223372036854775807, i64 %62
  %67 = tail call i32 @llvm.amdgcn.readlane(i32 %55, i32 0)
  %68 = insertelement <2 x i32> undef, i32 %67, i64 0
  %69 = tail call i32 @llvm.amdgcn.readlane(i32 %59, i32 0)
  %70 = insertelement <2 x i32> %68, i32 %69, i64 1
  %71 = bitcast <2 x i32> %70 to i64
  %72 = tail call i64 @llvm.smin.i64(i64 %71, i64 %66)
  br label %73

73:                                               ; preds = %54, %1
  %74 = phi i64 [ %72, %54 ], [ %51, %1 ]
  ret i64 %74
}

; Function Attrs: convergent norecurse nounwind
define linkonce_odr protected i64 @__ockl_wfscan_min_i64(i64 noundef %0, i1 noundef zeroext %1) local_unnamed_addr #12 {
  %3 = tail call i32 @__ockl_lane_u32() #58
  %4 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %5 = icmp slt i32 %4, 8000
  br i1 %5, label %6, label %78

6:                                                ; preds = %2
  %7 = trunc i64 %0 to i32
  %8 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %7, i32 30)
  %9 = insertelement <2 x i32> undef, i32 %8, i64 0
  %10 = lshr i64 %0, 32
  %11 = trunc i64 %10 to i32
  %12 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %11, i32 30)
  %13 = insertelement <2 x i32> %9, i32 %12, i64 1
  %14 = bitcast <2 x i32> %13 to i64
  %15 = and i32 %3, 1
  %16 = icmp eq i32 %15, 0
  %17 = select i1 %16, i64 9223372036854775807, i64 %14
  %18 = tail call i64 @llvm.smin.i64(i64 %0, i64 %17)
  %19 = trunc i64 %18 to i32
  %20 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %19, i32 60)
  %21 = insertelement <2 x i32> undef, i32 %20, i64 0
  %22 = lshr i64 %18, 32
  %23 = trunc i64 %22 to i32
  %24 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %23, i32 60)
  %25 = insertelement <2 x i32> %21, i32 %24, i64 1
  %26 = bitcast <2 x i32> %25 to i64
  %27 = and i32 %3, 2
  %28 = icmp eq i32 %27, 0
  %29 = select i1 %28, i64 9223372036854775807, i64 %26
  %30 = tail call i64 @llvm.smin.i64(i64 %18, i64 %29)
  %31 = trunc i64 %30 to i32
  %32 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %31, i32 120)
  %33 = insertelement <2 x i32> undef, i32 %32, i64 0
  %34 = lshr i64 %30, 32
  %35 = trunc i64 %34 to i32
  %36 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %35, i32 120)
  %37 = insertelement <2 x i32> %33, i32 %36, i64 1
  %38 = bitcast <2 x i32> %37 to i64
  %39 = and i32 %3, 4
  %40 = icmp eq i32 %39, 0
  %41 = select i1 %40, i64 9223372036854775807, i64 %38
  %42 = tail call i64 @llvm.smin.i64(i64 %30, i64 %41)
  %43 = trunc i64 %42 to i32
  %44 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %43, i32 240)
  %45 = insertelement <2 x i32> undef, i32 %44, i64 0
  %46 = lshr i64 %42, 32
  %47 = trunc i64 %46 to i32
  %48 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %47, i32 240)
  %49 = insertelement <2 x i32> %45, i32 %48, i64 1
  %50 = bitcast <2 x i32> %49 to i64
  %51 = and i32 %3, 8
  %52 = icmp eq i32 %51, 0
  %53 = select i1 %52, i64 9223372036854775807, i64 %50
  %54 = tail call i64 @llvm.smin.i64(i64 %42, i64 %53)
  %55 = trunc i64 %54 to i32
  %56 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %55, i32 480)
  %57 = insertelement <2 x i32> undef, i32 %56, i64 0
  %58 = lshr i64 %54, 32
  %59 = trunc i64 %58 to i32
  %60 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %59, i32 480)
  %61 = insertelement <2 x i32> %57, i32 %60, i64 1
  %62 = bitcast <2 x i32> %61 to i64
  %63 = and i32 %3, 16
  %64 = icmp eq i32 %63, 0
  %65 = select i1 %64, i64 9223372036854775807, i64 %62
  %66 = tail call i64 @llvm.smin.i64(i64 %54, i64 %65)
  %67 = trunc i64 %66 to i32
  %68 = tail call i32 @llvm.amdgcn.readlane(i32 %67, i32 31)
  %69 = insertelement <2 x i32> undef, i32 %68, i64 0
  %70 = lshr i64 %66, 32
  %71 = trunc i64 %70 to i32
  %72 = tail call i32 @llvm.amdgcn.readlane(i32 %71, i32 31)
  %73 = insertelement <2 x i32> %69, i32 %72, i64 1
  %74 = bitcast <2 x i32> %73 to i64
  %75 = icmp ugt i32 %3, 31
  %76 = select i1 %75, i64 %74, i64 9223372036854775807
  %77 = tail call i64 @llvm.smin.i64(i64 %66, i64 %76)
  br label %84

78:                                               ; preds = %2
  %79 = icmp ult i32 %4, 10000
  br i1 %79, label %80, label %82

80:                                               ; preds = %78
  %81 = tail call fastcc i64 @119(i64 noundef %0) #57
  br label %84

82:                                               ; preds = %78
  %83 = tail call fastcc i64 @120(i64 noundef %0, i32 noundef %3) #57
  br label %84

84:                                               ; preds = %82, %80, %6
  %85 = phi i64 [ %77, %6 ], [ %81, %80 ], [ %83, %82 ]
  br i1 %1, label %131, label %86

86:                                               ; preds = %84
  br i1 %5, label %87, label %125

87:                                               ; preds = %86
  %88 = trunc i64 %85 to i32
  %89 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %88, i32 32912)
  %90 = insertelement <2 x i32> undef, i32 %89, i64 0
  %91 = lshr i64 %85, 32
  %92 = trunc i64 %91 to i32
  %93 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %92, i32 32912)
  %94 = insertelement <2 x i32> %90, i32 %93, i64 1
  %95 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %88, i32 120)
  %96 = insertelement <2 x i32> undef, i32 %95, i64 0
  %97 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %92, i32 120)
  %98 = insertelement <2 x i32> %96, i32 %97, i64 1
  %99 = and i32 %3, 7
  %100 = icmp eq i32 %99, 4
  %101 = select i1 %100, <2 x i32> %98, <2 x i32> %94
  %102 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %88, i32 240)
  %103 = insertelement <2 x i32> undef, i32 %102, i64 0
  %104 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %92, i32 240)
  %105 = insertelement <2 x i32> %103, i32 %104, i64 1
  %106 = and i32 %3, 15
  %107 = icmp eq i32 %106, 8
  %108 = select i1 %107, <2 x i32> %105, <2 x i32> %101
  %109 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %88, i32 480)
  %110 = insertelement <2 x i32> undef, i32 %109, i64 0
  %111 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %92, i32 480)
  %112 = insertelement <2 x i32> %110, i32 %111, i64 1
  %113 = and i32 %3, 31
  %114 = icmp eq i32 %113, 16
  %115 = select i1 %114, <2 x i32> %112, <2 x i32> %108
  %116 = tail call i32 @llvm.amdgcn.readlane(i32 %88, i32 31)
  %117 = insertelement <2 x i32> undef, i32 %116, i64 0
  %118 = tail call i32 @llvm.amdgcn.readlane(i32 %92, i32 31)
  %119 = insertelement <2 x i32> %117, i32 %118, i64 1
  %120 = icmp eq i32 %3, 32
  %121 = select i1 %120, <2 x i32> %119, <2 x i32> %115
  %122 = bitcast <2 x i32> %121 to i64
  %123 = icmp eq i32 %3, 0
  %124 = select i1 %123, i64 9223372036854775807, i64 %122
  br label %131

125:                                              ; preds = %86
  %126 = icmp ult i32 %4, 10000
  br i1 %126, label %127, label %129

127:                                              ; preds = %125
  %128 = tail call fastcc i64 @121(i64 noundef %85) #57
  br label %131

129:                                              ; preds = %125
  %130 = tail call fastcc i64 @122(i64 noundef %85, i32 noundef %3) #57
  br label %131

131:                                              ; preds = %129, %127, %87, %84
  %132 = phi i64 [ %85, %84 ], [ %124, %87 ], [ %128, %127 ], [ %130, %129 ]
  ret i64 %132
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i64 @119(i64 noundef %0) unnamed_addr #54 {
  %2 = trunc i64 %0 to i32
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %2, i32 273, i32 15, i32 15, i1 false)
  %4 = insertelement <2 x i32> undef, i32 %3, i64 0
  %5 = lshr i64 %0, 32
  %6 = trunc i64 %5 to i32
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2147483647, i32 %6, i32 273, i32 15, i32 15, i1 false)
  %8 = insertelement <2 x i32> %4, i32 %7, i64 1
  %9 = bitcast <2 x i32> %8 to i64
  %10 = tail call i64 @llvm.smin.i64(i64 %0, i64 %9)
  %11 = trunc i64 %10 to i32
  %12 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %11, i32 274, i32 15, i32 15, i1 false)
  %13 = insertelement <2 x i32> undef, i32 %12, i64 0
  %14 = lshr i64 %10, 32
  %15 = trunc i64 %14 to i32
  %16 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2147483647, i32 %15, i32 274, i32 15, i32 15, i1 false)
  %17 = insertelement <2 x i32> %13, i32 %16, i64 1
  %18 = bitcast <2 x i32> %17 to i64
  %19 = tail call i64 @llvm.smin.i64(i64 %10, i64 %18)
  %20 = trunc i64 %19 to i32
  %21 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %20, i32 276, i32 15, i32 15, i1 false)
  %22 = insertelement <2 x i32> undef, i32 %21, i64 0
  %23 = lshr i64 %19, 32
  %24 = trunc i64 %23 to i32
  %25 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2147483647, i32 %24, i32 276, i32 15, i32 15, i1 false)
  %26 = insertelement <2 x i32> %22, i32 %25, i64 1
  %27 = bitcast <2 x i32> %26 to i64
  %28 = tail call i64 @llvm.smin.i64(i64 %19, i64 %27)
  %29 = trunc i64 %28 to i32
  %30 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %29, i32 280, i32 15, i32 15, i1 false)
  %31 = insertelement <2 x i32> undef, i32 %30, i64 0
  %32 = lshr i64 %28, 32
  %33 = trunc i64 %32 to i32
  %34 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2147483647, i32 %33, i32 280, i32 15, i32 15, i1 false)
  %35 = insertelement <2 x i32> %31, i32 %34, i64 1
  %36 = bitcast <2 x i32> %35 to i64
  %37 = tail call i64 @llvm.smin.i64(i64 %28, i64 %36)
  %38 = trunc i64 %37 to i32
  %39 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %38, i32 322, i32 10, i32 15, i1 false)
  %40 = insertelement <2 x i32> undef, i32 %39, i64 0
  %41 = lshr i64 %37, 32
  %42 = trunc i64 %41 to i32
  %43 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2147483647, i32 %42, i32 322, i32 10, i32 15, i1 false)
  %44 = insertelement <2 x i32> %40, i32 %43, i64 1
  %45 = bitcast <2 x i32> %44 to i64
  %46 = tail call i64 @llvm.smin.i64(i64 %37, i64 %45)
  %47 = trunc i64 %46 to i32
  %48 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %47, i32 323, i32 12, i32 15, i1 false)
  %49 = insertelement <2 x i32> undef, i32 %48, i64 0
  %50 = lshr i64 %46, 32
  %51 = trunc i64 %50 to i32
  %52 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2147483647, i32 %51, i32 323, i32 12, i32 15, i1 false)
  %53 = insertelement <2 x i32> %49, i32 %52, i64 1
  %54 = bitcast <2 x i32> %53 to i64
  %55 = tail call i64 @llvm.smin.i64(i64 %46, i64 %54)
  ret i64 %55
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i64 @120(i64 noundef %0, i32 noundef %1) unnamed_addr #55 {
  %3 = trunc i64 %0 to i32
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %3, i32 273, i32 15, i32 15, i1 false)
  %5 = insertelement <2 x i32> undef, i32 %4, i64 0
  %6 = lshr i64 %0, 32
  %7 = trunc i64 %6 to i32
  %8 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2147483647, i32 %7, i32 273, i32 15, i32 15, i1 false)
  %9 = insertelement <2 x i32> %5, i32 %8, i64 1
  %10 = bitcast <2 x i32> %9 to i64
  %11 = tail call i64 @llvm.smin.i64(i64 %0, i64 %10)
  %12 = trunc i64 %11 to i32
  %13 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %12, i32 274, i32 15, i32 15, i1 false)
  %14 = insertelement <2 x i32> undef, i32 %13, i64 0
  %15 = lshr i64 %11, 32
  %16 = trunc i64 %15 to i32
  %17 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2147483647, i32 %16, i32 274, i32 15, i32 15, i1 false)
  %18 = insertelement <2 x i32> %14, i32 %17, i64 1
  %19 = bitcast <2 x i32> %18 to i64
  %20 = tail call i64 @llvm.smin.i64(i64 %11, i64 %19)
  %21 = trunc i64 %20 to i32
  %22 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %21, i32 276, i32 15, i32 15, i1 false)
  %23 = insertelement <2 x i32> undef, i32 %22, i64 0
  %24 = lshr i64 %20, 32
  %25 = trunc i64 %24 to i32
  %26 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2147483647, i32 %25, i32 276, i32 15, i32 15, i1 false)
  %27 = insertelement <2 x i32> %23, i32 %26, i64 1
  %28 = bitcast <2 x i32> %27 to i64
  %29 = tail call i64 @llvm.smin.i64(i64 %20, i64 %28)
  %30 = trunc i64 %29 to i32
  %31 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %30, i32 280, i32 15, i32 15, i1 false)
  %32 = insertelement <2 x i32> undef, i32 %31, i64 0
  %33 = lshr i64 %29, 32
  %34 = trunc i64 %33 to i32
  %35 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2147483647, i32 %34, i32 280, i32 15, i32 15, i1 false)
  %36 = insertelement <2 x i32> %32, i32 %35, i64 1
  %37 = bitcast <2 x i32> %36 to i64
  %38 = tail call i64 @llvm.smin.i64(i64 %29, i64 %37)
  %39 = trunc i64 %38 to i32
  %40 = tail call i32 @llvm.amdgcn.permlanex16(i32 -1, i32 %39, i32 -1, i32 -1, i1 false, i1 false)
  %41 = insertelement <2 x i32> undef, i32 %40, i64 0
  %42 = lshr i64 %38, 32
  %43 = trunc i64 %42 to i32
  %44 = tail call i32 @llvm.amdgcn.permlanex16(i32 2147483647, i32 %43, i32 -1, i32 -1, i1 false, i1 false)
  %45 = insertelement <2 x i32> %41, i32 %44, i64 1
  %46 = bitcast <2 x i32> %45 to i64
  %47 = and i32 %1, 16
  %48 = icmp eq i32 %47, 0
  %49 = select i1 %48, i64 9223372036854775807, i64 %46
  %50 = tail call i64 @llvm.smin.i64(i64 %38, i64 %49)
  %51 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %52 = icmp eq i8 %51, 0
  br i1 %52, label %65, label %53

53:                                               ; preds = %2
  %54 = trunc i64 %50 to i32
  %55 = tail call i32 @llvm.amdgcn.readlane(i32 %54, i32 31)
  %56 = insertelement <2 x i32> undef, i32 %55, i64 0
  %57 = lshr i64 %50, 32
  %58 = trunc i64 %57 to i32
  %59 = tail call i32 @llvm.amdgcn.readlane(i32 %58, i32 31)
  %60 = insertelement <2 x i32> %56, i32 %59, i64 1
  %61 = bitcast <2 x i32> %60 to i64
  %62 = icmp ugt i32 %1, 31
  %63 = select i1 %62, i64 %61, i64 9223372036854775807
  %64 = tail call i64 @llvm.smin.i64(i64 %50, i64 %63)
  br label %65

65:                                               ; preds = %53, %2
  %66 = phi i64 [ %64, %53 ], [ %50, %2 ]
  ret i64 %66
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i64 @121(i64 noundef %0) unnamed_addr #54 {
  %2 = trunc i64 %0 to i32
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %2, i32 312, i32 15, i32 15, i1 false)
  %4 = insertelement <2 x i32> undef, i32 %3, i64 0
  %5 = lshr i64 %0, 32
  %6 = trunc i64 %5 to i32
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2147483647, i32 %6, i32 312, i32 15, i32 15, i1 false)
  %8 = insertelement <2 x i32> %4, i32 %7, i64 1
  %9 = bitcast <2 x i32> %8 to i64
  ret i64 %9
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i64 @122(i64 noundef %0, i32 noundef %1) unnamed_addr #55 {
  %3 = trunc i64 %0 to i32
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %3, i32 273, i32 15, i32 15, i1 false)
  %5 = insertelement <2 x i32> undef, i32 %4, i64 0
  %6 = lshr i64 %0, 32
  %7 = trunc i64 %6 to i32
  %8 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2147483647, i32 %7, i32 273, i32 15, i32 15, i1 false)
  %9 = insertelement <2 x i32> %5, i32 %8, i64 1
  %10 = bitcast <2 x i32> %9 to i64
  %11 = tail call i32 @llvm.amdgcn.permlanex16(i32 -1, i32 %3, i32 -1, i32 -1, i1 false, i1 false)
  %12 = insertelement <2 x i32> undef, i32 %11, i64 0
  %13 = tail call i32 @llvm.amdgcn.permlanex16(i32 2147483647, i32 %7, i32 -1, i32 -1, i1 false, i1 false)
  %14 = insertelement <2 x i32> %12, i32 %13, i64 1
  %15 = bitcast <2 x i32> %14 to i64
  %16 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %30, label %18

18:                                               ; preds = %2
  %19 = tail call i32 @llvm.amdgcn.readlane(i32 %3, i32 31)
  %20 = insertelement <2 x i32> undef, i32 %19, i64 0
  %21 = tail call i32 @llvm.amdgcn.readlane(i32 %7, i32 31)
  %22 = insertelement <2 x i32> %20, i32 %21, i64 1
  %23 = bitcast <2 x i32> %22 to i64
  %24 = icmp eq i32 %1, 32
  %25 = select i1 %24, i64 %23, i64 %15
  %26 = and i32 %1, 31
  %27 = icmp eq i32 %26, 16
  %28 = or i1 %24, %27
  %29 = select i1 %28, i64 %25, i64 %10
  br label %33

30:                                               ; preds = %2
  %31 = icmp eq i32 %1, 16
  %32 = select i1 %31, i64 %15, i64 %10
  br label %33

33:                                               ; preds = %30, %18
  %34 = phi i64 [ %29, %18 ], [ %32, %30 ]
  ret i64 %34
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected i64 @__ockl_wfred_min_u64(i64 noundef %0) local_unnamed_addr #0 {
  %2 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %3 = icmp slt i32 %2, 8000
  br i1 %3, label %4, label %157

4:                                                ; preds = %1
  %5 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %10, label %7

7:                                                ; preds = %4
  %8 = tail call i64 @llvm.read_register.i64(metadata !36) #57
  %9 = icmp eq i64 %8, -1
  br label %13

10:                                               ; preds = %4
  %11 = tail call i32 @llvm.read_register.i32(metadata !10) #57
  %12 = icmp eq i32 %11, -1
  br label %13

13:                                               ; preds = %10, %7
  %14 = phi i1 [ %9, %7 ], [ %12, %10 ]
  %15 = trunc i64 %0 to i32
  %16 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %15, i32 32945)
  br i1 %14, label %17, label %75

17:                                               ; preds = %13
  %18 = insertelement <2 x i32> undef, i32 %16, i64 0
  %19 = lshr i64 %0, 32
  %20 = trunc i64 %19 to i32
  %21 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %20, i32 32945)
  %22 = insertelement <2 x i32> %18, i32 %21, i64 1
  %23 = bitcast <2 x i32> %22 to i64
  %24 = tail call i64 @llvm.umin.i64(i64 %0, i64 %23)
  %25 = trunc i64 %24 to i32
  %26 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %25, i32 32846)
  %27 = insertelement <2 x i32> undef, i32 %26, i64 0
  %28 = lshr i64 %24, 32
  %29 = trunc i64 %28 to i32
  %30 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %29, i32 32846)
  %31 = insertelement <2 x i32> %27, i32 %30, i64 1
  %32 = bitcast <2 x i32> %31 to i64
  %33 = tail call i64 @llvm.umin.i64(i64 %24, i64 %32)
  %34 = trunc i64 %33 to i32
  %35 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %34, i32 4127)
  %36 = insertelement <2 x i32> undef, i32 %35, i64 0
  %37 = lshr i64 %33, 32
  %38 = trunc i64 %37 to i32
  %39 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %38, i32 4127)
  %40 = insertelement <2 x i32> %36, i32 %39, i64 1
  %41 = bitcast <2 x i32> %40 to i64
  %42 = tail call i64 @llvm.umin.i64(i64 %33, i64 %41)
  %43 = trunc i64 %42 to i32
  %44 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %43, i32 8223)
  %45 = insertelement <2 x i32> undef, i32 %44, i64 0
  %46 = lshr i64 %42, 32
  %47 = trunc i64 %46 to i32
  %48 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %47, i32 8223)
  %49 = insertelement <2 x i32> %45, i32 %48, i64 1
  %50 = bitcast <2 x i32> %49 to i64
  %51 = tail call i64 @llvm.umin.i64(i64 %42, i64 %50)
  %52 = trunc i64 %51 to i32
  %53 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %52, i32 16415)
  %54 = insertelement <2 x i32> undef, i32 %53, i64 0
  %55 = lshr i64 %51, 32
  %56 = trunc i64 %55 to i32
  %57 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %56, i32 16415)
  %58 = insertelement <2 x i32> %54, i32 %57, i64 1
  %59 = bitcast <2 x i32> %58 to i64
  %60 = tail call i64 @llvm.umin.i64(i64 %51, i64 %59)
  %61 = trunc i64 %60 to i32
  %62 = tail call i32 @llvm.amdgcn.readlane(i32 %61, i32 0)
  %63 = insertelement <2 x i32> undef, i32 %62, i64 0
  %64 = lshr i64 %60, 32
  %65 = trunc i64 %64 to i32
  %66 = tail call i32 @llvm.amdgcn.readlane(i32 %65, i32 0)
  %67 = insertelement <2 x i32> %63, i32 %66, i64 1
  %68 = bitcast <2 x i32> %67 to i64
  %69 = tail call i32 @llvm.amdgcn.readlane(i32 %61, i32 32)
  %70 = insertelement <2 x i32> undef, i32 %69, i64 0
  %71 = tail call i32 @llvm.amdgcn.readlane(i32 %65, i32 32)
  %72 = insertelement <2 x i32> %70, i32 %71, i64 1
  %73 = bitcast <2 x i32> %72 to i64
  %74 = tail call i64 @llvm.umin.i64(i64 %68, i64 %73)
  br label %163

75:                                               ; preds = %13
  %76 = lshr i64 %0, 32
  %77 = trunc i64 %76 to i32
  %78 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %77, i32 32945)
  %79 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 32945)
  %80 = xor i32 %79, -1
  %81 = or i32 %16, %80
  %82 = insertelement <2 x i32> undef, i32 %81, i64 0
  %83 = or i32 %78, %80
  %84 = insertelement <2 x i32> %82, i32 %83, i64 1
  %85 = bitcast <2 x i32> %84 to i64
  %86 = tail call i64 @llvm.umin.i64(i64 %0, i64 %85)
  %87 = trunc i64 %86 to i32
  %88 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %87, i32 32846)
  %89 = lshr i64 %86, 32
  %90 = trunc i64 %89 to i32
  %91 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %90, i32 32846)
  %92 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 32846)
  %93 = xor i32 %92, -1
  %94 = or i32 %88, %93
  %95 = insertelement <2 x i32> undef, i32 %94, i64 0
  %96 = or i32 %91, %93
  %97 = insertelement <2 x i32> %95, i32 %96, i64 1
  %98 = bitcast <2 x i32> %97 to i64
  %99 = tail call i64 @llvm.umin.i64(i64 %86, i64 %98)
  %100 = trunc i64 %99 to i32
  %101 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %100, i32 4127)
  %102 = lshr i64 %99, 32
  %103 = trunc i64 %102 to i32
  %104 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %103, i32 4127)
  %105 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 4127)
  %106 = xor i32 %105, -1
  %107 = or i32 %101, %106
  %108 = insertelement <2 x i32> undef, i32 %107, i64 0
  %109 = or i32 %104, %106
  %110 = insertelement <2 x i32> %108, i32 %109, i64 1
  %111 = bitcast <2 x i32> %110 to i64
  %112 = tail call i64 @llvm.umin.i64(i64 %99, i64 %111)
  %113 = trunc i64 %112 to i32
  %114 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %113, i32 8223)
  %115 = lshr i64 %112, 32
  %116 = trunc i64 %115 to i32
  %117 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %116, i32 8223)
  %118 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 8223)
  %119 = xor i32 %118, -1
  %120 = or i32 %114, %119
  %121 = insertelement <2 x i32> undef, i32 %120, i64 0
  %122 = or i32 %117, %119
  %123 = insertelement <2 x i32> %121, i32 %122, i64 1
  %124 = bitcast <2 x i32> %123 to i64
  %125 = tail call i64 @llvm.umin.i64(i64 %112, i64 %124)
  %126 = trunc i64 %125 to i32
  %127 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %126, i32 16415)
  %128 = lshr i64 %125, 32
  %129 = trunc i64 %128 to i32
  %130 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %129, i32 16415)
  %131 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 16415)
  %132 = xor i32 %131, -1
  %133 = or i32 %127, %132
  %134 = insertelement <2 x i32> undef, i32 %133, i64 0
  %135 = or i32 %130, %132
  %136 = insertelement <2 x i32> %134, i32 %135, i64 1
  %137 = bitcast <2 x i32> %136 to i64
  %138 = tail call i64 @llvm.umin.i64(i64 %125, i64 %137)
  %139 = trunc i64 %138 to i32
  %140 = tail call i32 @llvm.amdgcn.readlane(i32 %139, i32 32)
  %141 = insertelement <2 x i32> undef, i32 %140, i64 0
  %142 = lshr i64 %138, 32
  %143 = trunc i64 %142 to i32
  %144 = tail call i32 @llvm.amdgcn.readlane(i32 %143, i32 32)
  %145 = insertelement <2 x i32> %141, i32 %144, i64 1
  %146 = bitcast <2 x i32> %145 to i64
  %147 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %148 = and i32 %147, 1
  %149 = icmp eq i32 %148, 0
  %150 = select i1 %149, i64 -1, i64 %146
  %151 = tail call i32 @llvm.amdgcn.readlane(i32 %139, i32 0)
  %152 = insertelement <2 x i32> undef, i32 %151, i64 0
  %153 = tail call i32 @llvm.amdgcn.readlane(i32 %143, i32 0)
  %154 = insertelement <2 x i32> %152, i32 %153, i64 1
  %155 = bitcast <2 x i32> %154 to i64
  %156 = tail call i64 @llvm.umin.i64(i64 %155, i64 %150)
  br label %163

157:                                              ; preds = %1
  %158 = icmp ult i32 %2, 10000
  br i1 %158, label %159, label %161

159:                                              ; preds = %157
  %160 = tail call fastcc i64 @123(i64 noundef %0) #57
  br label %163

161:                                              ; preds = %157
  %162 = tail call fastcc i64 @124(i64 noundef %0) #57
  br label %163

163:                                              ; preds = %161, %159, %75, %17
  %164 = phi i64 [ %74, %17 ], [ %156, %75 ], [ %160, %159 ], [ %162, %161 ]
  ret i64 %164
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc i64 @123(i64 noundef %0) unnamed_addr #52 {
  %2 = trunc i64 %0 to i32
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %2, i32 257, i32 15, i32 15, i1 false)
  %4 = insertelement <2 x i32> undef, i32 %3, i64 0
  %5 = lshr i64 %0, 32
  %6 = trunc i64 %5 to i32
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %6, i32 257, i32 15, i32 15, i1 false)
  %8 = insertelement <2 x i32> %4, i32 %7, i64 1
  %9 = bitcast <2 x i32> %8 to i64
  %10 = tail call i64 @llvm.umin.i64(i64 %0, i64 %9)
  %11 = trunc i64 %10 to i32
  %12 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %11, i32 258, i32 15, i32 15, i1 false)
  %13 = insertelement <2 x i32> undef, i32 %12, i64 0
  %14 = lshr i64 %10, 32
  %15 = trunc i64 %14 to i32
  %16 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %15, i32 258, i32 15, i32 15, i1 false)
  %17 = insertelement <2 x i32> %13, i32 %16, i64 1
  %18 = bitcast <2 x i32> %17 to i64
  %19 = tail call i64 @llvm.umin.i64(i64 %10, i64 %18)
  %20 = trunc i64 %19 to i32
  %21 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %20, i32 260, i32 15, i32 15, i1 false)
  %22 = insertelement <2 x i32> undef, i32 %21, i64 0
  %23 = lshr i64 %19, 32
  %24 = trunc i64 %23 to i32
  %25 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %24, i32 260, i32 15, i32 15, i1 false)
  %26 = insertelement <2 x i32> %22, i32 %25, i64 1
  %27 = bitcast <2 x i32> %26 to i64
  %28 = tail call i64 @llvm.umin.i64(i64 %19, i64 %27)
  %29 = trunc i64 %28 to i32
  %30 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %29, i32 264, i32 15, i32 15, i1 false)
  %31 = insertelement <2 x i32> undef, i32 %30, i64 0
  %32 = lshr i64 %28, 32
  %33 = trunc i64 %32 to i32
  %34 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %33, i32 264, i32 15, i32 15, i1 false)
  %35 = insertelement <2 x i32> %31, i32 %34, i64 1
  %36 = bitcast <2 x i32> %35 to i64
  %37 = tail call i64 @llvm.umin.i64(i64 %28, i64 %36)
  %38 = trunc i64 %37 to i32
  %39 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %38, i32 304, i32 15, i32 15, i1 false)
  %40 = lshr i64 %37, 32
  %41 = trunc i64 %40 to i32
  %42 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %41, i32 304, i32 15, i32 15, i1 false)
  %43 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %39, i32 320, i32 15, i32 15, i1 false)
  %44 = insertelement <2 x i32> undef, i32 %43, i64 0
  %45 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %42, i32 320, i32 15, i32 15, i1 false)
  %46 = insertelement <2 x i32> %44, i32 %45, i64 1
  %47 = bitcast <2 x i32> %46 to i64
  %48 = tail call i64 @llvm.umin.i64(i64 %37, i64 %47)
  %49 = trunc i64 %48 to i32
  %50 = tail call i32 @llvm.amdgcn.readlane(i32 %49, i32 32)
  %51 = insertelement <2 x i32> undef, i32 %50, i64 0
  %52 = lshr i64 %48, 32
  %53 = trunc i64 %52 to i32
  %54 = tail call i32 @llvm.amdgcn.readlane(i32 %53, i32 32)
  %55 = insertelement <2 x i32> %51, i32 %54, i64 1
  %56 = bitcast <2 x i32> %55 to i64
  %57 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %58 = and i32 %57, 1
  %59 = icmp eq i32 %58, 0
  %60 = select i1 %59, i64 -1, i64 %56
  %61 = tail call i32 @llvm.amdgcn.readlane(i32 %49, i32 0)
  %62 = insertelement <2 x i32> undef, i32 %61, i64 0
  %63 = tail call i32 @llvm.amdgcn.readlane(i32 %53, i32 0)
  %64 = insertelement <2 x i32> %62, i32 %63, i64 1
  %65 = bitcast <2 x i32> %64 to i64
  %66 = tail call i64 @llvm.umin.i64(i64 %65, i64 %60)
  ret i64 %66
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc i64 @124(i64 noundef %0) unnamed_addr #53 {
  %2 = trunc i64 %0 to i32
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %2, i32 257, i32 15, i32 15, i1 false)
  %4 = insertelement <2 x i32> undef, i32 %3, i64 0
  %5 = lshr i64 %0, 32
  %6 = trunc i64 %5 to i32
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %6, i32 257, i32 15, i32 15, i1 false)
  %8 = insertelement <2 x i32> %4, i32 %7, i64 1
  %9 = bitcast <2 x i32> %8 to i64
  %10 = tail call i64 @llvm.umin.i64(i64 %0, i64 %9)
  %11 = trunc i64 %10 to i32
  %12 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %11, i32 258, i32 15, i32 15, i1 false)
  %13 = insertelement <2 x i32> undef, i32 %12, i64 0
  %14 = lshr i64 %10, 32
  %15 = trunc i64 %14 to i32
  %16 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %15, i32 258, i32 15, i32 15, i1 false)
  %17 = insertelement <2 x i32> %13, i32 %16, i64 1
  %18 = bitcast <2 x i32> %17 to i64
  %19 = tail call i64 @llvm.umin.i64(i64 %10, i64 %18)
  %20 = trunc i64 %19 to i32
  %21 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %20, i32 260, i32 15, i32 15, i1 false)
  %22 = insertelement <2 x i32> undef, i32 %21, i64 0
  %23 = lshr i64 %19, 32
  %24 = trunc i64 %23 to i32
  %25 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %24, i32 260, i32 15, i32 15, i1 false)
  %26 = insertelement <2 x i32> %22, i32 %25, i64 1
  %27 = bitcast <2 x i32> %26 to i64
  %28 = tail call i64 @llvm.umin.i64(i64 %19, i64 %27)
  %29 = trunc i64 %28 to i32
  %30 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %29, i32 264, i32 15, i32 15, i1 false)
  %31 = insertelement <2 x i32> undef, i32 %30, i64 0
  %32 = lshr i64 %28, 32
  %33 = trunc i64 %32 to i32
  %34 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %33, i32 264, i32 15, i32 15, i1 false)
  %35 = insertelement <2 x i32> %31, i32 %34, i64 1
  %36 = bitcast <2 x i32> %35 to i64
  %37 = tail call i64 @llvm.umin.i64(i64 %28, i64 %36)
  %38 = trunc i64 %37 to i32
  %39 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %38, i32 336, i32 15, i32 15, i1 false)
  %40 = insertelement <2 x i32> undef, i32 %39, i64 0
  %41 = lshr i64 %37, 32
  %42 = trunc i64 %41 to i32
  %43 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %42, i32 336, i32 15, i32 15, i1 false)
  %44 = insertelement <2 x i32> %40, i32 %43, i64 1
  %45 = bitcast <2 x i32> %44 to i64
  %46 = tail call i32 @llvm.amdgcn.permlanex16(i32 -1, i32 %39, i32 0, i32 0, i1 false, i1 false)
  %47 = insertelement <2 x i32> undef, i32 %46, i64 0
  %48 = tail call i32 @llvm.amdgcn.permlanex16(i32 -1, i32 %43, i32 0, i32 0, i1 false, i1 false)
  %49 = insertelement <2 x i32> %47, i32 %48, i64 1
  %50 = bitcast <2 x i32> %49 to i64
  %51 = tail call i64 @llvm.umin.i64(i64 %45, i64 %50)
  %52 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %53 = icmp eq i8 %52, 0
  br i1 %53, label %73, label %54

54:                                               ; preds = %1
  %55 = trunc i64 %51 to i32
  %56 = tail call i32 @llvm.amdgcn.readlane(i32 %55, i32 32)
  %57 = insertelement <2 x i32> undef, i32 %56, i64 0
  %58 = lshr i64 %51, 32
  %59 = trunc i64 %58 to i32
  %60 = tail call i32 @llvm.amdgcn.readlane(i32 %59, i32 32)
  %61 = insertelement <2 x i32> %57, i32 %60, i64 1
  %62 = bitcast <2 x i32> %61 to i64
  %63 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %64 = and i32 %63, 1
  %65 = icmp eq i32 %64, 0
  %66 = select i1 %65, i64 -1, i64 %62
  %67 = tail call i32 @llvm.amdgcn.readlane(i32 %55, i32 0)
  %68 = insertelement <2 x i32> undef, i32 %67, i64 0
  %69 = tail call i32 @llvm.amdgcn.readlane(i32 %59, i32 0)
  %70 = insertelement <2 x i32> %68, i32 %69, i64 1
  %71 = bitcast <2 x i32> %70 to i64
  %72 = tail call i64 @llvm.umin.i64(i64 %71, i64 %66)
  br label %73

73:                                               ; preds = %54, %1
  %74 = phi i64 [ %72, %54 ], [ %51, %1 ]
  ret i64 %74
}

; Function Attrs: convergent norecurse nounwind
define linkonce_odr protected i64 @__ockl_wfscan_min_u64(i64 noundef %0, i1 noundef zeroext %1) local_unnamed_addr #12 {
  %3 = tail call i32 @__ockl_lane_u32() #58
  %4 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %5 = icmp slt i32 %4, 8000
  br i1 %5, label %6, label %78

6:                                                ; preds = %2
  %7 = trunc i64 %0 to i32
  %8 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %7, i32 30)
  %9 = insertelement <2 x i32> undef, i32 %8, i64 0
  %10 = lshr i64 %0, 32
  %11 = trunc i64 %10 to i32
  %12 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %11, i32 30)
  %13 = insertelement <2 x i32> %9, i32 %12, i64 1
  %14 = bitcast <2 x i32> %13 to i64
  %15 = and i32 %3, 1
  %16 = icmp eq i32 %15, 0
  %17 = select i1 %16, i64 -1, i64 %14
  %18 = tail call i64 @llvm.umin.i64(i64 %0, i64 %17)
  %19 = trunc i64 %18 to i32
  %20 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %19, i32 60)
  %21 = insertelement <2 x i32> undef, i32 %20, i64 0
  %22 = lshr i64 %18, 32
  %23 = trunc i64 %22 to i32
  %24 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %23, i32 60)
  %25 = insertelement <2 x i32> %21, i32 %24, i64 1
  %26 = bitcast <2 x i32> %25 to i64
  %27 = and i32 %3, 2
  %28 = icmp eq i32 %27, 0
  %29 = select i1 %28, i64 -1, i64 %26
  %30 = tail call i64 @llvm.umin.i64(i64 %18, i64 %29)
  %31 = trunc i64 %30 to i32
  %32 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %31, i32 120)
  %33 = insertelement <2 x i32> undef, i32 %32, i64 0
  %34 = lshr i64 %30, 32
  %35 = trunc i64 %34 to i32
  %36 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %35, i32 120)
  %37 = insertelement <2 x i32> %33, i32 %36, i64 1
  %38 = bitcast <2 x i32> %37 to i64
  %39 = and i32 %3, 4
  %40 = icmp eq i32 %39, 0
  %41 = select i1 %40, i64 -1, i64 %38
  %42 = tail call i64 @llvm.umin.i64(i64 %30, i64 %41)
  %43 = trunc i64 %42 to i32
  %44 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %43, i32 240)
  %45 = insertelement <2 x i32> undef, i32 %44, i64 0
  %46 = lshr i64 %42, 32
  %47 = trunc i64 %46 to i32
  %48 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %47, i32 240)
  %49 = insertelement <2 x i32> %45, i32 %48, i64 1
  %50 = bitcast <2 x i32> %49 to i64
  %51 = and i32 %3, 8
  %52 = icmp eq i32 %51, 0
  %53 = select i1 %52, i64 -1, i64 %50
  %54 = tail call i64 @llvm.umin.i64(i64 %42, i64 %53)
  %55 = trunc i64 %54 to i32
  %56 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %55, i32 480)
  %57 = insertelement <2 x i32> undef, i32 %56, i64 0
  %58 = lshr i64 %54, 32
  %59 = trunc i64 %58 to i32
  %60 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %59, i32 480)
  %61 = insertelement <2 x i32> %57, i32 %60, i64 1
  %62 = bitcast <2 x i32> %61 to i64
  %63 = and i32 %3, 16
  %64 = icmp eq i32 %63, 0
  %65 = select i1 %64, i64 -1, i64 %62
  %66 = tail call i64 @llvm.umin.i64(i64 %54, i64 %65)
  %67 = trunc i64 %66 to i32
  %68 = tail call i32 @llvm.amdgcn.readlane(i32 %67, i32 31)
  %69 = insertelement <2 x i32> undef, i32 %68, i64 0
  %70 = lshr i64 %66, 32
  %71 = trunc i64 %70 to i32
  %72 = tail call i32 @llvm.amdgcn.readlane(i32 %71, i32 31)
  %73 = insertelement <2 x i32> %69, i32 %72, i64 1
  %74 = bitcast <2 x i32> %73 to i64
  %75 = icmp ugt i32 %3, 31
  %76 = select i1 %75, i64 %74, i64 -1
  %77 = tail call i64 @llvm.umin.i64(i64 %66, i64 %76)
  br label %84

78:                                               ; preds = %2
  %79 = icmp ult i32 %4, 10000
  br i1 %79, label %80, label %82

80:                                               ; preds = %78
  %81 = tail call fastcc i64 @125(i64 noundef %0) #57
  br label %84

82:                                               ; preds = %78
  %83 = tail call fastcc i64 @126(i64 noundef %0, i32 noundef %3) #57
  br label %84

84:                                               ; preds = %82, %80, %6
  %85 = phi i64 [ %77, %6 ], [ %81, %80 ], [ %83, %82 ]
  br i1 %1, label %131, label %86

86:                                               ; preds = %84
  br i1 %5, label %87, label %125

87:                                               ; preds = %86
  %88 = trunc i64 %85 to i32
  %89 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %88, i32 32912)
  %90 = insertelement <2 x i32> undef, i32 %89, i64 0
  %91 = lshr i64 %85, 32
  %92 = trunc i64 %91 to i32
  %93 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %92, i32 32912)
  %94 = insertelement <2 x i32> %90, i32 %93, i64 1
  %95 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %88, i32 120)
  %96 = insertelement <2 x i32> undef, i32 %95, i64 0
  %97 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %92, i32 120)
  %98 = insertelement <2 x i32> %96, i32 %97, i64 1
  %99 = and i32 %3, 7
  %100 = icmp eq i32 %99, 4
  %101 = select i1 %100, <2 x i32> %98, <2 x i32> %94
  %102 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %88, i32 240)
  %103 = insertelement <2 x i32> undef, i32 %102, i64 0
  %104 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %92, i32 240)
  %105 = insertelement <2 x i32> %103, i32 %104, i64 1
  %106 = and i32 %3, 15
  %107 = icmp eq i32 %106, 8
  %108 = select i1 %107, <2 x i32> %105, <2 x i32> %101
  %109 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %88, i32 480)
  %110 = insertelement <2 x i32> undef, i32 %109, i64 0
  %111 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %92, i32 480)
  %112 = insertelement <2 x i32> %110, i32 %111, i64 1
  %113 = and i32 %3, 31
  %114 = icmp eq i32 %113, 16
  %115 = select i1 %114, <2 x i32> %112, <2 x i32> %108
  %116 = tail call i32 @llvm.amdgcn.readlane(i32 %88, i32 31)
  %117 = insertelement <2 x i32> undef, i32 %116, i64 0
  %118 = tail call i32 @llvm.amdgcn.readlane(i32 %92, i32 31)
  %119 = insertelement <2 x i32> %117, i32 %118, i64 1
  %120 = icmp eq i32 %3, 32
  %121 = select i1 %120, <2 x i32> %119, <2 x i32> %115
  %122 = bitcast <2 x i32> %121 to i64
  %123 = icmp eq i32 %3, 0
  %124 = select i1 %123, i64 -1, i64 %122
  br label %131

125:                                              ; preds = %86
  %126 = icmp ult i32 %4, 10000
  br i1 %126, label %127, label %129

127:                                              ; preds = %125
  %128 = tail call fastcc i64 @127(i64 noundef %85) #57
  br label %131

129:                                              ; preds = %125
  %130 = tail call fastcc i64 @128(i64 noundef %85, i32 noundef %3) #57
  br label %131

131:                                              ; preds = %129, %127, %87, %84
  %132 = phi i64 [ %85, %84 ], [ %124, %87 ], [ %128, %127 ], [ %130, %129 ]
  ret i64 %132
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i64 @125(i64 noundef %0) unnamed_addr #54 {
  %2 = trunc i64 %0 to i32
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %2, i32 273, i32 15, i32 15, i1 false)
  %4 = insertelement <2 x i32> undef, i32 %3, i64 0
  %5 = lshr i64 %0, 32
  %6 = trunc i64 %5 to i32
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %6, i32 273, i32 15, i32 15, i1 false)
  %8 = insertelement <2 x i32> %4, i32 %7, i64 1
  %9 = bitcast <2 x i32> %8 to i64
  %10 = tail call i64 @llvm.umin.i64(i64 %0, i64 %9)
  %11 = trunc i64 %10 to i32
  %12 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %11, i32 274, i32 15, i32 15, i1 false)
  %13 = insertelement <2 x i32> undef, i32 %12, i64 0
  %14 = lshr i64 %10, 32
  %15 = trunc i64 %14 to i32
  %16 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %15, i32 274, i32 15, i32 15, i1 false)
  %17 = insertelement <2 x i32> %13, i32 %16, i64 1
  %18 = bitcast <2 x i32> %17 to i64
  %19 = tail call i64 @llvm.umin.i64(i64 %10, i64 %18)
  %20 = trunc i64 %19 to i32
  %21 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %20, i32 276, i32 15, i32 15, i1 false)
  %22 = insertelement <2 x i32> undef, i32 %21, i64 0
  %23 = lshr i64 %19, 32
  %24 = trunc i64 %23 to i32
  %25 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %24, i32 276, i32 15, i32 15, i1 false)
  %26 = insertelement <2 x i32> %22, i32 %25, i64 1
  %27 = bitcast <2 x i32> %26 to i64
  %28 = tail call i64 @llvm.umin.i64(i64 %19, i64 %27)
  %29 = trunc i64 %28 to i32
  %30 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %29, i32 280, i32 15, i32 15, i1 false)
  %31 = insertelement <2 x i32> undef, i32 %30, i64 0
  %32 = lshr i64 %28, 32
  %33 = trunc i64 %32 to i32
  %34 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %33, i32 280, i32 15, i32 15, i1 false)
  %35 = insertelement <2 x i32> %31, i32 %34, i64 1
  %36 = bitcast <2 x i32> %35 to i64
  %37 = tail call i64 @llvm.umin.i64(i64 %28, i64 %36)
  %38 = trunc i64 %37 to i32
  %39 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %38, i32 322, i32 10, i32 15, i1 false)
  %40 = insertelement <2 x i32> undef, i32 %39, i64 0
  %41 = lshr i64 %37, 32
  %42 = trunc i64 %41 to i32
  %43 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %42, i32 322, i32 10, i32 15, i1 false)
  %44 = insertelement <2 x i32> %40, i32 %43, i64 1
  %45 = bitcast <2 x i32> %44 to i64
  %46 = tail call i64 @llvm.umin.i64(i64 %37, i64 %45)
  %47 = trunc i64 %46 to i32
  %48 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %47, i32 323, i32 12, i32 15, i1 false)
  %49 = insertelement <2 x i32> undef, i32 %48, i64 0
  %50 = lshr i64 %46, 32
  %51 = trunc i64 %50 to i32
  %52 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %51, i32 323, i32 12, i32 15, i1 false)
  %53 = insertelement <2 x i32> %49, i32 %52, i64 1
  %54 = bitcast <2 x i32> %53 to i64
  %55 = tail call i64 @llvm.umin.i64(i64 %46, i64 %54)
  ret i64 %55
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i64 @126(i64 noundef %0, i32 noundef %1) unnamed_addr #55 {
  %3 = trunc i64 %0 to i32
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %3, i32 273, i32 15, i32 15, i1 false)
  %5 = insertelement <2 x i32> undef, i32 %4, i64 0
  %6 = lshr i64 %0, 32
  %7 = trunc i64 %6 to i32
  %8 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %7, i32 273, i32 15, i32 15, i1 false)
  %9 = insertelement <2 x i32> %5, i32 %8, i64 1
  %10 = bitcast <2 x i32> %9 to i64
  %11 = tail call i64 @llvm.umin.i64(i64 %0, i64 %10)
  %12 = trunc i64 %11 to i32
  %13 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %12, i32 274, i32 15, i32 15, i1 false)
  %14 = insertelement <2 x i32> undef, i32 %13, i64 0
  %15 = lshr i64 %11, 32
  %16 = trunc i64 %15 to i32
  %17 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %16, i32 274, i32 15, i32 15, i1 false)
  %18 = insertelement <2 x i32> %14, i32 %17, i64 1
  %19 = bitcast <2 x i32> %18 to i64
  %20 = tail call i64 @llvm.umin.i64(i64 %11, i64 %19)
  %21 = trunc i64 %20 to i32
  %22 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %21, i32 276, i32 15, i32 15, i1 false)
  %23 = insertelement <2 x i32> undef, i32 %22, i64 0
  %24 = lshr i64 %20, 32
  %25 = trunc i64 %24 to i32
  %26 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %25, i32 276, i32 15, i32 15, i1 false)
  %27 = insertelement <2 x i32> %23, i32 %26, i64 1
  %28 = bitcast <2 x i32> %27 to i64
  %29 = tail call i64 @llvm.umin.i64(i64 %20, i64 %28)
  %30 = trunc i64 %29 to i32
  %31 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %30, i32 280, i32 15, i32 15, i1 false)
  %32 = insertelement <2 x i32> undef, i32 %31, i64 0
  %33 = lshr i64 %29, 32
  %34 = trunc i64 %33 to i32
  %35 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %34, i32 280, i32 15, i32 15, i1 false)
  %36 = insertelement <2 x i32> %32, i32 %35, i64 1
  %37 = bitcast <2 x i32> %36 to i64
  %38 = tail call i64 @llvm.umin.i64(i64 %29, i64 %37)
  %39 = trunc i64 %38 to i32
  %40 = tail call i32 @llvm.amdgcn.permlanex16(i32 -1, i32 %39, i32 -1, i32 -1, i1 false, i1 false)
  %41 = insertelement <2 x i32> undef, i32 %40, i64 0
  %42 = lshr i64 %38, 32
  %43 = trunc i64 %42 to i32
  %44 = tail call i32 @llvm.amdgcn.permlanex16(i32 -1, i32 %43, i32 -1, i32 -1, i1 false, i1 false)
  %45 = insertelement <2 x i32> %41, i32 %44, i64 1
  %46 = bitcast <2 x i32> %45 to i64
  %47 = and i32 %1, 16
  %48 = icmp eq i32 %47, 0
  %49 = select i1 %48, i64 -1, i64 %46
  %50 = tail call i64 @llvm.umin.i64(i64 %38, i64 %49)
  %51 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %52 = icmp eq i8 %51, 0
  br i1 %52, label %65, label %53

53:                                               ; preds = %2
  %54 = trunc i64 %50 to i32
  %55 = tail call i32 @llvm.amdgcn.readlane(i32 %54, i32 31)
  %56 = insertelement <2 x i32> undef, i32 %55, i64 0
  %57 = lshr i64 %50, 32
  %58 = trunc i64 %57 to i32
  %59 = tail call i32 @llvm.amdgcn.readlane(i32 %58, i32 31)
  %60 = insertelement <2 x i32> %56, i32 %59, i64 1
  %61 = bitcast <2 x i32> %60 to i64
  %62 = icmp ugt i32 %1, 31
  %63 = select i1 %62, i64 %61, i64 -1
  %64 = tail call i64 @llvm.umin.i64(i64 %50, i64 %63)
  br label %65

65:                                               ; preds = %53, %2
  %66 = phi i64 [ %64, %53 ], [ %50, %2 ]
  ret i64 %66
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i64 @127(i64 noundef %0) unnamed_addr #54 {
  %2 = trunc i64 %0 to i32
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %2, i32 312, i32 15, i32 15, i1 false)
  %4 = insertelement <2 x i32> undef, i32 %3, i64 0
  %5 = lshr i64 %0, 32
  %6 = trunc i64 %5 to i32
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %6, i32 312, i32 15, i32 15, i1 false)
  %8 = insertelement <2 x i32> %4, i32 %7, i64 1
  %9 = bitcast <2 x i32> %8 to i64
  ret i64 %9
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i64 @128(i64 noundef %0, i32 noundef %1) unnamed_addr #55 {
  %3 = trunc i64 %0 to i32
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %3, i32 273, i32 15, i32 15, i1 false)
  %5 = insertelement <2 x i32> undef, i32 %4, i64 0
  %6 = lshr i64 %0, 32
  %7 = trunc i64 %6 to i32
  %8 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %7, i32 273, i32 15, i32 15, i1 false)
  %9 = insertelement <2 x i32> %5, i32 %8, i64 1
  %10 = bitcast <2 x i32> %9 to i64
  %11 = tail call i32 @llvm.amdgcn.permlanex16(i32 -1, i32 %3, i32 -1, i32 -1, i1 false, i1 false)
  %12 = insertelement <2 x i32> undef, i32 %11, i64 0
  %13 = tail call i32 @llvm.amdgcn.permlanex16(i32 -1, i32 %7, i32 -1, i32 -1, i1 false, i1 false)
  %14 = insertelement <2 x i32> %12, i32 %13, i64 1
  %15 = bitcast <2 x i32> %14 to i64
  %16 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %30, label %18

18:                                               ; preds = %2
  %19 = tail call i32 @llvm.amdgcn.readlane(i32 %3, i32 31)
  %20 = insertelement <2 x i32> undef, i32 %19, i64 0
  %21 = tail call i32 @llvm.amdgcn.readlane(i32 %7, i32 31)
  %22 = insertelement <2 x i32> %20, i32 %21, i64 1
  %23 = bitcast <2 x i32> %22 to i64
  %24 = icmp eq i32 %1, 32
  %25 = select i1 %24, i64 %23, i64 %15
  %26 = and i32 %1, 31
  %27 = icmp eq i32 %26, 16
  %28 = or i1 %24, %27
  %29 = select i1 %28, i64 %25, i64 %10
  br label %33

30:                                               ; preds = %2
  %31 = icmp eq i32 %1, 16
  %32 = select i1 %31, i64 %15, i64 %10
  br label %33

33:                                               ; preds = %30, %18
  %34 = phi i64 [ %29, %18 ], [ %32, %30 ]
  ret i64 %34
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected float @__ockl_wfred_min_f32(float noundef %0) local_unnamed_addr #0 {
  %2 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %3 = icmp slt i32 %2, 8000
  br i1 %3, label %4, label %96

4:                                                ; preds = %1
  %5 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %10, label %7

7:                                                ; preds = %4
  %8 = tail call i64 @llvm.read_register.i64(metadata !36) #57
  %9 = icmp eq i64 %8, -1
  br label %13

10:                                               ; preds = %4
  %11 = tail call i32 @llvm.read_register.i32(metadata !10) #57
  %12 = icmp eq i32 %11, -1
  br label %13

13:                                               ; preds = %10, %7
  %14 = phi i1 [ %9, %7 ], [ %12, %10 ]
  %15 = bitcast float %0 to i32
  %16 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %15, i32 32945)
  br i1 %14, label %17, label %42

17:                                               ; preds = %13
  %18 = bitcast i32 %16 to float
  %19 = tail call float @llvm.minnum.f32(float %0, float %18)
  %20 = bitcast float %19 to i32
  %21 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %20, i32 32846)
  %22 = bitcast i32 %21 to float
  %23 = tail call float @llvm.minnum.f32(float %19, float %22)
  %24 = bitcast float %23 to i32
  %25 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %24, i32 4127)
  %26 = bitcast i32 %25 to float
  %27 = tail call float @llvm.minnum.f32(float %23, float %26)
  %28 = bitcast float %27 to i32
  %29 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %28, i32 8223)
  %30 = bitcast i32 %29 to float
  %31 = tail call float @llvm.minnum.f32(float %27, float %30)
  %32 = bitcast float %31 to i32
  %33 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %32, i32 16415)
  %34 = bitcast i32 %33 to float
  %35 = tail call float @llvm.minnum.f32(float %31, float %34)
  %36 = bitcast float %35 to i32
  %37 = tail call i32 @llvm.amdgcn.readlane(i32 %36, i32 0)
  %38 = bitcast i32 %37 to float
  %39 = tail call i32 @llvm.amdgcn.readlane(i32 %36, i32 32)
  %40 = bitcast i32 %39 to float
  %41 = tail call float @llvm.minnum.f32(float %38, float %40)
  br label %102

42:                                               ; preds = %13
  %43 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 32945)
  %44 = and i32 %43, %16
  %45 = and i32 %43, 2139095040
  %46 = xor i32 %45, 2139095040
  %47 = or i32 %46, %44
  %48 = bitcast i32 %47 to float
  %49 = tail call float @llvm.minnum.f32(float %0, float %48)
  %50 = bitcast float %49 to i32
  %51 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %50, i32 32846)
  %52 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 32846)
  %53 = and i32 %52, %51
  %54 = and i32 %52, 2139095040
  %55 = xor i32 %54, 2139095040
  %56 = or i32 %55, %53
  %57 = bitcast i32 %56 to float
  %58 = tail call float @llvm.minnum.f32(float %49, float %57)
  %59 = bitcast float %58 to i32
  %60 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %59, i32 4127)
  %61 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 4127)
  %62 = and i32 %61, %60
  %63 = and i32 %61, 2139095040
  %64 = xor i32 %63, 2139095040
  %65 = or i32 %64, %62
  %66 = bitcast i32 %65 to float
  %67 = tail call float @llvm.minnum.f32(float %58, float %66)
  %68 = bitcast float %67 to i32
  %69 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %68, i32 8223)
  %70 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 8223)
  %71 = and i32 %70, %69
  %72 = and i32 %70, 2139095040
  %73 = xor i32 %72, 2139095040
  %74 = or i32 %73, %71
  %75 = bitcast i32 %74 to float
  %76 = tail call float @llvm.minnum.f32(float %67, float %75)
  %77 = bitcast float %76 to i32
  %78 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %77, i32 16415)
  %79 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 16415)
  %80 = and i32 %79, %78
  %81 = and i32 %79, 2139095040
  %82 = xor i32 %81, 2139095040
  %83 = or i32 %82, %80
  %84 = bitcast i32 %83 to float
  %85 = tail call float @llvm.minnum.f32(float %76, float %84)
  %86 = bitcast float %85 to i32
  %87 = tail call i32 @llvm.amdgcn.readlane(i32 %86, i32 32)
  %88 = bitcast i32 %87 to float
  %89 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %90 = and i32 %89, 1
  %91 = icmp eq i32 %90, 0
  %92 = select i1 %91, float 0x7FF0000000000000, float %88
  %93 = tail call i32 @llvm.amdgcn.readlane(i32 %86, i32 0)
  %94 = bitcast i32 %93 to float
  %95 = tail call float @llvm.minnum.f32(float %94, float %92)
  br label %102

96:                                               ; preds = %1
  %97 = icmp ult i32 %2, 10000
  br i1 %97, label %98, label %100

98:                                               ; preds = %96
  %99 = tail call fastcc float @129(float noundef %0) #57
  br label %102

100:                                              ; preds = %96
  %101 = tail call fastcc float @130(float noundef %0) #57
  br label %102

102:                                              ; preds = %100, %98, %42, %17
  %103 = phi float [ %41, %17 ], [ %95, %42 ], [ %99, %98 ], [ %101, %100 ]
  ret float %103
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc float @129(float noundef %0) unnamed_addr #52 {
  %2 = bitcast float %0 to i32
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2139095040, i32 %2, i32 257, i32 15, i32 15, i1 false)
  %4 = bitcast i32 %3 to float
  %5 = tail call float @llvm.minnum.f32(float %0, float %4)
  %6 = bitcast float %5 to i32
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2139095040, i32 %6, i32 258, i32 15, i32 15, i1 false)
  %8 = bitcast i32 %7 to float
  %9 = tail call float @llvm.minnum.f32(float %5, float %8)
  %10 = bitcast float %9 to i32
  %11 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2139095040, i32 %10, i32 260, i32 15, i32 15, i1 false)
  %12 = bitcast i32 %11 to float
  %13 = tail call float @llvm.minnum.f32(float %9, float %12)
  %14 = bitcast float %13 to i32
  %15 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2139095040, i32 %14, i32 264, i32 15, i32 15, i1 false)
  %16 = bitcast i32 %15 to float
  %17 = tail call float @llvm.minnum.f32(float %13, float %16)
  %18 = bitcast float %17 to i32
  %19 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2139095040, i32 %18, i32 304, i32 15, i32 15, i1 false)
  %20 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2139095040, i32 %19, i32 320, i32 15, i32 15, i1 false)
  %21 = bitcast i32 %20 to float
  %22 = tail call float @llvm.minnum.f32(float %17, float %21)
  %23 = bitcast float %22 to i32
  %24 = tail call i32 @llvm.amdgcn.readlane(i32 %23, i32 32)
  %25 = bitcast i32 %24 to float
  %26 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %27 = and i32 %26, 1
  %28 = icmp eq i32 %27, 0
  %29 = select i1 %28, float 0x7FF0000000000000, float %25
  %30 = tail call i32 @llvm.amdgcn.readlane(i32 %23, i32 0)
  %31 = bitcast i32 %30 to float
  %32 = tail call float @llvm.minnum.f32(float %31, float %29)
  ret float %32
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc float @130(float noundef %0) unnamed_addr #53 {
  %2 = bitcast float %0 to i32
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2139095040, i32 %2, i32 257, i32 15, i32 15, i1 false)
  %4 = bitcast i32 %3 to float
  %5 = tail call float @llvm.minnum.f32(float %0, float %4)
  %6 = bitcast float %5 to i32
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2139095040, i32 %6, i32 258, i32 15, i32 15, i1 false)
  %8 = bitcast i32 %7 to float
  %9 = tail call float @llvm.minnum.f32(float %5, float %8)
  %10 = bitcast float %9 to i32
  %11 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2139095040, i32 %10, i32 260, i32 15, i32 15, i1 false)
  %12 = bitcast i32 %11 to float
  %13 = tail call float @llvm.minnum.f32(float %9, float %12)
  %14 = bitcast float %13 to i32
  %15 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2139095040, i32 %14, i32 264, i32 15, i32 15, i1 false)
  %16 = bitcast i32 %15 to float
  %17 = tail call float @llvm.minnum.f32(float %13, float %16)
  %18 = bitcast float %17 to i32
  %19 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2139095040, i32 %18, i32 336, i32 15, i32 15, i1 false)
  %20 = bitcast i32 %19 to float
  %21 = tail call i32 @llvm.amdgcn.permlanex16(i32 2139095040, i32 %19, i32 0, i32 0, i1 false, i1 false)
  %22 = bitcast i32 %21 to float
  %23 = tail call float @llvm.minnum.f32(float %20, float %22)
  %24 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %37, label %26

26:                                               ; preds = %1
  %27 = bitcast float %23 to i32
  %28 = tail call i32 @llvm.amdgcn.readlane(i32 %27, i32 32)
  %29 = bitcast i32 %28 to float
  %30 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %31 = and i32 %30, 1
  %32 = icmp eq i32 %31, 0
  %33 = select i1 %32, float 0x7FF0000000000000, float %29
  %34 = tail call i32 @llvm.amdgcn.readlane(i32 %27, i32 0)
  %35 = bitcast i32 %34 to float
  %36 = tail call float @llvm.minnum.f32(float %35, float %33)
  br label %37

37:                                               ; preds = %26, %1
  %38 = phi float [ %36, %26 ], [ %23, %1 ]
  ret float %38
}

; Function Attrs: convergent norecurse nounwind
define linkonce_odr protected float @__ockl_wfscan_min_f32(float noundef %0, i1 noundef zeroext %1) local_unnamed_addr #12 {
  %3 = tail call i32 @__ockl_lane_u32() #58
  %4 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %5 = icmp slt i32 %4, 8000
  br i1 %5, label %6, label %48

6:                                                ; preds = %2
  %7 = bitcast float %0 to i32
  %8 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %7, i32 30)
  %9 = bitcast i32 %8 to float
  %10 = and i32 %3, 1
  %11 = icmp eq i32 %10, 0
  %12 = select i1 %11, float 0x7FF0000000000000, float %9
  %13 = tail call float @llvm.minnum.f32(float %0, float %12)
  %14 = bitcast float %13 to i32
  %15 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %14, i32 60)
  %16 = bitcast i32 %15 to float
  %17 = and i32 %3, 2
  %18 = icmp eq i32 %17, 0
  %19 = select i1 %18, float 0x7FF0000000000000, float %16
  %20 = tail call float @llvm.minnum.f32(float %13, float %19)
  %21 = bitcast float %20 to i32
  %22 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %21, i32 120)
  %23 = bitcast i32 %22 to float
  %24 = and i32 %3, 4
  %25 = icmp eq i32 %24, 0
  %26 = select i1 %25, float 0x7FF0000000000000, float %23
  %27 = tail call float @llvm.minnum.f32(float %20, float %26)
  %28 = bitcast float %27 to i32
  %29 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %28, i32 240)
  %30 = bitcast i32 %29 to float
  %31 = and i32 %3, 8
  %32 = icmp eq i32 %31, 0
  %33 = select i1 %32, float 0x7FF0000000000000, float %30
  %34 = tail call float @llvm.minnum.f32(float %27, float %33)
  %35 = bitcast float %34 to i32
  %36 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %35, i32 480)
  %37 = bitcast i32 %36 to float
  %38 = and i32 %3, 16
  %39 = icmp eq i32 %38, 0
  %40 = select i1 %39, float 0x7FF0000000000000, float %37
  %41 = tail call float @llvm.minnum.f32(float %34, float %40)
  %42 = bitcast float %41 to i32
  %43 = tail call i32 @llvm.amdgcn.readlane(i32 %42, i32 31)
  %44 = bitcast i32 %43 to float
  %45 = icmp ugt i32 %3, 31
  %46 = select i1 %45, float %44, float 0x7FF0000000000000
  %47 = tail call float @llvm.minnum.f32(float %41, float %46)
  br label %54

48:                                               ; preds = %2
  %49 = icmp ult i32 %4, 10000
  br i1 %49, label %50, label %52

50:                                               ; preds = %48
  %51 = tail call fastcc float @131(float noundef %0) #57
  br label %54

52:                                               ; preds = %48
  %53 = tail call fastcc float @132(float noundef %0, i32 noundef %3) #57
  br label %54

54:                                               ; preds = %52, %50, %6
  %55 = phi float [ %47, %6 ], [ %51, %50 ], [ %53, %52 ]
  br i1 %1, label %84, label %56

56:                                               ; preds = %54
  br i1 %5, label %57, label %78

57:                                               ; preds = %56
  %58 = bitcast float %55 to i32
  %59 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %58, i32 32912)
  %60 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %58, i32 120)
  %61 = and i32 %3, 7
  %62 = icmp eq i32 %61, 4
  %63 = select i1 %62, i32 %60, i32 %59
  %64 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %58, i32 240)
  %65 = and i32 %3, 15
  %66 = icmp eq i32 %65, 8
  %67 = select i1 %66, i32 %64, i32 %63
  %68 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %58, i32 480)
  %69 = and i32 %3, 31
  %70 = icmp eq i32 %69, 16
  %71 = select i1 %70, i32 %68, i32 %67
  %72 = tail call i32 @llvm.amdgcn.readlane(i32 %58, i32 31)
  %73 = icmp eq i32 %3, 32
  %74 = select i1 %73, i32 %72, i32 %71
  %75 = bitcast i32 %74 to float
  %76 = icmp eq i32 %3, 0
  %77 = select i1 %76, float 0x7FF0000000000000, float %75
  br label %84

78:                                               ; preds = %56
  %79 = icmp ult i32 %4, 10000
  br i1 %79, label %80, label %82

80:                                               ; preds = %78
  %81 = tail call fastcc float @133(float noundef %55) #57
  br label %84

82:                                               ; preds = %78
  %83 = tail call fastcc float @134(float noundef %55, i32 noundef %3) #57
  br label %84

84:                                               ; preds = %82, %80, %57, %54
  %85 = phi float [ %55, %54 ], [ %77, %57 ], [ %81, %80 ], [ %83, %82 ]
  ret float %85
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc float @131(float noundef %0) unnamed_addr #54 {
  %2 = bitcast float %0 to i32
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2139095040, i32 %2, i32 273, i32 15, i32 15, i1 false)
  %4 = bitcast i32 %3 to float
  %5 = tail call float @llvm.minnum.f32(float %0, float %4)
  %6 = bitcast float %5 to i32
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2139095040, i32 %6, i32 274, i32 15, i32 15, i1 false)
  %8 = bitcast i32 %7 to float
  %9 = tail call float @llvm.minnum.f32(float %5, float %8)
  %10 = bitcast float %9 to i32
  %11 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2139095040, i32 %10, i32 276, i32 15, i32 15, i1 false)
  %12 = bitcast i32 %11 to float
  %13 = tail call float @llvm.minnum.f32(float %9, float %12)
  %14 = bitcast float %13 to i32
  %15 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2139095040, i32 %14, i32 280, i32 15, i32 15, i1 false)
  %16 = bitcast i32 %15 to float
  %17 = tail call float @llvm.minnum.f32(float %13, float %16)
  %18 = bitcast float %17 to i32
  %19 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2139095040, i32 %18, i32 322, i32 10, i32 15, i1 false)
  %20 = bitcast i32 %19 to float
  %21 = tail call float @llvm.minnum.f32(float %17, float %20)
  %22 = bitcast float %21 to i32
  %23 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2139095040, i32 %22, i32 323, i32 12, i32 15, i1 false)
  %24 = bitcast i32 %23 to float
  %25 = tail call float @llvm.minnum.f32(float %21, float %24)
  ret float %25
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc float @132(float noundef %0, i32 noundef %1) unnamed_addr #55 {
  %3 = bitcast float %0 to i32
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2139095040, i32 %3, i32 273, i32 15, i32 15, i1 false)
  %5 = bitcast i32 %4 to float
  %6 = tail call float @llvm.minnum.f32(float %0, float %5)
  %7 = bitcast float %6 to i32
  %8 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2139095040, i32 %7, i32 274, i32 15, i32 15, i1 false)
  %9 = bitcast i32 %8 to float
  %10 = tail call float @llvm.minnum.f32(float %6, float %9)
  %11 = bitcast float %10 to i32
  %12 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2139095040, i32 %11, i32 276, i32 15, i32 15, i1 false)
  %13 = bitcast i32 %12 to float
  %14 = tail call float @llvm.minnum.f32(float %10, float %13)
  %15 = bitcast float %14 to i32
  %16 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2139095040, i32 %15, i32 280, i32 15, i32 15, i1 false)
  %17 = bitcast i32 %16 to float
  %18 = tail call float @llvm.minnum.f32(float %14, float %17)
  %19 = bitcast float %18 to i32
  %20 = tail call i32 @llvm.amdgcn.permlanex16(i32 2139095040, i32 %19, i32 -1, i32 -1, i1 false, i1 false)
  %21 = bitcast i32 %20 to float
  %22 = and i32 %1, 16
  %23 = icmp eq i32 %22, 0
  %24 = select i1 %23, float 0x7FF0000000000000, float %21
  %25 = tail call float @llvm.minnum.f32(float %18, float %24)
  %26 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %27 = icmp eq i8 %26, 0
  br i1 %27, label %35, label %28

28:                                               ; preds = %2
  %29 = icmp ugt i32 %1, 31
  %30 = bitcast float %25 to i32
  %31 = tail call i32 @llvm.amdgcn.readlane(i32 %30, i32 31)
  %32 = bitcast i32 %31 to float
  %33 = select i1 %29, float %32, float 0x7FF0000000000000
  %34 = tail call float @llvm.minnum.f32(float %25, float %33)
  br label %35

35:                                               ; preds = %28, %2
  %36 = phi float [ %34, %28 ], [ %25, %2 ]
  ret float %36
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc float @133(float noundef %0) unnamed_addr #54 {
  %2 = bitcast float %0 to i32
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2139095040, i32 %2, i32 312, i32 15, i32 15, i1 false)
  %4 = bitcast i32 %3 to float
  ret float %4
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc float @134(float noundef %0, i32 noundef %1) unnamed_addr #55 {
  %3 = bitcast float %0 to i32
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2139095040, i32 %3, i32 273, i32 15, i32 15, i1 false)
  %5 = bitcast i32 %4 to float
  %6 = tail call i32 @llvm.amdgcn.permlanex16(i32 2139095040, i32 %3, i32 -1, i32 -1, i1 false, i1 false)
  %7 = bitcast i32 %6 to float
  %8 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %19, label %10

10:                                               ; preds = %2
  %11 = tail call i32 @llvm.amdgcn.readlane(i32 %3, i32 31)
  %12 = bitcast i32 %11 to float
  %13 = icmp eq i32 %1, 32
  %14 = select i1 %13, float %12, float %7
  %15 = and i32 %1, 31
  %16 = icmp eq i32 %15, 16
  %17 = or i1 %13, %16
  %18 = select i1 %17, float %14, float %5
  br label %22

19:                                               ; preds = %2
  %20 = icmp eq i32 %1, 16
  %21 = select i1 %20, float %7, float %5
  br label %22

22:                                               ; preds = %19, %10
  %23 = phi float [ %18, %10 ], [ %21, %19 ]
  ret float %23
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected double @__ockl_wfred_min_f64(double noundef %0) local_unnamed_addr #0 {
  %2 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %3 = icmp slt i32 %2, 8000
  br i1 %3, label %4, label %166

4:                                                ; preds = %1
  %5 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %10, label %7

7:                                                ; preds = %4
  %8 = tail call i64 @llvm.read_register.i64(metadata !36) #57
  %9 = icmp eq i64 %8, -1
  br label %13

10:                                               ; preds = %4
  %11 = tail call i32 @llvm.read_register.i32(metadata !10) #57
  %12 = icmp eq i32 %11, -1
  br label %13

13:                                               ; preds = %10, %7
  %14 = phi i1 [ %9, %7 ], [ %12, %10 ]
  %15 = bitcast double %0 to <2 x i32>
  %16 = extractelement <2 x i32> %15, i64 0
  %17 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %16, i32 32945)
  br i1 %14, label %18, label %75

18:                                               ; preds = %13
  %19 = insertelement <2 x i32> undef, i32 %17, i64 0
  %20 = extractelement <2 x i32> %15, i64 1
  %21 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %20, i32 32945)
  %22 = insertelement <2 x i32> %19, i32 %21, i64 1
  %23 = bitcast <2 x i32> %22 to double
  %24 = tail call double @llvm.minnum.f64(double %0, double %23)
  %25 = bitcast double %24 to <2 x i32>
  %26 = extractelement <2 x i32> %25, i64 0
  %27 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %26, i32 32846)
  %28 = insertelement <2 x i32> undef, i32 %27, i64 0
  %29 = extractelement <2 x i32> %25, i64 1
  %30 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %29, i32 32846)
  %31 = insertelement <2 x i32> %28, i32 %30, i64 1
  %32 = bitcast <2 x i32> %31 to double
  %33 = tail call double @llvm.minnum.f64(double %24, double %32)
  %34 = bitcast double %33 to <2 x i32>
  %35 = extractelement <2 x i32> %34, i64 0
  %36 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %35, i32 4127)
  %37 = insertelement <2 x i32> undef, i32 %36, i64 0
  %38 = extractelement <2 x i32> %34, i64 1
  %39 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %38, i32 4127)
  %40 = insertelement <2 x i32> %37, i32 %39, i64 1
  %41 = bitcast <2 x i32> %40 to double
  %42 = tail call double @llvm.minnum.f64(double %33, double %41)
  %43 = bitcast double %42 to <2 x i32>
  %44 = extractelement <2 x i32> %43, i64 0
  %45 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %44, i32 8223)
  %46 = insertelement <2 x i32> undef, i32 %45, i64 0
  %47 = extractelement <2 x i32> %43, i64 1
  %48 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %47, i32 8223)
  %49 = insertelement <2 x i32> %46, i32 %48, i64 1
  %50 = bitcast <2 x i32> %49 to double
  %51 = tail call double @llvm.minnum.f64(double %42, double %50)
  %52 = bitcast double %51 to <2 x i32>
  %53 = extractelement <2 x i32> %52, i64 0
  %54 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %53, i32 16415)
  %55 = insertelement <2 x i32> undef, i32 %54, i64 0
  %56 = extractelement <2 x i32> %52, i64 1
  %57 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %56, i32 16415)
  %58 = insertelement <2 x i32> %55, i32 %57, i64 1
  %59 = bitcast <2 x i32> %58 to double
  %60 = tail call double @llvm.minnum.f64(double %51, double %59)
  %61 = bitcast double %60 to <2 x i32>
  %62 = extractelement <2 x i32> %61, i64 0
  %63 = tail call i32 @llvm.amdgcn.readlane(i32 %62, i32 0)
  %64 = insertelement <2 x i32> undef, i32 %63, i64 0
  %65 = extractelement <2 x i32> %61, i64 1
  %66 = tail call i32 @llvm.amdgcn.readlane(i32 %65, i32 0)
  %67 = insertelement <2 x i32> %64, i32 %66, i64 1
  %68 = bitcast <2 x i32> %67 to double
  %69 = tail call i32 @llvm.amdgcn.readlane(i32 %62, i32 32)
  %70 = insertelement <2 x i32> undef, i32 %69, i64 0
  %71 = tail call i32 @llvm.amdgcn.readlane(i32 %65, i32 32)
  %72 = insertelement <2 x i32> %70, i32 %71, i64 1
  %73 = bitcast <2 x i32> %72 to double
  %74 = tail call double @llvm.minnum.f64(double %68, double %73)
  br label %172

75:                                               ; preds = %13
  %76 = extractelement <2 x i32> %15, i64 1
  %77 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %76, i32 32945)
  %78 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 32945)
  %79 = and i32 %78, %17
  %80 = insertelement <2 x i32> undef, i32 %79, i64 0
  %81 = and i32 %78, %77
  %82 = and i32 %78, 2146435072
  %83 = xor i32 %82, 2146435072
  %84 = or i32 %83, %81
  %85 = insertelement <2 x i32> %80, i32 %84, i64 1
  %86 = bitcast <2 x i32> %85 to double
  %87 = tail call double @llvm.minnum.f64(double %0, double %86)
  %88 = bitcast double %87 to <2 x i32>
  %89 = extractelement <2 x i32> %88, i64 0
  %90 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %89, i32 32846)
  %91 = extractelement <2 x i32> %88, i64 1
  %92 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %91, i32 32846)
  %93 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 32846)
  %94 = and i32 %93, %90
  %95 = insertelement <2 x i32> undef, i32 %94, i64 0
  %96 = and i32 %93, %92
  %97 = and i32 %93, 2146435072
  %98 = xor i32 %97, 2146435072
  %99 = or i32 %98, %96
  %100 = insertelement <2 x i32> %95, i32 %99, i64 1
  %101 = bitcast <2 x i32> %100 to double
  %102 = tail call double @llvm.minnum.f64(double %87, double %101)
  %103 = bitcast double %102 to <2 x i32>
  %104 = extractelement <2 x i32> %103, i64 0
  %105 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %104, i32 4127)
  %106 = extractelement <2 x i32> %103, i64 1
  %107 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %106, i32 4127)
  %108 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 4127)
  %109 = and i32 %108, %105
  %110 = insertelement <2 x i32> undef, i32 %109, i64 0
  %111 = and i32 %108, %107
  %112 = and i32 %108, 2146435072
  %113 = xor i32 %112, 2146435072
  %114 = or i32 %113, %111
  %115 = insertelement <2 x i32> %110, i32 %114, i64 1
  %116 = bitcast <2 x i32> %115 to double
  %117 = tail call double @llvm.minnum.f64(double %102, double %116)
  %118 = bitcast double %117 to <2 x i32>
  %119 = extractelement <2 x i32> %118, i64 0
  %120 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %119, i32 8223)
  %121 = extractelement <2 x i32> %118, i64 1
  %122 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %121, i32 8223)
  %123 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 8223)
  %124 = and i32 %123, %120
  %125 = insertelement <2 x i32> undef, i32 %124, i64 0
  %126 = and i32 %123, %122
  %127 = and i32 %123, 2146435072
  %128 = xor i32 %127, 2146435072
  %129 = or i32 %128, %126
  %130 = insertelement <2 x i32> %125, i32 %129, i64 1
  %131 = bitcast <2 x i32> %130 to double
  %132 = tail call double @llvm.minnum.f64(double %117, double %131)
  %133 = bitcast double %132 to <2 x i32>
  %134 = extractelement <2 x i32> %133, i64 0
  %135 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %134, i32 16415)
  %136 = extractelement <2 x i32> %133, i64 1
  %137 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %136, i32 16415)
  %138 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 16415)
  %139 = and i32 %138, %135
  %140 = insertelement <2 x i32> undef, i32 %139, i64 0
  %141 = and i32 %138, %137
  %142 = and i32 %138, 2146435072
  %143 = xor i32 %142, 2146435072
  %144 = or i32 %143, %141
  %145 = insertelement <2 x i32> %140, i32 %144, i64 1
  %146 = bitcast <2 x i32> %145 to double
  %147 = tail call double @llvm.minnum.f64(double %132, double %146)
  %148 = bitcast double %147 to <2 x i32>
  %149 = extractelement <2 x i32> %148, i64 0
  %150 = tail call i32 @llvm.amdgcn.readlane(i32 %149, i32 32)
  %151 = insertelement <2 x i32> undef, i32 %150, i64 0
  %152 = extractelement <2 x i32> %148, i64 1
  %153 = tail call i32 @llvm.amdgcn.readlane(i32 %152, i32 32)
  %154 = insertelement <2 x i32> %151, i32 %153, i64 1
  %155 = bitcast <2 x i32> %154 to double
  %156 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %157 = and i32 %156, 1
  %158 = icmp eq i32 %157, 0
  %159 = select i1 %158, double 0x7FF0000000000000, double %155
  %160 = tail call i32 @llvm.amdgcn.readlane(i32 %149, i32 0)
  %161 = insertelement <2 x i32> undef, i32 %160, i64 0
  %162 = tail call i32 @llvm.amdgcn.readlane(i32 %152, i32 0)
  %163 = insertelement <2 x i32> %161, i32 %162, i64 1
  %164 = bitcast <2 x i32> %163 to double
  %165 = tail call double @llvm.minnum.f64(double %164, double %159)
  br label %172

166:                                              ; preds = %1
  %167 = icmp ult i32 %2, 10000
  br i1 %167, label %168, label %170

168:                                              ; preds = %166
  %169 = tail call fastcc double @135(double noundef %0) #57
  br label %172

170:                                              ; preds = %166
  %171 = tail call fastcc double @136(double noundef %0) #57
  br label %172

172:                                              ; preds = %170, %168, %75, %18
  %173 = phi double [ %74, %18 ], [ %165, %75 ], [ %169, %168 ], [ %171, %170 ]
  ret double %173
}

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.minnum.f64(double, double) #4

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc double @135(double noundef %0) unnamed_addr #52 {
  %2 = bitcast double %0 to <2 x i32>
  %3 = extractelement <2 x i32> %2, i64 0
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %3, i32 257, i32 15, i32 15, i1 false)
  %5 = insertelement <2 x i32> undef, i32 %4, i64 0
  %6 = extractelement <2 x i32> %2, i64 1
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2146435072, i32 %6, i32 257, i32 15, i32 15, i1 false)
  %8 = insertelement <2 x i32> %5, i32 %7, i64 1
  %9 = bitcast <2 x i32> %8 to double
  %10 = tail call double @llvm.minnum.f64(double %0, double %9)
  %11 = bitcast double %10 to <2 x i32>
  %12 = extractelement <2 x i32> %11, i64 0
  %13 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %12, i32 258, i32 15, i32 15, i1 false)
  %14 = insertelement <2 x i32> undef, i32 %13, i64 0
  %15 = extractelement <2 x i32> %11, i64 1
  %16 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2146435072, i32 %15, i32 258, i32 15, i32 15, i1 false)
  %17 = insertelement <2 x i32> %14, i32 %16, i64 1
  %18 = bitcast <2 x i32> %17 to double
  %19 = tail call double @llvm.minnum.f64(double %10, double %18)
  %20 = bitcast double %19 to <2 x i32>
  %21 = extractelement <2 x i32> %20, i64 0
  %22 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %21, i32 260, i32 15, i32 15, i1 false)
  %23 = insertelement <2 x i32> undef, i32 %22, i64 0
  %24 = extractelement <2 x i32> %20, i64 1
  %25 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2146435072, i32 %24, i32 260, i32 15, i32 15, i1 false)
  %26 = insertelement <2 x i32> %23, i32 %25, i64 1
  %27 = bitcast <2 x i32> %26 to double
  %28 = tail call double @llvm.minnum.f64(double %19, double %27)
  %29 = bitcast double %28 to <2 x i32>
  %30 = extractelement <2 x i32> %29, i64 0
  %31 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %30, i32 264, i32 15, i32 15, i1 false)
  %32 = insertelement <2 x i32> undef, i32 %31, i64 0
  %33 = extractelement <2 x i32> %29, i64 1
  %34 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2146435072, i32 %33, i32 264, i32 15, i32 15, i1 false)
  %35 = insertelement <2 x i32> %32, i32 %34, i64 1
  %36 = bitcast <2 x i32> %35 to double
  %37 = tail call double @llvm.minnum.f64(double %28, double %36)
  %38 = bitcast double %37 to <2 x i32>
  %39 = extractelement <2 x i32> %38, i64 0
  %40 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %39, i32 304, i32 15, i32 15, i1 false)
  %41 = extractelement <2 x i32> %38, i64 1
  %42 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2146435072, i32 %41, i32 304, i32 15, i32 15, i1 false)
  %43 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %40, i32 320, i32 15, i32 15, i1 false)
  %44 = insertelement <2 x i32> undef, i32 %43, i64 0
  %45 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2146435072, i32 %42, i32 320, i32 15, i32 15, i1 false)
  %46 = insertelement <2 x i32> %44, i32 %45, i64 1
  %47 = bitcast <2 x i32> %46 to double
  %48 = tail call double @llvm.minnum.f64(double %37, double %47)
  %49 = bitcast double %48 to <2 x i32>
  %50 = extractelement <2 x i32> %49, i64 0
  %51 = tail call i32 @llvm.amdgcn.readlane(i32 %50, i32 32)
  %52 = insertelement <2 x i32> undef, i32 %51, i64 0
  %53 = extractelement <2 x i32> %49, i64 1
  %54 = tail call i32 @llvm.amdgcn.readlane(i32 %53, i32 32)
  %55 = insertelement <2 x i32> %52, i32 %54, i64 1
  %56 = bitcast <2 x i32> %55 to double
  %57 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %58 = and i32 %57, 1
  %59 = icmp eq i32 %58, 0
  %60 = select i1 %59, double 0x7FF0000000000000, double %56
  %61 = tail call i32 @llvm.amdgcn.readlane(i32 %50, i32 0)
  %62 = insertelement <2 x i32> undef, i32 %61, i64 0
  %63 = tail call i32 @llvm.amdgcn.readlane(i32 %53, i32 0)
  %64 = insertelement <2 x i32> %62, i32 %63, i64 1
  %65 = bitcast <2 x i32> %64 to double
  %66 = tail call double @llvm.minnum.f64(double %65, double %60)
  ret double %66
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc double @136(double noundef %0) unnamed_addr #53 {
  %2 = bitcast double %0 to <2 x i32>
  %3 = extractelement <2 x i32> %2, i64 0
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %3, i32 257, i32 15, i32 15, i1 false)
  %5 = insertelement <2 x i32> undef, i32 %4, i64 0
  %6 = extractelement <2 x i32> %2, i64 1
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2146435072, i32 %6, i32 257, i32 15, i32 15, i1 false)
  %8 = insertelement <2 x i32> %5, i32 %7, i64 1
  %9 = bitcast <2 x i32> %8 to double
  %10 = tail call double @llvm.minnum.f64(double %0, double %9)
  %11 = bitcast double %10 to <2 x i32>
  %12 = extractelement <2 x i32> %11, i64 0
  %13 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %12, i32 258, i32 15, i32 15, i1 false)
  %14 = insertelement <2 x i32> undef, i32 %13, i64 0
  %15 = extractelement <2 x i32> %11, i64 1
  %16 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2146435072, i32 %15, i32 258, i32 15, i32 15, i1 false)
  %17 = insertelement <2 x i32> %14, i32 %16, i64 1
  %18 = bitcast <2 x i32> %17 to double
  %19 = tail call double @llvm.minnum.f64(double %10, double %18)
  %20 = bitcast double %19 to <2 x i32>
  %21 = extractelement <2 x i32> %20, i64 0
  %22 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %21, i32 260, i32 15, i32 15, i1 false)
  %23 = insertelement <2 x i32> undef, i32 %22, i64 0
  %24 = extractelement <2 x i32> %20, i64 1
  %25 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2146435072, i32 %24, i32 260, i32 15, i32 15, i1 false)
  %26 = insertelement <2 x i32> %23, i32 %25, i64 1
  %27 = bitcast <2 x i32> %26 to double
  %28 = tail call double @llvm.minnum.f64(double %19, double %27)
  %29 = bitcast double %28 to <2 x i32>
  %30 = extractelement <2 x i32> %29, i64 0
  %31 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %30, i32 264, i32 15, i32 15, i1 false)
  %32 = insertelement <2 x i32> undef, i32 %31, i64 0
  %33 = extractelement <2 x i32> %29, i64 1
  %34 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2146435072, i32 %33, i32 264, i32 15, i32 15, i1 false)
  %35 = insertelement <2 x i32> %32, i32 %34, i64 1
  %36 = bitcast <2 x i32> %35 to double
  %37 = tail call double @llvm.minnum.f64(double %28, double %36)
  %38 = bitcast double %37 to <2 x i32>
  %39 = extractelement <2 x i32> %38, i64 0
  %40 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %39, i32 336, i32 15, i32 15, i1 false)
  %41 = insertelement <2 x i32> undef, i32 %40, i64 0
  %42 = extractelement <2 x i32> %38, i64 1
  %43 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2146435072, i32 %42, i32 336, i32 15, i32 15, i1 false)
  %44 = insertelement <2 x i32> %41, i32 %43, i64 1
  %45 = bitcast <2 x i32> %44 to double
  %46 = tail call i32 @llvm.amdgcn.permlanex16(i32 0, i32 %40, i32 0, i32 0, i1 false, i1 false)
  %47 = insertelement <2 x i32> undef, i32 %46, i64 0
  %48 = tail call i32 @llvm.amdgcn.permlanex16(i32 2146435072, i32 %43, i32 0, i32 0, i1 false, i1 false)
  %49 = insertelement <2 x i32> %47, i32 %48, i64 1
  %50 = bitcast <2 x i32> %49 to double
  %51 = tail call double @llvm.minnum.f64(double %45, double %50)
  %52 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %53 = icmp eq i8 %52, 0
  br i1 %53, label %73, label %54

54:                                               ; preds = %1
  %55 = bitcast double %51 to <2 x i32>
  %56 = extractelement <2 x i32> %55, i64 0
  %57 = tail call i32 @llvm.amdgcn.readlane(i32 %56, i32 32)
  %58 = insertelement <2 x i32> undef, i32 %57, i64 0
  %59 = extractelement <2 x i32> %55, i64 1
  %60 = tail call i32 @llvm.amdgcn.readlane(i32 %59, i32 32)
  %61 = insertelement <2 x i32> %58, i32 %60, i64 1
  %62 = bitcast <2 x i32> %61 to double
  %63 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %64 = and i32 %63, 1
  %65 = icmp eq i32 %64, 0
  %66 = select i1 %65, double 0x7FF0000000000000, double %62
  %67 = tail call i32 @llvm.amdgcn.readlane(i32 %56, i32 0)
  %68 = insertelement <2 x i32> undef, i32 %67, i64 0
  %69 = tail call i32 @llvm.amdgcn.readlane(i32 %59, i32 0)
  %70 = insertelement <2 x i32> %68, i32 %69, i64 1
  %71 = bitcast <2 x i32> %70 to double
  %72 = tail call double @llvm.minnum.f64(double %71, double %66)
  br label %73

73:                                               ; preds = %54, %1
  %74 = phi double [ %72, %54 ], [ %51, %1 ]
  ret double %74
}

; Function Attrs: convergent norecurse nounwind
define linkonce_odr protected double @__ockl_wfscan_min_f64(double noundef %0, i1 noundef zeroext %1) local_unnamed_addr #12 {
  %3 = tail call i32 @__ockl_lane_u32() #58
  %4 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %5 = icmp slt i32 %4, 8000
  br i1 %5, label %6, label %78

6:                                                ; preds = %2
  %7 = bitcast double %0 to <2 x i32>
  %8 = extractelement <2 x i32> %7, i64 0
  %9 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %8, i32 30)
  %10 = insertelement <2 x i32> undef, i32 %9, i64 0
  %11 = extractelement <2 x i32> %7, i64 1
  %12 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %11, i32 30)
  %13 = insertelement <2 x i32> %10, i32 %12, i64 1
  %14 = bitcast <2 x i32> %13 to double
  %15 = and i32 %3, 1
  %16 = icmp eq i32 %15, 0
  %17 = select i1 %16, double 0x7FF0000000000000, double %14
  %18 = tail call double @llvm.minnum.f64(double %0, double %17)
  %19 = bitcast double %18 to <2 x i32>
  %20 = extractelement <2 x i32> %19, i64 0
  %21 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %20, i32 60)
  %22 = insertelement <2 x i32> undef, i32 %21, i64 0
  %23 = extractelement <2 x i32> %19, i64 1
  %24 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %23, i32 60)
  %25 = insertelement <2 x i32> %22, i32 %24, i64 1
  %26 = bitcast <2 x i32> %25 to double
  %27 = and i32 %3, 2
  %28 = icmp eq i32 %27, 0
  %29 = select i1 %28, double 0x7FF0000000000000, double %26
  %30 = tail call double @llvm.minnum.f64(double %18, double %29)
  %31 = bitcast double %30 to <2 x i32>
  %32 = extractelement <2 x i32> %31, i64 0
  %33 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %32, i32 120)
  %34 = insertelement <2 x i32> undef, i32 %33, i64 0
  %35 = extractelement <2 x i32> %31, i64 1
  %36 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %35, i32 120)
  %37 = insertelement <2 x i32> %34, i32 %36, i64 1
  %38 = bitcast <2 x i32> %37 to double
  %39 = and i32 %3, 4
  %40 = icmp eq i32 %39, 0
  %41 = select i1 %40, double 0x7FF0000000000000, double %38
  %42 = tail call double @llvm.minnum.f64(double %30, double %41)
  %43 = bitcast double %42 to <2 x i32>
  %44 = extractelement <2 x i32> %43, i64 0
  %45 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %44, i32 240)
  %46 = insertelement <2 x i32> undef, i32 %45, i64 0
  %47 = extractelement <2 x i32> %43, i64 1
  %48 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %47, i32 240)
  %49 = insertelement <2 x i32> %46, i32 %48, i64 1
  %50 = bitcast <2 x i32> %49 to double
  %51 = and i32 %3, 8
  %52 = icmp eq i32 %51, 0
  %53 = select i1 %52, double 0x7FF0000000000000, double %50
  %54 = tail call double @llvm.minnum.f64(double %42, double %53)
  %55 = bitcast double %54 to <2 x i32>
  %56 = extractelement <2 x i32> %55, i64 0
  %57 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %56, i32 480)
  %58 = insertelement <2 x i32> undef, i32 %57, i64 0
  %59 = extractelement <2 x i32> %55, i64 1
  %60 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %59, i32 480)
  %61 = insertelement <2 x i32> %58, i32 %60, i64 1
  %62 = bitcast <2 x i32> %61 to double
  %63 = and i32 %3, 16
  %64 = icmp eq i32 %63, 0
  %65 = select i1 %64, double 0x7FF0000000000000, double %62
  %66 = tail call double @llvm.minnum.f64(double %54, double %65)
  %67 = bitcast double %66 to <2 x i32>
  %68 = extractelement <2 x i32> %67, i64 0
  %69 = tail call i32 @llvm.amdgcn.readlane(i32 %68, i32 31)
  %70 = insertelement <2 x i32> undef, i32 %69, i64 0
  %71 = extractelement <2 x i32> %67, i64 1
  %72 = tail call i32 @llvm.amdgcn.readlane(i32 %71, i32 31)
  %73 = insertelement <2 x i32> %70, i32 %72, i64 1
  %74 = bitcast <2 x i32> %73 to double
  %75 = icmp ugt i32 %3, 31
  %76 = select i1 %75, double %74, double 0x7FF0000000000000
  %77 = tail call double @llvm.minnum.f64(double %66, double %76)
  br label %84

78:                                               ; preds = %2
  %79 = icmp ult i32 %4, 10000
  br i1 %79, label %80, label %82

80:                                               ; preds = %78
  %81 = tail call fastcc double @137(double noundef %0) #57
  br label %84

82:                                               ; preds = %78
  %83 = tail call fastcc double @138(double noundef %0, i32 noundef %3) #57
  br label %84

84:                                               ; preds = %82, %80, %6
  %85 = phi double [ %77, %6 ], [ %81, %80 ], [ %83, %82 ]
  br i1 %1, label %131, label %86

86:                                               ; preds = %84
  br i1 %5, label %87, label %125

87:                                               ; preds = %86
  %88 = bitcast double %85 to <2 x i32>
  %89 = extractelement <2 x i32> %88, i64 0
  %90 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %89, i32 32912)
  %91 = insertelement <2 x i32> undef, i32 %90, i64 0
  %92 = extractelement <2 x i32> %88, i64 1
  %93 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %92, i32 32912)
  %94 = insertelement <2 x i32> %91, i32 %93, i64 1
  %95 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %89, i32 120)
  %96 = insertelement <2 x i32> undef, i32 %95, i64 0
  %97 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %92, i32 120)
  %98 = insertelement <2 x i32> %96, i32 %97, i64 1
  %99 = and i32 %3, 7
  %100 = icmp eq i32 %99, 4
  %101 = select i1 %100, <2 x i32> %98, <2 x i32> %94
  %102 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %89, i32 240)
  %103 = insertelement <2 x i32> undef, i32 %102, i64 0
  %104 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %92, i32 240)
  %105 = insertelement <2 x i32> %103, i32 %104, i64 1
  %106 = and i32 %3, 15
  %107 = icmp eq i32 %106, 8
  %108 = select i1 %107, <2 x i32> %105, <2 x i32> %101
  %109 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %89, i32 480)
  %110 = insertelement <2 x i32> undef, i32 %109, i64 0
  %111 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %92, i32 480)
  %112 = insertelement <2 x i32> %110, i32 %111, i64 1
  %113 = and i32 %3, 31
  %114 = icmp eq i32 %113, 16
  %115 = select i1 %114, <2 x i32> %112, <2 x i32> %108
  %116 = tail call i32 @llvm.amdgcn.readlane(i32 %89, i32 31)
  %117 = insertelement <2 x i32> undef, i32 %116, i64 0
  %118 = tail call i32 @llvm.amdgcn.readlane(i32 %92, i32 31)
  %119 = insertelement <2 x i32> %117, i32 %118, i64 1
  %120 = icmp eq i32 %3, 32
  %121 = select i1 %120, <2 x i32> %119, <2 x i32> %115
  %122 = bitcast <2 x i32> %121 to double
  %123 = icmp eq i32 %3, 0
  %124 = select i1 %123, double 0x7FF0000000000000, double %122
  br label %131

125:                                              ; preds = %86
  %126 = icmp ult i32 %4, 10000
  br i1 %126, label %127, label %129

127:                                              ; preds = %125
  %128 = tail call fastcc double @139(double noundef %85) #57
  br label %131

129:                                              ; preds = %125
  %130 = tail call fastcc double @140(double noundef %85, i32 noundef %3) #57
  br label %131

131:                                              ; preds = %129, %127, %87, %84
  %132 = phi double [ %85, %84 ], [ %124, %87 ], [ %128, %127 ], [ %130, %129 ]
  ret double %132
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc double @137(double noundef %0) unnamed_addr #54 {
  %2 = bitcast double %0 to <2 x i32>
  %3 = extractelement <2 x i32> %2, i64 0
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %3, i32 273, i32 15, i32 15, i1 false)
  %5 = insertelement <2 x i32> undef, i32 %4, i64 0
  %6 = extractelement <2 x i32> %2, i64 1
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2146435072, i32 %6, i32 273, i32 15, i32 15, i1 false)
  %8 = insertelement <2 x i32> %5, i32 %7, i64 1
  %9 = bitcast <2 x i32> %8 to double
  %10 = tail call double @llvm.minnum.f64(double %0, double %9)
  %11 = bitcast double %10 to <2 x i32>
  %12 = extractelement <2 x i32> %11, i64 0
  %13 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %12, i32 274, i32 15, i32 15, i1 false)
  %14 = insertelement <2 x i32> undef, i32 %13, i64 0
  %15 = extractelement <2 x i32> %11, i64 1
  %16 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2146435072, i32 %15, i32 274, i32 15, i32 15, i1 false)
  %17 = insertelement <2 x i32> %14, i32 %16, i64 1
  %18 = bitcast <2 x i32> %17 to double
  %19 = tail call double @llvm.minnum.f64(double %10, double %18)
  %20 = bitcast double %19 to <2 x i32>
  %21 = extractelement <2 x i32> %20, i64 0
  %22 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %21, i32 276, i32 15, i32 15, i1 false)
  %23 = insertelement <2 x i32> undef, i32 %22, i64 0
  %24 = extractelement <2 x i32> %20, i64 1
  %25 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2146435072, i32 %24, i32 276, i32 15, i32 15, i1 false)
  %26 = insertelement <2 x i32> %23, i32 %25, i64 1
  %27 = bitcast <2 x i32> %26 to double
  %28 = tail call double @llvm.minnum.f64(double %19, double %27)
  %29 = bitcast double %28 to <2 x i32>
  %30 = extractelement <2 x i32> %29, i64 0
  %31 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %30, i32 280, i32 15, i32 15, i1 false)
  %32 = insertelement <2 x i32> undef, i32 %31, i64 0
  %33 = extractelement <2 x i32> %29, i64 1
  %34 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2146435072, i32 %33, i32 280, i32 15, i32 15, i1 false)
  %35 = insertelement <2 x i32> %32, i32 %34, i64 1
  %36 = bitcast <2 x i32> %35 to double
  %37 = tail call double @llvm.minnum.f64(double %28, double %36)
  %38 = bitcast double %37 to <2 x i32>
  %39 = extractelement <2 x i32> %38, i64 0
  %40 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %39, i32 322, i32 10, i32 15, i1 false)
  %41 = insertelement <2 x i32> undef, i32 %40, i64 0
  %42 = extractelement <2 x i32> %38, i64 1
  %43 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2146435072, i32 %42, i32 322, i32 10, i32 15, i1 false)
  %44 = insertelement <2 x i32> %41, i32 %43, i64 1
  %45 = bitcast <2 x i32> %44 to double
  %46 = tail call double @llvm.minnum.f64(double %37, double %45)
  %47 = bitcast double %46 to <2 x i32>
  %48 = extractelement <2 x i32> %47, i64 0
  %49 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %48, i32 323, i32 12, i32 15, i1 false)
  %50 = insertelement <2 x i32> undef, i32 %49, i64 0
  %51 = extractelement <2 x i32> %47, i64 1
  %52 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2146435072, i32 %51, i32 323, i32 12, i32 15, i1 false)
  %53 = insertelement <2 x i32> %50, i32 %52, i64 1
  %54 = bitcast <2 x i32> %53 to double
  %55 = tail call double @llvm.minnum.f64(double %46, double %54)
  ret double %55
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc double @138(double noundef %0, i32 noundef %1) unnamed_addr #55 {
  %3 = bitcast double %0 to <2 x i32>
  %4 = extractelement <2 x i32> %3, i64 0
  %5 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %4, i32 273, i32 15, i32 15, i1 false)
  %6 = insertelement <2 x i32> undef, i32 %5, i64 0
  %7 = extractelement <2 x i32> %3, i64 1
  %8 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2146435072, i32 %7, i32 273, i32 15, i32 15, i1 false)
  %9 = insertelement <2 x i32> %6, i32 %8, i64 1
  %10 = bitcast <2 x i32> %9 to double
  %11 = tail call double @llvm.minnum.f64(double %0, double %10)
  %12 = bitcast double %11 to <2 x i32>
  %13 = extractelement <2 x i32> %12, i64 0
  %14 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %13, i32 274, i32 15, i32 15, i1 false)
  %15 = insertelement <2 x i32> undef, i32 %14, i64 0
  %16 = extractelement <2 x i32> %12, i64 1
  %17 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2146435072, i32 %16, i32 274, i32 15, i32 15, i1 false)
  %18 = insertelement <2 x i32> %15, i32 %17, i64 1
  %19 = bitcast <2 x i32> %18 to double
  %20 = tail call double @llvm.minnum.f64(double %11, double %19)
  %21 = bitcast double %20 to <2 x i32>
  %22 = extractelement <2 x i32> %21, i64 0
  %23 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %22, i32 276, i32 15, i32 15, i1 false)
  %24 = insertelement <2 x i32> undef, i32 %23, i64 0
  %25 = extractelement <2 x i32> %21, i64 1
  %26 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2146435072, i32 %25, i32 276, i32 15, i32 15, i1 false)
  %27 = insertelement <2 x i32> %24, i32 %26, i64 1
  %28 = bitcast <2 x i32> %27 to double
  %29 = tail call double @llvm.minnum.f64(double %20, double %28)
  %30 = bitcast double %29 to <2 x i32>
  %31 = extractelement <2 x i32> %30, i64 0
  %32 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %31, i32 280, i32 15, i32 15, i1 false)
  %33 = insertelement <2 x i32> undef, i32 %32, i64 0
  %34 = extractelement <2 x i32> %30, i64 1
  %35 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2146435072, i32 %34, i32 280, i32 15, i32 15, i1 false)
  %36 = insertelement <2 x i32> %33, i32 %35, i64 1
  %37 = bitcast <2 x i32> %36 to double
  %38 = tail call double @llvm.minnum.f64(double %29, double %37)
  %39 = bitcast double %38 to <2 x i32>
  %40 = extractelement <2 x i32> %39, i64 0
  %41 = tail call i32 @llvm.amdgcn.permlanex16(i32 0, i32 %40, i32 -1, i32 -1, i1 false, i1 false)
  %42 = insertelement <2 x i32> undef, i32 %41, i64 0
  %43 = extractelement <2 x i32> %39, i64 1
  %44 = tail call i32 @llvm.amdgcn.permlanex16(i32 2146435072, i32 %43, i32 -1, i32 -1, i1 false, i1 false)
  %45 = insertelement <2 x i32> %42, i32 %44, i64 1
  %46 = bitcast <2 x i32> %45 to double
  %47 = and i32 %1, 16
  %48 = icmp eq i32 %47, 0
  %49 = select i1 %48, double 0x7FF0000000000000, double %46
  %50 = tail call double @llvm.minnum.f64(double %38, double %49)
  %51 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %52 = icmp eq i8 %51, 0
  br i1 %52, label %65, label %53

53:                                               ; preds = %2
  %54 = bitcast double %50 to <2 x i32>
  %55 = extractelement <2 x i32> %54, i64 0
  %56 = tail call i32 @llvm.amdgcn.readlane(i32 %55, i32 31)
  %57 = insertelement <2 x i32> undef, i32 %56, i64 0
  %58 = extractelement <2 x i32> %54, i64 1
  %59 = tail call i32 @llvm.amdgcn.readlane(i32 %58, i32 31)
  %60 = insertelement <2 x i32> %57, i32 %59, i64 1
  %61 = bitcast <2 x i32> %60 to double
  %62 = icmp ugt i32 %1, 31
  %63 = select i1 %62, double %61, double 0x7FF0000000000000
  %64 = tail call double @llvm.minnum.f64(double %50, double %63)
  br label %65

65:                                               ; preds = %53, %2
  %66 = phi double [ %64, %53 ], [ %50, %2 ]
  ret double %66
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc double @139(double noundef %0) unnamed_addr #54 {
  %2 = bitcast double %0 to <2 x i32>
  %3 = extractelement <2 x i32> %2, i64 0
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %3, i32 312, i32 15, i32 15, i1 false)
  %5 = insertelement <2 x i32> undef, i32 %4, i64 0
  %6 = extractelement <2 x i32> %2, i64 1
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2146435072, i32 %6, i32 312, i32 15, i32 15, i1 false)
  %8 = insertelement <2 x i32> %5, i32 %7, i64 1
  %9 = bitcast <2 x i32> %8 to double
  ret double %9
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc double @140(double noundef %0, i32 noundef %1) unnamed_addr #55 {
  %3 = bitcast double %0 to <2 x i32>
  %4 = extractelement <2 x i32> %3, i64 0
  %5 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %4, i32 273, i32 15, i32 15, i1 false)
  %6 = insertelement <2 x i32> undef, i32 %5, i64 0
  %7 = extractelement <2 x i32> %3, i64 1
  %8 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 2146435072, i32 %7, i32 273, i32 15, i32 15, i1 false)
  %9 = insertelement <2 x i32> %6, i32 %8, i64 1
  %10 = bitcast <2 x i32> %9 to double
  %11 = tail call i32 @llvm.amdgcn.permlanex16(i32 0, i32 %4, i32 -1, i32 -1, i1 false, i1 false)
  %12 = insertelement <2 x i32> undef, i32 %11, i64 0
  %13 = tail call i32 @llvm.amdgcn.permlanex16(i32 2146435072, i32 %7, i32 -1, i32 -1, i1 false, i1 false)
  %14 = insertelement <2 x i32> %12, i32 %13, i64 1
  %15 = bitcast <2 x i32> %14 to double
  %16 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %30, label %18

18:                                               ; preds = %2
  %19 = tail call i32 @llvm.amdgcn.readlane(i32 %4, i32 31)
  %20 = insertelement <2 x i32> undef, i32 %19, i64 0
  %21 = tail call i32 @llvm.amdgcn.readlane(i32 %7, i32 31)
  %22 = insertelement <2 x i32> %20, i32 %21, i64 1
  %23 = bitcast <2 x i32> %22 to double
  %24 = icmp eq i32 %1, 32
  %25 = select i1 %24, double %23, double %15
  %26 = and i32 %1, 31
  %27 = icmp eq i32 %26, 16
  %28 = or i1 %24, %27
  %29 = select i1 %28, double %25, double %10
  br label %33

30:                                               ; preds = %2
  %31 = icmp eq i32 %1, 16
  %32 = select i1 %31, double %15, double %10
  br label %33

33:                                               ; preds = %30, %18
  %34 = phi double [ %29, %18 ], [ %32, %30 ]
  ret double %34
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected half @__ockl_wfred_min_f16(half noundef %0) local_unnamed_addr #0 {
  %2 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %3 = icmp slt i32 %2, 8000
  br i1 %3, label %4, label %121

4:                                                ; preds = %1
  %5 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %10, label %7

7:                                                ; preds = %4
  %8 = tail call i64 @llvm.read_register.i64(metadata !36) #57
  %9 = icmp eq i64 %8, -1
  br label %13

10:                                               ; preds = %4
  %11 = tail call i32 @llvm.read_register.i32(metadata !10) #57
  %12 = icmp eq i32 %11, -1
  br label %13

13:                                               ; preds = %10, %7
  %14 = phi i1 [ %9, %7 ], [ %12, %10 ]
  %15 = bitcast half %0 to i16
  %16 = zext i16 %15 to i32
  %17 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %16, i32 32945)
  br i1 %14, label %18, label %55

18:                                               ; preds = %13
  %19 = trunc i32 %17 to i16
  %20 = bitcast i16 %19 to half
  %21 = tail call half @llvm.minnum.f16(half %0, half %20)
  %22 = bitcast half %21 to i16
  %23 = zext i16 %22 to i32
  %24 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %23, i32 32846)
  %25 = trunc i32 %24 to i16
  %26 = bitcast i16 %25 to half
  %27 = tail call half @llvm.minnum.f16(half %21, half %26)
  %28 = bitcast half %27 to i16
  %29 = zext i16 %28 to i32
  %30 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %29, i32 4127)
  %31 = trunc i32 %30 to i16
  %32 = bitcast i16 %31 to half
  %33 = tail call half @llvm.minnum.f16(half %27, half %32)
  %34 = bitcast half %33 to i16
  %35 = zext i16 %34 to i32
  %36 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %35, i32 8223)
  %37 = trunc i32 %36 to i16
  %38 = bitcast i16 %37 to half
  %39 = tail call half @llvm.minnum.f16(half %33, half %38)
  %40 = bitcast half %39 to i16
  %41 = zext i16 %40 to i32
  %42 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %41, i32 16415)
  %43 = trunc i32 %42 to i16
  %44 = bitcast i16 %43 to half
  %45 = tail call half @llvm.minnum.f16(half %39, half %44)
  %46 = bitcast half %45 to i16
  %47 = zext i16 %46 to i32
  %48 = tail call i32 @llvm.amdgcn.readlane(i32 %47, i32 0)
  %49 = trunc i32 %48 to i16
  %50 = bitcast i16 %49 to half
  %51 = tail call i32 @llvm.amdgcn.readlane(i32 %47, i32 32)
  %52 = trunc i32 %51 to i16
  %53 = bitcast i16 %52 to half
  %54 = tail call half @llvm.minnum.f16(half %50, half %53)
  br label %127

55:                                               ; preds = %13
  %56 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 32945)
  %57 = and i32 %56, %17
  %58 = and i32 %56, 31744
  %59 = xor i32 %58, 31744
  %60 = or i32 %59, %57
  %61 = trunc i32 %60 to i16
  %62 = bitcast i16 %61 to half
  %63 = tail call half @llvm.minnum.f16(half %0, half %62)
  %64 = bitcast half %63 to i16
  %65 = zext i16 %64 to i32
  %66 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %65, i32 32846)
  %67 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 32846)
  %68 = and i32 %67, %66
  %69 = and i32 %67, 31744
  %70 = xor i32 %69, 31744
  %71 = or i32 %70, %68
  %72 = trunc i32 %71 to i16
  %73 = bitcast i16 %72 to half
  %74 = tail call half @llvm.minnum.f16(half %63, half %73)
  %75 = bitcast half %74 to i16
  %76 = zext i16 %75 to i32
  %77 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %76, i32 4127)
  %78 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 4127)
  %79 = and i32 %78, %77
  %80 = and i32 %78, 31744
  %81 = xor i32 %80, 31744
  %82 = or i32 %81, %79
  %83 = trunc i32 %82 to i16
  %84 = bitcast i16 %83 to half
  %85 = tail call half @llvm.minnum.f16(half %74, half %84)
  %86 = bitcast half %85 to i16
  %87 = zext i16 %86 to i32
  %88 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %87, i32 8223)
  %89 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 8223)
  %90 = and i32 %89, %88
  %91 = and i32 %89, 31744
  %92 = xor i32 %91, 31744
  %93 = or i32 %92, %90
  %94 = trunc i32 %93 to i16
  %95 = bitcast i16 %94 to half
  %96 = tail call half @llvm.minnum.f16(half %85, half %95)
  %97 = bitcast half %96 to i16
  %98 = zext i16 %97 to i32
  %99 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %98, i32 16415)
  %100 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 16415)
  %101 = and i32 %100, %99
  %102 = and i32 %100, 31744
  %103 = xor i32 %102, 31744
  %104 = or i32 %103, %101
  %105 = trunc i32 %104 to i16
  %106 = bitcast i16 %105 to half
  %107 = tail call half @llvm.minnum.f16(half %96, half %106)
  %108 = bitcast half %107 to i16
  %109 = zext i16 %108 to i32
  %110 = tail call i32 @llvm.amdgcn.readlane(i32 %109, i32 32)
  %111 = trunc i32 %110 to i16
  %112 = bitcast i16 %111 to half
  %113 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %114 = and i32 %113, 1
  %115 = icmp eq i32 %114, 0
  %116 = select i1 %115, half 0xH7C00, half %112
  %117 = tail call i32 @llvm.amdgcn.readlane(i32 %109, i32 0)
  %118 = trunc i32 %117 to i16
  %119 = bitcast i16 %118 to half
  %120 = tail call half @llvm.minnum.f16(half %119, half %116)
  br label %127

121:                                              ; preds = %1
  %122 = icmp ult i32 %2, 10000
  br i1 %122, label %123, label %125

123:                                              ; preds = %121
  %124 = tail call fastcc half @141(half noundef %0) #57
  br label %127

125:                                              ; preds = %121
  %126 = tail call fastcc half @142(half noundef %0) #57
  br label %127

127:                                              ; preds = %125, %123, %55, %18
  %128 = phi half [ %54, %18 ], [ %120, %55 ], [ %124, %123 ], [ %126, %125 ]
  ret half %128
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc half @141(half noundef %0) unnamed_addr #52 {
  %2 = bitcast half %0 to i16
  %3 = zext i16 %2 to i32
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 31744, i32 %3, i32 257, i32 15, i32 15, i1 false)
  %5 = trunc i32 %4 to i16
  %6 = bitcast i16 %5 to half
  %7 = tail call half @llvm.minnum.f16(half %0, half %6)
  %8 = bitcast half %7 to i16
  %9 = zext i16 %8 to i32
  %10 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 31744, i32 %9, i32 258, i32 15, i32 15, i1 false)
  %11 = trunc i32 %10 to i16
  %12 = bitcast i16 %11 to half
  %13 = tail call half @llvm.minnum.f16(half %7, half %12)
  %14 = bitcast half %13 to i16
  %15 = zext i16 %14 to i32
  %16 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 31744, i32 %15, i32 260, i32 15, i32 15, i1 false)
  %17 = trunc i32 %16 to i16
  %18 = bitcast i16 %17 to half
  %19 = tail call half @llvm.minnum.f16(half %13, half %18)
  %20 = bitcast half %19 to i16
  %21 = zext i16 %20 to i32
  %22 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 31744, i32 %21, i32 264, i32 15, i32 15, i1 false)
  %23 = trunc i32 %22 to i16
  %24 = bitcast i16 %23 to half
  %25 = tail call half @llvm.minnum.f16(half %19, half %24)
  %26 = bitcast half %25 to i16
  %27 = zext i16 %26 to i32
  %28 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 31744, i32 %27, i32 304, i32 15, i32 15, i1 false)
  %29 = and i32 %28, 65535
  %30 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 31744, i32 %29, i32 320, i32 15, i32 15, i1 false)
  %31 = trunc i32 %30 to i16
  %32 = bitcast i16 %31 to half
  %33 = tail call half @llvm.minnum.f16(half %25, half %32)
  %34 = bitcast half %33 to i16
  %35 = zext i16 %34 to i32
  %36 = tail call i32 @llvm.amdgcn.readlane(i32 %35, i32 32)
  %37 = trunc i32 %36 to i16
  %38 = bitcast i16 %37 to half
  %39 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %40 = and i32 %39, 1
  %41 = icmp eq i32 %40, 0
  %42 = select i1 %41, half 0xH7C00, half %38
  %43 = tail call i32 @llvm.amdgcn.readlane(i32 %35, i32 0)
  %44 = trunc i32 %43 to i16
  %45 = bitcast i16 %44 to half
  %46 = tail call half @llvm.minnum.f16(half %45, half %42)
  ret half %46
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc half @142(half noundef %0) unnamed_addr #53 {
  %2 = bitcast half %0 to i16
  %3 = zext i16 %2 to i32
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 31744, i32 %3, i32 257, i32 15, i32 15, i1 false)
  %5 = trunc i32 %4 to i16
  %6 = bitcast i16 %5 to half
  %7 = tail call half @llvm.minnum.f16(half %0, half %6)
  %8 = bitcast half %7 to i16
  %9 = zext i16 %8 to i32
  %10 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 31744, i32 %9, i32 258, i32 15, i32 15, i1 false)
  %11 = trunc i32 %10 to i16
  %12 = bitcast i16 %11 to half
  %13 = tail call half @llvm.minnum.f16(half %7, half %12)
  %14 = bitcast half %13 to i16
  %15 = zext i16 %14 to i32
  %16 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 31744, i32 %15, i32 260, i32 15, i32 15, i1 false)
  %17 = trunc i32 %16 to i16
  %18 = bitcast i16 %17 to half
  %19 = tail call half @llvm.minnum.f16(half %13, half %18)
  %20 = bitcast half %19 to i16
  %21 = zext i16 %20 to i32
  %22 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 31744, i32 %21, i32 264, i32 15, i32 15, i1 false)
  %23 = trunc i32 %22 to i16
  %24 = bitcast i16 %23 to half
  %25 = tail call half @llvm.minnum.f16(half %19, half %24)
  %26 = bitcast half %25 to i16
  %27 = zext i16 %26 to i32
  %28 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 31744, i32 %27, i32 336, i32 15, i32 15, i1 false)
  %29 = trunc i32 %28 to i16
  %30 = bitcast i16 %29 to half
  %31 = and i32 %28, 65535
  %32 = tail call i32 @llvm.amdgcn.permlanex16(i32 31744, i32 %31, i32 0, i32 0, i1 false, i1 false)
  %33 = trunc i32 %32 to i16
  %34 = bitcast i16 %33 to half
  %35 = tail call half @llvm.minnum.f16(half %30, half %34)
  %36 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %37 = icmp eq i8 %36, 0
  br i1 %37, label %52, label %38

38:                                               ; preds = %1
  %39 = bitcast half %35 to i16
  %40 = zext i16 %39 to i32
  %41 = tail call i32 @llvm.amdgcn.readlane(i32 %40, i32 32)
  %42 = trunc i32 %41 to i16
  %43 = bitcast i16 %42 to half
  %44 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %45 = and i32 %44, 1
  %46 = icmp eq i32 %45, 0
  %47 = select i1 %46, half 0xH7C00, half %43
  %48 = tail call i32 @llvm.amdgcn.readlane(i32 %40, i32 0)
  %49 = trunc i32 %48 to i16
  %50 = bitcast i16 %49 to half
  %51 = tail call half @llvm.minnum.f16(half %50, half %47)
  br label %52

52:                                               ; preds = %38, %1
  %53 = phi half [ %51, %38 ], [ %35, %1 ]
  ret half %53
}

; Function Attrs: convergent norecurse nounwind
define linkonce_odr protected half @__ockl_wfscan_min_f16(half noundef %0, i1 noundef zeroext %1) local_unnamed_addr #12 {
  %3 = tail call i32 @__ockl_lane_u32() #58
  %4 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %5 = icmp slt i32 %4, 8000
  br i1 %5, label %6, label %60

6:                                                ; preds = %2
  %7 = bitcast half %0 to i16
  %8 = zext i16 %7 to i32
  %9 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %8, i32 30)
  %10 = trunc i32 %9 to i16
  %11 = bitcast i16 %10 to half
  %12 = and i32 %3, 1
  %13 = icmp eq i32 %12, 0
  %14 = select i1 %13, half 0xH7C00, half %11
  %15 = tail call half @llvm.minnum.f16(half %0, half %14)
  %16 = bitcast half %15 to i16
  %17 = zext i16 %16 to i32
  %18 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %17, i32 60)
  %19 = trunc i32 %18 to i16
  %20 = bitcast i16 %19 to half
  %21 = and i32 %3, 2
  %22 = icmp eq i32 %21, 0
  %23 = select i1 %22, half 0xH7C00, half %20
  %24 = tail call half @llvm.minnum.f16(half %15, half %23)
  %25 = bitcast half %24 to i16
  %26 = zext i16 %25 to i32
  %27 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %26, i32 120)
  %28 = trunc i32 %27 to i16
  %29 = bitcast i16 %28 to half
  %30 = and i32 %3, 4
  %31 = icmp eq i32 %30, 0
  %32 = select i1 %31, half 0xH7C00, half %29
  %33 = tail call half @llvm.minnum.f16(half %24, half %32)
  %34 = bitcast half %33 to i16
  %35 = zext i16 %34 to i32
  %36 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %35, i32 240)
  %37 = trunc i32 %36 to i16
  %38 = bitcast i16 %37 to half
  %39 = and i32 %3, 8
  %40 = icmp eq i32 %39, 0
  %41 = select i1 %40, half 0xH7C00, half %38
  %42 = tail call half @llvm.minnum.f16(half %33, half %41)
  %43 = bitcast half %42 to i16
  %44 = zext i16 %43 to i32
  %45 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %44, i32 480)
  %46 = trunc i32 %45 to i16
  %47 = bitcast i16 %46 to half
  %48 = and i32 %3, 16
  %49 = icmp eq i32 %48, 0
  %50 = select i1 %49, half 0xH7C00, half %47
  %51 = tail call half @llvm.minnum.f16(half %42, half %50)
  %52 = bitcast half %51 to i16
  %53 = zext i16 %52 to i32
  %54 = tail call i32 @llvm.amdgcn.readlane(i32 %53, i32 31)
  %55 = trunc i32 %54 to i16
  %56 = bitcast i16 %55 to half
  %57 = icmp ugt i32 %3, 31
  %58 = select i1 %57, half %56, half 0xH7C00
  %59 = tail call half @llvm.minnum.f16(half %51, half %58)
  br label %66

60:                                               ; preds = %2
  %61 = icmp ult i32 %4, 10000
  br i1 %61, label %62, label %64

62:                                               ; preds = %60
  %63 = tail call fastcc half @143(half noundef %0) #57
  br label %66

64:                                               ; preds = %60
  %65 = tail call fastcc half @144(half noundef %0, i32 noundef %3) #57
  br label %66

66:                                               ; preds = %64, %62, %6
  %67 = phi half [ %59, %6 ], [ %63, %62 ], [ %65, %64 ]
  br i1 %1, label %98, label %68

68:                                               ; preds = %66
  br i1 %5, label %69, label %92

69:                                               ; preds = %68
  %70 = bitcast half %67 to i16
  %71 = zext i16 %70 to i32
  %72 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %71, i32 32912)
  %73 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %71, i32 120)
  %74 = and i32 %3, 7
  %75 = icmp eq i32 %74, 4
  %76 = select i1 %75, i32 %73, i32 %72
  %77 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %71, i32 240)
  %78 = and i32 %3, 15
  %79 = icmp eq i32 %78, 8
  %80 = select i1 %79, i32 %77, i32 %76
  %81 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %71, i32 480)
  %82 = and i32 %3, 31
  %83 = icmp eq i32 %82, 16
  %84 = select i1 %83, i32 %81, i32 %80
  %85 = tail call i32 @llvm.amdgcn.readlane(i32 %71, i32 31)
  %86 = icmp eq i32 %3, 32
  %87 = select i1 %86, i32 %85, i32 %84
  %88 = trunc i32 %87 to i16
  %89 = bitcast i16 %88 to half
  %90 = icmp eq i32 %3, 0
  %91 = select i1 %90, half 0xH7C00, half %89
  br label %98

92:                                               ; preds = %68
  %93 = icmp ult i32 %4, 10000
  br i1 %93, label %94, label %96

94:                                               ; preds = %92
  %95 = tail call fastcc half @145(half noundef %67) #57
  br label %98

96:                                               ; preds = %92
  %97 = tail call fastcc half @146(half noundef %67, i32 noundef %3) #57
  br label %98

98:                                               ; preds = %96, %94, %69, %66
  %99 = phi half [ %67, %66 ], [ %91, %69 ], [ %95, %94 ], [ %97, %96 ]
  ret half %99
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc half @143(half noundef %0) unnamed_addr #54 {
  %2 = bitcast half %0 to i16
  %3 = zext i16 %2 to i32
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 31744, i32 %3, i32 273, i32 15, i32 15, i1 false)
  %5 = trunc i32 %4 to i16
  %6 = bitcast i16 %5 to half
  %7 = tail call half @llvm.minnum.f16(half %0, half %6)
  %8 = bitcast half %7 to i16
  %9 = zext i16 %8 to i32
  %10 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 31744, i32 %9, i32 274, i32 15, i32 15, i1 false)
  %11 = trunc i32 %10 to i16
  %12 = bitcast i16 %11 to half
  %13 = tail call half @llvm.minnum.f16(half %7, half %12)
  %14 = bitcast half %13 to i16
  %15 = zext i16 %14 to i32
  %16 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 31744, i32 %15, i32 276, i32 15, i32 15, i1 false)
  %17 = trunc i32 %16 to i16
  %18 = bitcast i16 %17 to half
  %19 = tail call half @llvm.minnum.f16(half %13, half %18)
  %20 = bitcast half %19 to i16
  %21 = zext i16 %20 to i32
  %22 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 31744, i32 %21, i32 280, i32 15, i32 15, i1 false)
  %23 = trunc i32 %22 to i16
  %24 = bitcast i16 %23 to half
  %25 = tail call half @llvm.minnum.f16(half %19, half %24)
  %26 = bitcast half %25 to i16
  %27 = zext i16 %26 to i32
  %28 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 31744, i32 %27, i32 322, i32 10, i32 15, i1 false)
  %29 = trunc i32 %28 to i16
  %30 = bitcast i16 %29 to half
  %31 = tail call half @llvm.minnum.f16(half %25, half %30)
  %32 = bitcast half %31 to i16
  %33 = zext i16 %32 to i32
  %34 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 31744, i32 %33, i32 323, i32 12, i32 15, i1 false)
  %35 = trunc i32 %34 to i16
  %36 = bitcast i16 %35 to half
  %37 = tail call half @llvm.minnum.f16(half %31, half %36)
  ret half %37
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc half @144(half noundef %0, i32 noundef %1) unnamed_addr #55 {
  %3 = bitcast half %0 to i16
  %4 = zext i16 %3 to i32
  %5 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 31744, i32 %4, i32 273, i32 15, i32 15, i1 false)
  %6 = trunc i32 %5 to i16
  %7 = bitcast i16 %6 to half
  %8 = tail call half @llvm.minnum.f16(half %0, half %7)
  %9 = bitcast half %8 to i16
  %10 = zext i16 %9 to i32
  %11 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 31744, i32 %10, i32 274, i32 15, i32 15, i1 false)
  %12 = trunc i32 %11 to i16
  %13 = bitcast i16 %12 to half
  %14 = tail call half @llvm.minnum.f16(half %8, half %13)
  %15 = bitcast half %14 to i16
  %16 = zext i16 %15 to i32
  %17 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 31744, i32 %16, i32 276, i32 15, i32 15, i1 false)
  %18 = trunc i32 %17 to i16
  %19 = bitcast i16 %18 to half
  %20 = tail call half @llvm.minnum.f16(half %14, half %19)
  %21 = bitcast half %20 to i16
  %22 = zext i16 %21 to i32
  %23 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 31744, i32 %22, i32 280, i32 15, i32 15, i1 false)
  %24 = trunc i32 %23 to i16
  %25 = bitcast i16 %24 to half
  %26 = tail call half @llvm.minnum.f16(half %20, half %25)
  %27 = bitcast half %26 to i16
  %28 = zext i16 %27 to i32
  %29 = tail call i32 @llvm.amdgcn.permlanex16(i32 31744, i32 %28, i32 -1, i32 -1, i1 false, i1 false)
  %30 = trunc i32 %29 to i16
  %31 = bitcast i16 %30 to half
  %32 = and i32 %1, 16
  %33 = icmp eq i32 %32, 0
  %34 = select i1 %33, half 0xH7C00, half %31
  %35 = tail call half @llvm.minnum.f16(half %26, half %34)
  %36 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %37 = icmp eq i8 %36, 0
  br i1 %37, label %47, label %38

38:                                               ; preds = %2
  %39 = bitcast half %35 to i16
  %40 = zext i16 %39 to i32
  %41 = tail call i32 @llvm.amdgcn.readlane(i32 %40, i32 31)
  %42 = trunc i32 %41 to i16
  %43 = bitcast i16 %42 to half
  %44 = icmp ugt i32 %1, 31
  %45 = select i1 %44, half %43, half 0xH7C00
  %46 = tail call half @llvm.minnum.f16(half %35, half %45)
  br label %47

47:                                               ; preds = %38, %2
  %48 = phi half [ %46, %38 ], [ %35, %2 ]
  ret half %48
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc half @145(half noundef %0) unnamed_addr #54 {
  %2 = bitcast half %0 to i16
  %3 = zext i16 %2 to i32
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 31744, i32 %3, i32 312, i32 15, i32 15, i1 false)
  %5 = trunc i32 %4 to i16
  %6 = bitcast i16 %5 to half
  ret half %6
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc half @146(half noundef %0, i32 noundef %1) unnamed_addr #55 {
  %3 = bitcast half %0 to i16
  %4 = zext i16 %3 to i32
  %5 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 31744, i32 %4, i32 273, i32 15, i32 15, i1 false)
  %6 = trunc i32 %5 to i16
  %7 = bitcast i16 %6 to half
  %8 = tail call i32 @llvm.amdgcn.permlanex16(i32 31744, i32 %4, i32 -1, i32 -1, i1 false, i1 false)
  %9 = trunc i32 %8 to i16
  %10 = bitcast i16 %9 to half
  %11 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %12 = icmp eq i8 %11, 0
  br i1 %12, label %23, label %13

13:                                               ; preds = %2
  %14 = tail call i32 @llvm.amdgcn.readlane(i32 %4, i32 31)
  %15 = trunc i32 %14 to i16
  %16 = bitcast i16 %15 to half
  %17 = icmp eq i32 %1, 32
  %18 = select i1 %17, half %16, half %10
  %19 = and i32 %1, 31
  %20 = icmp eq i32 %19, 16
  %21 = or i1 %17, %20
  %22 = select i1 %21, half %18, half %7
  br label %26

23:                                               ; preds = %2
  %24 = icmp eq i32 %1, 16
  %25 = select i1 %24, half %10, half %7
  br label %26

26:                                               ; preds = %23, %13
  %27 = phi half [ %22, %13 ], [ %25, %23 ]
  ret half %27
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected i32 @__ockl_wfred_max_i32(i32 noundef %0) local_unnamed_addr #0 {
  %2 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %3 = icmp slt i32 %2, 8000
  br i1 %3, label %4, label %71

4:                                                ; preds = %1
  %5 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %10, label %7

7:                                                ; preds = %4
  %8 = tail call i64 @llvm.read_register.i64(metadata !36) #57
  %9 = icmp eq i64 %8, -1
  br label %13

10:                                               ; preds = %4
  %11 = tail call i32 @llvm.read_register.i32(metadata !10) #57
  %12 = icmp eq i32 %11, -1
  br label %13

13:                                               ; preds = %10, %7
  %14 = phi i1 [ %9, %7 ], [ %12, %10 ]
  %15 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %0, i32 32945)
  br i1 %14, label %16, label %29

16:                                               ; preds = %13
  %17 = tail call i32 @llvm.smax.i32(i32 %0, i32 %15)
  %18 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %17, i32 32846)
  %19 = tail call i32 @llvm.smax.i32(i32 %17, i32 %18)
  %20 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %19, i32 4127)
  %21 = tail call i32 @llvm.smax.i32(i32 %19, i32 %20)
  %22 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %21, i32 8223)
  %23 = tail call i32 @llvm.smax.i32(i32 %21, i32 %22)
  %24 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %23, i32 16415)
  %25 = tail call i32 @llvm.smax.i32(i32 %23, i32 %24)
  %26 = tail call i32 @llvm.amdgcn.readlane(i32 %25, i32 0)
  %27 = tail call i32 @llvm.amdgcn.readlane(i32 %25, i32 32)
  %28 = tail call i32 @llvm.smax.i32(i32 %26, i32 %27)
  br label %77

29:                                               ; preds = %13
  %30 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 32945)
  %31 = and i32 %30, %15
  %32 = and i32 %30, -2147483648
  %33 = xor i32 %32, -2147483648
  %34 = or i32 %33, %31
  %35 = tail call i32 @llvm.smax.i32(i32 %0, i32 %34)
  %36 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %35, i32 32846)
  %37 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 32846)
  %38 = and i32 %37, %36
  %39 = and i32 %37, -2147483648
  %40 = xor i32 %39, -2147483648
  %41 = or i32 %40, %38
  %42 = tail call i32 @llvm.smax.i32(i32 %35, i32 %41)
  %43 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %42, i32 4127)
  %44 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 4127)
  %45 = and i32 %44, %43
  %46 = and i32 %44, -2147483648
  %47 = xor i32 %46, -2147483648
  %48 = or i32 %47, %45
  %49 = tail call i32 @llvm.smax.i32(i32 %42, i32 %48)
  %50 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %49, i32 8223)
  %51 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 8223)
  %52 = and i32 %51, %50
  %53 = and i32 %51, -2147483648
  %54 = xor i32 %53, -2147483648
  %55 = or i32 %54, %52
  %56 = tail call i32 @llvm.smax.i32(i32 %49, i32 %55)
  %57 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %56, i32 16415)
  %58 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 16415)
  %59 = and i32 %58, %57
  %60 = and i32 %58, -2147483648
  %61 = xor i32 %60, -2147483648
  %62 = or i32 %61, %59
  %63 = tail call i32 @llvm.smax.i32(i32 %56, i32 %62)
  %64 = tail call i32 @llvm.amdgcn.readlane(i32 %63, i32 32)
  %65 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %66 = and i32 %65, 1
  %67 = icmp eq i32 %66, 0
  %68 = select i1 %67, i32 -2147483648, i32 %64
  %69 = tail call i32 @llvm.amdgcn.readlane(i32 %63, i32 0)
  %70 = tail call i32 @llvm.smax.i32(i32 %69, i32 %68)
  br label %77

71:                                               ; preds = %1
  %72 = icmp ult i32 %2, 10000
  br i1 %72, label %73, label %75

73:                                               ; preds = %71
  %74 = tail call fastcc i32 @147(i32 noundef %0) #57
  br label %77

75:                                               ; preds = %71
  %76 = tail call fastcc i32 @148(i32 noundef %0) #57
  br label %77

77:                                               ; preds = %75, %73, %29, %16
  %78 = phi i32 [ %28, %16 ], [ %70, %29 ], [ %74, %73 ], [ %76, %75 ]
  ret i32 %78
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc i32 @147(i32 noundef %0) unnamed_addr #52 {
  %2 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -2147483648, i32 %0, i32 257, i32 15, i32 15, i1 false)
  %3 = tail call i32 @llvm.smax.i32(i32 %0, i32 %2)
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -2147483648, i32 %3, i32 258, i32 15, i32 15, i1 false)
  %5 = tail call i32 @llvm.smax.i32(i32 %3, i32 %4)
  %6 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -2147483648, i32 %5, i32 260, i32 15, i32 15, i1 false)
  %7 = tail call i32 @llvm.smax.i32(i32 %5, i32 %6)
  %8 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -2147483648, i32 %7, i32 264, i32 15, i32 15, i1 false)
  %9 = tail call i32 @llvm.smax.i32(i32 %7, i32 %8)
  %10 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -2147483648, i32 %9, i32 304, i32 15, i32 15, i1 false)
  %11 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -2147483648, i32 %10, i32 320, i32 15, i32 15, i1 false)
  %12 = tail call i32 @llvm.smax.i32(i32 %9, i32 %11)
  %13 = tail call i32 @llvm.amdgcn.readlane(i32 %12, i32 32)
  %14 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %15 = and i32 %14, 1
  %16 = icmp eq i32 %15, 0
  %17 = select i1 %16, i32 -2147483648, i32 %13
  %18 = tail call i32 @llvm.amdgcn.readlane(i32 %12, i32 0)
  %19 = tail call i32 @llvm.smax.i32(i32 %18, i32 %17)
  ret i32 %19
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc i32 @148(i32 noundef %0) unnamed_addr #53 {
  %2 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -2147483648, i32 %0, i32 257, i32 15, i32 15, i1 false)
  %3 = tail call i32 @llvm.smax.i32(i32 %0, i32 %2)
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -2147483648, i32 %3, i32 258, i32 15, i32 15, i1 false)
  %5 = tail call i32 @llvm.smax.i32(i32 %3, i32 %4)
  %6 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -2147483648, i32 %5, i32 260, i32 15, i32 15, i1 false)
  %7 = tail call i32 @llvm.smax.i32(i32 %5, i32 %6)
  %8 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -2147483648, i32 %7, i32 264, i32 15, i32 15, i1 false)
  %9 = tail call i32 @llvm.smax.i32(i32 %7, i32 %8)
  %10 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -2147483648, i32 %9, i32 336, i32 15, i32 15, i1 false)
  %11 = tail call i32 @llvm.amdgcn.permlanex16(i32 -2147483648, i32 %10, i32 0, i32 0, i1 false, i1 false)
  %12 = tail call i32 @llvm.smax.i32(i32 %10, i32 %11)
  %13 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %23, label %15

15:                                               ; preds = %1
  %16 = tail call i32 @llvm.amdgcn.readlane(i32 %12, i32 32)
  %17 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %18 = and i32 %17, 1
  %19 = icmp eq i32 %18, 0
  %20 = select i1 %19, i32 -2147483648, i32 %16
  %21 = tail call i32 @llvm.amdgcn.readlane(i32 %12, i32 0)
  %22 = tail call i32 @llvm.smax.i32(i32 %21, i32 %20)
  br label %23

23:                                               ; preds = %15, %1
  %24 = phi i32 [ %22, %15 ], [ %12, %1 ]
  ret i32 %24
}

; Function Attrs: convergent norecurse nounwind
define linkonce_odr protected i32 @__ockl_wfscan_max_i32(i32 noundef %0, i1 noundef zeroext %1) local_unnamed_addr #12 {
  %3 = tail call i32 @__ockl_lane_u32() #58
  %4 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %5 = icmp slt i32 %4, 8000
  br i1 %5, label %6, label %36

6:                                                ; preds = %2
  %7 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %0, i32 30)
  %8 = and i32 %3, 1
  %9 = icmp eq i32 %8, 0
  %10 = select i1 %9, i32 -2147483648, i32 %7
  %11 = tail call i32 @llvm.smax.i32(i32 %0, i32 %10)
  %12 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %11, i32 60)
  %13 = and i32 %3, 2
  %14 = icmp eq i32 %13, 0
  %15 = select i1 %14, i32 -2147483648, i32 %12
  %16 = tail call i32 @llvm.smax.i32(i32 %11, i32 %15)
  %17 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %16, i32 120)
  %18 = and i32 %3, 4
  %19 = icmp eq i32 %18, 0
  %20 = select i1 %19, i32 -2147483648, i32 %17
  %21 = tail call i32 @llvm.smax.i32(i32 %16, i32 %20)
  %22 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %21, i32 240)
  %23 = and i32 %3, 8
  %24 = icmp eq i32 %23, 0
  %25 = select i1 %24, i32 -2147483648, i32 %22
  %26 = tail call i32 @llvm.smax.i32(i32 %21, i32 %25)
  %27 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %26, i32 480)
  %28 = and i32 %3, 16
  %29 = icmp eq i32 %28, 0
  %30 = select i1 %29, i32 -2147483648, i32 %27
  %31 = tail call i32 @llvm.smax.i32(i32 %26, i32 %30)
  %32 = tail call i32 @llvm.amdgcn.readlane(i32 %31, i32 31)
  %33 = icmp ugt i32 %3, 31
  %34 = select i1 %33, i32 %32, i32 -2147483648
  %35 = tail call i32 @llvm.smax.i32(i32 %31, i32 %34)
  br label %42

36:                                               ; preds = %2
  %37 = icmp ult i32 %4, 10000
  br i1 %37, label %38, label %40

38:                                               ; preds = %36
  %39 = tail call fastcc i32 @149(i32 noundef %0) #57
  br label %42

40:                                               ; preds = %36
  %41 = tail call fastcc i32 @150(i32 noundef %0, i32 noundef %3) #57
  br label %42

42:                                               ; preds = %40, %38, %6
  %43 = phi i32 [ %35, %6 ], [ %39, %38 ], [ %41, %40 ]
  br i1 %1, label %70, label %44

44:                                               ; preds = %42
  br i1 %5, label %45, label %64

45:                                               ; preds = %44
  %46 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %43, i32 32912)
  %47 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %43, i32 120)
  %48 = and i32 %3, 7
  %49 = icmp eq i32 %48, 4
  %50 = select i1 %49, i32 %47, i32 %46
  %51 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %43, i32 240)
  %52 = and i32 %3, 15
  %53 = icmp eq i32 %52, 8
  %54 = select i1 %53, i32 %51, i32 %50
  %55 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %43, i32 480)
  %56 = and i32 %3, 31
  %57 = icmp eq i32 %56, 16
  %58 = select i1 %57, i32 %55, i32 %54
  %59 = tail call i32 @llvm.amdgcn.readlane(i32 %43, i32 31)
  %60 = icmp eq i32 %3, 32
  %61 = select i1 %60, i32 %59, i32 %58
  %62 = icmp eq i32 %3, 0
  %63 = select i1 %62, i32 -2147483648, i32 %61
  br label %70

64:                                               ; preds = %44
  %65 = icmp ult i32 %4, 10000
  br i1 %65, label %66, label %68

66:                                               ; preds = %64
  %67 = tail call fastcc i32 @151(i32 noundef %43) #57
  br label %70

68:                                               ; preds = %64
  %69 = tail call fastcc i32 @152(i32 noundef %43, i32 noundef %3) #57
  br label %70

70:                                               ; preds = %68, %66, %45, %42
  %71 = phi i32 [ %43, %42 ], [ %63, %45 ], [ %67, %66 ], [ %69, %68 ]
  ret i32 %71
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i32 @149(i32 noundef %0) unnamed_addr #54 {
  %2 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -2147483648, i32 %0, i32 273, i32 15, i32 15, i1 false)
  %3 = tail call i32 @llvm.smax.i32(i32 %0, i32 %2)
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -2147483648, i32 %3, i32 274, i32 15, i32 15, i1 false)
  %5 = tail call i32 @llvm.smax.i32(i32 %3, i32 %4)
  %6 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -2147483648, i32 %5, i32 276, i32 15, i32 15, i1 false)
  %7 = tail call i32 @llvm.smax.i32(i32 %5, i32 %6)
  %8 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -2147483648, i32 %7, i32 280, i32 15, i32 15, i1 false)
  %9 = tail call i32 @llvm.smax.i32(i32 %7, i32 %8)
  %10 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -2147483648, i32 %9, i32 322, i32 10, i32 15, i1 false)
  %11 = tail call i32 @llvm.smax.i32(i32 %9, i32 %10)
  %12 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -2147483648, i32 %11, i32 323, i32 12, i32 15, i1 false)
  %13 = tail call i32 @llvm.smax.i32(i32 %11, i32 %12)
  ret i32 %13
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i32 @150(i32 noundef %0, i32 noundef %1) unnamed_addr #55 {
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -2147483648, i32 %0, i32 273, i32 15, i32 15, i1 false)
  %4 = tail call i32 @llvm.smax.i32(i32 %0, i32 %3)
  %5 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -2147483648, i32 %4, i32 274, i32 15, i32 15, i1 false)
  %6 = tail call i32 @llvm.smax.i32(i32 %4, i32 %5)
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -2147483648, i32 %6, i32 276, i32 15, i32 15, i1 false)
  %8 = tail call i32 @llvm.smax.i32(i32 %6, i32 %7)
  %9 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -2147483648, i32 %8, i32 280, i32 15, i32 15, i1 false)
  %10 = tail call i32 @llvm.smax.i32(i32 %8, i32 %9)
  %11 = tail call i32 @llvm.amdgcn.permlanex16(i32 -2147483648, i32 %10, i32 -1, i32 -1, i1 false, i1 false)
  %12 = and i32 %1, 16
  %13 = icmp eq i32 %12, 0
  %14 = select i1 %13, i32 -2147483648, i32 %11
  %15 = tail call i32 @llvm.smax.i32(i32 %10, i32 %14)
  %16 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %23, label %18

18:                                               ; preds = %2
  %19 = icmp ugt i32 %1, 31
  %20 = tail call i32 @llvm.amdgcn.readlane(i32 %15, i32 31)
  %21 = select i1 %19, i32 %20, i32 -2147483648
  %22 = tail call i32 @llvm.smax.i32(i32 %15, i32 %21)
  br label %23

23:                                               ; preds = %18, %2
  %24 = phi i32 [ %22, %18 ], [ %15, %2 ]
  ret i32 %24
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i32 @151(i32 noundef %0) unnamed_addr #54 {
  %2 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -2147483648, i32 %0, i32 312, i32 15, i32 15, i1 false)
  ret i32 %2
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i32 @152(i32 noundef %0, i32 noundef %1) unnamed_addr #55 {
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -2147483648, i32 %0, i32 273, i32 15, i32 15, i1 false)
  %4 = tail call i32 @llvm.amdgcn.permlanex16(i32 -2147483648, i32 %0, i32 -1, i32 -1, i1 false, i1 false)
  %5 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %15, label %7

7:                                                ; preds = %2
  %8 = tail call i32 @llvm.amdgcn.readlane(i32 %0, i32 31)
  %9 = icmp eq i32 %1, 32
  %10 = select i1 %9, i32 %8, i32 %4
  %11 = and i32 %1, 31
  %12 = icmp eq i32 %11, 16
  %13 = or i1 %9, %12
  %14 = select i1 %13, i32 %10, i32 %3
  br label %18

15:                                               ; preds = %2
  %16 = icmp eq i32 %1, 16
  %17 = select i1 %16, i32 %4, i32 %3
  br label %18

18:                                               ; preds = %15, %7
  %19 = phi i32 [ %14, %7 ], [ %17, %15 ]
  ret i32 %19
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected i32 @__ockl_wfred_max_u32(i32 noundef %0) local_unnamed_addr #0 {
  %2 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %3 = icmp slt i32 %2, 8000
  br i1 %3, label %4, label %37

4:                                                ; preds = %1
  %5 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %10, label %7

7:                                                ; preds = %4
  %8 = tail call i64 @llvm.read_register.i64(metadata !36) #57
  %9 = icmp eq i64 %8, -1
  br label %13

10:                                               ; preds = %4
  %11 = tail call i32 @llvm.read_register.i32(metadata !10) #57
  %12 = icmp eq i32 %11, -1
  br label %13

13:                                               ; preds = %10, %7
  %14 = phi i1 [ %9, %7 ], [ %12, %10 ]
  %15 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %0, i32 32945)
  %16 = tail call i32 @llvm.umax.i32(i32 %0, i32 %15)
  %17 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %16, i32 32846)
  %18 = tail call i32 @llvm.umax.i32(i32 %16, i32 %17)
  %19 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %18, i32 4127)
  %20 = tail call i32 @llvm.umax.i32(i32 %18, i32 %19)
  %21 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %20, i32 8223)
  %22 = tail call i32 @llvm.umax.i32(i32 %20, i32 %21)
  %23 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %22, i32 16415)
  %24 = tail call i32 @llvm.umax.i32(i32 %22, i32 %23)
  br i1 %14, label %25, label %29

25:                                               ; preds = %13
  %26 = tail call i32 @llvm.amdgcn.readlane(i32 %24, i32 0)
  %27 = tail call i32 @llvm.amdgcn.readlane(i32 %24, i32 32)
  %28 = tail call i32 @llvm.umax.i32(i32 %26, i32 %27)
  br label %43

29:                                               ; preds = %13
  %30 = tail call i32 @llvm.amdgcn.readlane(i32 %24, i32 32)
  %31 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %32 = and i32 %31, 1
  %33 = icmp eq i32 %32, 0
  %34 = select i1 %33, i32 0, i32 %30
  %35 = tail call i32 @llvm.amdgcn.readlane(i32 %24, i32 0)
  %36 = tail call i32 @llvm.umax.i32(i32 %35, i32 %34)
  br label %43

37:                                               ; preds = %1
  %38 = icmp ult i32 %2, 10000
  br i1 %38, label %39, label %41

39:                                               ; preds = %37
  %40 = tail call fastcc i32 @153(i32 noundef %0) #57
  br label %43

41:                                               ; preds = %37
  %42 = tail call fastcc i32 @154(i32 noundef %0) #57
  br label %43

43:                                               ; preds = %41, %39, %29, %25
  %44 = phi i32 [ %28, %25 ], [ %36, %29 ], [ %40, %39 ], [ %42, %41 ]
  ret i32 %44
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc i32 @153(i32 noundef %0) unnamed_addr #52 {
  %2 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %0, i32 257, i32 15, i32 15, i1 true)
  %3 = tail call i32 @llvm.umax.i32(i32 %0, i32 %2)
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %3, i32 258, i32 15, i32 15, i1 true)
  %5 = tail call i32 @llvm.umax.i32(i32 %3, i32 %4)
  %6 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %5, i32 260, i32 15, i32 15, i1 true)
  %7 = tail call i32 @llvm.umax.i32(i32 %5, i32 %6)
  %8 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %7, i32 264, i32 15, i32 15, i1 true)
  %9 = tail call i32 @llvm.umax.i32(i32 %7, i32 %8)
  %10 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %9, i32 304, i32 15, i32 15, i1 true)
  %11 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %10, i32 320, i32 15, i32 15, i1 true)
  %12 = tail call i32 @llvm.umax.i32(i32 %9, i32 %11)
  %13 = tail call i32 @llvm.amdgcn.readlane(i32 %12, i32 32)
  %14 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %15 = and i32 %14, 1
  %16 = icmp eq i32 %15, 0
  %17 = select i1 %16, i32 0, i32 %13
  %18 = tail call i32 @llvm.amdgcn.readlane(i32 %12, i32 0)
  %19 = tail call i32 @llvm.umax.i32(i32 %18, i32 %17)
  ret i32 %19
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc i32 @154(i32 noundef %0) unnamed_addr #53 {
  %2 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %0, i32 257, i32 15, i32 15, i1 true)
  %3 = tail call i32 @llvm.umax.i32(i32 %0, i32 %2)
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %3, i32 258, i32 15, i32 15, i1 true)
  %5 = tail call i32 @llvm.umax.i32(i32 %3, i32 %4)
  %6 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %5, i32 260, i32 15, i32 15, i1 true)
  %7 = tail call i32 @llvm.umax.i32(i32 %5, i32 %6)
  %8 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %7, i32 264, i32 15, i32 15, i1 true)
  %9 = tail call i32 @llvm.umax.i32(i32 %7, i32 %8)
  %10 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %9, i32 336, i32 15, i32 15, i1 true)
  %11 = tail call i32 @llvm.amdgcn.permlanex16(i32 undef, i32 %10, i32 0, i32 0, i1 false, i1 true)
  %12 = tail call i32 @llvm.umax.i32(i32 %10, i32 %11)
  %13 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %23, label %15

15:                                               ; preds = %1
  %16 = tail call i32 @llvm.amdgcn.readlane(i32 %12, i32 32)
  %17 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %18 = and i32 %17, 1
  %19 = icmp eq i32 %18, 0
  %20 = select i1 %19, i32 0, i32 %16
  %21 = tail call i32 @llvm.amdgcn.readlane(i32 %12, i32 0)
  %22 = tail call i32 @llvm.umax.i32(i32 %21, i32 %20)
  br label %23

23:                                               ; preds = %15, %1
  %24 = phi i32 [ %22, %15 ], [ %12, %1 ]
  ret i32 %24
}

; Function Attrs: convergent norecurse nounwind
define linkonce_odr protected i32 @__ockl_wfscan_max_u32(i32 noundef %0, i1 noundef zeroext %1) local_unnamed_addr #12 {
  %3 = tail call i32 @__ockl_lane_u32() #58
  %4 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %5 = icmp slt i32 %4, 8000
  br i1 %5, label %6, label %36

6:                                                ; preds = %2
  %7 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %0, i32 30)
  %8 = and i32 %3, 1
  %9 = icmp eq i32 %8, 0
  %10 = select i1 %9, i32 0, i32 %7
  %11 = tail call i32 @llvm.umax.i32(i32 %0, i32 %10)
  %12 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %11, i32 60)
  %13 = and i32 %3, 2
  %14 = icmp eq i32 %13, 0
  %15 = select i1 %14, i32 0, i32 %12
  %16 = tail call i32 @llvm.umax.i32(i32 %11, i32 %15)
  %17 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %16, i32 120)
  %18 = and i32 %3, 4
  %19 = icmp eq i32 %18, 0
  %20 = select i1 %19, i32 0, i32 %17
  %21 = tail call i32 @llvm.umax.i32(i32 %16, i32 %20)
  %22 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %21, i32 240)
  %23 = and i32 %3, 8
  %24 = icmp eq i32 %23, 0
  %25 = select i1 %24, i32 0, i32 %22
  %26 = tail call i32 @llvm.umax.i32(i32 %21, i32 %25)
  %27 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %26, i32 480)
  %28 = and i32 %3, 16
  %29 = icmp eq i32 %28, 0
  %30 = select i1 %29, i32 0, i32 %27
  %31 = tail call i32 @llvm.umax.i32(i32 %26, i32 %30)
  %32 = tail call i32 @llvm.amdgcn.readlane(i32 %31, i32 31)
  %33 = icmp ugt i32 %3, 31
  %34 = select i1 %33, i32 %32, i32 0
  %35 = tail call i32 @llvm.umax.i32(i32 %31, i32 %34)
  br label %42

36:                                               ; preds = %2
  %37 = icmp ult i32 %4, 10000
  br i1 %37, label %38, label %40

38:                                               ; preds = %36
  %39 = tail call fastcc i32 @155(i32 noundef %0) #57
  br label %42

40:                                               ; preds = %36
  %41 = tail call fastcc i32 @156(i32 noundef %0, i32 noundef %3) #57
  br label %42

42:                                               ; preds = %40, %38, %6
  %43 = phi i32 [ %35, %6 ], [ %39, %38 ], [ %41, %40 ]
  br i1 %1, label %70, label %44

44:                                               ; preds = %42
  br i1 %5, label %45, label %64

45:                                               ; preds = %44
  %46 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %43, i32 32912)
  %47 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %43, i32 120)
  %48 = and i32 %3, 7
  %49 = icmp eq i32 %48, 4
  %50 = select i1 %49, i32 %47, i32 %46
  %51 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %43, i32 240)
  %52 = and i32 %3, 15
  %53 = icmp eq i32 %52, 8
  %54 = select i1 %53, i32 %51, i32 %50
  %55 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %43, i32 480)
  %56 = and i32 %3, 31
  %57 = icmp eq i32 %56, 16
  %58 = select i1 %57, i32 %55, i32 %54
  %59 = tail call i32 @llvm.amdgcn.readlane(i32 %43, i32 31)
  %60 = icmp eq i32 %3, 32
  %61 = select i1 %60, i32 %59, i32 %58
  %62 = icmp eq i32 %3, 0
  %63 = select i1 %62, i32 0, i32 %61
  br label %70

64:                                               ; preds = %44
  %65 = icmp ult i32 %4, 10000
  br i1 %65, label %66, label %68

66:                                               ; preds = %64
  %67 = tail call fastcc i32 @157(i32 noundef %43) #57
  br label %70

68:                                               ; preds = %64
  %69 = tail call fastcc i32 @158(i32 noundef %43, i32 noundef %3) #57
  br label %70

70:                                               ; preds = %68, %66, %45, %42
  %71 = phi i32 [ %43, %42 ], [ %63, %45 ], [ %67, %66 ], [ %69, %68 ]
  ret i32 %71
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i32 @155(i32 noundef %0) unnamed_addr #54 {
  %2 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %0, i32 273, i32 15, i32 15, i1 true)
  %3 = tail call i32 @llvm.umax.i32(i32 %0, i32 %2)
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %3, i32 274, i32 15, i32 15, i1 true)
  %5 = tail call i32 @llvm.umax.i32(i32 %3, i32 %4)
  %6 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %5, i32 276, i32 15, i32 15, i1 true)
  %7 = tail call i32 @llvm.umax.i32(i32 %5, i32 %6)
  %8 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %7, i32 280, i32 15, i32 15, i1 true)
  %9 = tail call i32 @llvm.umax.i32(i32 %7, i32 %8)
  %10 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %9, i32 322, i32 10, i32 15, i1 false)
  %11 = tail call i32 @llvm.umax.i32(i32 %9, i32 %10)
  %12 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %11, i32 323, i32 12, i32 15, i1 false)
  %13 = tail call i32 @llvm.umax.i32(i32 %11, i32 %12)
  ret i32 %13
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i32 @156(i32 noundef %0, i32 noundef %1) unnamed_addr #55 {
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %0, i32 273, i32 15, i32 15, i1 true)
  %4 = tail call i32 @llvm.umax.i32(i32 %0, i32 %3)
  %5 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %4, i32 274, i32 15, i32 15, i1 true)
  %6 = tail call i32 @llvm.umax.i32(i32 %4, i32 %5)
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %6, i32 276, i32 15, i32 15, i1 true)
  %8 = tail call i32 @llvm.umax.i32(i32 %6, i32 %7)
  %9 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %8, i32 280, i32 15, i32 15, i1 true)
  %10 = tail call i32 @llvm.umax.i32(i32 %8, i32 %9)
  %11 = tail call i32 @llvm.amdgcn.permlanex16(i32 undef, i32 %10, i32 -1, i32 -1, i1 false, i1 true)
  %12 = and i32 %1, 16
  %13 = icmp eq i32 %12, 0
  %14 = select i1 %13, i32 0, i32 %11
  %15 = tail call i32 @llvm.umax.i32(i32 %10, i32 %14)
  %16 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %23, label %18

18:                                               ; preds = %2
  %19 = icmp ugt i32 %1, 31
  %20 = tail call i32 @llvm.amdgcn.readlane(i32 %15, i32 31)
  %21 = select i1 %19, i32 %20, i32 0
  %22 = tail call i32 @llvm.umax.i32(i32 %15, i32 %21)
  br label %23

23:                                               ; preds = %18, %2
  %24 = phi i32 [ %22, %18 ], [ %15, %2 ]
  ret i32 %24
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i32 @157(i32 noundef %0) unnamed_addr #54 {
  %2 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %0, i32 312, i32 15, i32 15, i1 true)
  ret i32 %2
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i32 @158(i32 noundef %0, i32 noundef %1) unnamed_addr #55 {
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %0, i32 273, i32 15, i32 15, i1 true)
  %4 = tail call i32 @llvm.amdgcn.permlanex16(i32 undef, i32 %0, i32 -1, i32 -1, i1 false, i1 true)
  %5 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %15, label %7

7:                                                ; preds = %2
  %8 = tail call i32 @llvm.amdgcn.readlane(i32 %0, i32 31)
  %9 = icmp eq i32 %1, 32
  %10 = select i1 %9, i32 %8, i32 %4
  %11 = and i32 %1, 31
  %12 = icmp eq i32 %11, 16
  %13 = or i1 %9, %12
  %14 = select i1 %13, i32 %10, i32 %3
  br label %18

15:                                               ; preds = %2
  %16 = icmp eq i32 %1, 16
  %17 = select i1 %16, i32 %4, i32 %3
  br label %18

18:                                               ; preds = %15, %7
  %19 = phi i32 [ %14, %7 ], [ %17, %15 ]
  ret i32 %19
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected i64 @__ockl_wfred_max_i64(i64 noundef %0) local_unnamed_addr #0 {
  %2 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %3 = icmp slt i32 %2, 8000
  br i1 %3, label %4, label %167

4:                                                ; preds = %1
  %5 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %10, label %7

7:                                                ; preds = %4
  %8 = tail call i64 @llvm.read_register.i64(metadata !36) #57
  %9 = icmp eq i64 %8, -1
  br label %13

10:                                               ; preds = %4
  %11 = tail call i32 @llvm.read_register.i32(metadata !10) #57
  %12 = icmp eq i32 %11, -1
  br label %13

13:                                               ; preds = %10, %7
  %14 = phi i1 [ %9, %7 ], [ %12, %10 ]
  %15 = trunc i64 %0 to i32
  %16 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %15, i32 32945)
  br i1 %14, label %17, label %75

17:                                               ; preds = %13
  %18 = insertelement <2 x i32> undef, i32 %16, i64 0
  %19 = lshr i64 %0, 32
  %20 = trunc i64 %19 to i32
  %21 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %20, i32 32945)
  %22 = insertelement <2 x i32> %18, i32 %21, i64 1
  %23 = bitcast <2 x i32> %22 to i64
  %24 = tail call i64 @llvm.smax.i64(i64 %0, i64 %23)
  %25 = trunc i64 %24 to i32
  %26 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %25, i32 32846)
  %27 = insertelement <2 x i32> undef, i32 %26, i64 0
  %28 = lshr i64 %24, 32
  %29 = trunc i64 %28 to i32
  %30 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %29, i32 32846)
  %31 = insertelement <2 x i32> %27, i32 %30, i64 1
  %32 = bitcast <2 x i32> %31 to i64
  %33 = tail call i64 @llvm.smax.i64(i64 %24, i64 %32)
  %34 = trunc i64 %33 to i32
  %35 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %34, i32 4127)
  %36 = insertelement <2 x i32> undef, i32 %35, i64 0
  %37 = lshr i64 %33, 32
  %38 = trunc i64 %37 to i32
  %39 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %38, i32 4127)
  %40 = insertelement <2 x i32> %36, i32 %39, i64 1
  %41 = bitcast <2 x i32> %40 to i64
  %42 = tail call i64 @llvm.smax.i64(i64 %33, i64 %41)
  %43 = trunc i64 %42 to i32
  %44 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %43, i32 8223)
  %45 = insertelement <2 x i32> undef, i32 %44, i64 0
  %46 = lshr i64 %42, 32
  %47 = trunc i64 %46 to i32
  %48 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %47, i32 8223)
  %49 = insertelement <2 x i32> %45, i32 %48, i64 1
  %50 = bitcast <2 x i32> %49 to i64
  %51 = tail call i64 @llvm.smax.i64(i64 %42, i64 %50)
  %52 = trunc i64 %51 to i32
  %53 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %52, i32 16415)
  %54 = insertelement <2 x i32> undef, i32 %53, i64 0
  %55 = lshr i64 %51, 32
  %56 = trunc i64 %55 to i32
  %57 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %56, i32 16415)
  %58 = insertelement <2 x i32> %54, i32 %57, i64 1
  %59 = bitcast <2 x i32> %58 to i64
  %60 = tail call i64 @llvm.smax.i64(i64 %51, i64 %59)
  %61 = trunc i64 %60 to i32
  %62 = tail call i32 @llvm.amdgcn.readlane(i32 %61, i32 0)
  %63 = insertelement <2 x i32> undef, i32 %62, i64 0
  %64 = lshr i64 %60, 32
  %65 = trunc i64 %64 to i32
  %66 = tail call i32 @llvm.amdgcn.readlane(i32 %65, i32 0)
  %67 = insertelement <2 x i32> %63, i32 %66, i64 1
  %68 = bitcast <2 x i32> %67 to i64
  %69 = tail call i32 @llvm.amdgcn.readlane(i32 %61, i32 32)
  %70 = insertelement <2 x i32> undef, i32 %69, i64 0
  %71 = tail call i32 @llvm.amdgcn.readlane(i32 %65, i32 32)
  %72 = insertelement <2 x i32> %70, i32 %71, i64 1
  %73 = bitcast <2 x i32> %72 to i64
  %74 = tail call i64 @llvm.smax.i64(i64 %68, i64 %73)
  br label %173

75:                                               ; preds = %13
  %76 = lshr i64 %0, 32
  %77 = trunc i64 %76 to i32
  %78 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %77, i32 32945)
  %79 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 32945)
  %80 = and i32 %79, %16
  %81 = insertelement <2 x i32> undef, i32 %80, i64 0
  %82 = and i32 %79, %78
  %83 = and i32 %79, -2147483648
  %84 = xor i32 %83, -2147483648
  %85 = or i32 %84, %82
  %86 = insertelement <2 x i32> %81, i32 %85, i64 1
  %87 = bitcast <2 x i32> %86 to i64
  %88 = tail call i64 @llvm.smax.i64(i64 %0, i64 %87)
  %89 = trunc i64 %88 to i32
  %90 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %89, i32 32846)
  %91 = lshr i64 %88, 32
  %92 = trunc i64 %91 to i32
  %93 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %92, i32 32846)
  %94 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 32846)
  %95 = and i32 %94, %90
  %96 = insertelement <2 x i32> undef, i32 %95, i64 0
  %97 = and i32 %94, %93
  %98 = and i32 %94, -2147483648
  %99 = xor i32 %98, -2147483648
  %100 = or i32 %99, %97
  %101 = insertelement <2 x i32> %96, i32 %100, i64 1
  %102 = bitcast <2 x i32> %101 to i64
  %103 = tail call i64 @llvm.smax.i64(i64 %88, i64 %102)
  %104 = trunc i64 %103 to i32
  %105 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %104, i32 4127)
  %106 = lshr i64 %103, 32
  %107 = trunc i64 %106 to i32
  %108 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %107, i32 4127)
  %109 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 4127)
  %110 = and i32 %109, %105
  %111 = insertelement <2 x i32> undef, i32 %110, i64 0
  %112 = and i32 %109, %108
  %113 = and i32 %109, -2147483648
  %114 = xor i32 %113, -2147483648
  %115 = or i32 %114, %112
  %116 = insertelement <2 x i32> %111, i32 %115, i64 1
  %117 = bitcast <2 x i32> %116 to i64
  %118 = tail call i64 @llvm.smax.i64(i64 %103, i64 %117)
  %119 = trunc i64 %118 to i32
  %120 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %119, i32 8223)
  %121 = lshr i64 %118, 32
  %122 = trunc i64 %121 to i32
  %123 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %122, i32 8223)
  %124 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 8223)
  %125 = and i32 %124, %120
  %126 = insertelement <2 x i32> undef, i32 %125, i64 0
  %127 = and i32 %124, %123
  %128 = and i32 %124, -2147483648
  %129 = xor i32 %128, -2147483648
  %130 = or i32 %129, %127
  %131 = insertelement <2 x i32> %126, i32 %130, i64 1
  %132 = bitcast <2 x i32> %131 to i64
  %133 = tail call i64 @llvm.smax.i64(i64 %118, i64 %132)
  %134 = trunc i64 %133 to i32
  %135 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %134, i32 16415)
  %136 = lshr i64 %133, 32
  %137 = trunc i64 %136 to i32
  %138 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %137, i32 16415)
  %139 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 16415)
  %140 = and i32 %139, %135
  %141 = insertelement <2 x i32> undef, i32 %140, i64 0
  %142 = and i32 %139, %138
  %143 = and i32 %139, -2147483648
  %144 = xor i32 %143, -2147483648
  %145 = or i32 %144, %142
  %146 = insertelement <2 x i32> %141, i32 %145, i64 1
  %147 = bitcast <2 x i32> %146 to i64
  %148 = tail call i64 @llvm.smax.i64(i64 %133, i64 %147)
  %149 = trunc i64 %148 to i32
  %150 = tail call i32 @llvm.amdgcn.readlane(i32 %149, i32 32)
  %151 = insertelement <2 x i32> undef, i32 %150, i64 0
  %152 = lshr i64 %148, 32
  %153 = trunc i64 %152 to i32
  %154 = tail call i32 @llvm.amdgcn.readlane(i32 %153, i32 32)
  %155 = insertelement <2 x i32> %151, i32 %154, i64 1
  %156 = bitcast <2 x i32> %155 to i64
  %157 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %158 = and i32 %157, 1
  %159 = icmp eq i32 %158, 0
  %160 = select i1 %159, i64 -9223372036854775808, i64 %156
  %161 = tail call i32 @llvm.amdgcn.readlane(i32 %149, i32 0)
  %162 = insertelement <2 x i32> undef, i32 %161, i64 0
  %163 = tail call i32 @llvm.amdgcn.readlane(i32 %153, i32 0)
  %164 = insertelement <2 x i32> %162, i32 %163, i64 1
  %165 = bitcast <2 x i32> %164 to i64
  %166 = tail call i64 @llvm.smax.i64(i64 %165, i64 %160)
  br label %173

167:                                              ; preds = %1
  %168 = icmp ult i32 %2, 10000
  br i1 %168, label %169, label %171

169:                                              ; preds = %167
  %170 = tail call fastcc i64 @159(i64 noundef %0) #57
  br label %173

171:                                              ; preds = %167
  %172 = tail call fastcc i64 @160(i64 noundef %0) #57
  br label %173

173:                                              ; preds = %171, %169, %75, %17
  %174 = phi i64 [ %74, %17 ], [ %166, %75 ], [ %170, %169 ], [ %172, %171 ]
  ret i64 %174
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc i64 @159(i64 noundef %0) unnamed_addr #52 {
  %2 = trunc i64 %0 to i32
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %2, i32 257, i32 15, i32 15, i1 false)
  %4 = insertelement <2 x i32> undef, i32 %3, i64 0
  %5 = lshr i64 %0, 32
  %6 = trunc i64 %5 to i32
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -2147483648, i32 %6, i32 257, i32 15, i32 15, i1 false)
  %8 = insertelement <2 x i32> %4, i32 %7, i64 1
  %9 = bitcast <2 x i32> %8 to i64
  %10 = tail call i64 @llvm.smax.i64(i64 %0, i64 %9)
  %11 = trunc i64 %10 to i32
  %12 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %11, i32 258, i32 15, i32 15, i1 false)
  %13 = insertelement <2 x i32> undef, i32 %12, i64 0
  %14 = lshr i64 %10, 32
  %15 = trunc i64 %14 to i32
  %16 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -2147483648, i32 %15, i32 258, i32 15, i32 15, i1 false)
  %17 = insertelement <2 x i32> %13, i32 %16, i64 1
  %18 = bitcast <2 x i32> %17 to i64
  %19 = tail call i64 @llvm.smax.i64(i64 %10, i64 %18)
  %20 = trunc i64 %19 to i32
  %21 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %20, i32 260, i32 15, i32 15, i1 false)
  %22 = insertelement <2 x i32> undef, i32 %21, i64 0
  %23 = lshr i64 %19, 32
  %24 = trunc i64 %23 to i32
  %25 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -2147483648, i32 %24, i32 260, i32 15, i32 15, i1 false)
  %26 = insertelement <2 x i32> %22, i32 %25, i64 1
  %27 = bitcast <2 x i32> %26 to i64
  %28 = tail call i64 @llvm.smax.i64(i64 %19, i64 %27)
  %29 = trunc i64 %28 to i32
  %30 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %29, i32 264, i32 15, i32 15, i1 false)
  %31 = insertelement <2 x i32> undef, i32 %30, i64 0
  %32 = lshr i64 %28, 32
  %33 = trunc i64 %32 to i32
  %34 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -2147483648, i32 %33, i32 264, i32 15, i32 15, i1 false)
  %35 = insertelement <2 x i32> %31, i32 %34, i64 1
  %36 = bitcast <2 x i32> %35 to i64
  %37 = tail call i64 @llvm.smax.i64(i64 %28, i64 %36)
  %38 = trunc i64 %37 to i32
  %39 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %38, i32 304, i32 15, i32 15, i1 false)
  %40 = lshr i64 %37, 32
  %41 = trunc i64 %40 to i32
  %42 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -2147483648, i32 %41, i32 304, i32 15, i32 15, i1 false)
  %43 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %39, i32 320, i32 15, i32 15, i1 false)
  %44 = insertelement <2 x i32> undef, i32 %43, i64 0
  %45 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -2147483648, i32 %42, i32 320, i32 15, i32 15, i1 false)
  %46 = insertelement <2 x i32> %44, i32 %45, i64 1
  %47 = bitcast <2 x i32> %46 to i64
  %48 = tail call i64 @llvm.smax.i64(i64 %37, i64 %47)
  %49 = trunc i64 %48 to i32
  %50 = tail call i32 @llvm.amdgcn.readlane(i32 %49, i32 32)
  %51 = insertelement <2 x i32> undef, i32 %50, i64 0
  %52 = lshr i64 %48, 32
  %53 = trunc i64 %52 to i32
  %54 = tail call i32 @llvm.amdgcn.readlane(i32 %53, i32 32)
  %55 = insertelement <2 x i32> %51, i32 %54, i64 1
  %56 = bitcast <2 x i32> %55 to i64
  %57 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %58 = and i32 %57, 1
  %59 = icmp eq i32 %58, 0
  %60 = select i1 %59, i64 -9223372036854775808, i64 %56
  %61 = tail call i32 @llvm.amdgcn.readlane(i32 %49, i32 0)
  %62 = insertelement <2 x i32> undef, i32 %61, i64 0
  %63 = tail call i32 @llvm.amdgcn.readlane(i32 %53, i32 0)
  %64 = insertelement <2 x i32> %62, i32 %63, i64 1
  %65 = bitcast <2 x i32> %64 to i64
  %66 = tail call i64 @llvm.smax.i64(i64 %65, i64 %60)
  ret i64 %66
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc i64 @160(i64 noundef %0) unnamed_addr #53 {
  %2 = trunc i64 %0 to i32
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %2, i32 257, i32 15, i32 15, i1 false)
  %4 = insertelement <2 x i32> undef, i32 %3, i64 0
  %5 = lshr i64 %0, 32
  %6 = trunc i64 %5 to i32
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -2147483648, i32 %6, i32 257, i32 15, i32 15, i1 false)
  %8 = insertelement <2 x i32> %4, i32 %7, i64 1
  %9 = bitcast <2 x i32> %8 to i64
  %10 = tail call i64 @llvm.smax.i64(i64 %0, i64 %9)
  %11 = trunc i64 %10 to i32
  %12 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %11, i32 258, i32 15, i32 15, i1 false)
  %13 = insertelement <2 x i32> undef, i32 %12, i64 0
  %14 = lshr i64 %10, 32
  %15 = trunc i64 %14 to i32
  %16 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -2147483648, i32 %15, i32 258, i32 15, i32 15, i1 false)
  %17 = insertelement <2 x i32> %13, i32 %16, i64 1
  %18 = bitcast <2 x i32> %17 to i64
  %19 = tail call i64 @llvm.smax.i64(i64 %10, i64 %18)
  %20 = trunc i64 %19 to i32
  %21 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %20, i32 260, i32 15, i32 15, i1 false)
  %22 = insertelement <2 x i32> undef, i32 %21, i64 0
  %23 = lshr i64 %19, 32
  %24 = trunc i64 %23 to i32
  %25 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -2147483648, i32 %24, i32 260, i32 15, i32 15, i1 false)
  %26 = insertelement <2 x i32> %22, i32 %25, i64 1
  %27 = bitcast <2 x i32> %26 to i64
  %28 = tail call i64 @llvm.smax.i64(i64 %19, i64 %27)
  %29 = trunc i64 %28 to i32
  %30 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %29, i32 264, i32 15, i32 15, i1 false)
  %31 = insertelement <2 x i32> undef, i32 %30, i64 0
  %32 = lshr i64 %28, 32
  %33 = trunc i64 %32 to i32
  %34 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -2147483648, i32 %33, i32 264, i32 15, i32 15, i1 false)
  %35 = insertelement <2 x i32> %31, i32 %34, i64 1
  %36 = bitcast <2 x i32> %35 to i64
  %37 = tail call i64 @llvm.smax.i64(i64 %28, i64 %36)
  %38 = trunc i64 %37 to i32
  %39 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %38, i32 336, i32 15, i32 15, i1 false)
  %40 = insertelement <2 x i32> undef, i32 %39, i64 0
  %41 = lshr i64 %37, 32
  %42 = trunc i64 %41 to i32
  %43 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -2147483648, i32 %42, i32 336, i32 15, i32 15, i1 false)
  %44 = insertelement <2 x i32> %40, i32 %43, i64 1
  %45 = bitcast <2 x i32> %44 to i64
  %46 = tail call i32 @llvm.amdgcn.permlanex16(i32 0, i32 %39, i32 0, i32 0, i1 false, i1 false)
  %47 = insertelement <2 x i32> undef, i32 %46, i64 0
  %48 = tail call i32 @llvm.amdgcn.permlanex16(i32 -2147483648, i32 %43, i32 0, i32 0, i1 false, i1 false)
  %49 = insertelement <2 x i32> %47, i32 %48, i64 1
  %50 = bitcast <2 x i32> %49 to i64
  %51 = tail call i64 @llvm.smax.i64(i64 %45, i64 %50)
  %52 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %53 = icmp eq i8 %52, 0
  br i1 %53, label %73, label %54

54:                                               ; preds = %1
  %55 = trunc i64 %51 to i32
  %56 = tail call i32 @llvm.amdgcn.readlane(i32 %55, i32 32)
  %57 = insertelement <2 x i32> undef, i32 %56, i64 0
  %58 = lshr i64 %51, 32
  %59 = trunc i64 %58 to i32
  %60 = tail call i32 @llvm.amdgcn.readlane(i32 %59, i32 32)
  %61 = insertelement <2 x i32> %57, i32 %60, i64 1
  %62 = bitcast <2 x i32> %61 to i64
  %63 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %64 = and i32 %63, 1
  %65 = icmp eq i32 %64, 0
  %66 = select i1 %65, i64 -9223372036854775808, i64 %62
  %67 = tail call i32 @llvm.amdgcn.readlane(i32 %55, i32 0)
  %68 = insertelement <2 x i32> undef, i32 %67, i64 0
  %69 = tail call i32 @llvm.amdgcn.readlane(i32 %59, i32 0)
  %70 = insertelement <2 x i32> %68, i32 %69, i64 1
  %71 = bitcast <2 x i32> %70 to i64
  %72 = tail call i64 @llvm.smax.i64(i64 %71, i64 %66)
  br label %73

73:                                               ; preds = %54, %1
  %74 = phi i64 [ %72, %54 ], [ %51, %1 ]
  ret i64 %74
}

; Function Attrs: convergent norecurse nounwind
define linkonce_odr protected i64 @__ockl_wfscan_max_i64(i64 noundef %0, i1 noundef zeroext %1) local_unnamed_addr #12 {
  %3 = tail call i32 @__ockl_lane_u32() #58
  %4 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %5 = icmp slt i32 %4, 8000
  br i1 %5, label %6, label %78

6:                                                ; preds = %2
  %7 = trunc i64 %0 to i32
  %8 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %7, i32 30)
  %9 = insertelement <2 x i32> undef, i32 %8, i64 0
  %10 = lshr i64 %0, 32
  %11 = trunc i64 %10 to i32
  %12 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %11, i32 30)
  %13 = insertelement <2 x i32> %9, i32 %12, i64 1
  %14 = bitcast <2 x i32> %13 to i64
  %15 = and i32 %3, 1
  %16 = icmp eq i32 %15, 0
  %17 = select i1 %16, i64 -9223372036854775808, i64 %14
  %18 = tail call i64 @llvm.smax.i64(i64 %0, i64 %17)
  %19 = trunc i64 %18 to i32
  %20 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %19, i32 60)
  %21 = insertelement <2 x i32> undef, i32 %20, i64 0
  %22 = lshr i64 %18, 32
  %23 = trunc i64 %22 to i32
  %24 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %23, i32 60)
  %25 = insertelement <2 x i32> %21, i32 %24, i64 1
  %26 = bitcast <2 x i32> %25 to i64
  %27 = and i32 %3, 2
  %28 = icmp eq i32 %27, 0
  %29 = select i1 %28, i64 -9223372036854775808, i64 %26
  %30 = tail call i64 @llvm.smax.i64(i64 %18, i64 %29)
  %31 = trunc i64 %30 to i32
  %32 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %31, i32 120)
  %33 = insertelement <2 x i32> undef, i32 %32, i64 0
  %34 = lshr i64 %30, 32
  %35 = trunc i64 %34 to i32
  %36 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %35, i32 120)
  %37 = insertelement <2 x i32> %33, i32 %36, i64 1
  %38 = bitcast <2 x i32> %37 to i64
  %39 = and i32 %3, 4
  %40 = icmp eq i32 %39, 0
  %41 = select i1 %40, i64 -9223372036854775808, i64 %38
  %42 = tail call i64 @llvm.smax.i64(i64 %30, i64 %41)
  %43 = trunc i64 %42 to i32
  %44 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %43, i32 240)
  %45 = insertelement <2 x i32> undef, i32 %44, i64 0
  %46 = lshr i64 %42, 32
  %47 = trunc i64 %46 to i32
  %48 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %47, i32 240)
  %49 = insertelement <2 x i32> %45, i32 %48, i64 1
  %50 = bitcast <2 x i32> %49 to i64
  %51 = and i32 %3, 8
  %52 = icmp eq i32 %51, 0
  %53 = select i1 %52, i64 -9223372036854775808, i64 %50
  %54 = tail call i64 @llvm.smax.i64(i64 %42, i64 %53)
  %55 = trunc i64 %54 to i32
  %56 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %55, i32 480)
  %57 = insertelement <2 x i32> undef, i32 %56, i64 0
  %58 = lshr i64 %54, 32
  %59 = trunc i64 %58 to i32
  %60 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %59, i32 480)
  %61 = insertelement <2 x i32> %57, i32 %60, i64 1
  %62 = bitcast <2 x i32> %61 to i64
  %63 = and i32 %3, 16
  %64 = icmp eq i32 %63, 0
  %65 = select i1 %64, i64 -9223372036854775808, i64 %62
  %66 = tail call i64 @llvm.smax.i64(i64 %54, i64 %65)
  %67 = trunc i64 %66 to i32
  %68 = tail call i32 @llvm.amdgcn.readlane(i32 %67, i32 31)
  %69 = insertelement <2 x i32> undef, i32 %68, i64 0
  %70 = lshr i64 %66, 32
  %71 = trunc i64 %70 to i32
  %72 = tail call i32 @llvm.amdgcn.readlane(i32 %71, i32 31)
  %73 = insertelement <2 x i32> %69, i32 %72, i64 1
  %74 = bitcast <2 x i32> %73 to i64
  %75 = icmp ugt i32 %3, 31
  %76 = select i1 %75, i64 %74, i64 -9223372036854775808
  %77 = tail call i64 @llvm.smax.i64(i64 %66, i64 %76)
  br label %84

78:                                               ; preds = %2
  %79 = icmp ult i32 %4, 10000
  br i1 %79, label %80, label %82

80:                                               ; preds = %78
  %81 = tail call fastcc i64 @161(i64 noundef %0) #57
  br label %84

82:                                               ; preds = %78
  %83 = tail call fastcc i64 @162(i64 noundef %0, i32 noundef %3) #57
  br label %84

84:                                               ; preds = %82, %80, %6
  %85 = phi i64 [ %77, %6 ], [ %81, %80 ], [ %83, %82 ]
  br i1 %1, label %131, label %86

86:                                               ; preds = %84
  br i1 %5, label %87, label %125

87:                                               ; preds = %86
  %88 = trunc i64 %85 to i32
  %89 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %88, i32 32912)
  %90 = insertelement <2 x i32> undef, i32 %89, i64 0
  %91 = lshr i64 %85, 32
  %92 = trunc i64 %91 to i32
  %93 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %92, i32 32912)
  %94 = insertelement <2 x i32> %90, i32 %93, i64 1
  %95 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %88, i32 120)
  %96 = insertelement <2 x i32> undef, i32 %95, i64 0
  %97 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %92, i32 120)
  %98 = insertelement <2 x i32> %96, i32 %97, i64 1
  %99 = and i32 %3, 7
  %100 = icmp eq i32 %99, 4
  %101 = select i1 %100, <2 x i32> %98, <2 x i32> %94
  %102 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %88, i32 240)
  %103 = insertelement <2 x i32> undef, i32 %102, i64 0
  %104 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %92, i32 240)
  %105 = insertelement <2 x i32> %103, i32 %104, i64 1
  %106 = and i32 %3, 15
  %107 = icmp eq i32 %106, 8
  %108 = select i1 %107, <2 x i32> %105, <2 x i32> %101
  %109 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %88, i32 480)
  %110 = insertelement <2 x i32> undef, i32 %109, i64 0
  %111 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %92, i32 480)
  %112 = insertelement <2 x i32> %110, i32 %111, i64 1
  %113 = and i32 %3, 31
  %114 = icmp eq i32 %113, 16
  %115 = select i1 %114, <2 x i32> %112, <2 x i32> %108
  %116 = tail call i32 @llvm.amdgcn.readlane(i32 %88, i32 31)
  %117 = insertelement <2 x i32> undef, i32 %116, i64 0
  %118 = tail call i32 @llvm.amdgcn.readlane(i32 %92, i32 31)
  %119 = insertelement <2 x i32> %117, i32 %118, i64 1
  %120 = icmp eq i32 %3, 32
  %121 = select i1 %120, <2 x i32> %119, <2 x i32> %115
  %122 = bitcast <2 x i32> %121 to i64
  %123 = icmp eq i32 %3, 0
  %124 = select i1 %123, i64 -9223372036854775808, i64 %122
  br label %131

125:                                              ; preds = %86
  %126 = icmp ult i32 %4, 10000
  br i1 %126, label %127, label %129

127:                                              ; preds = %125
  %128 = tail call fastcc i64 @163(i64 noundef %85) #57
  br label %131

129:                                              ; preds = %125
  %130 = tail call fastcc i64 @164(i64 noundef %85, i32 noundef %3) #57
  br label %131

131:                                              ; preds = %129, %127, %87, %84
  %132 = phi i64 [ %85, %84 ], [ %124, %87 ], [ %128, %127 ], [ %130, %129 ]
  ret i64 %132
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i64 @161(i64 noundef %0) unnamed_addr #54 {
  %2 = trunc i64 %0 to i32
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %2, i32 273, i32 15, i32 15, i1 false)
  %4 = insertelement <2 x i32> undef, i32 %3, i64 0
  %5 = lshr i64 %0, 32
  %6 = trunc i64 %5 to i32
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -2147483648, i32 %6, i32 273, i32 15, i32 15, i1 false)
  %8 = insertelement <2 x i32> %4, i32 %7, i64 1
  %9 = bitcast <2 x i32> %8 to i64
  %10 = tail call i64 @llvm.smax.i64(i64 %0, i64 %9)
  %11 = trunc i64 %10 to i32
  %12 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %11, i32 274, i32 15, i32 15, i1 false)
  %13 = insertelement <2 x i32> undef, i32 %12, i64 0
  %14 = lshr i64 %10, 32
  %15 = trunc i64 %14 to i32
  %16 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -2147483648, i32 %15, i32 274, i32 15, i32 15, i1 false)
  %17 = insertelement <2 x i32> %13, i32 %16, i64 1
  %18 = bitcast <2 x i32> %17 to i64
  %19 = tail call i64 @llvm.smax.i64(i64 %10, i64 %18)
  %20 = trunc i64 %19 to i32
  %21 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %20, i32 276, i32 15, i32 15, i1 false)
  %22 = insertelement <2 x i32> undef, i32 %21, i64 0
  %23 = lshr i64 %19, 32
  %24 = trunc i64 %23 to i32
  %25 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -2147483648, i32 %24, i32 276, i32 15, i32 15, i1 false)
  %26 = insertelement <2 x i32> %22, i32 %25, i64 1
  %27 = bitcast <2 x i32> %26 to i64
  %28 = tail call i64 @llvm.smax.i64(i64 %19, i64 %27)
  %29 = trunc i64 %28 to i32
  %30 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %29, i32 280, i32 15, i32 15, i1 false)
  %31 = insertelement <2 x i32> undef, i32 %30, i64 0
  %32 = lshr i64 %28, 32
  %33 = trunc i64 %32 to i32
  %34 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -2147483648, i32 %33, i32 280, i32 15, i32 15, i1 false)
  %35 = insertelement <2 x i32> %31, i32 %34, i64 1
  %36 = bitcast <2 x i32> %35 to i64
  %37 = tail call i64 @llvm.smax.i64(i64 %28, i64 %36)
  %38 = trunc i64 %37 to i32
  %39 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %38, i32 322, i32 10, i32 15, i1 false)
  %40 = insertelement <2 x i32> undef, i32 %39, i64 0
  %41 = lshr i64 %37, 32
  %42 = trunc i64 %41 to i32
  %43 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -2147483648, i32 %42, i32 322, i32 10, i32 15, i1 false)
  %44 = insertelement <2 x i32> %40, i32 %43, i64 1
  %45 = bitcast <2 x i32> %44 to i64
  %46 = tail call i64 @llvm.smax.i64(i64 %37, i64 %45)
  %47 = trunc i64 %46 to i32
  %48 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %47, i32 323, i32 12, i32 15, i1 false)
  %49 = insertelement <2 x i32> undef, i32 %48, i64 0
  %50 = lshr i64 %46, 32
  %51 = trunc i64 %50 to i32
  %52 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -2147483648, i32 %51, i32 323, i32 12, i32 15, i1 false)
  %53 = insertelement <2 x i32> %49, i32 %52, i64 1
  %54 = bitcast <2 x i32> %53 to i64
  %55 = tail call i64 @llvm.smax.i64(i64 %46, i64 %54)
  ret i64 %55
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i64 @162(i64 noundef %0, i32 noundef %1) unnamed_addr #55 {
  %3 = trunc i64 %0 to i32
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %3, i32 273, i32 15, i32 15, i1 false)
  %5 = insertelement <2 x i32> undef, i32 %4, i64 0
  %6 = lshr i64 %0, 32
  %7 = trunc i64 %6 to i32
  %8 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -2147483648, i32 %7, i32 273, i32 15, i32 15, i1 false)
  %9 = insertelement <2 x i32> %5, i32 %8, i64 1
  %10 = bitcast <2 x i32> %9 to i64
  %11 = tail call i64 @llvm.smax.i64(i64 %0, i64 %10)
  %12 = trunc i64 %11 to i32
  %13 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %12, i32 274, i32 15, i32 15, i1 false)
  %14 = insertelement <2 x i32> undef, i32 %13, i64 0
  %15 = lshr i64 %11, 32
  %16 = trunc i64 %15 to i32
  %17 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -2147483648, i32 %16, i32 274, i32 15, i32 15, i1 false)
  %18 = insertelement <2 x i32> %14, i32 %17, i64 1
  %19 = bitcast <2 x i32> %18 to i64
  %20 = tail call i64 @llvm.smax.i64(i64 %11, i64 %19)
  %21 = trunc i64 %20 to i32
  %22 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %21, i32 276, i32 15, i32 15, i1 false)
  %23 = insertelement <2 x i32> undef, i32 %22, i64 0
  %24 = lshr i64 %20, 32
  %25 = trunc i64 %24 to i32
  %26 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -2147483648, i32 %25, i32 276, i32 15, i32 15, i1 false)
  %27 = insertelement <2 x i32> %23, i32 %26, i64 1
  %28 = bitcast <2 x i32> %27 to i64
  %29 = tail call i64 @llvm.smax.i64(i64 %20, i64 %28)
  %30 = trunc i64 %29 to i32
  %31 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %30, i32 280, i32 15, i32 15, i1 false)
  %32 = insertelement <2 x i32> undef, i32 %31, i64 0
  %33 = lshr i64 %29, 32
  %34 = trunc i64 %33 to i32
  %35 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -2147483648, i32 %34, i32 280, i32 15, i32 15, i1 false)
  %36 = insertelement <2 x i32> %32, i32 %35, i64 1
  %37 = bitcast <2 x i32> %36 to i64
  %38 = tail call i64 @llvm.smax.i64(i64 %29, i64 %37)
  %39 = trunc i64 %38 to i32
  %40 = tail call i32 @llvm.amdgcn.permlanex16(i32 0, i32 %39, i32 -1, i32 -1, i1 false, i1 false)
  %41 = insertelement <2 x i32> undef, i32 %40, i64 0
  %42 = lshr i64 %38, 32
  %43 = trunc i64 %42 to i32
  %44 = tail call i32 @llvm.amdgcn.permlanex16(i32 -2147483648, i32 %43, i32 -1, i32 -1, i1 false, i1 false)
  %45 = insertelement <2 x i32> %41, i32 %44, i64 1
  %46 = bitcast <2 x i32> %45 to i64
  %47 = and i32 %1, 16
  %48 = icmp eq i32 %47, 0
  %49 = select i1 %48, i64 -9223372036854775808, i64 %46
  %50 = tail call i64 @llvm.smax.i64(i64 %38, i64 %49)
  %51 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %52 = icmp eq i8 %51, 0
  br i1 %52, label %65, label %53

53:                                               ; preds = %2
  %54 = trunc i64 %50 to i32
  %55 = tail call i32 @llvm.amdgcn.readlane(i32 %54, i32 31)
  %56 = insertelement <2 x i32> undef, i32 %55, i64 0
  %57 = lshr i64 %50, 32
  %58 = trunc i64 %57 to i32
  %59 = tail call i32 @llvm.amdgcn.readlane(i32 %58, i32 31)
  %60 = insertelement <2 x i32> %56, i32 %59, i64 1
  %61 = bitcast <2 x i32> %60 to i64
  %62 = icmp ugt i32 %1, 31
  %63 = select i1 %62, i64 %61, i64 -9223372036854775808
  %64 = tail call i64 @llvm.smax.i64(i64 %50, i64 %63)
  br label %65

65:                                               ; preds = %53, %2
  %66 = phi i64 [ %64, %53 ], [ %50, %2 ]
  ret i64 %66
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i64 @163(i64 noundef %0) unnamed_addr #54 {
  %2 = trunc i64 %0 to i32
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %2, i32 312, i32 15, i32 15, i1 false)
  %4 = insertelement <2 x i32> undef, i32 %3, i64 0
  %5 = lshr i64 %0, 32
  %6 = trunc i64 %5 to i32
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -2147483648, i32 %6, i32 312, i32 15, i32 15, i1 false)
  %8 = insertelement <2 x i32> %4, i32 %7, i64 1
  %9 = bitcast <2 x i32> %8 to i64
  ret i64 %9
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i64 @164(i64 noundef %0, i32 noundef %1) unnamed_addr #55 {
  %3 = trunc i64 %0 to i32
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %3, i32 273, i32 15, i32 15, i1 false)
  %5 = insertelement <2 x i32> undef, i32 %4, i64 0
  %6 = lshr i64 %0, 32
  %7 = trunc i64 %6 to i32
  %8 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -2147483648, i32 %7, i32 273, i32 15, i32 15, i1 false)
  %9 = insertelement <2 x i32> %5, i32 %8, i64 1
  %10 = bitcast <2 x i32> %9 to i64
  %11 = tail call i32 @llvm.amdgcn.permlanex16(i32 0, i32 %3, i32 -1, i32 -1, i1 false, i1 false)
  %12 = insertelement <2 x i32> undef, i32 %11, i64 0
  %13 = tail call i32 @llvm.amdgcn.permlanex16(i32 -2147483648, i32 %7, i32 -1, i32 -1, i1 false, i1 false)
  %14 = insertelement <2 x i32> %12, i32 %13, i64 1
  %15 = bitcast <2 x i32> %14 to i64
  %16 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %30, label %18

18:                                               ; preds = %2
  %19 = tail call i32 @llvm.amdgcn.readlane(i32 %3, i32 31)
  %20 = insertelement <2 x i32> undef, i32 %19, i64 0
  %21 = tail call i32 @llvm.amdgcn.readlane(i32 %7, i32 31)
  %22 = insertelement <2 x i32> %20, i32 %21, i64 1
  %23 = bitcast <2 x i32> %22 to i64
  %24 = icmp eq i32 %1, 32
  %25 = select i1 %24, i64 %23, i64 %15
  %26 = and i32 %1, 31
  %27 = icmp eq i32 %26, 16
  %28 = or i1 %24, %27
  %29 = select i1 %28, i64 %25, i64 %10
  br label %33

30:                                               ; preds = %2
  %31 = icmp eq i32 %1, 16
  %32 = select i1 %31, i64 %15, i64 %10
  br label %33

33:                                               ; preds = %30, %18
  %34 = phi i64 [ %29, %18 ], [ %32, %30 ]
  ret i64 %34
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected i64 @__ockl_wfred_max_u64(i64 noundef %0) local_unnamed_addr #0 {
  %2 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %3 = icmp slt i32 %2, 8000
  br i1 %3, label %4, label %93

4:                                                ; preds = %1
  %5 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %10, label %7

7:                                                ; preds = %4
  %8 = tail call i64 @llvm.read_register.i64(metadata !36) #57
  %9 = icmp eq i64 %8, -1
  br label %13

10:                                               ; preds = %4
  %11 = tail call i32 @llvm.read_register.i32(metadata !10) #57
  %12 = icmp eq i32 %11, -1
  br label %13

13:                                               ; preds = %10, %7
  %14 = phi i1 [ %9, %7 ], [ %12, %10 ]
  %15 = trunc i64 %0 to i32
  %16 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %15, i32 32945)
  %17 = insertelement <2 x i32> undef, i32 %16, i64 0
  %18 = lshr i64 %0, 32
  %19 = trunc i64 %18 to i32
  %20 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %19, i32 32945)
  %21 = insertelement <2 x i32> %17, i32 %20, i64 1
  %22 = bitcast <2 x i32> %21 to i64
  %23 = tail call i64 @llvm.umax.i64(i64 %0, i64 %22)
  %24 = trunc i64 %23 to i32
  %25 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %24, i32 32846)
  %26 = insertelement <2 x i32> undef, i32 %25, i64 0
  %27 = lshr i64 %23, 32
  %28 = trunc i64 %27 to i32
  %29 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %28, i32 32846)
  %30 = insertelement <2 x i32> %26, i32 %29, i64 1
  %31 = bitcast <2 x i32> %30 to i64
  %32 = tail call i64 @llvm.umax.i64(i64 %23, i64 %31)
  %33 = trunc i64 %32 to i32
  %34 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %33, i32 4127)
  %35 = insertelement <2 x i32> undef, i32 %34, i64 0
  %36 = lshr i64 %32, 32
  %37 = trunc i64 %36 to i32
  %38 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %37, i32 4127)
  %39 = insertelement <2 x i32> %35, i32 %38, i64 1
  %40 = bitcast <2 x i32> %39 to i64
  %41 = tail call i64 @llvm.umax.i64(i64 %32, i64 %40)
  %42 = trunc i64 %41 to i32
  %43 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %42, i32 8223)
  %44 = insertelement <2 x i32> undef, i32 %43, i64 0
  %45 = lshr i64 %41, 32
  %46 = trunc i64 %45 to i32
  %47 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %46, i32 8223)
  %48 = insertelement <2 x i32> %44, i32 %47, i64 1
  %49 = bitcast <2 x i32> %48 to i64
  %50 = tail call i64 @llvm.umax.i64(i64 %41, i64 %49)
  %51 = trunc i64 %50 to i32
  %52 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %51, i32 16415)
  %53 = insertelement <2 x i32> undef, i32 %52, i64 0
  %54 = lshr i64 %50, 32
  %55 = trunc i64 %54 to i32
  %56 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %55, i32 16415)
  %57 = insertelement <2 x i32> %53, i32 %56, i64 1
  %58 = bitcast <2 x i32> %57 to i64
  %59 = tail call i64 @llvm.umax.i64(i64 %50, i64 %58)
  %60 = trunc i64 %59 to i32
  br i1 %14, label %61, label %75

61:                                               ; preds = %13
  %62 = tail call i32 @llvm.amdgcn.readlane(i32 %60, i32 0)
  %63 = insertelement <2 x i32> undef, i32 %62, i64 0
  %64 = lshr i64 %59, 32
  %65 = trunc i64 %64 to i32
  %66 = tail call i32 @llvm.amdgcn.readlane(i32 %65, i32 0)
  %67 = insertelement <2 x i32> %63, i32 %66, i64 1
  %68 = bitcast <2 x i32> %67 to i64
  %69 = tail call i32 @llvm.amdgcn.readlane(i32 %60, i32 32)
  %70 = insertelement <2 x i32> undef, i32 %69, i64 0
  %71 = tail call i32 @llvm.amdgcn.readlane(i32 %65, i32 32)
  %72 = insertelement <2 x i32> %70, i32 %71, i64 1
  %73 = bitcast <2 x i32> %72 to i64
  %74 = tail call i64 @llvm.umax.i64(i64 %68, i64 %73)
  br label %99

75:                                               ; preds = %13
  %76 = tail call i32 @llvm.amdgcn.readlane(i32 %60, i32 32)
  %77 = insertelement <2 x i32> undef, i32 %76, i64 0
  %78 = lshr i64 %59, 32
  %79 = trunc i64 %78 to i32
  %80 = tail call i32 @llvm.amdgcn.readlane(i32 %79, i32 32)
  %81 = insertelement <2 x i32> %77, i32 %80, i64 1
  %82 = bitcast <2 x i32> %81 to i64
  %83 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %84 = and i32 %83, 1
  %85 = icmp eq i32 %84, 0
  %86 = select i1 %85, i64 0, i64 %82
  %87 = tail call i32 @llvm.amdgcn.readlane(i32 %60, i32 0)
  %88 = insertelement <2 x i32> undef, i32 %87, i64 0
  %89 = tail call i32 @llvm.amdgcn.readlane(i32 %79, i32 0)
  %90 = insertelement <2 x i32> %88, i32 %89, i64 1
  %91 = bitcast <2 x i32> %90 to i64
  %92 = tail call i64 @llvm.umax.i64(i64 %91, i64 %86)
  br label %99

93:                                               ; preds = %1
  %94 = icmp ult i32 %2, 10000
  br i1 %94, label %95, label %97

95:                                               ; preds = %93
  %96 = tail call fastcc i64 @165(i64 noundef %0) #57
  br label %99

97:                                               ; preds = %93
  %98 = tail call fastcc i64 @166(i64 noundef %0) #57
  br label %99

99:                                               ; preds = %97, %95, %75, %61
  %100 = phi i64 [ %74, %61 ], [ %92, %75 ], [ %96, %95 ], [ %98, %97 ]
  ret i64 %100
}

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare i64 @llvm.umax.i64(i64, i64) #4

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc i64 @165(i64 noundef %0) unnamed_addr #52 {
  %2 = trunc i64 %0 to i32
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %2, i32 257, i32 15, i32 15, i1 true)
  %4 = insertelement <2 x i32> undef, i32 %3, i64 0
  %5 = lshr i64 %0, 32
  %6 = trunc i64 %5 to i32
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %6, i32 257, i32 15, i32 15, i1 true)
  %8 = insertelement <2 x i32> %4, i32 %7, i64 1
  %9 = bitcast <2 x i32> %8 to i64
  %10 = tail call i64 @llvm.umax.i64(i64 %0, i64 %9)
  %11 = trunc i64 %10 to i32
  %12 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %11, i32 258, i32 15, i32 15, i1 true)
  %13 = insertelement <2 x i32> undef, i32 %12, i64 0
  %14 = lshr i64 %10, 32
  %15 = trunc i64 %14 to i32
  %16 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %15, i32 258, i32 15, i32 15, i1 true)
  %17 = insertelement <2 x i32> %13, i32 %16, i64 1
  %18 = bitcast <2 x i32> %17 to i64
  %19 = tail call i64 @llvm.umax.i64(i64 %10, i64 %18)
  %20 = trunc i64 %19 to i32
  %21 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %20, i32 260, i32 15, i32 15, i1 true)
  %22 = insertelement <2 x i32> undef, i32 %21, i64 0
  %23 = lshr i64 %19, 32
  %24 = trunc i64 %23 to i32
  %25 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %24, i32 260, i32 15, i32 15, i1 true)
  %26 = insertelement <2 x i32> %22, i32 %25, i64 1
  %27 = bitcast <2 x i32> %26 to i64
  %28 = tail call i64 @llvm.umax.i64(i64 %19, i64 %27)
  %29 = trunc i64 %28 to i32
  %30 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %29, i32 264, i32 15, i32 15, i1 true)
  %31 = insertelement <2 x i32> undef, i32 %30, i64 0
  %32 = lshr i64 %28, 32
  %33 = trunc i64 %32 to i32
  %34 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %33, i32 264, i32 15, i32 15, i1 true)
  %35 = insertelement <2 x i32> %31, i32 %34, i64 1
  %36 = bitcast <2 x i32> %35 to i64
  %37 = tail call i64 @llvm.umax.i64(i64 %28, i64 %36)
  %38 = trunc i64 %37 to i32
  %39 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %38, i32 304, i32 15, i32 15, i1 true)
  %40 = lshr i64 %37, 32
  %41 = trunc i64 %40 to i32
  %42 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %41, i32 304, i32 15, i32 15, i1 true)
  %43 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %39, i32 320, i32 15, i32 15, i1 true)
  %44 = insertelement <2 x i32> undef, i32 %43, i64 0
  %45 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %42, i32 320, i32 15, i32 15, i1 true)
  %46 = insertelement <2 x i32> %44, i32 %45, i64 1
  %47 = bitcast <2 x i32> %46 to i64
  %48 = tail call i64 @llvm.umax.i64(i64 %37, i64 %47)
  %49 = trunc i64 %48 to i32
  %50 = tail call i32 @llvm.amdgcn.readlane(i32 %49, i32 32)
  %51 = insertelement <2 x i32> undef, i32 %50, i64 0
  %52 = lshr i64 %48, 32
  %53 = trunc i64 %52 to i32
  %54 = tail call i32 @llvm.amdgcn.readlane(i32 %53, i32 32)
  %55 = insertelement <2 x i32> %51, i32 %54, i64 1
  %56 = bitcast <2 x i32> %55 to i64
  %57 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %58 = and i32 %57, 1
  %59 = icmp eq i32 %58, 0
  %60 = select i1 %59, i64 0, i64 %56
  %61 = tail call i32 @llvm.amdgcn.readlane(i32 %49, i32 0)
  %62 = insertelement <2 x i32> undef, i32 %61, i64 0
  %63 = tail call i32 @llvm.amdgcn.readlane(i32 %53, i32 0)
  %64 = insertelement <2 x i32> %62, i32 %63, i64 1
  %65 = bitcast <2 x i32> %64 to i64
  %66 = tail call i64 @llvm.umax.i64(i64 %65, i64 %60)
  ret i64 %66
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc i64 @166(i64 noundef %0) unnamed_addr #53 {
  %2 = trunc i64 %0 to i32
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %2, i32 257, i32 15, i32 15, i1 true)
  %4 = insertelement <2 x i32> undef, i32 %3, i64 0
  %5 = lshr i64 %0, 32
  %6 = trunc i64 %5 to i32
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %6, i32 257, i32 15, i32 15, i1 true)
  %8 = insertelement <2 x i32> %4, i32 %7, i64 1
  %9 = bitcast <2 x i32> %8 to i64
  %10 = tail call i64 @llvm.umax.i64(i64 %0, i64 %9)
  %11 = trunc i64 %10 to i32
  %12 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %11, i32 258, i32 15, i32 15, i1 true)
  %13 = insertelement <2 x i32> undef, i32 %12, i64 0
  %14 = lshr i64 %10, 32
  %15 = trunc i64 %14 to i32
  %16 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %15, i32 258, i32 15, i32 15, i1 true)
  %17 = insertelement <2 x i32> %13, i32 %16, i64 1
  %18 = bitcast <2 x i32> %17 to i64
  %19 = tail call i64 @llvm.umax.i64(i64 %10, i64 %18)
  %20 = trunc i64 %19 to i32
  %21 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %20, i32 260, i32 15, i32 15, i1 true)
  %22 = insertelement <2 x i32> undef, i32 %21, i64 0
  %23 = lshr i64 %19, 32
  %24 = trunc i64 %23 to i32
  %25 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %24, i32 260, i32 15, i32 15, i1 true)
  %26 = insertelement <2 x i32> %22, i32 %25, i64 1
  %27 = bitcast <2 x i32> %26 to i64
  %28 = tail call i64 @llvm.umax.i64(i64 %19, i64 %27)
  %29 = trunc i64 %28 to i32
  %30 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %29, i32 264, i32 15, i32 15, i1 true)
  %31 = insertelement <2 x i32> undef, i32 %30, i64 0
  %32 = lshr i64 %28, 32
  %33 = trunc i64 %32 to i32
  %34 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %33, i32 264, i32 15, i32 15, i1 true)
  %35 = insertelement <2 x i32> %31, i32 %34, i64 1
  %36 = bitcast <2 x i32> %35 to i64
  %37 = tail call i64 @llvm.umax.i64(i64 %28, i64 %36)
  %38 = trunc i64 %37 to i32
  %39 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %38, i32 336, i32 15, i32 15, i1 true)
  %40 = insertelement <2 x i32> undef, i32 %39, i64 0
  %41 = lshr i64 %37, 32
  %42 = trunc i64 %41 to i32
  %43 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %42, i32 336, i32 15, i32 15, i1 true)
  %44 = insertelement <2 x i32> %40, i32 %43, i64 1
  %45 = bitcast <2 x i32> %44 to i64
  %46 = tail call i32 @llvm.amdgcn.permlanex16(i32 undef, i32 %39, i32 0, i32 0, i1 false, i1 true)
  %47 = insertelement <2 x i32> undef, i32 %46, i64 0
  %48 = tail call i32 @llvm.amdgcn.permlanex16(i32 undef, i32 %43, i32 0, i32 0, i1 false, i1 true)
  %49 = insertelement <2 x i32> %47, i32 %48, i64 1
  %50 = bitcast <2 x i32> %49 to i64
  %51 = tail call i64 @llvm.umax.i64(i64 %45, i64 %50)
  %52 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %53 = icmp eq i8 %52, 0
  br i1 %53, label %73, label %54

54:                                               ; preds = %1
  %55 = trunc i64 %51 to i32
  %56 = tail call i32 @llvm.amdgcn.readlane(i32 %55, i32 32)
  %57 = insertelement <2 x i32> undef, i32 %56, i64 0
  %58 = lshr i64 %51, 32
  %59 = trunc i64 %58 to i32
  %60 = tail call i32 @llvm.amdgcn.readlane(i32 %59, i32 32)
  %61 = insertelement <2 x i32> %57, i32 %60, i64 1
  %62 = bitcast <2 x i32> %61 to i64
  %63 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %64 = and i32 %63, 1
  %65 = icmp eq i32 %64, 0
  %66 = select i1 %65, i64 0, i64 %62
  %67 = tail call i32 @llvm.amdgcn.readlane(i32 %55, i32 0)
  %68 = insertelement <2 x i32> undef, i32 %67, i64 0
  %69 = tail call i32 @llvm.amdgcn.readlane(i32 %59, i32 0)
  %70 = insertelement <2 x i32> %68, i32 %69, i64 1
  %71 = bitcast <2 x i32> %70 to i64
  %72 = tail call i64 @llvm.umax.i64(i64 %71, i64 %66)
  br label %73

73:                                               ; preds = %54, %1
  %74 = phi i64 [ %72, %54 ], [ %51, %1 ]
  ret i64 %74
}

; Function Attrs: convergent norecurse nounwind
define linkonce_odr protected i64 @__ockl_wfscan_max_u64(i64 noundef %0, i1 noundef zeroext %1) local_unnamed_addr #12 {
  %3 = tail call i32 @__ockl_lane_u32() #58
  %4 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %5 = icmp slt i32 %4, 8000
  br i1 %5, label %6, label %78

6:                                                ; preds = %2
  %7 = trunc i64 %0 to i32
  %8 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %7, i32 30)
  %9 = insertelement <2 x i32> undef, i32 %8, i64 0
  %10 = lshr i64 %0, 32
  %11 = trunc i64 %10 to i32
  %12 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %11, i32 30)
  %13 = insertelement <2 x i32> %9, i32 %12, i64 1
  %14 = bitcast <2 x i32> %13 to i64
  %15 = and i32 %3, 1
  %16 = icmp eq i32 %15, 0
  %17 = select i1 %16, i64 0, i64 %14
  %18 = tail call i64 @llvm.umax.i64(i64 %0, i64 %17)
  %19 = trunc i64 %18 to i32
  %20 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %19, i32 60)
  %21 = insertelement <2 x i32> undef, i32 %20, i64 0
  %22 = lshr i64 %18, 32
  %23 = trunc i64 %22 to i32
  %24 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %23, i32 60)
  %25 = insertelement <2 x i32> %21, i32 %24, i64 1
  %26 = bitcast <2 x i32> %25 to i64
  %27 = and i32 %3, 2
  %28 = icmp eq i32 %27, 0
  %29 = select i1 %28, i64 0, i64 %26
  %30 = tail call i64 @llvm.umax.i64(i64 %18, i64 %29)
  %31 = trunc i64 %30 to i32
  %32 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %31, i32 120)
  %33 = insertelement <2 x i32> undef, i32 %32, i64 0
  %34 = lshr i64 %30, 32
  %35 = trunc i64 %34 to i32
  %36 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %35, i32 120)
  %37 = insertelement <2 x i32> %33, i32 %36, i64 1
  %38 = bitcast <2 x i32> %37 to i64
  %39 = and i32 %3, 4
  %40 = icmp eq i32 %39, 0
  %41 = select i1 %40, i64 0, i64 %38
  %42 = tail call i64 @llvm.umax.i64(i64 %30, i64 %41)
  %43 = trunc i64 %42 to i32
  %44 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %43, i32 240)
  %45 = insertelement <2 x i32> undef, i32 %44, i64 0
  %46 = lshr i64 %42, 32
  %47 = trunc i64 %46 to i32
  %48 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %47, i32 240)
  %49 = insertelement <2 x i32> %45, i32 %48, i64 1
  %50 = bitcast <2 x i32> %49 to i64
  %51 = and i32 %3, 8
  %52 = icmp eq i32 %51, 0
  %53 = select i1 %52, i64 0, i64 %50
  %54 = tail call i64 @llvm.umax.i64(i64 %42, i64 %53)
  %55 = trunc i64 %54 to i32
  %56 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %55, i32 480)
  %57 = insertelement <2 x i32> undef, i32 %56, i64 0
  %58 = lshr i64 %54, 32
  %59 = trunc i64 %58 to i32
  %60 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %59, i32 480)
  %61 = insertelement <2 x i32> %57, i32 %60, i64 1
  %62 = bitcast <2 x i32> %61 to i64
  %63 = and i32 %3, 16
  %64 = icmp eq i32 %63, 0
  %65 = select i1 %64, i64 0, i64 %62
  %66 = tail call i64 @llvm.umax.i64(i64 %54, i64 %65)
  %67 = trunc i64 %66 to i32
  %68 = tail call i32 @llvm.amdgcn.readlane(i32 %67, i32 31)
  %69 = insertelement <2 x i32> undef, i32 %68, i64 0
  %70 = lshr i64 %66, 32
  %71 = trunc i64 %70 to i32
  %72 = tail call i32 @llvm.amdgcn.readlane(i32 %71, i32 31)
  %73 = insertelement <2 x i32> %69, i32 %72, i64 1
  %74 = bitcast <2 x i32> %73 to i64
  %75 = icmp ugt i32 %3, 31
  %76 = select i1 %75, i64 %74, i64 0
  %77 = tail call i64 @llvm.umax.i64(i64 %66, i64 %76)
  br label %84

78:                                               ; preds = %2
  %79 = icmp ult i32 %4, 10000
  br i1 %79, label %80, label %82

80:                                               ; preds = %78
  %81 = tail call fastcc i64 @167(i64 noundef %0) #57
  br label %84

82:                                               ; preds = %78
  %83 = tail call fastcc i64 @168(i64 noundef %0, i32 noundef %3) #57
  br label %84

84:                                               ; preds = %82, %80, %6
  %85 = phi i64 [ %77, %6 ], [ %81, %80 ], [ %83, %82 ]
  br i1 %1, label %131, label %86

86:                                               ; preds = %84
  br i1 %5, label %87, label %125

87:                                               ; preds = %86
  %88 = trunc i64 %85 to i32
  %89 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %88, i32 32912)
  %90 = insertelement <2 x i32> undef, i32 %89, i64 0
  %91 = lshr i64 %85, 32
  %92 = trunc i64 %91 to i32
  %93 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %92, i32 32912)
  %94 = insertelement <2 x i32> %90, i32 %93, i64 1
  %95 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %88, i32 120)
  %96 = insertelement <2 x i32> undef, i32 %95, i64 0
  %97 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %92, i32 120)
  %98 = insertelement <2 x i32> %96, i32 %97, i64 1
  %99 = and i32 %3, 7
  %100 = icmp eq i32 %99, 4
  %101 = select i1 %100, <2 x i32> %98, <2 x i32> %94
  %102 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %88, i32 240)
  %103 = insertelement <2 x i32> undef, i32 %102, i64 0
  %104 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %92, i32 240)
  %105 = insertelement <2 x i32> %103, i32 %104, i64 1
  %106 = and i32 %3, 15
  %107 = icmp eq i32 %106, 8
  %108 = select i1 %107, <2 x i32> %105, <2 x i32> %101
  %109 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %88, i32 480)
  %110 = insertelement <2 x i32> undef, i32 %109, i64 0
  %111 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %92, i32 480)
  %112 = insertelement <2 x i32> %110, i32 %111, i64 1
  %113 = and i32 %3, 31
  %114 = icmp eq i32 %113, 16
  %115 = select i1 %114, <2 x i32> %112, <2 x i32> %108
  %116 = tail call i32 @llvm.amdgcn.readlane(i32 %88, i32 31)
  %117 = insertelement <2 x i32> undef, i32 %116, i64 0
  %118 = tail call i32 @llvm.amdgcn.readlane(i32 %92, i32 31)
  %119 = insertelement <2 x i32> %117, i32 %118, i64 1
  %120 = icmp eq i32 %3, 32
  %121 = select i1 %120, <2 x i32> %119, <2 x i32> %115
  %122 = bitcast <2 x i32> %121 to i64
  %123 = icmp eq i32 %3, 0
  %124 = select i1 %123, i64 0, i64 %122
  br label %131

125:                                              ; preds = %86
  %126 = icmp ult i32 %4, 10000
  br i1 %126, label %127, label %129

127:                                              ; preds = %125
  %128 = tail call fastcc i64 @169(i64 noundef %85) #57
  br label %131

129:                                              ; preds = %125
  %130 = tail call fastcc i64 @170(i64 noundef %85, i32 noundef %3) #57
  br label %131

131:                                              ; preds = %129, %127, %87, %84
  %132 = phi i64 [ %85, %84 ], [ %124, %87 ], [ %128, %127 ], [ %130, %129 ]
  ret i64 %132
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i64 @167(i64 noundef %0) unnamed_addr #54 {
  %2 = trunc i64 %0 to i32
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %2, i32 273, i32 15, i32 15, i1 true)
  %4 = insertelement <2 x i32> undef, i32 %3, i64 0
  %5 = lshr i64 %0, 32
  %6 = trunc i64 %5 to i32
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %6, i32 273, i32 15, i32 15, i1 true)
  %8 = insertelement <2 x i32> %4, i32 %7, i64 1
  %9 = bitcast <2 x i32> %8 to i64
  %10 = tail call i64 @llvm.umax.i64(i64 %0, i64 %9)
  %11 = trunc i64 %10 to i32
  %12 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %11, i32 274, i32 15, i32 15, i1 true)
  %13 = insertelement <2 x i32> undef, i32 %12, i64 0
  %14 = lshr i64 %10, 32
  %15 = trunc i64 %14 to i32
  %16 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %15, i32 274, i32 15, i32 15, i1 true)
  %17 = insertelement <2 x i32> %13, i32 %16, i64 1
  %18 = bitcast <2 x i32> %17 to i64
  %19 = tail call i64 @llvm.umax.i64(i64 %10, i64 %18)
  %20 = trunc i64 %19 to i32
  %21 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %20, i32 276, i32 15, i32 15, i1 true)
  %22 = insertelement <2 x i32> undef, i32 %21, i64 0
  %23 = lshr i64 %19, 32
  %24 = trunc i64 %23 to i32
  %25 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %24, i32 276, i32 15, i32 15, i1 true)
  %26 = insertelement <2 x i32> %22, i32 %25, i64 1
  %27 = bitcast <2 x i32> %26 to i64
  %28 = tail call i64 @llvm.umax.i64(i64 %19, i64 %27)
  %29 = trunc i64 %28 to i32
  %30 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %29, i32 280, i32 15, i32 15, i1 true)
  %31 = insertelement <2 x i32> undef, i32 %30, i64 0
  %32 = lshr i64 %28, 32
  %33 = trunc i64 %32 to i32
  %34 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %33, i32 280, i32 15, i32 15, i1 true)
  %35 = insertelement <2 x i32> %31, i32 %34, i64 1
  %36 = bitcast <2 x i32> %35 to i64
  %37 = tail call i64 @llvm.umax.i64(i64 %28, i64 %36)
  %38 = trunc i64 %37 to i32
  %39 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %38, i32 322, i32 10, i32 15, i1 false)
  %40 = insertelement <2 x i32> undef, i32 %39, i64 0
  %41 = lshr i64 %37, 32
  %42 = trunc i64 %41 to i32
  %43 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %42, i32 322, i32 10, i32 15, i1 false)
  %44 = insertelement <2 x i32> %40, i32 %43, i64 1
  %45 = bitcast <2 x i32> %44 to i64
  %46 = tail call i64 @llvm.umax.i64(i64 %37, i64 %45)
  %47 = trunc i64 %46 to i32
  %48 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %47, i32 323, i32 12, i32 15, i1 false)
  %49 = insertelement <2 x i32> undef, i32 %48, i64 0
  %50 = lshr i64 %46, 32
  %51 = trunc i64 %50 to i32
  %52 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %51, i32 323, i32 12, i32 15, i1 false)
  %53 = insertelement <2 x i32> %49, i32 %52, i64 1
  %54 = bitcast <2 x i32> %53 to i64
  %55 = tail call i64 @llvm.umax.i64(i64 %46, i64 %54)
  ret i64 %55
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i64 @168(i64 noundef %0, i32 noundef %1) unnamed_addr #55 {
  %3 = trunc i64 %0 to i32
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %3, i32 273, i32 15, i32 15, i1 true)
  %5 = insertelement <2 x i32> undef, i32 %4, i64 0
  %6 = lshr i64 %0, 32
  %7 = trunc i64 %6 to i32
  %8 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %7, i32 273, i32 15, i32 15, i1 true)
  %9 = insertelement <2 x i32> %5, i32 %8, i64 1
  %10 = bitcast <2 x i32> %9 to i64
  %11 = tail call i64 @llvm.umax.i64(i64 %0, i64 %10)
  %12 = trunc i64 %11 to i32
  %13 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %12, i32 274, i32 15, i32 15, i1 true)
  %14 = insertelement <2 x i32> undef, i32 %13, i64 0
  %15 = lshr i64 %11, 32
  %16 = trunc i64 %15 to i32
  %17 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %16, i32 274, i32 15, i32 15, i1 true)
  %18 = insertelement <2 x i32> %14, i32 %17, i64 1
  %19 = bitcast <2 x i32> %18 to i64
  %20 = tail call i64 @llvm.umax.i64(i64 %11, i64 %19)
  %21 = trunc i64 %20 to i32
  %22 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %21, i32 276, i32 15, i32 15, i1 true)
  %23 = insertelement <2 x i32> undef, i32 %22, i64 0
  %24 = lshr i64 %20, 32
  %25 = trunc i64 %24 to i32
  %26 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %25, i32 276, i32 15, i32 15, i1 true)
  %27 = insertelement <2 x i32> %23, i32 %26, i64 1
  %28 = bitcast <2 x i32> %27 to i64
  %29 = tail call i64 @llvm.umax.i64(i64 %20, i64 %28)
  %30 = trunc i64 %29 to i32
  %31 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %30, i32 280, i32 15, i32 15, i1 true)
  %32 = insertelement <2 x i32> undef, i32 %31, i64 0
  %33 = lshr i64 %29, 32
  %34 = trunc i64 %33 to i32
  %35 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %34, i32 280, i32 15, i32 15, i1 true)
  %36 = insertelement <2 x i32> %32, i32 %35, i64 1
  %37 = bitcast <2 x i32> %36 to i64
  %38 = tail call i64 @llvm.umax.i64(i64 %29, i64 %37)
  %39 = trunc i64 %38 to i32
  %40 = tail call i32 @llvm.amdgcn.permlanex16(i32 undef, i32 %39, i32 -1, i32 -1, i1 false, i1 true)
  %41 = insertelement <2 x i32> undef, i32 %40, i64 0
  %42 = lshr i64 %38, 32
  %43 = trunc i64 %42 to i32
  %44 = tail call i32 @llvm.amdgcn.permlanex16(i32 undef, i32 %43, i32 -1, i32 -1, i1 false, i1 true)
  %45 = insertelement <2 x i32> %41, i32 %44, i64 1
  %46 = bitcast <2 x i32> %45 to i64
  %47 = and i32 %1, 16
  %48 = icmp eq i32 %47, 0
  %49 = select i1 %48, i64 0, i64 %46
  %50 = tail call i64 @llvm.umax.i64(i64 %38, i64 %49)
  %51 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %52 = icmp eq i8 %51, 0
  br i1 %52, label %65, label %53

53:                                               ; preds = %2
  %54 = trunc i64 %50 to i32
  %55 = tail call i32 @llvm.amdgcn.readlane(i32 %54, i32 31)
  %56 = insertelement <2 x i32> undef, i32 %55, i64 0
  %57 = lshr i64 %50, 32
  %58 = trunc i64 %57 to i32
  %59 = tail call i32 @llvm.amdgcn.readlane(i32 %58, i32 31)
  %60 = insertelement <2 x i32> %56, i32 %59, i64 1
  %61 = bitcast <2 x i32> %60 to i64
  %62 = icmp ugt i32 %1, 31
  %63 = select i1 %62, i64 %61, i64 0
  %64 = tail call i64 @llvm.umax.i64(i64 %50, i64 %63)
  br label %65

65:                                               ; preds = %53, %2
  %66 = phi i64 [ %64, %53 ], [ %50, %2 ]
  ret i64 %66
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i64 @169(i64 noundef %0) unnamed_addr #54 {
  %2 = trunc i64 %0 to i32
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %2, i32 312, i32 15, i32 15, i1 true)
  %4 = insertelement <2 x i32> undef, i32 %3, i64 0
  %5 = lshr i64 %0, 32
  %6 = trunc i64 %5 to i32
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %6, i32 312, i32 15, i32 15, i1 true)
  %8 = insertelement <2 x i32> %4, i32 %7, i64 1
  %9 = bitcast <2 x i32> %8 to i64
  ret i64 %9
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i64 @170(i64 noundef %0, i32 noundef %1) unnamed_addr #55 {
  %3 = trunc i64 %0 to i32
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %3, i32 273, i32 15, i32 15, i1 true)
  %5 = insertelement <2 x i32> undef, i32 %4, i64 0
  %6 = lshr i64 %0, 32
  %7 = trunc i64 %6 to i32
  %8 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %7, i32 273, i32 15, i32 15, i1 true)
  %9 = insertelement <2 x i32> %5, i32 %8, i64 1
  %10 = bitcast <2 x i32> %9 to i64
  %11 = tail call i32 @llvm.amdgcn.permlanex16(i32 undef, i32 %3, i32 -1, i32 -1, i1 false, i1 true)
  %12 = insertelement <2 x i32> undef, i32 %11, i64 0
  %13 = tail call i32 @llvm.amdgcn.permlanex16(i32 undef, i32 %7, i32 -1, i32 -1, i1 false, i1 true)
  %14 = insertelement <2 x i32> %12, i32 %13, i64 1
  %15 = bitcast <2 x i32> %14 to i64
  %16 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %30, label %18

18:                                               ; preds = %2
  %19 = tail call i32 @llvm.amdgcn.readlane(i32 %3, i32 31)
  %20 = insertelement <2 x i32> undef, i32 %19, i64 0
  %21 = tail call i32 @llvm.amdgcn.readlane(i32 %7, i32 31)
  %22 = insertelement <2 x i32> %20, i32 %21, i64 1
  %23 = bitcast <2 x i32> %22 to i64
  %24 = icmp eq i32 %1, 32
  %25 = select i1 %24, i64 %23, i64 %15
  %26 = and i32 %1, 31
  %27 = icmp eq i32 %26, 16
  %28 = or i1 %24, %27
  %29 = select i1 %28, i64 %25, i64 %10
  br label %33

30:                                               ; preds = %2
  %31 = icmp eq i32 %1, 16
  %32 = select i1 %31, i64 %15, i64 %10
  br label %33

33:                                               ; preds = %30, %18
  %34 = phi i64 [ %29, %18 ], [ %32, %30 ]
  ret i64 %34
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected float @__ockl_wfred_max_f32(float noundef %0) local_unnamed_addr #0 {
  %2 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %3 = icmp slt i32 %2, 8000
  br i1 %3, label %4, label %96

4:                                                ; preds = %1
  %5 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %10, label %7

7:                                                ; preds = %4
  %8 = tail call i64 @llvm.read_register.i64(metadata !36) #57
  %9 = icmp eq i64 %8, -1
  br label %13

10:                                               ; preds = %4
  %11 = tail call i32 @llvm.read_register.i32(metadata !10) #57
  %12 = icmp eq i32 %11, -1
  br label %13

13:                                               ; preds = %10, %7
  %14 = phi i1 [ %9, %7 ], [ %12, %10 ]
  %15 = bitcast float %0 to i32
  %16 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %15, i32 32945)
  br i1 %14, label %17, label %42

17:                                               ; preds = %13
  %18 = bitcast i32 %16 to float
  %19 = tail call float @llvm.maxnum.f32(float %0, float %18)
  %20 = bitcast float %19 to i32
  %21 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %20, i32 32846)
  %22 = bitcast i32 %21 to float
  %23 = tail call float @llvm.maxnum.f32(float %19, float %22)
  %24 = bitcast float %23 to i32
  %25 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %24, i32 4127)
  %26 = bitcast i32 %25 to float
  %27 = tail call float @llvm.maxnum.f32(float %23, float %26)
  %28 = bitcast float %27 to i32
  %29 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %28, i32 8223)
  %30 = bitcast i32 %29 to float
  %31 = tail call float @llvm.maxnum.f32(float %27, float %30)
  %32 = bitcast float %31 to i32
  %33 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %32, i32 16415)
  %34 = bitcast i32 %33 to float
  %35 = tail call float @llvm.maxnum.f32(float %31, float %34)
  %36 = bitcast float %35 to i32
  %37 = tail call i32 @llvm.amdgcn.readlane(i32 %36, i32 0)
  %38 = bitcast i32 %37 to float
  %39 = tail call i32 @llvm.amdgcn.readlane(i32 %36, i32 32)
  %40 = bitcast i32 %39 to float
  %41 = tail call float @llvm.maxnum.f32(float %38, float %40)
  br label %102

42:                                               ; preds = %13
  %43 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 32945)
  %44 = and i32 %43, %16
  %45 = and i32 %43, -8388608
  %46 = xor i32 %45, -8388608
  %47 = or i32 %46, %44
  %48 = bitcast i32 %47 to float
  %49 = tail call float @llvm.maxnum.f32(float %0, float %48)
  %50 = bitcast float %49 to i32
  %51 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %50, i32 32846)
  %52 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 32846)
  %53 = and i32 %52, %51
  %54 = and i32 %52, -8388608
  %55 = xor i32 %54, -8388608
  %56 = or i32 %55, %53
  %57 = bitcast i32 %56 to float
  %58 = tail call float @llvm.maxnum.f32(float %49, float %57)
  %59 = bitcast float %58 to i32
  %60 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %59, i32 4127)
  %61 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 4127)
  %62 = and i32 %61, %60
  %63 = and i32 %61, -8388608
  %64 = xor i32 %63, -8388608
  %65 = or i32 %64, %62
  %66 = bitcast i32 %65 to float
  %67 = tail call float @llvm.maxnum.f32(float %58, float %66)
  %68 = bitcast float %67 to i32
  %69 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %68, i32 8223)
  %70 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 8223)
  %71 = and i32 %70, %69
  %72 = and i32 %70, -8388608
  %73 = xor i32 %72, -8388608
  %74 = or i32 %73, %71
  %75 = bitcast i32 %74 to float
  %76 = tail call float @llvm.maxnum.f32(float %67, float %75)
  %77 = bitcast float %76 to i32
  %78 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %77, i32 16415)
  %79 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 16415)
  %80 = and i32 %79, %78
  %81 = and i32 %79, -8388608
  %82 = xor i32 %81, -8388608
  %83 = or i32 %82, %80
  %84 = bitcast i32 %83 to float
  %85 = tail call float @llvm.maxnum.f32(float %76, float %84)
  %86 = bitcast float %85 to i32
  %87 = tail call i32 @llvm.amdgcn.readlane(i32 %86, i32 32)
  %88 = bitcast i32 %87 to float
  %89 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %90 = and i32 %89, 1
  %91 = icmp eq i32 %90, 0
  %92 = select i1 %91, float 0xFFF0000000000000, float %88
  %93 = tail call i32 @llvm.amdgcn.readlane(i32 %86, i32 0)
  %94 = bitcast i32 %93 to float
  %95 = tail call float @llvm.maxnum.f32(float %94, float %92)
  br label %102

96:                                               ; preds = %1
  %97 = icmp ult i32 %2, 10000
  br i1 %97, label %98, label %100

98:                                               ; preds = %96
  %99 = tail call fastcc float @171(float noundef %0) #57
  br label %102

100:                                              ; preds = %96
  %101 = tail call fastcc float @172(float noundef %0) #57
  br label %102

102:                                              ; preds = %100, %98, %42, %17
  %103 = phi float [ %41, %17 ], [ %95, %42 ], [ %99, %98 ], [ %101, %100 ]
  ret float %103
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc float @171(float noundef %0) unnamed_addr #52 {
  %2 = bitcast float %0 to i32
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -8388608, i32 %2, i32 257, i32 15, i32 15, i1 false)
  %4 = bitcast i32 %3 to float
  %5 = tail call float @llvm.maxnum.f32(float %0, float %4)
  %6 = bitcast float %5 to i32
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -8388608, i32 %6, i32 258, i32 15, i32 15, i1 false)
  %8 = bitcast i32 %7 to float
  %9 = tail call float @llvm.maxnum.f32(float %5, float %8)
  %10 = bitcast float %9 to i32
  %11 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -8388608, i32 %10, i32 260, i32 15, i32 15, i1 false)
  %12 = bitcast i32 %11 to float
  %13 = tail call float @llvm.maxnum.f32(float %9, float %12)
  %14 = bitcast float %13 to i32
  %15 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -8388608, i32 %14, i32 264, i32 15, i32 15, i1 false)
  %16 = bitcast i32 %15 to float
  %17 = tail call float @llvm.maxnum.f32(float %13, float %16)
  %18 = bitcast float %17 to i32
  %19 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -8388608, i32 %18, i32 304, i32 15, i32 15, i1 false)
  %20 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -8388608, i32 %19, i32 320, i32 15, i32 15, i1 false)
  %21 = bitcast i32 %20 to float
  %22 = tail call float @llvm.maxnum.f32(float %17, float %21)
  %23 = bitcast float %22 to i32
  %24 = tail call i32 @llvm.amdgcn.readlane(i32 %23, i32 32)
  %25 = bitcast i32 %24 to float
  %26 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %27 = and i32 %26, 1
  %28 = icmp eq i32 %27, 0
  %29 = select i1 %28, float 0xFFF0000000000000, float %25
  %30 = tail call i32 @llvm.amdgcn.readlane(i32 %23, i32 0)
  %31 = bitcast i32 %30 to float
  %32 = tail call float @llvm.maxnum.f32(float %31, float %29)
  ret float %32
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc float @172(float noundef %0) unnamed_addr #53 {
  %2 = bitcast float %0 to i32
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -8388608, i32 %2, i32 257, i32 15, i32 15, i1 false)
  %4 = bitcast i32 %3 to float
  %5 = tail call float @llvm.maxnum.f32(float %0, float %4)
  %6 = bitcast float %5 to i32
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -8388608, i32 %6, i32 258, i32 15, i32 15, i1 false)
  %8 = bitcast i32 %7 to float
  %9 = tail call float @llvm.maxnum.f32(float %5, float %8)
  %10 = bitcast float %9 to i32
  %11 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -8388608, i32 %10, i32 260, i32 15, i32 15, i1 false)
  %12 = bitcast i32 %11 to float
  %13 = tail call float @llvm.maxnum.f32(float %9, float %12)
  %14 = bitcast float %13 to i32
  %15 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -8388608, i32 %14, i32 264, i32 15, i32 15, i1 false)
  %16 = bitcast i32 %15 to float
  %17 = tail call float @llvm.maxnum.f32(float %13, float %16)
  %18 = bitcast float %17 to i32
  %19 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -8388608, i32 %18, i32 336, i32 15, i32 15, i1 false)
  %20 = bitcast i32 %19 to float
  %21 = tail call i32 @llvm.amdgcn.permlanex16(i32 -8388608, i32 %19, i32 0, i32 0, i1 false, i1 false)
  %22 = bitcast i32 %21 to float
  %23 = tail call float @llvm.maxnum.f32(float %20, float %22)
  %24 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %37, label %26

26:                                               ; preds = %1
  %27 = bitcast float %23 to i32
  %28 = tail call i32 @llvm.amdgcn.readlane(i32 %27, i32 32)
  %29 = bitcast i32 %28 to float
  %30 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %31 = and i32 %30, 1
  %32 = icmp eq i32 %31, 0
  %33 = select i1 %32, float 0xFFF0000000000000, float %29
  %34 = tail call i32 @llvm.amdgcn.readlane(i32 %27, i32 0)
  %35 = bitcast i32 %34 to float
  %36 = tail call float @llvm.maxnum.f32(float %35, float %33)
  br label %37

37:                                               ; preds = %26, %1
  %38 = phi float [ %36, %26 ], [ %23, %1 ]
  ret float %38
}

; Function Attrs: convergent norecurse nounwind
define linkonce_odr protected float @__ockl_wfscan_max_f32(float noundef %0, i1 noundef zeroext %1) local_unnamed_addr #12 {
  %3 = tail call i32 @__ockl_lane_u32() #58
  %4 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %5 = icmp slt i32 %4, 8000
  br i1 %5, label %6, label %48

6:                                                ; preds = %2
  %7 = bitcast float %0 to i32
  %8 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %7, i32 30)
  %9 = bitcast i32 %8 to float
  %10 = and i32 %3, 1
  %11 = icmp eq i32 %10, 0
  %12 = select i1 %11, float 0xFFF0000000000000, float %9
  %13 = tail call float @llvm.maxnum.f32(float %0, float %12)
  %14 = bitcast float %13 to i32
  %15 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %14, i32 60)
  %16 = bitcast i32 %15 to float
  %17 = and i32 %3, 2
  %18 = icmp eq i32 %17, 0
  %19 = select i1 %18, float 0xFFF0000000000000, float %16
  %20 = tail call float @llvm.maxnum.f32(float %13, float %19)
  %21 = bitcast float %20 to i32
  %22 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %21, i32 120)
  %23 = bitcast i32 %22 to float
  %24 = and i32 %3, 4
  %25 = icmp eq i32 %24, 0
  %26 = select i1 %25, float 0xFFF0000000000000, float %23
  %27 = tail call float @llvm.maxnum.f32(float %20, float %26)
  %28 = bitcast float %27 to i32
  %29 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %28, i32 240)
  %30 = bitcast i32 %29 to float
  %31 = and i32 %3, 8
  %32 = icmp eq i32 %31, 0
  %33 = select i1 %32, float 0xFFF0000000000000, float %30
  %34 = tail call float @llvm.maxnum.f32(float %27, float %33)
  %35 = bitcast float %34 to i32
  %36 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %35, i32 480)
  %37 = bitcast i32 %36 to float
  %38 = and i32 %3, 16
  %39 = icmp eq i32 %38, 0
  %40 = select i1 %39, float 0xFFF0000000000000, float %37
  %41 = tail call float @llvm.maxnum.f32(float %34, float %40)
  %42 = bitcast float %41 to i32
  %43 = tail call i32 @llvm.amdgcn.readlane(i32 %42, i32 31)
  %44 = bitcast i32 %43 to float
  %45 = icmp ugt i32 %3, 31
  %46 = select i1 %45, float %44, float 0xFFF0000000000000
  %47 = tail call float @llvm.maxnum.f32(float %41, float %46)
  br label %54

48:                                               ; preds = %2
  %49 = icmp ult i32 %4, 10000
  br i1 %49, label %50, label %52

50:                                               ; preds = %48
  %51 = tail call fastcc float @173(float noundef %0) #57
  br label %54

52:                                               ; preds = %48
  %53 = tail call fastcc float @174(float noundef %0, i32 noundef %3) #57
  br label %54

54:                                               ; preds = %52, %50, %6
  %55 = phi float [ %47, %6 ], [ %51, %50 ], [ %53, %52 ]
  br i1 %1, label %84, label %56

56:                                               ; preds = %54
  br i1 %5, label %57, label %78

57:                                               ; preds = %56
  %58 = bitcast float %55 to i32
  %59 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %58, i32 32912)
  %60 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %58, i32 120)
  %61 = and i32 %3, 7
  %62 = icmp eq i32 %61, 4
  %63 = select i1 %62, i32 %60, i32 %59
  %64 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %58, i32 240)
  %65 = and i32 %3, 15
  %66 = icmp eq i32 %65, 8
  %67 = select i1 %66, i32 %64, i32 %63
  %68 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %58, i32 480)
  %69 = and i32 %3, 31
  %70 = icmp eq i32 %69, 16
  %71 = select i1 %70, i32 %68, i32 %67
  %72 = tail call i32 @llvm.amdgcn.readlane(i32 %58, i32 31)
  %73 = icmp eq i32 %3, 32
  %74 = select i1 %73, i32 %72, i32 %71
  %75 = bitcast i32 %74 to float
  %76 = icmp eq i32 %3, 0
  %77 = select i1 %76, float 0xFFF0000000000000, float %75
  br label %84

78:                                               ; preds = %56
  %79 = icmp ult i32 %4, 10000
  br i1 %79, label %80, label %82

80:                                               ; preds = %78
  %81 = tail call fastcc float @175(float noundef %55) #57
  br label %84

82:                                               ; preds = %78
  %83 = tail call fastcc float @176(float noundef %55, i32 noundef %3) #57
  br label %84

84:                                               ; preds = %82, %80, %57, %54
  %85 = phi float [ %55, %54 ], [ %77, %57 ], [ %81, %80 ], [ %83, %82 ]
  ret float %85
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc float @173(float noundef %0) unnamed_addr #54 {
  %2 = bitcast float %0 to i32
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -8388608, i32 %2, i32 273, i32 15, i32 15, i1 false)
  %4 = bitcast i32 %3 to float
  %5 = tail call float @llvm.maxnum.f32(float %0, float %4)
  %6 = bitcast float %5 to i32
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -8388608, i32 %6, i32 274, i32 15, i32 15, i1 false)
  %8 = bitcast i32 %7 to float
  %9 = tail call float @llvm.maxnum.f32(float %5, float %8)
  %10 = bitcast float %9 to i32
  %11 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -8388608, i32 %10, i32 276, i32 15, i32 15, i1 false)
  %12 = bitcast i32 %11 to float
  %13 = tail call float @llvm.maxnum.f32(float %9, float %12)
  %14 = bitcast float %13 to i32
  %15 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -8388608, i32 %14, i32 280, i32 15, i32 15, i1 false)
  %16 = bitcast i32 %15 to float
  %17 = tail call float @llvm.maxnum.f32(float %13, float %16)
  %18 = bitcast float %17 to i32
  %19 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -8388608, i32 %18, i32 322, i32 10, i32 15, i1 false)
  %20 = bitcast i32 %19 to float
  %21 = tail call float @llvm.maxnum.f32(float %17, float %20)
  %22 = bitcast float %21 to i32
  %23 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -8388608, i32 %22, i32 323, i32 12, i32 15, i1 false)
  %24 = bitcast i32 %23 to float
  %25 = tail call float @llvm.maxnum.f32(float %21, float %24)
  ret float %25
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc float @174(float noundef %0, i32 noundef %1) unnamed_addr #55 {
  %3 = bitcast float %0 to i32
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -8388608, i32 %3, i32 273, i32 15, i32 15, i1 false)
  %5 = bitcast i32 %4 to float
  %6 = tail call float @llvm.maxnum.f32(float %0, float %5)
  %7 = bitcast float %6 to i32
  %8 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -8388608, i32 %7, i32 274, i32 15, i32 15, i1 false)
  %9 = bitcast i32 %8 to float
  %10 = tail call float @llvm.maxnum.f32(float %6, float %9)
  %11 = bitcast float %10 to i32
  %12 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -8388608, i32 %11, i32 276, i32 15, i32 15, i1 false)
  %13 = bitcast i32 %12 to float
  %14 = tail call float @llvm.maxnum.f32(float %10, float %13)
  %15 = bitcast float %14 to i32
  %16 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -8388608, i32 %15, i32 280, i32 15, i32 15, i1 false)
  %17 = bitcast i32 %16 to float
  %18 = tail call float @llvm.maxnum.f32(float %14, float %17)
  %19 = bitcast float %18 to i32
  %20 = tail call i32 @llvm.amdgcn.permlanex16(i32 -8388608, i32 %19, i32 -1, i32 -1, i1 false, i1 false)
  %21 = bitcast i32 %20 to float
  %22 = and i32 %1, 16
  %23 = icmp eq i32 %22, 0
  %24 = select i1 %23, float 0xFFF0000000000000, float %21
  %25 = tail call float @llvm.maxnum.f32(float %18, float %24)
  %26 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %27 = icmp eq i8 %26, 0
  br i1 %27, label %35, label %28

28:                                               ; preds = %2
  %29 = icmp ugt i32 %1, 31
  %30 = bitcast float %25 to i32
  %31 = tail call i32 @llvm.amdgcn.readlane(i32 %30, i32 31)
  %32 = bitcast i32 %31 to float
  %33 = select i1 %29, float %32, float 0xFFF0000000000000
  %34 = tail call float @llvm.maxnum.f32(float %25, float %33)
  br label %35

35:                                               ; preds = %28, %2
  %36 = phi float [ %34, %28 ], [ %25, %2 ]
  ret float %36
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc float @175(float noundef %0) unnamed_addr #54 {
  %2 = bitcast float %0 to i32
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -8388608, i32 %2, i32 312, i32 15, i32 15, i1 false)
  %4 = bitcast i32 %3 to float
  ret float %4
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc float @176(float noundef %0, i32 noundef %1) unnamed_addr #55 {
  %3 = bitcast float %0 to i32
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -8388608, i32 %3, i32 273, i32 15, i32 15, i1 false)
  %5 = bitcast i32 %4 to float
  %6 = tail call i32 @llvm.amdgcn.permlanex16(i32 -8388608, i32 %3, i32 -1, i32 -1, i1 false, i1 false)
  %7 = bitcast i32 %6 to float
  %8 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %19, label %10

10:                                               ; preds = %2
  %11 = tail call i32 @llvm.amdgcn.readlane(i32 %3, i32 31)
  %12 = bitcast i32 %11 to float
  %13 = icmp eq i32 %1, 32
  %14 = select i1 %13, float %12, float %7
  %15 = and i32 %1, 31
  %16 = icmp eq i32 %15, 16
  %17 = or i1 %13, %16
  %18 = select i1 %17, float %14, float %5
  br label %22

19:                                               ; preds = %2
  %20 = icmp eq i32 %1, 16
  %21 = select i1 %20, float %7, float %5
  br label %22

22:                                               ; preds = %19, %10
  %23 = phi float [ %18, %10 ], [ %21, %19 ]
  ret float %23
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected double @__ockl_wfred_max_f64(double noundef %0) local_unnamed_addr #0 {
  %2 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %3 = icmp slt i32 %2, 8000
  br i1 %3, label %4, label %166

4:                                                ; preds = %1
  %5 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %10, label %7

7:                                                ; preds = %4
  %8 = tail call i64 @llvm.read_register.i64(metadata !36) #57
  %9 = icmp eq i64 %8, -1
  br label %13

10:                                               ; preds = %4
  %11 = tail call i32 @llvm.read_register.i32(metadata !10) #57
  %12 = icmp eq i32 %11, -1
  br label %13

13:                                               ; preds = %10, %7
  %14 = phi i1 [ %9, %7 ], [ %12, %10 ]
  %15 = bitcast double %0 to <2 x i32>
  %16 = extractelement <2 x i32> %15, i64 0
  %17 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %16, i32 32945)
  br i1 %14, label %18, label %75

18:                                               ; preds = %13
  %19 = insertelement <2 x i32> undef, i32 %17, i64 0
  %20 = extractelement <2 x i32> %15, i64 1
  %21 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %20, i32 32945)
  %22 = insertelement <2 x i32> %19, i32 %21, i64 1
  %23 = bitcast <2 x i32> %22 to double
  %24 = tail call double @llvm.maxnum.f64(double %0, double %23)
  %25 = bitcast double %24 to <2 x i32>
  %26 = extractelement <2 x i32> %25, i64 0
  %27 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %26, i32 32846)
  %28 = insertelement <2 x i32> undef, i32 %27, i64 0
  %29 = extractelement <2 x i32> %25, i64 1
  %30 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %29, i32 32846)
  %31 = insertelement <2 x i32> %28, i32 %30, i64 1
  %32 = bitcast <2 x i32> %31 to double
  %33 = tail call double @llvm.maxnum.f64(double %24, double %32)
  %34 = bitcast double %33 to <2 x i32>
  %35 = extractelement <2 x i32> %34, i64 0
  %36 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %35, i32 4127)
  %37 = insertelement <2 x i32> undef, i32 %36, i64 0
  %38 = extractelement <2 x i32> %34, i64 1
  %39 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %38, i32 4127)
  %40 = insertelement <2 x i32> %37, i32 %39, i64 1
  %41 = bitcast <2 x i32> %40 to double
  %42 = tail call double @llvm.maxnum.f64(double %33, double %41)
  %43 = bitcast double %42 to <2 x i32>
  %44 = extractelement <2 x i32> %43, i64 0
  %45 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %44, i32 8223)
  %46 = insertelement <2 x i32> undef, i32 %45, i64 0
  %47 = extractelement <2 x i32> %43, i64 1
  %48 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %47, i32 8223)
  %49 = insertelement <2 x i32> %46, i32 %48, i64 1
  %50 = bitcast <2 x i32> %49 to double
  %51 = tail call double @llvm.maxnum.f64(double %42, double %50)
  %52 = bitcast double %51 to <2 x i32>
  %53 = extractelement <2 x i32> %52, i64 0
  %54 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %53, i32 16415)
  %55 = insertelement <2 x i32> undef, i32 %54, i64 0
  %56 = extractelement <2 x i32> %52, i64 1
  %57 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %56, i32 16415)
  %58 = insertelement <2 x i32> %55, i32 %57, i64 1
  %59 = bitcast <2 x i32> %58 to double
  %60 = tail call double @llvm.maxnum.f64(double %51, double %59)
  %61 = bitcast double %60 to <2 x i32>
  %62 = extractelement <2 x i32> %61, i64 0
  %63 = tail call i32 @llvm.amdgcn.readlane(i32 %62, i32 0)
  %64 = insertelement <2 x i32> undef, i32 %63, i64 0
  %65 = extractelement <2 x i32> %61, i64 1
  %66 = tail call i32 @llvm.amdgcn.readlane(i32 %65, i32 0)
  %67 = insertelement <2 x i32> %64, i32 %66, i64 1
  %68 = bitcast <2 x i32> %67 to double
  %69 = tail call i32 @llvm.amdgcn.readlane(i32 %62, i32 32)
  %70 = insertelement <2 x i32> undef, i32 %69, i64 0
  %71 = tail call i32 @llvm.amdgcn.readlane(i32 %65, i32 32)
  %72 = insertelement <2 x i32> %70, i32 %71, i64 1
  %73 = bitcast <2 x i32> %72 to double
  %74 = tail call double @llvm.maxnum.f64(double %68, double %73)
  br label %172

75:                                               ; preds = %13
  %76 = extractelement <2 x i32> %15, i64 1
  %77 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %76, i32 32945)
  %78 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 32945)
  %79 = and i32 %78, %17
  %80 = insertelement <2 x i32> undef, i32 %79, i64 0
  %81 = and i32 %78, %77
  %82 = and i32 %78, -1048576
  %83 = xor i32 %82, -1048576
  %84 = or i32 %83, %81
  %85 = insertelement <2 x i32> %80, i32 %84, i64 1
  %86 = bitcast <2 x i32> %85 to double
  %87 = tail call double @llvm.maxnum.f64(double %0, double %86)
  %88 = bitcast double %87 to <2 x i32>
  %89 = extractelement <2 x i32> %88, i64 0
  %90 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %89, i32 32846)
  %91 = extractelement <2 x i32> %88, i64 1
  %92 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %91, i32 32846)
  %93 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 32846)
  %94 = and i32 %93, %90
  %95 = insertelement <2 x i32> undef, i32 %94, i64 0
  %96 = and i32 %93, %92
  %97 = and i32 %93, -1048576
  %98 = xor i32 %97, -1048576
  %99 = or i32 %98, %96
  %100 = insertelement <2 x i32> %95, i32 %99, i64 1
  %101 = bitcast <2 x i32> %100 to double
  %102 = tail call double @llvm.maxnum.f64(double %87, double %101)
  %103 = bitcast double %102 to <2 x i32>
  %104 = extractelement <2 x i32> %103, i64 0
  %105 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %104, i32 4127)
  %106 = extractelement <2 x i32> %103, i64 1
  %107 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %106, i32 4127)
  %108 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 4127)
  %109 = and i32 %108, %105
  %110 = insertelement <2 x i32> undef, i32 %109, i64 0
  %111 = and i32 %108, %107
  %112 = and i32 %108, -1048576
  %113 = xor i32 %112, -1048576
  %114 = or i32 %113, %111
  %115 = insertelement <2 x i32> %110, i32 %114, i64 1
  %116 = bitcast <2 x i32> %115 to double
  %117 = tail call double @llvm.maxnum.f64(double %102, double %116)
  %118 = bitcast double %117 to <2 x i32>
  %119 = extractelement <2 x i32> %118, i64 0
  %120 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %119, i32 8223)
  %121 = extractelement <2 x i32> %118, i64 1
  %122 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %121, i32 8223)
  %123 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 8223)
  %124 = and i32 %123, %120
  %125 = insertelement <2 x i32> undef, i32 %124, i64 0
  %126 = and i32 %123, %122
  %127 = and i32 %123, -1048576
  %128 = xor i32 %127, -1048576
  %129 = or i32 %128, %126
  %130 = insertelement <2 x i32> %125, i32 %129, i64 1
  %131 = bitcast <2 x i32> %130 to double
  %132 = tail call double @llvm.maxnum.f64(double %117, double %131)
  %133 = bitcast double %132 to <2 x i32>
  %134 = extractelement <2 x i32> %133, i64 0
  %135 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %134, i32 16415)
  %136 = extractelement <2 x i32> %133, i64 1
  %137 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %136, i32 16415)
  %138 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 16415)
  %139 = and i32 %138, %135
  %140 = insertelement <2 x i32> undef, i32 %139, i64 0
  %141 = and i32 %138, %137
  %142 = and i32 %138, -1048576
  %143 = xor i32 %142, -1048576
  %144 = or i32 %143, %141
  %145 = insertelement <2 x i32> %140, i32 %144, i64 1
  %146 = bitcast <2 x i32> %145 to double
  %147 = tail call double @llvm.maxnum.f64(double %132, double %146)
  %148 = bitcast double %147 to <2 x i32>
  %149 = extractelement <2 x i32> %148, i64 0
  %150 = tail call i32 @llvm.amdgcn.readlane(i32 %149, i32 32)
  %151 = insertelement <2 x i32> undef, i32 %150, i64 0
  %152 = extractelement <2 x i32> %148, i64 1
  %153 = tail call i32 @llvm.amdgcn.readlane(i32 %152, i32 32)
  %154 = insertelement <2 x i32> %151, i32 %153, i64 1
  %155 = bitcast <2 x i32> %154 to double
  %156 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %157 = and i32 %156, 1
  %158 = icmp eq i32 %157, 0
  %159 = select i1 %158, double 0xFFF0000000000000, double %155
  %160 = tail call i32 @llvm.amdgcn.readlane(i32 %149, i32 0)
  %161 = insertelement <2 x i32> undef, i32 %160, i64 0
  %162 = tail call i32 @llvm.amdgcn.readlane(i32 %152, i32 0)
  %163 = insertelement <2 x i32> %161, i32 %162, i64 1
  %164 = bitcast <2 x i32> %163 to double
  %165 = tail call double @llvm.maxnum.f64(double %164, double %159)
  br label %172

166:                                              ; preds = %1
  %167 = icmp ult i32 %2, 10000
  br i1 %167, label %168, label %170

168:                                              ; preds = %166
  %169 = tail call fastcc double @177(double noundef %0) #57
  br label %172

170:                                              ; preds = %166
  %171 = tail call fastcc double @178(double noundef %0) #57
  br label %172

172:                                              ; preds = %170, %168, %75, %18
  %173 = phi double [ %74, %18 ], [ %165, %75 ], [ %169, %168 ], [ %171, %170 ]
  ret double %173
}

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.maxnum.f64(double, double) #4

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc double @177(double noundef %0) unnamed_addr #52 {
  %2 = bitcast double %0 to <2 x i32>
  %3 = extractelement <2 x i32> %2, i64 0
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %3, i32 257, i32 15, i32 15, i1 false)
  %5 = insertelement <2 x i32> undef, i32 %4, i64 0
  %6 = extractelement <2 x i32> %2, i64 1
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1048576, i32 %6, i32 257, i32 15, i32 15, i1 false)
  %8 = insertelement <2 x i32> %5, i32 %7, i64 1
  %9 = bitcast <2 x i32> %8 to double
  %10 = tail call double @llvm.maxnum.f64(double %0, double %9)
  %11 = bitcast double %10 to <2 x i32>
  %12 = extractelement <2 x i32> %11, i64 0
  %13 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %12, i32 258, i32 15, i32 15, i1 false)
  %14 = insertelement <2 x i32> undef, i32 %13, i64 0
  %15 = extractelement <2 x i32> %11, i64 1
  %16 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1048576, i32 %15, i32 258, i32 15, i32 15, i1 false)
  %17 = insertelement <2 x i32> %14, i32 %16, i64 1
  %18 = bitcast <2 x i32> %17 to double
  %19 = tail call double @llvm.maxnum.f64(double %10, double %18)
  %20 = bitcast double %19 to <2 x i32>
  %21 = extractelement <2 x i32> %20, i64 0
  %22 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %21, i32 260, i32 15, i32 15, i1 false)
  %23 = insertelement <2 x i32> undef, i32 %22, i64 0
  %24 = extractelement <2 x i32> %20, i64 1
  %25 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1048576, i32 %24, i32 260, i32 15, i32 15, i1 false)
  %26 = insertelement <2 x i32> %23, i32 %25, i64 1
  %27 = bitcast <2 x i32> %26 to double
  %28 = tail call double @llvm.maxnum.f64(double %19, double %27)
  %29 = bitcast double %28 to <2 x i32>
  %30 = extractelement <2 x i32> %29, i64 0
  %31 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %30, i32 264, i32 15, i32 15, i1 false)
  %32 = insertelement <2 x i32> undef, i32 %31, i64 0
  %33 = extractelement <2 x i32> %29, i64 1
  %34 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1048576, i32 %33, i32 264, i32 15, i32 15, i1 false)
  %35 = insertelement <2 x i32> %32, i32 %34, i64 1
  %36 = bitcast <2 x i32> %35 to double
  %37 = tail call double @llvm.maxnum.f64(double %28, double %36)
  %38 = bitcast double %37 to <2 x i32>
  %39 = extractelement <2 x i32> %38, i64 0
  %40 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %39, i32 304, i32 15, i32 15, i1 false)
  %41 = extractelement <2 x i32> %38, i64 1
  %42 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1048576, i32 %41, i32 304, i32 15, i32 15, i1 false)
  %43 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %40, i32 320, i32 15, i32 15, i1 false)
  %44 = insertelement <2 x i32> undef, i32 %43, i64 0
  %45 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1048576, i32 %42, i32 320, i32 15, i32 15, i1 false)
  %46 = insertelement <2 x i32> %44, i32 %45, i64 1
  %47 = bitcast <2 x i32> %46 to double
  %48 = tail call double @llvm.maxnum.f64(double %37, double %47)
  %49 = bitcast double %48 to <2 x i32>
  %50 = extractelement <2 x i32> %49, i64 0
  %51 = tail call i32 @llvm.amdgcn.readlane(i32 %50, i32 32)
  %52 = insertelement <2 x i32> undef, i32 %51, i64 0
  %53 = extractelement <2 x i32> %49, i64 1
  %54 = tail call i32 @llvm.amdgcn.readlane(i32 %53, i32 32)
  %55 = insertelement <2 x i32> %52, i32 %54, i64 1
  %56 = bitcast <2 x i32> %55 to double
  %57 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %58 = and i32 %57, 1
  %59 = icmp eq i32 %58, 0
  %60 = select i1 %59, double 0xFFF0000000000000, double %56
  %61 = tail call i32 @llvm.amdgcn.readlane(i32 %50, i32 0)
  %62 = insertelement <2 x i32> undef, i32 %61, i64 0
  %63 = tail call i32 @llvm.amdgcn.readlane(i32 %53, i32 0)
  %64 = insertelement <2 x i32> %62, i32 %63, i64 1
  %65 = bitcast <2 x i32> %64 to double
  %66 = tail call double @llvm.maxnum.f64(double %65, double %60)
  ret double %66
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc double @178(double noundef %0) unnamed_addr #53 {
  %2 = bitcast double %0 to <2 x i32>
  %3 = extractelement <2 x i32> %2, i64 0
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %3, i32 257, i32 15, i32 15, i1 false)
  %5 = insertelement <2 x i32> undef, i32 %4, i64 0
  %6 = extractelement <2 x i32> %2, i64 1
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1048576, i32 %6, i32 257, i32 15, i32 15, i1 false)
  %8 = insertelement <2 x i32> %5, i32 %7, i64 1
  %9 = bitcast <2 x i32> %8 to double
  %10 = tail call double @llvm.maxnum.f64(double %0, double %9)
  %11 = bitcast double %10 to <2 x i32>
  %12 = extractelement <2 x i32> %11, i64 0
  %13 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %12, i32 258, i32 15, i32 15, i1 false)
  %14 = insertelement <2 x i32> undef, i32 %13, i64 0
  %15 = extractelement <2 x i32> %11, i64 1
  %16 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1048576, i32 %15, i32 258, i32 15, i32 15, i1 false)
  %17 = insertelement <2 x i32> %14, i32 %16, i64 1
  %18 = bitcast <2 x i32> %17 to double
  %19 = tail call double @llvm.maxnum.f64(double %10, double %18)
  %20 = bitcast double %19 to <2 x i32>
  %21 = extractelement <2 x i32> %20, i64 0
  %22 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %21, i32 260, i32 15, i32 15, i1 false)
  %23 = insertelement <2 x i32> undef, i32 %22, i64 0
  %24 = extractelement <2 x i32> %20, i64 1
  %25 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1048576, i32 %24, i32 260, i32 15, i32 15, i1 false)
  %26 = insertelement <2 x i32> %23, i32 %25, i64 1
  %27 = bitcast <2 x i32> %26 to double
  %28 = tail call double @llvm.maxnum.f64(double %19, double %27)
  %29 = bitcast double %28 to <2 x i32>
  %30 = extractelement <2 x i32> %29, i64 0
  %31 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %30, i32 264, i32 15, i32 15, i1 false)
  %32 = insertelement <2 x i32> undef, i32 %31, i64 0
  %33 = extractelement <2 x i32> %29, i64 1
  %34 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1048576, i32 %33, i32 264, i32 15, i32 15, i1 false)
  %35 = insertelement <2 x i32> %32, i32 %34, i64 1
  %36 = bitcast <2 x i32> %35 to double
  %37 = tail call double @llvm.maxnum.f64(double %28, double %36)
  %38 = bitcast double %37 to <2 x i32>
  %39 = extractelement <2 x i32> %38, i64 0
  %40 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %39, i32 336, i32 15, i32 15, i1 false)
  %41 = insertelement <2 x i32> undef, i32 %40, i64 0
  %42 = extractelement <2 x i32> %38, i64 1
  %43 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1048576, i32 %42, i32 336, i32 15, i32 15, i1 false)
  %44 = insertelement <2 x i32> %41, i32 %43, i64 1
  %45 = bitcast <2 x i32> %44 to double
  %46 = tail call i32 @llvm.amdgcn.permlanex16(i32 0, i32 %40, i32 0, i32 0, i1 false, i1 false)
  %47 = insertelement <2 x i32> undef, i32 %46, i64 0
  %48 = tail call i32 @llvm.amdgcn.permlanex16(i32 -1048576, i32 %43, i32 0, i32 0, i1 false, i1 false)
  %49 = insertelement <2 x i32> %47, i32 %48, i64 1
  %50 = bitcast <2 x i32> %49 to double
  %51 = tail call double @llvm.maxnum.f64(double %45, double %50)
  %52 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %53 = icmp eq i8 %52, 0
  br i1 %53, label %73, label %54

54:                                               ; preds = %1
  %55 = bitcast double %51 to <2 x i32>
  %56 = extractelement <2 x i32> %55, i64 0
  %57 = tail call i32 @llvm.amdgcn.readlane(i32 %56, i32 32)
  %58 = insertelement <2 x i32> undef, i32 %57, i64 0
  %59 = extractelement <2 x i32> %55, i64 1
  %60 = tail call i32 @llvm.amdgcn.readlane(i32 %59, i32 32)
  %61 = insertelement <2 x i32> %58, i32 %60, i64 1
  %62 = bitcast <2 x i32> %61 to double
  %63 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %64 = and i32 %63, 1
  %65 = icmp eq i32 %64, 0
  %66 = select i1 %65, double 0xFFF0000000000000, double %62
  %67 = tail call i32 @llvm.amdgcn.readlane(i32 %56, i32 0)
  %68 = insertelement <2 x i32> undef, i32 %67, i64 0
  %69 = tail call i32 @llvm.amdgcn.readlane(i32 %59, i32 0)
  %70 = insertelement <2 x i32> %68, i32 %69, i64 1
  %71 = bitcast <2 x i32> %70 to double
  %72 = tail call double @llvm.maxnum.f64(double %71, double %66)
  br label %73

73:                                               ; preds = %54, %1
  %74 = phi double [ %72, %54 ], [ %51, %1 ]
  ret double %74
}

; Function Attrs: convergent norecurse nounwind
define linkonce_odr protected double @__ockl_wfscan_max_f64(double noundef %0, i1 noundef zeroext %1) local_unnamed_addr #12 {
  %3 = tail call i32 @__ockl_lane_u32() #58
  %4 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %5 = icmp slt i32 %4, 8000
  br i1 %5, label %6, label %78

6:                                                ; preds = %2
  %7 = bitcast double %0 to <2 x i32>
  %8 = extractelement <2 x i32> %7, i64 0
  %9 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %8, i32 30)
  %10 = insertelement <2 x i32> undef, i32 %9, i64 0
  %11 = extractelement <2 x i32> %7, i64 1
  %12 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %11, i32 30)
  %13 = insertelement <2 x i32> %10, i32 %12, i64 1
  %14 = bitcast <2 x i32> %13 to double
  %15 = and i32 %3, 1
  %16 = icmp eq i32 %15, 0
  %17 = select i1 %16, double 0xFFF0000000000000, double %14
  %18 = tail call double @llvm.maxnum.f64(double %0, double %17)
  %19 = bitcast double %18 to <2 x i32>
  %20 = extractelement <2 x i32> %19, i64 0
  %21 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %20, i32 60)
  %22 = insertelement <2 x i32> undef, i32 %21, i64 0
  %23 = extractelement <2 x i32> %19, i64 1
  %24 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %23, i32 60)
  %25 = insertelement <2 x i32> %22, i32 %24, i64 1
  %26 = bitcast <2 x i32> %25 to double
  %27 = and i32 %3, 2
  %28 = icmp eq i32 %27, 0
  %29 = select i1 %28, double 0xFFF0000000000000, double %26
  %30 = tail call double @llvm.maxnum.f64(double %18, double %29)
  %31 = bitcast double %30 to <2 x i32>
  %32 = extractelement <2 x i32> %31, i64 0
  %33 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %32, i32 120)
  %34 = insertelement <2 x i32> undef, i32 %33, i64 0
  %35 = extractelement <2 x i32> %31, i64 1
  %36 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %35, i32 120)
  %37 = insertelement <2 x i32> %34, i32 %36, i64 1
  %38 = bitcast <2 x i32> %37 to double
  %39 = and i32 %3, 4
  %40 = icmp eq i32 %39, 0
  %41 = select i1 %40, double 0xFFF0000000000000, double %38
  %42 = tail call double @llvm.maxnum.f64(double %30, double %41)
  %43 = bitcast double %42 to <2 x i32>
  %44 = extractelement <2 x i32> %43, i64 0
  %45 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %44, i32 240)
  %46 = insertelement <2 x i32> undef, i32 %45, i64 0
  %47 = extractelement <2 x i32> %43, i64 1
  %48 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %47, i32 240)
  %49 = insertelement <2 x i32> %46, i32 %48, i64 1
  %50 = bitcast <2 x i32> %49 to double
  %51 = and i32 %3, 8
  %52 = icmp eq i32 %51, 0
  %53 = select i1 %52, double 0xFFF0000000000000, double %50
  %54 = tail call double @llvm.maxnum.f64(double %42, double %53)
  %55 = bitcast double %54 to <2 x i32>
  %56 = extractelement <2 x i32> %55, i64 0
  %57 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %56, i32 480)
  %58 = insertelement <2 x i32> undef, i32 %57, i64 0
  %59 = extractelement <2 x i32> %55, i64 1
  %60 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %59, i32 480)
  %61 = insertelement <2 x i32> %58, i32 %60, i64 1
  %62 = bitcast <2 x i32> %61 to double
  %63 = and i32 %3, 16
  %64 = icmp eq i32 %63, 0
  %65 = select i1 %64, double 0xFFF0000000000000, double %62
  %66 = tail call double @llvm.maxnum.f64(double %54, double %65)
  %67 = bitcast double %66 to <2 x i32>
  %68 = extractelement <2 x i32> %67, i64 0
  %69 = tail call i32 @llvm.amdgcn.readlane(i32 %68, i32 31)
  %70 = insertelement <2 x i32> undef, i32 %69, i64 0
  %71 = extractelement <2 x i32> %67, i64 1
  %72 = tail call i32 @llvm.amdgcn.readlane(i32 %71, i32 31)
  %73 = insertelement <2 x i32> %70, i32 %72, i64 1
  %74 = bitcast <2 x i32> %73 to double
  %75 = icmp ugt i32 %3, 31
  %76 = select i1 %75, double %74, double 0xFFF0000000000000
  %77 = tail call double @llvm.maxnum.f64(double %66, double %76)
  br label %84

78:                                               ; preds = %2
  %79 = icmp ult i32 %4, 10000
  br i1 %79, label %80, label %82

80:                                               ; preds = %78
  %81 = tail call fastcc double @179(double noundef %0) #57
  br label %84

82:                                               ; preds = %78
  %83 = tail call fastcc double @180(double noundef %0, i32 noundef %3) #57
  br label %84

84:                                               ; preds = %82, %80, %6
  %85 = phi double [ %77, %6 ], [ %81, %80 ], [ %83, %82 ]
  br i1 %1, label %131, label %86

86:                                               ; preds = %84
  br i1 %5, label %87, label %125

87:                                               ; preds = %86
  %88 = bitcast double %85 to <2 x i32>
  %89 = extractelement <2 x i32> %88, i64 0
  %90 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %89, i32 32912)
  %91 = insertelement <2 x i32> undef, i32 %90, i64 0
  %92 = extractelement <2 x i32> %88, i64 1
  %93 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %92, i32 32912)
  %94 = insertelement <2 x i32> %91, i32 %93, i64 1
  %95 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %89, i32 120)
  %96 = insertelement <2 x i32> undef, i32 %95, i64 0
  %97 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %92, i32 120)
  %98 = insertelement <2 x i32> %96, i32 %97, i64 1
  %99 = and i32 %3, 7
  %100 = icmp eq i32 %99, 4
  %101 = select i1 %100, <2 x i32> %98, <2 x i32> %94
  %102 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %89, i32 240)
  %103 = insertelement <2 x i32> undef, i32 %102, i64 0
  %104 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %92, i32 240)
  %105 = insertelement <2 x i32> %103, i32 %104, i64 1
  %106 = and i32 %3, 15
  %107 = icmp eq i32 %106, 8
  %108 = select i1 %107, <2 x i32> %105, <2 x i32> %101
  %109 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %89, i32 480)
  %110 = insertelement <2 x i32> undef, i32 %109, i64 0
  %111 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %92, i32 480)
  %112 = insertelement <2 x i32> %110, i32 %111, i64 1
  %113 = and i32 %3, 31
  %114 = icmp eq i32 %113, 16
  %115 = select i1 %114, <2 x i32> %112, <2 x i32> %108
  %116 = tail call i32 @llvm.amdgcn.readlane(i32 %89, i32 31)
  %117 = insertelement <2 x i32> undef, i32 %116, i64 0
  %118 = tail call i32 @llvm.amdgcn.readlane(i32 %92, i32 31)
  %119 = insertelement <2 x i32> %117, i32 %118, i64 1
  %120 = icmp eq i32 %3, 32
  %121 = select i1 %120, <2 x i32> %119, <2 x i32> %115
  %122 = bitcast <2 x i32> %121 to double
  %123 = icmp eq i32 %3, 0
  %124 = select i1 %123, double 0xFFF0000000000000, double %122
  br label %131

125:                                              ; preds = %86
  %126 = icmp ult i32 %4, 10000
  br i1 %126, label %127, label %129

127:                                              ; preds = %125
  %128 = tail call fastcc double @181(double noundef %85) #57
  br label %131

129:                                              ; preds = %125
  %130 = tail call fastcc double @182(double noundef %85, i32 noundef %3) #57
  br label %131

131:                                              ; preds = %129, %127, %87, %84
  %132 = phi double [ %85, %84 ], [ %124, %87 ], [ %128, %127 ], [ %130, %129 ]
  ret double %132
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc double @179(double noundef %0) unnamed_addr #54 {
  %2 = bitcast double %0 to <2 x i32>
  %3 = extractelement <2 x i32> %2, i64 0
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %3, i32 273, i32 15, i32 15, i1 false)
  %5 = insertelement <2 x i32> undef, i32 %4, i64 0
  %6 = extractelement <2 x i32> %2, i64 1
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1048576, i32 %6, i32 273, i32 15, i32 15, i1 false)
  %8 = insertelement <2 x i32> %5, i32 %7, i64 1
  %9 = bitcast <2 x i32> %8 to double
  %10 = tail call double @llvm.maxnum.f64(double %0, double %9)
  %11 = bitcast double %10 to <2 x i32>
  %12 = extractelement <2 x i32> %11, i64 0
  %13 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %12, i32 274, i32 15, i32 15, i1 false)
  %14 = insertelement <2 x i32> undef, i32 %13, i64 0
  %15 = extractelement <2 x i32> %11, i64 1
  %16 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1048576, i32 %15, i32 274, i32 15, i32 15, i1 false)
  %17 = insertelement <2 x i32> %14, i32 %16, i64 1
  %18 = bitcast <2 x i32> %17 to double
  %19 = tail call double @llvm.maxnum.f64(double %10, double %18)
  %20 = bitcast double %19 to <2 x i32>
  %21 = extractelement <2 x i32> %20, i64 0
  %22 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %21, i32 276, i32 15, i32 15, i1 false)
  %23 = insertelement <2 x i32> undef, i32 %22, i64 0
  %24 = extractelement <2 x i32> %20, i64 1
  %25 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1048576, i32 %24, i32 276, i32 15, i32 15, i1 false)
  %26 = insertelement <2 x i32> %23, i32 %25, i64 1
  %27 = bitcast <2 x i32> %26 to double
  %28 = tail call double @llvm.maxnum.f64(double %19, double %27)
  %29 = bitcast double %28 to <2 x i32>
  %30 = extractelement <2 x i32> %29, i64 0
  %31 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %30, i32 280, i32 15, i32 15, i1 false)
  %32 = insertelement <2 x i32> undef, i32 %31, i64 0
  %33 = extractelement <2 x i32> %29, i64 1
  %34 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1048576, i32 %33, i32 280, i32 15, i32 15, i1 false)
  %35 = insertelement <2 x i32> %32, i32 %34, i64 1
  %36 = bitcast <2 x i32> %35 to double
  %37 = tail call double @llvm.maxnum.f64(double %28, double %36)
  %38 = bitcast double %37 to <2 x i32>
  %39 = extractelement <2 x i32> %38, i64 0
  %40 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %39, i32 322, i32 10, i32 15, i1 false)
  %41 = insertelement <2 x i32> undef, i32 %40, i64 0
  %42 = extractelement <2 x i32> %38, i64 1
  %43 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1048576, i32 %42, i32 322, i32 10, i32 15, i1 false)
  %44 = insertelement <2 x i32> %41, i32 %43, i64 1
  %45 = bitcast <2 x i32> %44 to double
  %46 = tail call double @llvm.maxnum.f64(double %37, double %45)
  %47 = bitcast double %46 to <2 x i32>
  %48 = extractelement <2 x i32> %47, i64 0
  %49 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %48, i32 323, i32 12, i32 15, i1 false)
  %50 = insertelement <2 x i32> undef, i32 %49, i64 0
  %51 = extractelement <2 x i32> %47, i64 1
  %52 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1048576, i32 %51, i32 323, i32 12, i32 15, i1 false)
  %53 = insertelement <2 x i32> %50, i32 %52, i64 1
  %54 = bitcast <2 x i32> %53 to double
  %55 = tail call double @llvm.maxnum.f64(double %46, double %54)
  ret double %55
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc double @180(double noundef %0, i32 noundef %1) unnamed_addr #55 {
  %3 = bitcast double %0 to <2 x i32>
  %4 = extractelement <2 x i32> %3, i64 0
  %5 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %4, i32 273, i32 15, i32 15, i1 false)
  %6 = insertelement <2 x i32> undef, i32 %5, i64 0
  %7 = extractelement <2 x i32> %3, i64 1
  %8 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1048576, i32 %7, i32 273, i32 15, i32 15, i1 false)
  %9 = insertelement <2 x i32> %6, i32 %8, i64 1
  %10 = bitcast <2 x i32> %9 to double
  %11 = tail call double @llvm.maxnum.f64(double %0, double %10)
  %12 = bitcast double %11 to <2 x i32>
  %13 = extractelement <2 x i32> %12, i64 0
  %14 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %13, i32 274, i32 15, i32 15, i1 false)
  %15 = insertelement <2 x i32> undef, i32 %14, i64 0
  %16 = extractelement <2 x i32> %12, i64 1
  %17 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1048576, i32 %16, i32 274, i32 15, i32 15, i1 false)
  %18 = insertelement <2 x i32> %15, i32 %17, i64 1
  %19 = bitcast <2 x i32> %18 to double
  %20 = tail call double @llvm.maxnum.f64(double %11, double %19)
  %21 = bitcast double %20 to <2 x i32>
  %22 = extractelement <2 x i32> %21, i64 0
  %23 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %22, i32 276, i32 15, i32 15, i1 false)
  %24 = insertelement <2 x i32> undef, i32 %23, i64 0
  %25 = extractelement <2 x i32> %21, i64 1
  %26 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1048576, i32 %25, i32 276, i32 15, i32 15, i1 false)
  %27 = insertelement <2 x i32> %24, i32 %26, i64 1
  %28 = bitcast <2 x i32> %27 to double
  %29 = tail call double @llvm.maxnum.f64(double %20, double %28)
  %30 = bitcast double %29 to <2 x i32>
  %31 = extractelement <2 x i32> %30, i64 0
  %32 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %31, i32 280, i32 15, i32 15, i1 false)
  %33 = insertelement <2 x i32> undef, i32 %32, i64 0
  %34 = extractelement <2 x i32> %30, i64 1
  %35 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1048576, i32 %34, i32 280, i32 15, i32 15, i1 false)
  %36 = insertelement <2 x i32> %33, i32 %35, i64 1
  %37 = bitcast <2 x i32> %36 to double
  %38 = tail call double @llvm.maxnum.f64(double %29, double %37)
  %39 = bitcast double %38 to <2 x i32>
  %40 = extractelement <2 x i32> %39, i64 0
  %41 = tail call i32 @llvm.amdgcn.permlanex16(i32 0, i32 %40, i32 -1, i32 -1, i1 false, i1 false)
  %42 = insertelement <2 x i32> undef, i32 %41, i64 0
  %43 = extractelement <2 x i32> %39, i64 1
  %44 = tail call i32 @llvm.amdgcn.permlanex16(i32 -1048576, i32 %43, i32 -1, i32 -1, i1 false, i1 false)
  %45 = insertelement <2 x i32> %42, i32 %44, i64 1
  %46 = bitcast <2 x i32> %45 to double
  %47 = and i32 %1, 16
  %48 = icmp eq i32 %47, 0
  %49 = select i1 %48, double 0xFFF0000000000000, double %46
  %50 = tail call double @llvm.maxnum.f64(double %38, double %49)
  %51 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %52 = icmp eq i8 %51, 0
  br i1 %52, label %65, label %53

53:                                               ; preds = %2
  %54 = bitcast double %50 to <2 x i32>
  %55 = extractelement <2 x i32> %54, i64 0
  %56 = tail call i32 @llvm.amdgcn.readlane(i32 %55, i32 31)
  %57 = insertelement <2 x i32> undef, i32 %56, i64 0
  %58 = extractelement <2 x i32> %54, i64 1
  %59 = tail call i32 @llvm.amdgcn.readlane(i32 %58, i32 31)
  %60 = insertelement <2 x i32> %57, i32 %59, i64 1
  %61 = bitcast <2 x i32> %60 to double
  %62 = icmp ugt i32 %1, 31
  %63 = select i1 %62, double %61, double 0xFFF0000000000000
  %64 = tail call double @llvm.maxnum.f64(double %50, double %63)
  br label %65

65:                                               ; preds = %53, %2
  %66 = phi double [ %64, %53 ], [ %50, %2 ]
  ret double %66
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc double @181(double noundef %0) unnamed_addr #54 {
  %2 = bitcast double %0 to <2 x i32>
  %3 = extractelement <2 x i32> %2, i64 0
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %3, i32 312, i32 15, i32 15, i1 false)
  %5 = insertelement <2 x i32> undef, i32 %4, i64 0
  %6 = extractelement <2 x i32> %2, i64 1
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1048576, i32 %6, i32 312, i32 15, i32 15, i1 false)
  %8 = insertelement <2 x i32> %5, i32 %7, i64 1
  %9 = bitcast <2 x i32> %8 to double
  ret double %9
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc double @182(double noundef %0, i32 noundef %1) unnamed_addr #55 {
  %3 = bitcast double %0 to <2 x i32>
  %4 = extractelement <2 x i32> %3, i64 0
  %5 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %4, i32 273, i32 15, i32 15, i1 false)
  %6 = insertelement <2 x i32> undef, i32 %5, i64 0
  %7 = extractelement <2 x i32> %3, i64 1
  %8 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1048576, i32 %7, i32 273, i32 15, i32 15, i1 false)
  %9 = insertelement <2 x i32> %6, i32 %8, i64 1
  %10 = bitcast <2 x i32> %9 to double
  %11 = tail call i32 @llvm.amdgcn.permlanex16(i32 0, i32 %4, i32 -1, i32 -1, i1 false, i1 false)
  %12 = insertelement <2 x i32> undef, i32 %11, i64 0
  %13 = tail call i32 @llvm.amdgcn.permlanex16(i32 -1048576, i32 %7, i32 -1, i32 -1, i1 false, i1 false)
  %14 = insertelement <2 x i32> %12, i32 %13, i64 1
  %15 = bitcast <2 x i32> %14 to double
  %16 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %30, label %18

18:                                               ; preds = %2
  %19 = tail call i32 @llvm.amdgcn.readlane(i32 %4, i32 31)
  %20 = insertelement <2 x i32> undef, i32 %19, i64 0
  %21 = tail call i32 @llvm.amdgcn.readlane(i32 %7, i32 31)
  %22 = insertelement <2 x i32> %20, i32 %21, i64 1
  %23 = bitcast <2 x i32> %22 to double
  %24 = icmp eq i32 %1, 32
  %25 = select i1 %24, double %23, double %15
  %26 = and i32 %1, 31
  %27 = icmp eq i32 %26, 16
  %28 = or i1 %24, %27
  %29 = select i1 %28, double %25, double %10
  br label %33

30:                                               ; preds = %2
  %31 = icmp eq i32 %1, 16
  %32 = select i1 %31, double %15, double %10
  br label %33

33:                                               ; preds = %30, %18
  %34 = phi double [ %29, %18 ], [ %32, %30 ]
  ret double %34
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected half @__ockl_wfred_max_f16(half noundef %0) local_unnamed_addr #0 {
  %2 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %3 = icmp slt i32 %2, 8000
  br i1 %3, label %4, label %121

4:                                                ; preds = %1
  %5 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %10, label %7

7:                                                ; preds = %4
  %8 = tail call i64 @llvm.read_register.i64(metadata !36) #57
  %9 = icmp eq i64 %8, -1
  br label %13

10:                                               ; preds = %4
  %11 = tail call i32 @llvm.read_register.i32(metadata !10) #57
  %12 = icmp eq i32 %11, -1
  br label %13

13:                                               ; preds = %10, %7
  %14 = phi i1 [ %9, %7 ], [ %12, %10 ]
  %15 = bitcast half %0 to i16
  %16 = zext i16 %15 to i32
  %17 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %16, i32 32945)
  br i1 %14, label %18, label %55

18:                                               ; preds = %13
  %19 = trunc i32 %17 to i16
  %20 = bitcast i16 %19 to half
  %21 = tail call half @llvm.maxnum.f16(half %0, half %20)
  %22 = bitcast half %21 to i16
  %23 = zext i16 %22 to i32
  %24 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %23, i32 32846)
  %25 = trunc i32 %24 to i16
  %26 = bitcast i16 %25 to half
  %27 = tail call half @llvm.maxnum.f16(half %21, half %26)
  %28 = bitcast half %27 to i16
  %29 = zext i16 %28 to i32
  %30 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %29, i32 4127)
  %31 = trunc i32 %30 to i16
  %32 = bitcast i16 %31 to half
  %33 = tail call half @llvm.maxnum.f16(half %27, half %32)
  %34 = bitcast half %33 to i16
  %35 = zext i16 %34 to i32
  %36 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %35, i32 8223)
  %37 = trunc i32 %36 to i16
  %38 = bitcast i16 %37 to half
  %39 = tail call half @llvm.maxnum.f16(half %33, half %38)
  %40 = bitcast half %39 to i16
  %41 = zext i16 %40 to i32
  %42 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %41, i32 16415)
  %43 = trunc i32 %42 to i16
  %44 = bitcast i16 %43 to half
  %45 = tail call half @llvm.maxnum.f16(half %39, half %44)
  %46 = bitcast half %45 to i16
  %47 = zext i16 %46 to i32
  %48 = tail call i32 @llvm.amdgcn.readlane(i32 %47, i32 0)
  %49 = trunc i32 %48 to i16
  %50 = bitcast i16 %49 to half
  %51 = tail call i32 @llvm.amdgcn.readlane(i32 %47, i32 32)
  %52 = trunc i32 %51 to i16
  %53 = bitcast i16 %52 to half
  %54 = tail call half @llvm.maxnum.f16(half %50, half %53)
  br label %127

55:                                               ; preds = %13
  %56 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 32945)
  %57 = and i32 %56, %17
  %58 = and i32 %56, 64512
  %59 = xor i32 %58, 64512
  %60 = or i32 %59, %57
  %61 = trunc i32 %60 to i16
  %62 = bitcast i16 %61 to half
  %63 = tail call half @llvm.maxnum.f16(half %0, half %62)
  %64 = bitcast half %63 to i16
  %65 = zext i16 %64 to i32
  %66 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %65, i32 32846)
  %67 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 32846)
  %68 = and i32 %67, %66
  %69 = and i32 %67, 64512
  %70 = xor i32 %69, 64512
  %71 = or i32 %70, %68
  %72 = trunc i32 %71 to i16
  %73 = bitcast i16 %72 to half
  %74 = tail call half @llvm.maxnum.f16(half %63, half %73)
  %75 = bitcast half %74 to i16
  %76 = zext i16 %75 to i32
  %77 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %76, i32 4127)
  %78 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 4127)
  %79 = and i32 %78, %77
  %80 = and i32 %78, 64512
  %81 = xor i32 %80, 64512
  %82 = or i32 %81, %79
  %83 = trunc i32 %82 to i16
  %84 = bitcast i16 %83 to half
  %85 = tail call half @llvm.maxnum.f16(half %74, half %84)
  %86 = bitcast half %85 to i16
  %87 = zext i16 %86 to i32
  %88 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %87, i32 8223)
  %89 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 8223)
  %90 = and i32 %89, %88
  %91 = and i32 %89, 64512
  %92 = xor i32 %91, 64512
  %93 = or i32 %92, %90
  %94 = trunc i32 %93 to i16
  %95 = bitcast i16 %94 to half
  %96 = tail call half @llvm.maxnum.f16(half %85, half %95)
  %97 = bitcast half %96 to i16
  %98 = zext i16 %97 to i32
  %99 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %98, i32 16415)
  %100 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 16415)
  %101 = and i32 %100, %99
  %102 = and i32 %100, 64512
  %103 = xor i32 %102, 64512
  %104 = or i32 %103, %101
  %105 = trunc i32 %104 to i16
  %106 = bitcast i16 %105 to half
  %107 = tail call half @llvm.maxnum.f16(half %96, half %106)
  %108 = bitcast half %107 to i16
  %109 = zext i16 %108 to i32
  %110 = tail call i32 @llvm.amdgcn.readlane(i32 %109, i32 32)
  %111 = trunc i32 %110 to i16
  %112 = bitcast i16 %111 to half
  %113 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %114 = and i32 %113, 1
  %115 = icmp eq i32 %114, 0
  %116 = select i1 %115, half 0xHFC00, half %112
  %117 = tail call i32 @llvm.amdgcn.readlane(i32 %109, i32 0)
  %118 = trunc i32 %117 to i16
  %119 = bitcast i16 %118 to half
  %120 = tail call half @llvm.maxnum.f16(half %119, half %116)
  br label %127

121:                                              ; preds = %1
  %122 = icmp ult i32 %2, 10000
  br i1 %122, label %123, label %125

123:                                              ; preds = %121
  %124 = tail call fastcc half @183(half noundef %0) #57
  br label %127

125:                                              ; preds = %121
  %126 = tail call fastcc half @184(half noundef %0) #57
  br label %127

127:                                              ; preds = %125, %123, %55, %18
  %128 = phi half [ %54, %18 ], [ %120, %55 ], [ %124, %123 ], [ %126, %125 ]
  ret half %128
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc half @183(half noundef %0) unnamed_addr #52 {
  %2 = bitcast half %0 to i16
  %3 = zext i16 %2 to i32
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 64512, i32 %3, i32 257, i32 15, i32 15, i1 false)
  %5 = trunc i32 %4 to i16
  %6 = bitcast i16 %5 to half
  %7 = tail call half @llvm.maxnum.f16(half %0, half %6)
  %8 = bitcast half %7 to i16
  %9 = zext i16 %8 to i32
  %10 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 64512, i32 %9, i32 258, i32 15, i32 15, i1 false)
  %11 = trunc i32 %10 to i16
  %12 = bitcast i16 %11 to half
  %13 = tail call half @llvm.maxnum.f16(half %7, half %12)
  %14 = bitcast half %13 to i16
  %15 = zext i16 %14 to i32
  %16 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 64512, i32 %15, i32 260, i32 15, i32 15, i1 false)
  %17 = trunc i32 %16 to i16
  %18 = bitcast i16 %17 to half
  %19 = tail call half @llvm.maxnum.f16(half %13, half %18)
  %20 = bitcast half %19 to i16
  %21 = zext i16 %20 to i32
  %22 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 64512, i32 %21, i32 264, i32 15, i32 15, i1 false)
  %23 = trunc i32 %22 to i16
  %24 = bitcast i16 %23 to half
  %25 = tail call half @llvm.maxnum.f16(half %19, half %24)
  %26 = bitcast half %25 to i16
  %27 = zext i16 %26 to i32
  %28 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 64512, i32 %27, i32 304, i32 15, i32 15, i1 false)
  %29 = and i32 %28, 65535
  %30 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 64512, i32 %29, i32 320, i32 15, i32 15, i1 false)
  %31 = trunc i32 %30 to i16
  %32 = bitcast i16 %31 to half
  %33 = tail call half @llvm.maxnum.f16(half %25, half %32)
  %34 = bitcast half %33 to i16
  %35 = zext i16 %34 to i32
  %36 = tail call i32 @llvm.amdgcn.readlane(i32 %35, i32 32)
  %37 = trunc i32 %36 to i16
  %38 = bitcast i16 %37 to half
  %39 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %40 = and i32 %39, 1
  %41 = icmp eq i32 %40, 0
  %42 = select i1 %41, half 0xHFC00, half %38
  %43 = tail call i32 @llvm.amdgcn.readlane(i32 %35, i32 0)
  %44 = trunc i32 %43 to i16
  %45 = bitcast i16 %44 to half
  %46 = tail call half @llvm.maxnum.f16(half %45, half %42)
  ret half %46
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc half @184(half noundef %0) unnamed_addr #53 {
  %2 = bitcast half %0 to i16
  %3 = zext i16 %2 to i32
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 64512, i32 %3, i32 257, i32 15, i32 15, i1 false)
  %5 = trunc i32 %4 to i16
  %6 = bitcast i16 %5 to half
  %7 = tail call half @llvm.maxnum.f16(half %0, half %6)
  %8 = bitcast half %7 to i16
  %9 = zext i16 %8 to i32
  %10 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 64512, i32 %9, i32 258, i32 15, i32 15, i1 false)
  %11 = trunc i32 %10 to i16
  %12 = bitcast i16 %11 to half
  %13 = tail call half @llvm.maxnum.f16(half %7, half %12)
  %14 = bitcast half %13 to i16
  %15 = zext i16 %14 to i32
  %16 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 64512, i32 %15, i32 260, i32 15, i32 15, i1 false)
  %17 = trunc i32 %16 to i16
  %18 = bitcast i16 %17 to half
  %19 = tail call half @llvm.maxnum.f16(half %13, half %18)
  %20 = bitcast half %19 to i16
  %21 = zext i16 %20 to i32
  %22 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 64512, i32 %21, i32 264, i32 15, i32 15, i1 false)
  %23 = trunc i32 %22 to i16
  %24 = bitcast i16 %23 to half
  %25 = tail call half @llvm.maxnum.f16(half %19, half %24)
  %26 = bitcast half %25 to i16
  %27 = zext i16 %26 to i32
  %28 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 64512, i32 %27, i32 336, i32 15, i32 15, i1 false)
  %29 = trunc i32 %28 to i16
  %30 = bitcast i16 %29 to half
  %31 = and i32 %28, 65535
  %32 = tail call i32 @llvm.amdgcn.permlanex16(i32 64512, i32 %31, i32 0, i32 0, i1 false, i1 false)
  %33 = trunc i32 %32 to i16
  %34 = bitcast i16 %33 to half
  %35 = tail call half @llvm.maxnum.f16(half %30, half %34)
  %36 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %37 = icmp eq i8 %36, 0
  br i1 %37, label %52, label %38

38:                                               ; preds = %1
  %39 = bitcast half %35 to i16
  %40 = zext i16 %39 to i32
  %41 = tail call i32 @llvm.amdgcn.readlane(i32 %40, i32 32)
  %42 = trunc i32 %41 to i16
  %43 = bitcast i16 %42 to half
  %44 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %45 = and i32 %44, 1
  %46 = icmp eq i32 %45, 0
  %47 = select i1 %46, half 0xHFC00, half %43
  %48 = tail call i32 @llvm.amdgcn.readlane(i32 %40, i32 0)
  %49 = trunc i32 %48 to i16
  %50 = bitcast i16 %49 to half
  %51 = tail call half @llvm.maxnum.f16(half %50, half %47)
  br label %52

52:                                               ; preds = %38, %1
  %53 = phi half [ %51, %38 ], [ %35, %1 ]
  ret half %53
}

; Function Attrs: convergent norecurse nounwind
define linkonce_odr protected half @__ockl_wfscan_max_f16(half noundef %0, i1 noundef zeroext %1) local_unnamed_addr #12 {
  %3 = tail call i32 @__ockl_lane_u32() #58
  %4 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %5 = icmp slt i32 %4, 8000
  br i1 %5, label %6, label %60

6:                                                ; preds = %2
  %7 = bitcast half %0 to i16
  %8 = zext i16 %7 to i32
  %9 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %8, i32 30)
  %10 = trunc i32 %9 to i16
  %11 = bitcast i16 %10 to half
  %12 = and i32 %3, 1
  %13 = icmp eq i32 %12, 0
  %14 = select i1 %13, half 0xHFC00, half %11
  %15 = tail call half @llvm.maxnum.f16(half %0, half %14)
  %16 = bitcast half %15 to i16
  %17 = zext i16 %16 to i32
  %18 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %17, i32 60)
  %19 = trunc i32 %18 to i16
  %20 = bitcast i16 %19 to half
  %21 = and i32 %3, 2
  %22 = icmp eq i32 %21, 0
  %23 = select i1 %22, half 0xHFC00, half %20
  %24 = tail call half @llvm.maxnum.f16(half %15, half %23)
  %25 = bitcast half %24 to i16
  %26 = zext i16 %25 to i32
  %27 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %26, i32 120)
  %28 = trunc i32 %27 to i16
  %29 = bitcast i16 %28 to half
  %30 = and i32 %3, 4
  %31 = icmp eq i32 %30, 0
  %32 = select i1 %31, half 0xHFC00, half %29
  %33 = tail call half @llvm.maxnum.f16(half %24, half %32)
  %34 = bitcast half %33 to i16
  %35 = zext i16 %34 to i32
  %36 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %35, i32 240)
  %37 = trunc i32 %36 to i16
  %38 = bitcast i16 %37 to half
  %39 = and i32 %3, 8
  %40 = icmp eq i32 %39, 0
  %41 = select i1 %40, half 0xHFC00, half %38
  %42 = tail call half @llvm.maxnum.f16(half %33, half %41)
  %43 = bitcast half %42 to i16
  %44 = zext i16 %43 to i32
  %45 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %44, i32 480)
  %46 = trunc i32 %45 to i16
  %47 = bitcast i16 %46 to half
  %48 = and i32 %3, 16
  %49 = icmp eq i32 %48, 0
  %50 = select i1 %49, half 0xHFC00, half %47
  %51 = tail call half @llvm.maxnum.f16(half %42, half %50)
  %52 = bitcast half %51 to i16
  %53 = zext i16 %52 to i32
  %54 = tail call i32 @llvm.amdgcn.readlane(i32 %53, i32 31)
  %55 = trunc i32 %54 to i16
  %56 = bitcast i16 %55 to half
  %57 = icmp ugt i32 %3, 31
  %58 = select i1 %57, half %56, half 0xHFC00
  %59 = tail call half @llvm.maxnum.f16(half %51, half %58)
  br label %66

60:                                               ; preds = %2
  %61 = icmp ult i32 %4, 10000
  br i1 %61, label %62, label %64

62:                                               ; preds = %60
  %63 = tail call fastcc half @185(half noundef %0) #57
  br label %66

64:                                               ; preds = %60
  %65 = tail call fastcc half @186(half noundef %0, i32 noundef %3) #57
  br label %66

66:                                               ; preds = %64, %62, %6
  %67 = phi half [ %59, %6 ], [ %63, %62 ], [ %65, %64 ]
  br i1 %1, label %98, label %68

68:                                               ; preds = %66
  br i1 %5, label %69, label %92

69:                                               ; preds = %68
  %70 = bitcast half %67 to i16
  %71 = zext i16 %70 to i32
  %72 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %71, i32 32912)
  %73 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %71, i32 120)
  %74 = and i32 %3, 7
  %75 = icmp eq i32 %74, 4
  %76 = select i1 %75, i32 %73, i32 %72
  %77 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %71, i32 240)
  %78 = and i32 %3, 15
  %79 = icmp eq i32 %78, 8
  %80 = select i1 %79, i32 %77, i32 %76
  %81 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %71, i32 480)
  %82 = and i32 %3, 31
  %83 = icmp eq i32 %82, 16
  %84 = select i1 %83, i32 %81, i32 %80
  %85 = tail call i32 @llvm.amdgcn.readlane(i32 %71, i32 31)
  %86 = icmp eq i32 %3, 32
  %87 = select i1 %86, i32 %85, i32 %84
  %88 = trunc i32 %87 to i16
  %89 = bitcast i16 %88 to half
  %90 = icmp eq i32 %3, 0
  %91 = select i1 %90, half 0xHFC00, half %89
  br label %98

92:                                               ; preds = %68
  %93 = icmp ult i32 %4, 10000
  br i1 %93, label %94, label %96

94:                                               ; preds = %92
  %95 = tail call fastcc half @187(half noundef %67) #57
  br label %98

96:                                               ; preds = %92
  %97 = tail call fastcc half @188(half noundef %67, i32 noundef %3) #57
  br label %98

98:                                               ; preds = %96, %94, %69, %66
  %99 = phi half [ %67, %66 ], [ %91, %69 ], [ %95, %94 ], [ %97, %96 ]
  ret half %99
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc half @185(half noundef %0) unnamed_addr #54 {
  %2 = bitcast half %0 to i16
  %3 = zext i16 %2 to i32
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 64512, i32 %3, i32 273, i32 15, i32 15, i1 false)
  %5 = trunc i32 %4 to i16
  %6 = bitcast i16 %5 to half
  %7 = tail call half @llvm.maxnum.f16(half %0, half %6)
  %8 = bitcast half %7 to i16
  %9 = zext i16 %8 to i32
  %10 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 64512, i32 %9, i32 274, i32 15, i32 15, i1 false)
  %11 = trunc i32 %10 to i16
  %12 = bitcast i16 %11 to half
  %13 = tail call half @llvm.maxnum.f16(half %7, half %12)
  %14 = bitcast half %13 to i16
  %15 = zext i16 %14 to i32
  %16 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 64512, i32 %15, i32 276, i32 15, i32 15, i1 false)
  %17 = trunc i32 %16 to i16
  %18 = bitcast i16 %17 to half
  %19 = tail call half @llvm.maxnum.f16(half %13, half %18)
  %20 = bitcast half %19 to i16
  %21 = zext i16 %20 to i32
  %22 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 64512, i32 %21, i32 280, i32 15, i32 15, i1 false)
  %23 = trunc i32 %22 to i16
  %24 = bitcast i16 %23 to half
  %25 = tail call half @llvm.maxnum.f16(half %19, half %24)
  %26 = bitcast half %25 to i16
  %27 = zext i16 %26 to i32
  %28 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 64512, i32 %27, i32 322, i32 10, i32 15, i1 false)
  %29 = trunc i32 %28 to i16
  %30 = bitcast i16 %29 to half
  %31 = tail call half @llvm.maxnum.f16(half %25, half %30)
  %32 = bitcast half %31 to i16
  %33 = zext i16 %32 to i32
  %34 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 64512, i32 %33, i32 323, i32 12, i32 15, i1 false)
  %35 = trunc i32 %34 to i16
  %36 = bitcast i16 %35 to half
  %37 = tail call half @llvm.maxnum.f16(half %31, half %36)
  ret half %37
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc half @186(half noundef %0, i32 noundef %1) unnamed_addr #55 {
  %3 = bitcast half %0 to i16
  %4 = zext i16 %3 to i32
  %5 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 64512, i32 %4, i32 273, i32 15, i32 15, i1 false)
  %6 = trunc i32 %5 to i16
  %7 = bitcast i16 %6 to half
  %8 = tail call half @llvm.maxnum.f16(half %0, half %7)
  %9 = bitcast half %8 to i16
  %10 = zext i16 %9 to i32
  %11 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 64512, i32 %10, i32 274, i32 15, i32 15, i1 false)
  %12 = trunc i32 %11 to i16
  %13 = bitcast i16 %12 to half
  %14 = tail call half @llvm.maxnum.f16(half %8, half %13)
  %15 = bitcast half %14 to i16
  %16 = zext i16 %15 to i32
  %17 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 64512, i32 %16, i32 276, i32 15, i32 15, i1 false)
  %18 = trunc i32 %17 to i16
  %19 = bitcast i16 %18 to half
  %20 = tail call half @llvm.maxnum.f16(half %14, half %19)
  %21 = bitcast half %20 to i16
  %22 = zext i16 %21 to i32
  %23 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 64512, i32 %22, i32 280, i32 15, i32 15, i1 false)
  %24 = trunc i32 %23 to i16
  %25 = bitcast i16 %24 to half
  %26 = tail call half @llvm.maxnum.f16(half %20, half %25)
  %27 = bitcast half %26 to i16
  %28 = zext i16 %27 to i32
  %29 = tail call i32 @llvm.amdgcn.permlanex16(i32 64512, i32 %28, i32 -1, i32 -1, i1 false, i1 false)
  %30 = trunc i32 %29 to i16
  %31 = bitcast i16 %30 to half
  %32 = and i32 %1, 16
  %33 = icmp eq i32 %32, 0
  %34 = select i1 %33, half 0xHFC00, half %31
  %35 = tail call half @llvm.maxnum.f16(half %26, half %34)
  %36 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %37 = icmp eq i8 %36, 0
  br i1 %37, label %47, label %38

38:                                               ; preds = %2
  %39 = bitcast half %35 to i16
  %40 = zext i16 %39 to i32
  %41 = tail call i32 @llvm.amdgcn.readlane(i32 %40, i32 31)
  %42 = trunc i32 %41 to i16
  %43 = bitcast i16 %42 to half
  %44 = icmp ugt i32 %1, 31
  %45 = select i1 %44, half %43, half 0xHFC00
  %46 = tail call half @llvm.maxnum.f16(half %35, half %45)
  br label %47

47:                                               ; preds = %38, %2
  %48 = phi half [ %46, %38 ], [ %35, %2 ]
  ret half %48
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc half @187(half noundef %0) unnamed_addr #54 {
  %2 = bitcast half %0 to i16
  %3 = zext i16 %2 to i32
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 64512, i32 %3, i32 312, i32 15, i32 15, i1 false)
  %5 = trunc i32 %4 to i16
  %6 = bitcast i16 %5 to half
  ret half %6
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc half @188(half noundef %0, i32 noundef %1) unnamed_addr #55 {
  %3 = bitcast half %0 to i16
  %4 = zext i16 %3 to i32
  %5 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 64512, i32 %4, i32 273, i32 15, i32 15, i1 false)
  %6 = trunc i32 %5 to i16
  %7 = bitcast i16 %6 to half
  %8 = tail call i32 @llvm.amdgcn.permlanex16(i32 64512, i32 %4, i32 -1, i32 -1, i1 false, i1 false)
  %9 = trunc i32 %8 to i16
  %10 = bitcast i16 %9 to half
  %11 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %12 = icmp eq i8 %11, 0
  br i1 %12, label %23, label %13

13:                                               ; preds = %2
  %14 = tail call i32 @llvm.amdgcn.readlane(i32 %4, i32 31)
  %15 = trunc i32 %14 to i16
  %16 = bitcast i16 %15 to half
  %17 = icmp eq i32 %1, 32
  %18 = select i1 %17, half %16, half %10
  %19 = and i32 %1, 31
  %20 = icmp eq i32 %19, 16
  %21 = or i1 %17, %20
  %22 = select i1 %21, half %18, half %7
  br label %26

23:                                               ; preds = %2
  %24 = icmp eq i32 %1, 16
  %25 = select i1 %24, half %10, half %7
  br label %26

26:                                               ; preds = %23, %13
  %27 = phi half [ %22, %13 ], [ %25, %23 ]
  ret half %27
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected i32 @__ockl_wfred_and_i32(i32 noundef %0) local_unnamed_addr #0 {
  %2 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %3 = icmp slt i32 %2, 8000
  br i1 %3, label %4, label %61

4:                                                ; preds = %1
  %5 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %10, label %7

7:                                                ; preds = %4
  %8 = tail call i64 @llvm.read_register.i64(metadata !36) #57
  %9 = icmp eq i64 %8, -1
  br label %13

10:                                               ; preds = %4
  %11 = tail call i32 @llvm.read_register.i32(metadata !10) #57
  %12 = icmp eq i32 %11, -1
  br label %13

13:                                               ; preds = %10, %7
  %14 = phi i1 [ %9, %7 ], [ %12, %10 ]
  %15 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %0, i32 32945)
  br i1 %14, label %16, label %29

16:                                               ; preds = %13
  %17 = and i32 %15, %0
  %18 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %17, i32 32846)
  %19 = and i32 %17, %18
  %20 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %19, i32 4127)
  %21 = and i32 %19, %20
  %22 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %21, i32 8223)
  %23 = and i32 %21, %22
  %24 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %23, i32 16415)
  %25 = and i32 %23, %24
  %26 = tail call i32 @llvm.amdgcn.readlane(i32 %25, i32 0)
  %27 = tail call i32 @llvm.amdgcn.readlane(i32 %25, i32 32)
  %28 = and i32 %27, %26
  br label %67

29:                                               ; preds = %13
  %30 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 32945)
  %31 = xor i32 %30, -1
  %32 = or i32 %15, %31
  %33 = and i32 %32, %0
  %34 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %33, i32 32846)
  %35 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 32846)
  %36 = xor i32 %35, -1
  %37 = or i32 %34, %36
  %38 = and i32 %37, %33
  %39 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %38, i32 4127)
  %40 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 4127)
  %41 = xor i32 %40, -1
  %42 = or i32 %39, %41
  %43 = and i32 %42, %38
  %44 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %43, i32 8223)
  %45 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 8223)
  %46 = xor i32 %45, -1
  %47 = or i32 %44, %46
  %48 = and i32 %47, %43
  %49 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %48, i32 16415)
  %50 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 16415)
  %51 = xor i32 %50, -1
  %52 = or i32 %49, %51
  %53 = and i32 %52, %48
  %54 = tail call i32 @llvm.amdgcn.readlane(i32 %53, i32 32)
  %55 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %56 = and i32 %55, 1
  %57 = icmp eq i32 %56, 0
  %58 = select i1 %57, i32 -1, i32 %54
  %59 = tail call i32 @llvm.amdgcn.readlane(i32 %53, i32 0)
  %60 = and i32 %58, %59
  br label %67

61:                                               ; preds = %1
  %62 = icmp ult i32 %2, 10000
  br i1 %62, label %63, label %65

63:                                               ; preds = %61
  %64 = tail call fastcc i32 @189(i32 noundef %0) #57
  br label %67

65:                                               ; preds = %61
  %66 = tail call fastcc i32 @190(i32 noundef %0) #57
  br label %67

67:                                               ; preds = %65, %63, %29, %16
  %68 = phi i32 [ %28, %16 ], [ %60, %29 ], [ %64, %63 ], [ %66, %65 ]
  ret i32 %68
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc i32 @189(i32 noundef %0) unnamed_addr #52 {
  %2 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %0, i32 257, i32 15, i32 15, i1 false)
  %3 = and i32 %2, %0
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %3, i32 258, i32 15, i32 15, i1 false)
  %5 = and i32 %3, %4
  %6 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %5, i32 260, i32 15, i32 15, i1 false)
  %7 = and i32 %5, %6
  %8 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %7, i32 264, i32 15, i32 15, i1 false)
  %9 = and i32 %7, %8
  %10 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %9, i32 304, i32 15, i32 15, i1 false)
  %11 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %10, i32 320, i32 15, i32 15, i1 false)
  %12 = and i32 %11, %9
  %13 = tail call i32 @llvm.amdgcn.readlane(i32 %12, i32 32)
  %14 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %15 = and i32 %14, 1
  %16 = icmp eq i32 %15, 0
  %17 = select i1 %16, i32 -1, i32 %13
  %18 = tail call i32 @llvm.amdgcn.readlane(i32 %12, i32 0)
  %19 = and i32 %17, %18
  ret i32 %19
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc i32 @190(i32 noundef %0) unnamed_addr #53 {
  %2 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %0, i32 257, i32 15, i32 15, i1 false)
  %3 = and i32 %2, %0
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %3, i32 258, i32 15, i32 15, i1 false)
  %5 = and i32 %3, %4
  %6 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %5, i32 260, i32 15, i32 15, i1 false)
  %7 = and i32 %5, %6
  %8 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %7, i32 264, i32 15, i32 15, i1 false)
  %9 = and i32 %7, %8
  %10 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %9, i32 336, i32 15, i32 15, i1 false)
  %11 = tail call i32 @llvm.amdgcn.permlanex16(i32 -1, i32 %10, i32 0, i32 0, i1 false, i1 false)
  %12 = and i32 %11, %10
  %13 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %23, label %15

15:                                               ; preds = %1
  %16 = tail call i32 @llvm.amdgcn.readlane(i32 %12, i32 32)
  %17 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %18 = and i32 %17, 1
  %19 = icmp eq i32 %18, 0
  %20 = select i1 %19, i32 -1, i32 %16
  %21 = tail call i32 @llvm.amdgcn.readlane(i32 %12, i32 0)
  %22 = and i32 %20, %21
  br label %23

23:                                               ; preds = %15, %1
  %24 = phi i32 [ %22, %15 ], [ %12, %1 ]
  ret i32 %24
}

; Function Attrs: convergent norecurse nounwind
define linkonce_odr protected i32 @__ockl_wfscan_and_i32(i32 noundef %0, i1 noundef zeroext %1) local_unnamed_addr #12 {
  %3 = tail call i32 @__ockl_lane_u32() #58
  %4 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %5 = icmp slt i32 %4, 8000
  br i1 %5, label %6, label %36

6:                                                ; preds = %2
  %7 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %0, i32 30)
  %8 = and i32 %3, 1
  %9 = icmp eq i32 %8, 0
  %10 = select i1 %9, i32 -1, i32 %7
  %11 = and i32 %10, %0
  %12 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %11, i32 60)
  %13 = and i32 %3, 2
  %14 = icmp eq i32 %13, 0
  %15 = select i1 %14, i32 -1, i32 %12
  %16 = and i32 %11, %15
  %17 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %16, i32 120)
  %18 = and i32 %3, 4
  %19 = icmp eq i32 %18, 0
  %20 = select i1 %19, i32 -1, i32 %17
  %21 = and i32 %16, %20
  %22 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %21, i32 240)
  %23 = and i32 %3, 8
  %24 = icmp eq i32 %23, 0
  %25 = select i1 %24, i32 -1, i32 %22
  %26 = and i32 %21, %25
  %27 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %26, i32 480)
  %28 = and i32 %3, 16
  %29 = icmp eq i32 %28, 0
  %30 = select i1 %29, i32 -1, i32 %27
  %31 = and i32 %26, %30
  %32 = tail call i32 @llvm.amdgcn.readlane(i32 %31, i32 31)
  %33 = icmp ugt i32 %3, 31
  %34 = select i1 %33, i32 %32, i32 -1
  %35 = and i32 %31, %34
  br label %42

36:                                               ; preds = %2
  %37 = icmp ult i32 %4, 10000
  br i1 %37, label %38, label %40

38:                                               ; preds = %36
  %39 = tail call fastcc i32 @191(i32 noundef %0) #57
  br label %42

40:                                               ; preds = %36
  %41 = tail call fastcc i32 @192(i32 noundef %0, i32 noundef %3) #57
  br label %42

42:                                               ; preds = %40, %38, %6
  %43 = phi i32 [ %35, %6 ], [ %39, %38 ], [ %41, %40 ]
  br i1 %1, label %70, label %44

44:                                               ; preds = %42
  br i1 %5, label %45, label %64

45:                                               ; preds = %44
  %46 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %43, i32 32912)
  %47 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %43, i32 120)
  %48 = and i32 %3, 7
  %49 = icmp eq i32 %48, 4
  %50 = select i1 %49, i32 %47, i32 %46
  %51 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %43, i32 240)
  %52 = and i32 %3, 15
  %53 = icmp eq i32 %52, 8
  %54 = select i1 %53, i32 %51, i32 %50
  %55 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %43, i32 480)
  %56 = and i32 %3, 31
  %57 = icmp eq i32 %56, 16
  %58 = select i1 %57, i32 %55, i32 %54
  %59 = tail call i32 @llvm.amdgcn.readlane(i32 %43, i32 31)
  %60 = icmp eq i32 %3, 32
  %61 = select i1 %60, i32 %59, i32 %58
  %62 = icmp eq i32 %3, 0
  %63 = select i1 %62, i32 -1, i32 %61
  br label %70

64:                                               ; preds = %44
  %65 = icmp ult i32 %4, 10000
  br i1 %65, label %66, label %68

66:                                               ; preds = %64
  %67 = tail call fastcc i32 @193(i32 noundef %43) #57
  br label %70

68:                                               ; preds = %64
  %69 = tail call fastcc i32 @194(i32 noundef %43, i32 noundef %3) #57
  br label %70

70:                                               ; preds = %68, %66, %45, %42
  %71 = phi i32 [ %43, %42 ], [ %63, %45 ], [ %67, %66 ], [ %69, %68 ]
  ret i32 %71
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i32 @191(i32 noundef %0) unnamed_addr #54 {
  %2 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %0, i32 273, i32 15, i32 15, i1 false)
  %3 = and i32 %2, %0
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %3, i32 274, i32 15, i32 15, i1 false)
  %5 = and i32 %3, %4
  %6 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %5, i32 276, i32 15, i32 15, i1 false)
  %7 = and i32 %5, %6
  %8 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %7, i32 280, i32 15, i32 15, i1 false)
  %9 = and i32 %7, %8
  %10 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %9, i32 322, i32 10, i32 15, i1 false)
  %11 = and i32 %9, %10
  %12 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %11, i32 323, i32 12, i32 15, i1 false)
  %13 = and i32 %11, %12
  ret i32 %13
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i32 @192(i32 noundef %0, i32 noundef %1) unnamed_addr #55 {
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %0, i32 273, i32 15, i32 15, i1 false)
  %4 = and i32 %3, %0
  %5 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %4, i32 274, i32 15, i32 15, i1 false)
  %6 = and i32 %4, %5
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %6, i32 276, i32 15, i32 15, i1 false)
  %8 = and i32 %6, %7
  %9 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %8, i32 280, i32 15, i32 15, i1 false)
  %10 = and i32 %8, %9
  %11 = tail call i32 @llvm.amdgcn.permlanex16(i32 -1, i32 %10, i32 -1, i32 -1, i1 false, i1 false)
  %12 = and i32 %1, 16
  %13 = icmp eq i32 %12, 0
  %14 = select i1 %13, i32 -1, i32 %11
  %15 = and i32 %14, %10
  %16 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %23, label %18

18:                                               ; preds = %2
  %19 = icmp ugt i32 %1, 31
  %20 = tail call i32 @llvm.amdgcn.readlane(i32 %15, i32 31)
  %21 = select i1 %19, i32 %20, i32 -1
  %22 = and i32 %21, %15
  br label %23

23:                                               ; preds = %18, %2
  %24 = phi i32 [ %22, %18 ], [ %15, %2 ]
  ret i32 %24
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i32 @193(i32 noundef %0) unnamed_addr #54 {
  %2 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %0, i32 312, i32 15, i32 15, i1 false)
  ret i32 %2
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i32 @194(i32 noundef %0, i32 noundef %1) unnamed_addr #55 {
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %0, i32 273, i32 15, i32 15, i1 false)
  %4 = tail call i32 @llvm.amdgcn.permlanex16(i32 -1, i32 %0, i32 -1, i32 -1, i1 false, i1 false)
  %5 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %15, label %7

7:                                                ; preds = %2
  %8 = tail call i32 @llvm.amdgcn.readlane(i32 %0, i32 31)
  %9 = icmp eq i32 %1, 32
  %10 = select i1 %9, i32 %8, i32 %4
  %11 = and i32 %1, 31
  %12 = icmp eq i32 %11, 16
  %13 = or i1 %9, %12
  %14 = select i1 %13, i32 %10, i32 %3
  br label %18

15:                                               ; preds = %2
  %16 = icmp eq i32 %1, 16
  %17 = select i1 %16, i32 %4, i32 %3
  br label %18

18:                                               ; preds = %15, %7
  %19 = phi i32 [ %14, %7 ], [ %17, %15 ]
  ret i32 %19
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected i32 @__ockl_wfred_and_u32(i32 noundef %0) local_unnamed_addr #0 {
  %2 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %3 = icmp slt i32 %2, 8000
  br i1 %3, label %4, label %61

4:                                                ; preds = %1
  %5 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %10, label %7

7:                                                ; preds = %4
  %8 = tail call i64 @llvm.read_register.i64(metadata !36) #57
  %9 = icmp eq i64 %8, -1
  br label %13

10:                                               ; preds = %4
  %11 = tail call i32 @llvm.read_register.i32(metadata !10) #57
  %12 = icmp eq i32 %11, -1
  br label %13

13:                                               ; preds = %10, %7
  %14 = phi i1 [ %9, %7 ], [ %12, %10 ]
  %15 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %0, i32 32945)
  br i1 %14, label %16, label %29

16:                                               ; preds = %13
  %17 = and i32 %15, %0
  %18 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %17, i32 32846)
  %19 = and i32 %17, %18
  %20 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %19, i32 4127)
  %21 = and i32 %19, %20
  %22 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %21, i32 8223)
  %23 = and i32 %21, %22
  %24 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %23, i32 16415)
  %25 = and i32 %23, %24
  %26 = tail call i32 @llvm.amdgcn.readlane(i32 %25, i32 0)
  %27 = tail call i32 @llvm.amdgcn.readlane(i32 %25, i32 32)
  %28 = and i32 %27, %26
  br label %67

29:                                               ; preds = %13
  %30 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 32945)
  %31 = xor i32 %30, -1
  %32 = or i32 %15, %31
  %33 = and i32 %32, %0
  %34 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %33, i32 32846)
  %35 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 32846)
  %36 = xor i32 %35, -1
  %37 = or i32 %34, %36
  %38 = and i32 %37, %33
  %39 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %38, i32 4127)
  %40 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 4127)
  %41 = xor i32 %40, -1
  %42 = or i32 %39, %41
  %43 = and i32 %42, %38
  %44 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %43, i32 8223)
  %45 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 8223)
  %46 = xor i32 %45, -1
  %47 = or i32 %44, %46
  %48 = and i32 %47, %43
  %49 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %48, i32 16415)
  %50 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 16415)
  %51 = xor i32 %50, -1
  %52 = or i32 %49, %51
  %53 = and i32 %52, %48
  %54 = tail call i32 @llvm.amdgcn.readlane(i32 %53, i32 32)
  %55 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %56 = and i32 %55, 1
  %57 = icmp eq i32 %56, 0
  %58 = select i1 %57, i32 -1, i32 %54
  %59 = tail call i32 @llvm.amdgcn.readlane(i32 %53, i32 0)
  %60 = and i32 %58, %59
  br label %67

61:                                               ; preds = %1
  %62 = icmp ult i32 %2, 10000
  br i1 %62, label %63, label %65

63:                                               ; preds = %61
  %64 = tail call fastcc i32 @195(i32 noundef %0) #57
  br label %67

65:                                               ; preds = %61
  %66 = tail call fastcc i32 @196(i32 noundef %0) #57
  br label %67

67:                                               ; preds = %65, %63, %29, %16
  %68 = phi i32 [ %28, %16 ], [ %60, %29 ], [ %64, %63 ], [ %66, %65 ]
  ret i32 %68
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc i32 @195(i32 noundef %0) unnamed_addr #52 {
  %2 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %0, i32 257, i32 15, i32 15, i1 false)
  %3 = and i32 %2, %0
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %3, i32 258, i32 15, i32 15, i1 false)
  %5 = and i32 %3, %4
  %6 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %5, i32 260, i32 15, i32 15, i1 false)
  %7 = and i32 %5, %6
  %8 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %7, i32 264, i32 15, i32 15, i1 false)
  %9 = and i32 %7, %8
  %10 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %9, i32 304, i32 15, i32 15, i1 false)
  %11 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %10, i32 320, i32 15, i32 15, i1 false)
  %12 = and i32 %11, %9
  %13 = tail call i32 @llvm.amdgcn.readlane(i32 %12, i32 32)
  %14 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %15 = and i32 %14, 1
  %16 = icmp eq i32 %15, 0
  %17 = select i1 %16, i32 -1, i32 %13
  %18 = tail call i32 @llvm.amdgcn.readlane(i32 %12, i32 0)
  %19 = and i32 %17, %18
  ret i32 %19
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc i32 @196(i32 noundef %0) unnamed_addr #53 {
  %2 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %0, i32 257, i32 15, i32 15, i1 false)
  %3 = and i32 %2, %0
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %3, i32 258, i32 15, i32 15, i1 false)
  %5 = and i32 %3, %4
  %6 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %5, i32 260, i32 15, i32 15, i1 false)
  %7 = and i32 %5, %6
  %8 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %7, i32 264, i32 15, i32 15, i1 false)
  %9 = and i32 %7, %8
  %10 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %9, i32 336, i32 15, i32 15, i1 false)
  %11 = tail call i32 @llvm.amdgcn.permlanex16(i32 -1, i32 %10, i32 0, i32 0, i1 false, i1 false)
  %12 = and i32 %11, %10
  %13 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %23, label %15

15:                                               ; preds = %1
  %16 = tail call i32 @llvm.amdgcn.readlane(i32 %12, i32 32)
  %17 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %18 = and i32 %17, 1
  %19 = icmp eq i32 %18, 0
  %20 = select i1 %19, i32 -1, i32 %16
  %21 = tail call i32 @llvm.amdgcn.readlane(i32 %12, i32 0)
  %22 = and i32 %20, %21
  br label %23

23:                                               ; preds = %15, %1
  %24 = phi i32 [ %22, %15 ], [ %12, %1 ]
  ret i32 %24
}

; Function Attrs: convergent norecurse nounwind
define linkonce_odr protected i32 @__ockl_wfscan_and_u32(i32 noundef %0, i1 noundef zeroext %1) local_unnamed_addr #12 {
  %3 = tail call i32 @__ockl_lane_u32() #58
  %4 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %5 = icmp slt i32 %4, 8000
  br i1 %5, label %6, label %36

6:                                                ; preds = %2
  %7 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %0, i32 30)
  %8 = and i32 %3, 1
  %9 = icmp eq i32 %8, 0
  %10 = select i1 %9, i32 -1, i32 %7
  %11 = and i32 %10, %0
  %12 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %11, i32 60)
  %13 = and i32 %3, 2
  %14 = icmp eq i32 %13, 0
  %15 = select i1 %14, i32 -1, i32 %12
  %16 = and i32 %11, %15
  %17 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %16, i32 120)
  %18 = and i32 %3, 4
  %19 = icmp eq i32 %18, 0
  %20 = select i1 %19, i32 -1, i32 %17
  %21 = and i32 %16, %20
  %22 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %21, i32 240)
  %23 = and i32 %3, 8
  %24 = icmp eq i32 %23, 0
  %25 = select i1 %24, i32 -1, i32 %22
  %26 = and i32 %21, %25
  %27 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %26, i32 480)
  %28 = and i32 %3, 16
  %29 = icmp eq i32 %28, 0
  %30 = select i1 %29, i32 -1, i32 %27
  %31 = and i32 %26, %30
  %32 = tail call i32 @llvm.amdgcn.readlane(i32 %31, i32 31)
  %33 = icmp ugt i32 %3, 31
  %34 = select i1 %33, i32 %32, i32 -1
  %35 = and i32 %31, %34
  br label %42

36:                                               ; preds = %2
  %37 = icmp ult i32 %4, 10000
  br i1 %37, label %38, label %40

38:                                               ; preds = %36
  %39 = tail call fastcc i32 @197(i32 noundef %0) #57
  br label %42

40:                                               ; preds = %36
  %41 = tail call fastcc i32 @198(i32 noundef %0, i32 noundef %3) #57
  br label %42

42:                                               ; preds = %40, %38, %6
  %43 = phi i32 [ %35, %6 ], [ %39, %38 ], [ %41, %40 ]
  br i1 %1, label %70, label %44

44:                                               ; preds = %42
  br i1 %5, label %45, label %64

45:                                               ; preds = %44
  %46 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %43, i32 32912)
  %47 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %43, i32 120)
  %48 = and i32 %3, 7
  %49 = icmp eq i32 %48, 4
  %50 = select i1 %49, i32 %47, i32 %46
  %51 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %43, i32 240)
  %52 = and i32 %3, 15
  %53 = icmp eq i32 %52, 8
  %54 = select i1 %53, i32 %51, i32 %50
  %55 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %43, i32 480)
  %56 = and i32 %3, 31
  %57 = icmp eq i32 %56, 16
  %58 = select i1 %57, i32 %55, i32 %54
  %59 = tail call i32 @llvm.amdgcn.readlane(i32 %43, i32 31)
  %60 = icmp eq i32 %3, 32
  %61 = select i1 %60, i32 %59, i32 %58
  %62 = icmp eq i32 %3, 0
  %63 = select i1 %62, i32 -1, i32 %61
  br label %70

64:                                               ; preds = %44
  %65 = icmp ult i32 %4, 10000
  br i1 %65, label %66, label %68

66:                                               ; preds = %64
  %67 = tail call fastcc i32 @199(i32 noundef %43) #57
  br label %70

68:                                               ; preds = %64
  %69 = tail call fastcc i32 @200(i32 noundef %43, i32 noundef %3) #57
  br label %70

70:                                               ; preds = %68, %66, %45, %42
  %71 = phi i32 [ %43, %42 ], [ %63, %45 ], [ %67, %66 ], [ %69, %68 ]
  ret i32 %71
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i32 @197(i32 noundef %0) unnamed_addr #54 {
  %2 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %0, i32 273, i32 15, i32 15, i1 false)
  %3 = and i32 %2, %0
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %3, i32 274, i32 15, i32 15, i1 false)
  %5 = and i32 %3, %4
  %6 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %5, i32 276, i32 15, i32 15, i1 false)
  %7 = and i32 %5, %6
  %8 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %7, i32 280, i32 15, i32 15, i1 false)
  %9 = and i32 %7, %8
  %10 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %9, i32 322, i32 10, i32 15, i1 false)
  %11 = and i32 %9, %10
  %12 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %11, i32 323, i32 12, i32 15, i1 false)
  %13 = and i32 %11, %12
  ret i32 %13
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i32 @198(i32 noundef %0, i32 noundef %1) unnamed_addr #55 {
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %0, i32 273, i32 15, i32 15, i1 false)
  %4 = and i32 %3, %0
  %5 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %4, i32 274, i32 15, i32 15, i1 false)
  %6 = and i32 %4, %5
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %6, i32 276, i32 15, i32 15, i1 false)
  %8 = and i32 %6, %7
  %9 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %8, i32 280, i32 15, i32 15, i1 false)
  %10 = and i32 %8, %9
  %11 = tail call i32 @llvm.amdgcn.permlanex16(i32 -1, i32 %10, i32 -1, i32 -1, i1 false, i1 false)
  %12 = and i32 %1, 16
  %13 = icmp eq i32 %12, 0
  %14 = select i1 %13, i32 -1, i32 %11
  %15 = and i32 %14, %10
  %16 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %23, label %18

18:                                               ; preds = %2
  %19 = icmp ugt i32 %1, 31
  %20 = tail call i32 @llvm.amdgcn.readlane(i32 %15, i32 31)
  %21 = select i1 %19, i32 %20, i32 -1
  %22 = and i32 %21, %15
  br label %23

23:                                               ; preds = %18, %2
  %24 = phi i32 [ %22, %18 ], [ %15, %2 ]
  ret i32 %24
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i32 @199(i32 noundef %0) unnamed_addr #54 {
  %2 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %0, i32 312, i32 15, i32 15, i1 false)
  ret i32 %2
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i32 @200(i32 noundef %0, i32 noundef %1) unnamed_addr #55 {
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %0, i32 273, i32 15, i32 15, i1 false)
  %4 = tail call i32 @llvm.amdgcn.permlanex16(i32 -1, i32 %0, i32 -1, i32 -1, i1 false, i1 false)
  %5 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %15, label %7

7:                                                ; preds = %2
  %8 = tail call i32 @llvm.amdgcn.readlane(i32 %0, i32 31)
  %9 = icmp eq i32 %1, 32
  %10 = select i1 %9, i32 %8, i32 %4
  %11 = and i32 %1, 31
  %12 = icmp eq i32 %11, 16
  %13 = or i1 %9, %12
  %14 = select i1 %13, i32 %10, i32 %3
  br label %18

15:                                               ; preds = %2
  %16 = icmp eq i32 %1, 16
  %17 = select i1 %16, i32 %4, i32 %3
  br label %18

18:                                               ; preds = %15, %7
  %19 = phi i32 [ %14, %7 ], [ %17, %15 ]
  ret i32 %19
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected i64 @__ockl_wfred_and_i64(i64 noundef %0) local_unnamed_addr #0 {
  %2 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %3 = icmp slt i32 %2, 8000
  br i1 %3, label %4, label %156

4:                                                ; preds = %1
  %5 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %10, label %7

7:                                                ; preds = %4
  %8 = tail call i64 @llvm.read_register.i64(metadata !36) #57
  %9 = icmp eq i64 %8, -1
  br label %13

10:                                               ; preds = %4
  %11 = tail call i32 @llvm.read_register.i32(metadata !10) #57
  %12 = icmp eq i32 %11, -1
  br label %13

13:                                               ; preds = %10, %7
  %14 = phi i1 [ %9, %7 ], [ %12, %10 ]
  %15 = trunc i64 %0 to i32
  %16 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %15, i32 32945)
  br i1 %14, label %17, label %74

17:                                               ; preds = %13
  %18 = insertelement <2 x i32> undef, i32 %16, i64 0
  %19 = lshr i64 %0, 32
  %20 = trunc i64 %19 to i32
  %21 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %20, i32 32945)
  %22 = insertelement <2 x i32> %18, i32 %21, i64 1
  %23 = bitcast <2 x i32> %22 to i64
  %24 = and i64 %23, %0
  %25 = trunc i64 %24 to i32
  %26 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %25, i32 32846)
  %27 = insertelement <2 x i32> undef, i32 %26, i64 0
  %28 = lshr i64 %24, 32
  %29 = trunc i64 %28 to i32
  %30 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %29, i32 32846)
  %31 = insertelement <2 x i32> %27, i32 %30, i64 1
  %32 = bitcast <2 x i32> %31 to i64
  %33 = and i64 %24, %32
  %34 = trunc i64 %33 to i32
  %35 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %34, i32 4127)
  %36 = insertelement <2 x i32> undef, i32 %35, i64 0
  %37 = lshr i64 %33, 32
  %38 = trunc i64 %37 to i32
  %39 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %38, i32 4127)
  %40 = insertelement <2 x i32> %36, i32 %39, i64 1
  %41 = bitcast <2 x i32> %40 to i64
  %42 = and i64 %33, %41
  %43 = trunc i64 %42 to i32
  %44 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %43, i32 8223)
  %45 = insertelement <2 x i32> undef, i32 %44, i64 0
  %46 = lshr i64 %42, 32
  %47 = trunc i64 %46 to i32
  %48 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %47, i32 8223)
  %49 = insertelement <2 x i32> %45, i32 %48, i64 1
  %50 = bitcast <2 x i32> %49 to i64
  %51 = and i64 %42, %50
  %52 = trunc i64 %51 to i32
  %53 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %52, i32 16415)
  %54 = insertelement <2 x i32> undef, i32 %53, i64 0
  %55 = lshr i64 %51, 32
  %56 = trunc i64 %55 to i32
  %57 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %56, i32 16415)
  %58 = insertelement <2 x i32> %54, i32 %57, i64 1
  %59 = bitcast <2 x i32> %58 to i64
  %60 = and i64 %51, %59
  %61 = trunc i64 %60 to i32
  %62 = tail call i32 @llvm.amdgcn.readlane(i32 %61, i32 0)
  %63 = insertelement <2 x i32> undef, i32 %62, i64 0
  %64 = lshr i64 %60, 32
  %65 = trunc i64 %64 to i32
  %66 = tail call i32 @llvm.amdgcn.readlane(i32 %65, i32 0)
  %67 = insertelement <2 x i32> %63, i32 %66, i64 1
  %68 = tail call i32 @llvm.amdgcn.readlane(i32 %61, i32 32)
  %69 = insertelement <2 x i32> undef, i32 %68, i64 0
  %70 = tail call i32 @llvm.amdgcn.readlane(i32 %65, i32 32)
  %71 = insertelement <2 x i32> %69, i32 %70, i64 1
  %72 = and <2 x i32> %71, %67
  %73 = bitcast <2 x i32> %72 to i64
  br label %162

74:                                               ; preds = %13
  %75 = lshr i64 %0, 32
  %76 = trunc i64 %75 to i32
  %77 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %76, i32 32945)
  %78 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 32945)
  %79 = xor i32 %78, -1
  %80 = or i32 %16, %79
  %81 = insertelement <2 x i32> undef, i32 %80, i64 0
  %82 = or i32 %77, %79
  %83 = insertelement <2 x i32> %81, i32 %82, i64 1
  %84 = bitcast <2 x i32> %83 to i64
  %85 = and i64 %84, %0
  %86 = trunc i64 %85 to i32
  %87 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %86, i32 32846)
  %88 = lshr i64 %85, 32
  %89 = trunc i64 %88 to i32
  %90 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %89, i32 32846)
  %91 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 32846)
  %92 = xor i32 %91, -1
  %93 = or i32 %87, %92
  %94 = insertelement <2 x i32> undef, i32 %93, i64 0
  %95 = or i32 %90, %92
  %96 = insertelement <2 x i32> %94, i32 %95, i64 1
  %97 = bitcast <2 x i32> %96 to i64
  %98 = and i64 %85, %97
  %99 = trunc i64 %98 to i32
  %100 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %99, i32 4127)
  %101 = lshr i64 %98, 32
  %102 = trunc i64 %101 to i32
  %103 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %102, i32 4127)
  %104 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 4127)
  %105 = xor i32 %104, -1
  %106 = or i32 %100, %105
  %107 = insertelement <2 x i32> undef, i32 %106, i64 0
  %108 = or i32 %103, %105
  %109 = insertelement <2 x i32> %107, i32 %108, i64 1
  %110 = bitcast <2 x i32> %109 to i64
  %111 = and i64 %98, %110
  %112 = trunc i64 %111 to i32
  %113 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %112, i32 8223)
  %114 = lshr i64 %111, 32
  %115 = trunc i64 %114 to i32
  %116 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %115, i32 8223)
  %117 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 8223)
  %118 = xor i32 %117, -1
  %119 = or i32 %113, %118
  %120 = insertelement <2 x i32> undef, i32 %119, i64 0
  %121 = or i32 %116, %118
  %122 = insertelement <2 x i32> %120, i32 %121, i64 1
  %123 = bitcast <2 x i32> %122 to i64
  %124 = and i64 %111, %123
  %125 = trunc i64 %124 to i32
  %126 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %125, i32 16415)
  %127 = lshr i64 %124, 32
  %128 = trunc i64 %127 to i32
  %129 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %128, i32 16415)
  %130 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 16415)
  %131 = xor i32 %130, -1
  %132 = or i32 %126, %131
  %133 = insertelement <2 x i32> undef, i32 %132, i64 0
  %134 = or i32 %129, %131
  %135 = insertelement <2 x i32> %133, i32 %134, i64 1
  %136 = bitcast <2 x i32> %135 to i64
  %137 = and i64 %124, %136
  %138 = trunc i64 %137 to i32
  %139 = tail call i32 @llvm.amdgcn.readlane(i32 %138, i32 32)
  %140 = insertelement <2 x i32> undef, i32 %139, i64 0
  %141 = lshr i64 %137, 32
  %142 = trunc i64 %141 to i32
  %143 = tail call i32 @llvm.amdgcn.readlane(i32 %142, i32 32)
  %144 = insertelement <2 x i32> %140, i32 %143, i64 1
  %145 = bitcast <2 x i32> %144 to i64
  %146 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %147 = and i32 %146, 1
  %148 = icmp eq i32 %147, 0
  %149 = select i1 %148, i64 -1, i64 %145
  %150 = tail call i32 @llvm.amdgcn.readlane(i32 %138, i32 0)
  %151 = insertelement <2 x i32> undef, i32 %150, i64 0
  %152 = tail call i32 @llvm.amdgcn.readlane(i32 %142, i32 0)
  %153 = insertelement <2 x i32> %151, i32 %152, i64 1
  %154 = bitcast <2 x i32> %153 to i64
  %155 = and i64 %149, %154
  br label %162

156:                                              ; preds = %1
  %157 = icmp ult i32 %2, 10000
  br i1 %157, label %158, label %160

158:                                              ; preds = %156
  %159 = tail call fastcc i64 @201(i64 noundef %0) #57
  br label %162

160:                                              ; preds = %156
  %161 = tail call fastcc i64 @202(i64 noundef %0) #57
  br label %162

162:                                              ; preds = %160, %158, %74, %17
  %163 = phi i64 [ %73, %17 ], [ %155, %74 ], [ %159, %158 ], [ %161, %160 ]
  ret i64 %163
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc i64 @201(i64 noundef %0) unnamed_addr #52 {
  %2 = trunc i64 %0 to i32
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %2, i32 257, i32 15, i32 15, i1 false)
  %4 = insertelement <2 x i32> undef, i32 %3, i64 0
  %5 = lshr i64 %0, 32
  %6 = trunc i64 %5 to i32
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %6, i32 257, i32 15, i32 15, i1 false)
  %8 = insertelement <2 x i32> %4, i32 %7, i64 1
  %9 = bitcast <2 x i32> %8 to i64
  %10 = and i64 %9, %0
  %11 = trunc i64 %10 to i32
  %12 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %11, i32 258, i32 15, i32 15, i1 false)
  %13 = insertelement <2 x i32> undef, i32 %12, i64 0
  %14 = lshr i64 %10, 32
  %15 = trunc i64 %14 to i32
  %16 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %15, i32 258, i32 15, i32 15, i1 false)
  %17 = insertelement <2 x i32> %13, i32 %16, i64 1
  %18 = bitcast <2 x i32> %17 to i64
  %19 = and i64 %10, %18
  %20 = trunc i64 %19 to i32
  %21 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %20, i32 260, i32 15, i32 15, i1 false)
  %22 = insertelement <2 x i32> undef, i32 %21, i64 0
  %23 = lshr i64 %19, 32
  %24 = trunc i64 %23 to i32
  %25 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %24, i32 260, i32 15, i32 15, i1 false)
  %26 = insertelement <2 x i32> %22, i32 %25, i64 1
  %27 = bitcast <2 x i32> %26 to i64
  %28 = and i64 %19, %27
  %29 = trunc i64 %28 to i32
  %30 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %29, i32 264, i32 15, i32 15, i1 false)
  %31 = insertelement <2 x i32> undef, i32 %30, i64 0
  %32 = lshr i64 %28, 32
  %33 = trunc i64 %32 to i32
  %34 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %33, i32 264, i32 15, i32 15, i1 false)
  %35 = insertelement <2 x i32> %31, i32 %34, i64 1
  %36 = bitcast <2 x i32> %35 to i64
  %37 = and i64 %28, %36
  %38 = trunc i64 %37 to i32
  %39 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %38, i32 304, i32 15, i32 15, i1 false)
  %40 = lshr i64 %37, 32
  %41 = trunc i64 %40 to i32
  %42 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %41, i32 304, i32 15, i32 15, i1 false)
  %43 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %39, i32 320, i32 15, i32 15, i1 false)
  %44 = insertelement <2 x i32> undef, i32 %43, i64 0
  %45 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %42, i32 320, i32 15, i32 15, i1 false)
  %46 = insertelement <2 x i32> %44, i32 %45, i64 1
  %47 = bitcast <2 x i32> %46 to i64
  %48 = and i64 %37, %47
  %49 = trunc i64 %48 to i32
  %50 = tail call i32 @llvm.amdgcn.readlane(i32 %49, i32 32)
  %51 = insertelement <2 x i32> undef, i32 %50, i64 0
  %52 = lshr i64 %48, 32
  %53 = trunc i64 %52 to i32
  %54 = tail call i32 @llvm.amdgcn.readlane(i32 %53, i32 32)
  %55 = insertelement <2 x i32> %51, i32 %54, i64 1
  %56 = bitcast <2 x i32> %55 to i64
  %57 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %58 = and i32 %57, 1
  %59 = icmp eq i32 %58, 0
  %60 = select i1 %59, i64 -1, i64 %56
  %61 = tail call i32 @llvm.amdgcn.readlane(i32 %49, i32 0)
  %62 = insertelement <2 x i32> undef, i32 %61, i64 0
  %63 = tail call i32 @llvm.amdgcn.readlane(i32 %53, i32 0)
  %64 = insertelement <2 x i32> %62, i32 %63, i64 1
  %65 = bitcast <2 x i32> %64 to i64
  %66 = and i64 %60, %65
  ret i64 %66
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc i64 @202(i64 noundef %0) unnamed_addr #53 {
  %2 = trunc i64 %0 to i32
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %2, i32 257, i32 15, i32 15, i1 false)
  %4 = insertelement <2 x i32> undef, i32 %3, i64 0
  %5 = lshr i64 %0, 32
  %6 = trunc i64 %5 to i32
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %6, i32 257, i32 15, i32 15, i1 false)
  %8 = insertelement <2 x i32> %4, i32 %7, i64 1
  %9 = bitcast <2 x i32> %8 to i64
  %10 = and i64 %9, %0
  %11 = trunc i64 %10 to i32
  %12 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %11, i32 258, i32 15, i32 15, i1 false)
  %13 = insertelement <2 x i32> undef, i32 %12, i64 0
  %14 = lshr i64 %10, 32
  %15 = trunc i64 %14 to i32
  %16 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %15, i32 258, i32 15, i32 15, i1 false)
  %17 = insertelement <2 x i32> %13, i32 %16, i64 1
  %18 = bitcast <2 x i32> %17 to i64
  %19 = and i64 %10, %18
  %20 = trunc i64 %19 to i32
  %21 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %20, i32 260, i32 15, i32 15, i1 false)
  %22 = insertelement <2 x i32> undef, i32 %21, i64 0
  %23 = lshr i64 %19, 32
  %24 = trunc i64 %23 to i32
  %25 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %24, i32 260, i32 15, i32 15, i1 false)
  %26 = insertelement <2 x i32> %22, i32 %25, i64 1
  %27 = bitcast <2 x i32> %26 to i64
  %28 = and i64 %19, %27
  %29 = trunc i64 %28 to i32
  %30 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %29, i32 264, i32 15, i32 15, i1 false)
  %31 = insertelement <2 x i32> undef, i32 %30, i64 0
  %32 = lshr i64 %28, 32
  %33 = trunc i64 %32 to i32
  %34 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %33, i32 264, i32 15, i32 15, i1 false)
  %35 = insertelement <2 x i32> %31, i32 %34, i64 1
  %36 = bitcast <2 x i32> %35 to i64
  %37 = and i64 %28, %36
  %38 = trunc i64 %37 to i32
  %39 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %38, i32 336, i32 15, i32 15, i1 false)
  %40 = insertelement <2 x i32> undef, i32 %39, i64 0
  %41 = lshr i64 %37, 32
  %42 = trunc i64 %41 to i32
  %43 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %42, i32 336, i32 15, i32 15, i1 false)
  %44 = insertelement <2 x i32> %40, i32 %43, i64 1
  %45 = tail call i32 @llvm.amdgcn.permlanex16(i32 -1, i32 %39, i32 0, i32 0, i1 false, i1 false)
  %46 = insertelement <2 x i32> undef, i32 %45, i64 0
  %47 = tail call i32 @llvm.amdgcn.permlanex16(i32 -1, i32 %43, i32 0, i32 0, i1 false, i1 false)
  %48 = insertelement <2 x i32> %46, i32 %47, i64 1
  %49 = and <2 x i32> %48, %44
  %50 = bitcast <2 x i32> %49 to i64
  %51 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %52 = icmp eq i8 %51, 0
  br i1 %52, label %71, label %53

53:                                               ; preds = %1
  %54 = extractelement <2 x i32> %49, i64 0
  %55 = tail call i32 @llvm.amdgcn.readlane(i32 %54, i32 32)
  %56 = insertelement <2 x i32> undef, i32 %55, i64 0
  %57 = extractelement <2 x i32> %49, i64 1
  %58 = tail call i32 @llvm.amdgcn.readlane(i32 %57, i32 32)
  %59 = insertelement <2 x i32> %56, i32 %58, i64 1
  %60 = bitcast <2 x i32> %59 to i64
  %61 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %62 = and i32 %61, 1
  %63 = icmp eq i32 %62, 0
  %64 = select i1 %63, i64 -1, i64 %60
  %65 = tail call i32 @llvm.amdgcn.readlane(i32 %54, i32 0)
  %66 = insertelement <2 x i32> undef, i32 %65, i64 0
  %67 = tail call i32 @llvm.amdgcn.readlane(i32 %57, i32 0)
  %68 = insertelement <2 x i32> %66, i32 %67, i64 1
  %69 = bitcast <2 x i32> %68 to i64
  %70 = and i64 %64, %69
  br label %71

71:                                               ; preds = %53, %1
  %72 = phi i64 [ %70, %53 ], [ %50, %1 ]
  ret i64 %72
}

; Function Attrs: convergent norecurse nounwind
define linkonce_odr protected i64 @__ockl_wfscan_and_i64(i64 noundef %0, i1 noundef zeroext %1) local_unnamed_addr #12 {
  %3 = tail call i32 @__ockl_lane_u32() #58
  %4 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %5 = icmp slt i32 %4, 8000
  br i1 %5, label %6, label %78

6:                                                ; preds = %2
  %7 = trunc i64 %0 to i32
  %8 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %7, i32 30)
  %9 = insertelement <2 x i32> undef, i32 %8, i64 0
  %10 = lshr i64 %0, 32
  %11 = trunc i64 %10 to i32
  %12 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %11, i32 30)
  %13 = insertelement <2 x i32> %9, i32 %12, i64 1
  %14 = bitcast <2 x i32> %13 to i64
  %15 = and i32 %3, 1
  %16 = icmp eq i32 %15, 0
  %17 = select i1 %16, i64 -1, i64 %14
  %18 = and i64 %17, %0
  %19 = trunc i64 %18 to i32
  %20 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %19, i32 60)
  %21 = insertelement <2 x i32> undef, i32 %20, i64 0
  %22 = lshr i64 %18, 32
  %23 = trunc i64 %22 to i32
  %24 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %23, i32 60)
  %25 = insertelement <2 x i32> %21, i32 %24, i64 1
  %26 = bitcast <2 x i32> %25 to i64
  %27 = and i32 %3, 2
  %28 = icmp eq i32 %27, 0
  %29 = select i1 %28, i64 -1, i64 %26
  %30 = and i64 %29, %18
  %31 = trunc i64 %30 to i32
  %32 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %31, i32 120)
  %33 = insertelement <2 x i32> undef, i32 %32, i64 0
  %34 = lshr i64 %30, 32
  %35 = trunc i64 %34 to i32
  %36 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %35, i32 120)
  %37 = insertelement <2 x i32> %33, i32 %36, i64 1
  %38 = bitcast <2 x i32> %37 to i64
  %39 = and i32 %3, 4
  %40 = icmp eq i32 %39, 0
  %41 = select i1 %40, i64 -1, i64 %38
  %42 = and i64 %41, %30
  %43 = trunc i64 %42 to i32
  %44 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %43, i32 240)
  %45 = insertelement <2 x i32> undef, i32 %44, i64 0
  %46 = lshr i64 %42, 32
  %47 = trunc i64 %46 to i32
  %48 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %47, i32 240)
  %49 = insertelement <2 x i32> %45, i32 %48, i64 1
  %50 = bitcast <2 x i32> %49 to i64
  %51 = and i32 %3, 8
  %52 = icmp eq i32 %51, 0
  %53 = select i1 %52, i64 -1, i64 %50
  %54 = and i64 %53, %42
  %55 = trunc i64 %54 to i32
  %56 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %55, i32 480)
  %57 = insertelement <2 x i32> undef, i32 %56, i64 0
  %58 = lshr i64 %54, 32
  %59 = trunc i64 %58 to i32
  %60 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %59, i32 480)
  %61 = insertelement <2 x i32> %57, i32 %60, i64 1
  %62 = bitcast <2 x i32> %61 to i64
  %63 = and i32 %3, 16
  %64 = icmp eq i32 %63, 0
  %65 = select i1 %64, i64 -1, i64 %62
  %66 = and i64 %65, %54
  %67 = trunc i64 %66 to i32
  %68 = tail call i32 @llvm.amdgcn.readlane(i32 %67, i32 31)
  %69 = insertelement <2 x i32> undef, i32 %68, i64 0
  %70 = lshr i64 %66, 32
  %71 = trunc i64 %70 to i32
  %72 = tail call i32 @llvm.amdgcn.readlane(i32 %71, i32 31)
  %73 = insertelement <2 x i32> %69, i32 %72, i64 1
  %74 = bitcast <2 x i32> %73 to i64
  %75 = icmp ugt i32 %3, 31
  %76 = select i1 %75, i64 %74, i64 -1
  %77 = and i64 %76, %66
  br label %84

78:                                               ; preds = %2
  %79 = icmp ult i32 %4, 10000
  br i1 %79, label %80, label %82

80:                                               ; preds = %78
  %81 = tail call fastcc i64 @203(i64 noundef %0) #57
  br label %84

82:                                               ; preds = %78
  %83 = tail call fastcc i64 @204(i64 noundef %0, i32 noundef %3) #57
  br label %84

84:                                               ; preds = %82, %80, %6
  %85 = phi i64 [ %77, %6 ], [ %81, %80 ], [ %83, %82 ]
  br i1 %1, label %131, label %86

86:                                               ; preds = %84
  br i1 %5, label %87, label %125

87:                                               ; preds = %86
  %88 = trunc i64 %85 to i32
  %89 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %88, i32 32912)
  %90 = insertelement <2 x i32> undef, i32 %89, i64 0
  %91 = lshr i64 %85, 32
  %92 = trunc i64 %91 to i32
  %93 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %92, i32 32912)
  %94 = insertelement <2 x i32> %90, i32 %93, i64 1
  %95 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %88, i32 120)
  %96 = insertelement <2 x i32> undef, i32 %95, i64 0
  %97 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %92, i32 120)
  %98 = insertelement <2 x i32> %96, i32 %97, i64 1
  %99 = and i32 %3, 7
  %100 = icmp eq i32 %99, 4
  %101 = select i1 %100, <2 x i32> %98, <2 x i32> %94
  %102 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %88, i32 240)
  %103 = insertelement <2 x i32> undef, i32 %102, i64 0
  %104 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %92, i32 240)
  %105 = insertelement <2 x i32> %103, i32 %104, i64 1
  %106 = and i32 %3, 15
  %107 = icmp eq i32 %106, 8
  %108 = select i1 %107, <2 x i32> %105, <2 x i32> %101
  %109 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %88, i32 480)
  %110 = insertelement <2 x i32> undef, i32 %109, i64 0
  %111 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %92, i32 480)
  %112 = insertelement <2 x i32> %110, i32 %111, i64 1
  %113 = and i32 %3, 31
  %114 = icmp eq i32 %113, 16
  %115 = select i1 %114, <2 x i32> %112, <2 x i32> %108
  %116 = tail call i32 @llvm.amdgcn.readlane(i32 %88, i32 31)
  %117 = insertelement <2 x i32> undef, i32 %116, i64 0
  %118 = tail call i32 @llvm.amdgcn.readlane(i32 %92, i32 31)
  %119 = insertelement <2 x i32> %117, i32 %118, i64 1
  %120 = icmp eq i32 %3, 32
  %121 = select i1 %120, <2 x i32> %119, <2 x i32> %115
  %122 = bitcast <2 x i32> %121 to i64
  %123 = icmp eq i32 %3, 0
  %124 = select i1 %123, i64 -1, i64 %122
  br label %131

125:                                              ; preds = %86
  %126 = icmp ult i32 %4, 10000
  br i1 %126, label %127, label %129

127:                                              ; preds = %125
  %128 = tail call fastcc i64 @205(i64 noundef %85) #57
  br label %131

129:                                              ; preds = %125
  %130 = tail call fastcc i64 @206(i64 noundef %85, i32 noundef %3) #57
  br label %131

131:                                              ; preds = %129, %127, %87, %84
  %132 = phi i64 [ %85, %84 ], [ %124, %87 ], [ %128, %127 ], [ %130, %129 ]
  ret i64 %132
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i64 @203(i64 noundef %0) unnamed_addr #54 {
  %2 = trunc i64 %0 to i32
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %2, i32 273, i32 15, i32 15, i1 false)
  %4 = insertelement <2 x i32> undef, i32 %3, i64 0
  %5 = lshr i64 %0, 32
  %6 = trunc i64 %5 to i32
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %6, i32 273, i32 15, i32 15, i1 false)
  %8 = insertelement <2 x i32> %4, i32 %7, i64 1
  %9 = bitcast <2 x i32> %8 to i64
  %10 = and i64 %9, %0
  %11 = trunc i64 %10 to i32
  %12 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %11, i32 274, i32 15, i32 15, i1 false)
  %13 = insertelement <2 x i32> undef, i32 %12, i64 0
  %14 = lshr i64 %10, 32
  %15 = trunc i64 %14 to i32
  %16 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %15, i32 274, i32 15, i32 15, i1 false)
  %17 = insertelement <2 x i32> %13, i32 %16, i64 1
  %18 = bitcast <2 x i32> %17 to i64
  %19 = and i64 %10, %18
  %20 = trunc i64 %19 to i32
  %21 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %20, i32 276, i32 15, i32 15, i1 false)
  %22 = insertelement <2 x i32> undef, i32 %21, i64 0
  %23 = lshr i64 %19, 32
  %24 = trunc i64 %23 to i32
  %25 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %24, i32 276, i32 15, i32 15, i1 false)
  %26 = insertelement <2 x i32> %22, i32 %25, i64 1
  %27 = bitcast <2 x i32> %26 to i64
  %28 = and i64 %19, %27
  %29 = trunc i64 %28 to i32
  %30 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %29, i32 280, i32 15, i32 15, i1 false)
  %31 = insertelement <2 x i32> undef, i32 %30, i64 0
  %32 = lshr i64 %28, 32
  %33 = trunc i64 %32 to i32
  %34 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %33, i32 280, i32 15, i32 15, i1 false)
  %35 = insertelement <2 x i32> %31, i32 %34, i64 1
  %36 = bitcast <2 x i32> %35 to i64
  %37 = and i64 %28, %36
  %38 = trunc i64 %37 to i32
  %39 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %38, i32 322, i32 10, i32 15, i1 false)
  %40 = insertelement <2 x i32> undef, i32 %39, i64 0
  %41 = lshr i64 %37, 32
  %42 = trunc i64 %41 to i32
  %43 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %42, i32 322, i32 10, i32 15, i1 false)
  %44 = insertelement <2 x i32> %40, i32 %43, i64 1
  %45 = bitcast <2 x i32> %44 to i64
  %46 = and i64 %37, %45
  %47 = trunc i64 %46 to i32
  %48 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %47, i32 323, i32 12, i32 15, i1 false)
  %49 = insertelement <2 x i32> undef, i32 %48, i64 0
  %50 = lshr i64 %46, 32
  %51 = trunc i64 %50 to i32
  %52 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %51, i32 323, i32 12, i32 15, i1 false)
  %53 = insertelement <2 x i32> %49, i32 %52, i64 1
  %54 = bitcast <2 x i32> %53 to i64
  %55 = and i64 %46, %54
  ret i64 %55
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i64 @204(i64 noundef %0, i32 noundef %1) unnamed_addr #55 {
  %3 = trunc i64 %0 to i32
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %3, i32 273, i32 15, i32 15, i1 false)
  %5 = insertelement <2 x i32> undef, i32 %4, i64 0
  %6 = lshr i64 %0, 32
  %7 = trunc i64 %6 to i32
  %8 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %7, i32 273, i32 15, i32 15, i1 false)
  %9 = insertelement <2 x i32> %5, i32 %8, i64 1
  %10 = bitcast <2 x i32> %9 to i64
  %11 = and i64 %10, %0
  %12 = trunc i64 %11 to i32
  %13 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %12, i32 274, i32 15, i32 15, i1 false)
  %14 = insertelement <2 x i32> undef, i32 %13, i64 0
  %15 = lshr i64 %11, 32
  %16 = trunc i64 %15 to i32
  %17 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %16, i32 274, i32 15, i32 15, i1 false)
  %18 = insertelement <2 x i32> %14, i32 %17, i64 1
  %19 = bitcast <2 x i32> %18 to i64
  %20 = and i64 %11, %19
  %21 = trunc i64 %20 to i32
  %22 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %21, i32 276, i32 15, i32 15, i1 false)
  %23 = insertelement <2 x i32> undef, i32 %22, i64 0
  %24 = lshr i64 %20, 32
  %25 = trunc i64 %24 to i32
  %26 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %25, i32 276, i32 15, i32 15, i1 false)
  %27 = insertelement <2 x i32> %23, i32 %26, i64 1
  %28 = bitcast <2 x i32> %27 to i64
  %29 = and i64 %20, %28
  %30 = trunc i64 %29 to i32
  %31 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %30, i32 280, i32 15, i32 15, i1 false)
  %32 = insertelement <2 x i32> undef, i32 %31, i64 0
  %33 = lshr i64 %29, 32
  %34 = trunc i64 %33 to i32
  %35 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %34, i32 280, i32 15, i32 15, i1 false)
  %36 = insertelement <2 x i32> %32, i32 %35, i64 1
  %37 = bitcast <2 x i32> %36 to i64
  %38 = and i64 %29, %37
  %39 = trunc i64 %38 to i32
  %40 = tail call i32 @llvm.amdgcn.permlanex16(i32 -1, i32 %39, i32 -1, i32 -1, i1 false, i1 false)
  %41 = insertelement <2 x i32> undef, i32 %40, i64 0
  %42 = lshr i64 %38, 32
  %43 = trunc i64 %42 to i32
  %44 = tail call i32 @llvm.amdgcn.permlanex16(i32 -1, i32 %43, i32 -1, i32 -1, i1 false, i1 false)
  %45 = insertelement <2 x i32> %41, i32 %44, i64 1
  %46 = bitcast <2 x i32> %45 to i64
  %47 = and i32 %1, 16
  %48 = icmp eq i32 %47, 0
  %49 = select i1 %48, i64 -1, i64 %46
  %50 = and i64 %49, %38
  %51 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %52 = icmp eq i8 %51, 0
  br i1 %52, label %65, label %53

53:                                               ; preds = %2
  %54 = trunc i64 %50 to i32
  %55 = tail call i32 @llvm.amdgcn.readlane(i32 %54, i32 31)
  %56 = insertelement <2 x i32> undef, i32 %55, i64 0
  %57 = lshr i64 %50, 32
  %58 = trunc i64 %57 to i32
  %59 = tail call i32 @llvm.amdgcn.readlane(i32 %58, i32 31)
  %60 = insertelement <2 x i32> %56, i32 %59, i64 1
  %61 = bitcast <2 x i32> %60 to i64
  %62 = icmp ugt i32 %1, 31
  %63 = select i1 %62, i64 %61, i64 -1
  %64 = and i64 %63, %50
  br label %65

65:                                               ; preds = %53, %2
  %66 = phi i64 [ %64, %53 ], [ %50, %2 ]
  ret i64 %66
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i64 @205(i64 noundef %0) unnamed_addr #54 {
  %2 = trunc i64 %0 to i32
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %2, i32 312, i32 15, i32 15, i1 false)
  %4 = insertelement <2 x i32> undef, i32 %3, i64 0
  %5 = lshr i64 %0, 32
  %6 = trunc i64 %5 to i32
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %6, i32 312, i32 15, i32 15, i1 false)
  %8 = insertelement <2 x i32> %4, i32 %7, i64 1
  %9 = bitcast <2 x i32> %8 to i64
  ret i64 %9
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i64 @206(i64 noundef %0, i32 noundef %1) unnamed_addr #55 {
  %3 = trunc i64 %0 to i32
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %3, i32 273, i32 15, i32 15, i1 false)
  %5 = insertelement <2 x i32> undef, i32 %4, i64 0
  %6 = lshr i64 %0, 32
  %7 = trunc i64 %6 to i32
  %8 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %7, i32 273, i32 15, i32 15, i1 false)
  %9 = insertelement <2 x i32> %5, i32 %8, i64 1
  %10 = bitcast <2 x i32> %9 to i64
  %11 = tail call i32 @llvm.amdgcn.permlanex16(i32 -1, i32 %3, i32 -1, i32 -1, i1 false, i1 false)
  %12 = insertelement <2 x i32> undef, i32 %11, i64 0
  %13 = tail call i32 @llvm.amdgcn.permlanex16(i32 -1, i32 %7, i32 -1, i32 -1, i1 false, i1 false)
  %14 = insertelement <2 x i32> %12, i32 %13, i64 1
  %15 = bitcast <2 x i32> %14 to i64
  %16 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %30, label %18

18:                                               ; preds = %2
  %19 = tail call i32 @llvm.amdgcn.readlane(i32 %3, i32 31)
  %20 = insertelement <2 x i32> undef, i32 %19, i64 0
  %21 = tail call i32 @llvm.amdgcn.readlane(i32 %7, i32 31)
  %22 = insertelement <2 x i32> %20, i32 %21, i64 1
  %23 = bitcast <2 x i32> %22 to i64
  %24 = icmp eq i32 %1, 32
  %25 = select i1 %24, i64 %23, i64 %15
  %26 = and i32 %1, 31
  %27 = icmp eq i32 %26, 16
  %28 = or i1 %24, %27
  %29 = select i1 %28, i64 %25, i64 %10
  br label %33

30:                                               ; preds = %2
  %31 = icmp eq i32 %1, 16
  %32 = select i1 %31, i64 %15, i64 %10
  br label %33

33:                                               ; preds = %30, %18
  %34 = phi i64 [ %29, %18 ], [ %32, %30 ]
  ret i64 %34
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected i64 @__ockl_wfred_and_u64(i64 noundef %0) local_unnamed_addr #0 {
  %2 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %3 = icmp slt i32 %2, 8000
  br i1 %3, label %4, label %156

4:                                                ; preds = %1
  %5 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %10, label %7

7:                                                ; preds = %4
  %8 = tail call i64 @llvm.read_register.i64(metadata !36) #57
  %9 = icmp eq i64 %8, -1
  br label %13

10:                                               ; preds = %4
  %11 = tail call i32 @llvm.read_register.i32(metadata !10) #57
  %12 = icmp eq i32 %11, -1
  br label %13

13:                                               ; preds = %10, %7
  %14 = phi i1 [ %9, %7 ], [ %12, %10 ]
  %15 = trunc i64 %0 to i32
  %16 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %15, i32 32945)
  br i1 %14, label %17, label %74

17:                                               ; preds = %13
  %18 = insertelement <2 x i32> undef, i32 %16, i64 0
  %19 = lshr i64 %0, 32
  %20 = trunc i64 %19 to i32
  %21 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %20, i32 32945)
  %22 = insertelement <2 x i32> %18, i32 %21, i64 1
  %23 = bitcast <2 x i32> %22 to i64
  %24 = and i64 %23, %0
  %25 = trunc i64 %24 to i32
  %26 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %25, i32 32846)
  %27 = insertelement <2 x i32> undef, i32 %26, i64 0
  %28 = lshr i64 %24, 32
  %29 = trunc i64 %28 to i32
  %30 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %29, i32 32846)
  %31 = insertelement <2 x i32> %27, i32 %30, i64 1
  %32 = bitcast <2 x i32> %31 to i64
  %33 = and i64 %24, %32
  %34 = trunc i64 %33 to i32
  %35 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %34, i32 4127)
  %36 = insertelement <2 x i32> undef, i32 %35, i64 0
  %37 = lshr i64 %33, 32
  %38 = trunc i64 %37 to i32
  %39 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %38, i32 4127)
  %40 = insertelement <2 x i32> %36, i32 %39, i64 1
  %41 = bitcast <2 x i32> %40 to i64
  %42 = and i64 %33, %41
  %43 = trunc i64 %42 to i32
  %44 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %43, i32 8223)
  %45 = insertelement <2 x i32> undef, i32 %44, i64 0
  %46 = lshr i64 %42, 32
  %47 = trunc i64 %46 to i32
  %48 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %47, i32 8223)
  %49 = insertelement <2 x i32> %45, i32 %48, i64 1
  %50 = bitcast <2 x i32> %49 to i64
  %51 = and i64 %42, %50
  %52 = trunc i64 %51 to i32
  %53 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %52, i32 16415)
  %54 = insertelement <2 x i32> undef, i32 %53, i64 0
  %55 = lshr i64 %51, 32
  %56 = trunc i64 %55 to i32
  %57 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %56, i32 16415)
  %58 = insertelement <2 x i32> %54, i32 %57, i64 1
  %59 = bitcast <2 x i32> %58 to i64
  %60 = and i64 %51, %59
  %61 = trunc i64 %60 to i32
  %62 = tail call i32 @llvm.amdgcn.readlane(i32 %61, i32 0)
  %63 = insertelement <2 x i32> undef, i32 %62, i64 0
  %64 = lshr i64 %60, 32
  %65 = trunc i64 %64 to i32
  %66 = tail call i32 @llvm.amdgcn.readlane(i32 %65, i32 0)
  %67 = insertelement <2 x i32> %63, i32 %66, i64 1
  %68 = tail call i32 @llvm.amdgcn.readlane(i32 %61, i32 32)
  %69 = insertelement <2 x i32> undef, i32 %68, i64 0
  %70 = tail call i32 @llvm.amdgcn.readlane(i32 %65, i32 32)
  %71 = insertelement <2 x i32> %69, i32 %70, i64 1
  %72 = and <2 x i32> %71, %67
  %73 = bitcast <2 x i32> %72 to i64
  br label %162

74:                                               ; preds = %13
  %75 = lshr i64 %0, 32
  %76 = trunc i64 %75 to i32
  %77 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %76, i32 32945)
  %78 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 32945)
  %79 = xor i32 %78, -1
  %80 = or i32 %16, %79
  %81 = insertelement <2 x i32> undef, i32 %80, i64 0
  %82 = or i32 %77, %79
  %83 = insertelement <2 x i32> %81, i32 %82, i64 1
  %84 = bitcast <2 x i32> %83 to i64
  %85 = and i64 %84, %0
  %86 = trunc i64 %85 to i32
  %87 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %86, i32 32846)
  %88 = lshr i64 %85, 32
  %89 = trunc i64 %88 to i32
  %90 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %89, i32 32846)
  %91 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 32846)
  %92 = xor i32 %91, -1
  %93 = or i32 %87, %92
  %94 = insertelement <2 x i32> undef, i32 %93, i64 0
  %95 = or i32 %90, %92
  %96 = insertelement <2 x i32> %94, i32 %95, i64 1
  %97 = bitcast <2 x i32> %96 to i64
  %98 = and i64 %85, %97
  %99 = trunc i64 %98 to i32
  %100 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %99, i32 4127)
  %101 = lshr i64 %98, 32
  %102 = trunc i64 %101 to i32
  %103 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %102, i32 4127)
  %104 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 4127)
  %105 = xor i32 %104, -1
  %106 = or i32 %100, %105
  %107 = insertelement <2 x i32> undef, i32 %106, i64 0
  %108 = or i32 %103, %105
  %109 = insertelement <2 x i32> %107, i32 %108, i64 1
  %110 = bitcast <2 x i32> %109 to i64
  %111 = and i64 %98, %110
  %112 = trunc i64 %111 to i32
  %113 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %112, i32 8223)
  %114 = lshr i64 %111, 32
  %115 = trunc i64 %114 to i32
  %116 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %115, i32 8223)
  %117 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 8223)
  %118 = xor i32 %117, -1
  %119 = or i32 %113, %118
  %120 = insertelement <2 x i32> undef, i32 %119, i64 0
  %121 = or i32 %116, %118
  %122 = insertelement <2 x i32> %120, i32 %121, i64 1
  %123 = bitcast <2 x i32> %122 to i64
  %124 = and i64 %111, %123
  %125 = trunc i64 %124 to i32
  %126 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %125, i32 16415)
  %127 = lshr i64 %124, 32
  %128 = trunc i64 %127 to i32
  %129 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %128, i32 16415)
  %130 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 -1, i32 16415)
  %131 = xor i32 %130, -1
  %132 = or i32 %126, %131
  %133 = insertelement <2 x i32> undef, i32 %132, i64 0
  %134 = or i32 %129, %131
  %135 = insertelement <2 x i32> %133, i32 %134, i64 1
  %136 = bitcast <2 x i32> %135 to i64
  %137 = and i64 %124, %136
  %138 = trunc i64 %137 to i32
  %139 = tail call i32 @llvm.amdgcn.readlane(i32 %138, i32 32)
  %140 = insertelement <2 x i32> undef, i32 %139, i64 0
  %141 = lshr i64 %137, 32
  %142 = trunc i64 %141 to i32
  %143 = tail call i32 @llvm.amdgcn.readlane(i32 %142, i32 32)
  %144 = insertelement <2 x i32> %140, i32 %143, i64 1
  %145 = bitcast <2 x i32> %144 to i64
  %146 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %147 = and i32 %146, 1
  %148 = icmp eq i32 %147, 0
  %149 = select i1 %148, i64 -1, i64 %145
  %150 = tail call i32 @llvm.amdgcn.readlane(i32 %138, i32 0)
  %151 = insertelement <2 x i32> undef, i32 %150, i64 0
  %152 = tail call i32 @llvm.amdgcn.readlane(i32 %142, i32 0)
  %153 = insertelement <2 x i32> %151, i32 %152, i64 1
  %154 = bitcast <2 x i32> %153 to i64
  %155 = and i64 %149, %154
  br label %162

156:                                              ; preds = %1
  %157 = icmp ult i32 %2, 10000
  br i1 %157, label %158, label %160

158:                                              ; preds = %156
  %159 = tail call fastcc i64 @207(i64 noundef %0) #57
  br label %162

160:                                              ; preds = %156
  %161 = tail call fastcc i64 @208(i64 noundef %0) #57
  br label %162

162:                                              ; preds = %160, %158, %74, %17
  %163 = phi i64 [ %73, %17 ], [ %155, %74 ], [ %159, %158 ], [ %161, %160 ]
  ret i64 %163
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc i64 @207(i64 noundef %0) unnamed_addr #52 {
  %2 = trunc i64 %0 to i32
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %2, i32 257, i32 15, i32 15, i1 false)
  %4 = insertelement <2 x i32> undef, i32 %3, i64 0
  %5 = lshr i64 %0, 32
  %6 = trunc i64 %5 to i32
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %6, i32 257, i32 15, i32 15, i1 false)
  %8 = insertelement <2 x i32> %4, i32 %7, i64 1
  %9 = bitcast <2 x i32> %8 to i64
  %10 = and i64 %9, %0
  %11 = trunc i64 %10 to i32
  %12 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %11, i32 258, i32 15, i32 15, i1 false)
  %13 = insertelement <2 x i32> undef, i32 %12, i64 0
  %14 = lshr i64 %10, 32
  %15 = trunc i64 %14 to i32
  %16 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %15, i32 258, i32 15, i32 15, i1 false)
  %17 = insertelement <2 x i32> %13, i32 %16, i64 1
  %18 = bitcast <2 x i32> %17 to i64
  %19 = and i64 %10, %18
  %20 = trunc i64 %19 to i32
  %21 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %20, i32 260, i32 15, i32 15, i1 false)
  %22 = insertelement <2 x i32> undef, i32 %21, i64 0
  %23 = lshr i64 %19, 32
  %24 = trunc i64 %23 to i32
  %25 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %24, i32 260, i32 15, i32 15, i1 false)
  %26 = insertelement <2 x i32> %22, i32 %25, i64 1
  %27 = bitcast <2 x i32> %26 to i64
  %28 = and i64 %19, %27
  %29 = trunc i64 %28 to i32
  %30 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %29, i32 264, i32 15, i32 15, i1 false)
  %31 = insertelement <2 x i32> undef, i32 %30, i64 0
  %32 = lshr i64 %28, 32
  %33 = trunc i64 %32 to i32
  %34 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %33, i32 264, i32 15, i32 15, i1 false)
  %35 = insertelement <2 x i32> %31, i32 %34, i64 1
  %36 = bitcast <2 x i32> %35 to i64
  %37 = and i64 %28, %36
  %38 = trunc i64 %37 to i32
  %39 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %38, i32 304, i32 15, i32 15, i1 false)
  %40 = lshr i64 %37, 32
  %41 = trunc i64 %40 to i32
  %42 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %41, i32 304, i32 15, i32 15, i1 false)
  %43 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %39, i32 320, i32 15, i32 15, i1 false)
  %44 = insertelement <2 x i32> undef, i32 %43, i64 0
  %45 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %42, i32 320, i32 15, i32 15, i1 false)
  %46 = insertelement <2 x i32> %44, i32 %45, i64 1
  %47 = bitcast <2 x i32> %46 to i64
  %48 = and i64 %37, %47
  %49 = trunc i64 %48 to i32
  %50 = tail call i32 @llvm.amdgcn.readlane(i32 %49, i32 32)
  %51 = insertelement <2 x i32> undef, i32 %50, i64 0
  %52 = lshr i64 %48, 32
  %53 = trunc i64 %52 to i32
  %54 = tail call i32 @llvm.amdgcn.readlane(i32 %53, i32 32)
  %55 = insertelement <2 x i32> %51, i32 %54, i64 1
  %56 = bitcast <2 x i32> %55 to i64
  %57 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %58 = and i32 %57, 1
  %59 = icmp eq i32 %58, 0
  %60 = select i1 %59, i64 -1, i64 %56
  %61 = tail call i32 @llvm.amdgcn.readlane(i32 %49, i32 0)
  %62 = insertelement <2 x i32> undef, i32 %61, i64 0
  %63 = tail call i32 @llvm.amdgcn.readlane(i32 %53, i32 0)
  %64 = insertelement <2 x i32> %62, i32 %63, i64 1
  %65 = bitcast <2 x i32> %64 to i64
  %66 = and i64 %60, %65
  ret i64 %66
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc i64 @208(i64 noundef %0) unnamed_addr #53 {
  %2 = trunc i64 %0 to i32
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %2, i32 257, i32 15, i32 15, i1 false)
  %4 = insertelement <2 x i32> undef, i32 %3, i64 0
  %5 = lshr i64 %0, 32
  %6 = trunc i64 %5 to i32
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %6, i32 257, i32 15, i32 15, i1 false)
  %8 = insertelement <2 x i32> %4, i32 %7, i64 1
  %9 = bitcast <2 x i32> %8 to i64
  %10 = and i64 %9, %0
  %11 = trunc i64 %10 to i32
  %12 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %11, i32 258, i32 15, i32 15, i1 false)
  %13 = insertelement <2 x i32> undef, i32 %12, i64 0
  %14 = lshr i64 %10, 32
  %15 = trunc i64 %14 to i32
  %16 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %15, i32 258, i32 15, i32 15, i1 false)
  %17 = insertelement <2 x i32> %13, i32 %16, i64 1
  %18 = bitcast <2 x i32> %17 to i64
  %19 = and i64 %10, %18
  %20 = trunc i64 %19 to i32
  %21 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %20, i32 260, i32 15, i32 15, i1 false)
  %22 = insertelement <2 x i32> undef, i32 %21, i64 0
  %23 = lshr i64 %19, 32
  %24 = trunc i64 %23 to i32
  %25 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %24, i32 260, i32 15, i32 15, i1 false)
  %26 = insertelement <2 x i32> %22, i32 %25, i64 1
  %27 = bitcast <2 x i32> %26 to i64
  %28 = and i64 %19, %27
  %29 = trunc i64 %28 to i32
  %30 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %29, i32 264, i32 15, i32 15, i1 false)
  %31 = insertelement <2 x i32> undef, i32 %30, i64 0
  %32 = lshr i64 %28, 32
  %33 = trunc i64 %32 to i32
  %34 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %33, i32 264, i32 15, i32 15, i1 false)
  %35 = insertelement <2 x i32> %31, i32 %34, i64 1
  %36 = bitcast <2 x i32> %35 to i64
  %37 = and i64 %28, %36
  %38 = trunc i64 %37 to i32
  %39 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %38, i32 336, i32 15, i32 15, i1 false)
  %40 = insertelement <2 x i32> undef, i32 %39, i64 0
  %41 = lshr i64 %37, 32
  %42 = trunc i64 %41 to i32
  %43 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %42, i32 336, i32 15, i32 15, i1 false)
  %44 = insertelement <2 x i32> %40, i32 %43, i64 1
  %45 = tail call i32 @llvm.amdgcn.permlanex16(i32 -1, i32 %39, i32 0, i32 0, i1 false, i1 false)
  %46 = insertelement <2 x i32> undef, i32 %45, i64 0
  %47 = tail call i32 @llvm.amdgcn.permlanex16(i32 -1, i32 %43, i32 0, i32 0, i1 false, i1 false)
  %48 = insertelement <2 x i32> %46, i32 %47, i64 1
  %49 = and <2 x i32> %48, %44
  %50 = bitcast <2 x i32> %49 to i64
  %51 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %52 = icmp eq i8 %51, 0
  br i1 %52, label %71, label %53

53:                                               ; preds = %1
  %54 = extractelement <2 x i32> %49, i64 0
  %55 = tail call i32 @llvm.amdgcn.readlane(i32 %54, i32 32)
  %56 = insertelement <2 x i32> undef, i32 %55, i64 0
  %57 = extractelement <2 x i32> %49, i64 1
  %58 = tail call i32 @llvm.amdgcn.readlane(i32 %57, i32 32)
  %59 = insertelement <2 x i32> %56, i32 %58, i64 1
  %60 = bitcast <2 x i32> %59 to i64
  %61 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %62 = and i32 %61, 1
  %63 = icmp eq i32 %62, 0
  %64 = select i1 %63, i64 -1, i64 %60
  %65 = tail call i32 @llvm.amdgcn.readlane(i32 %54, i32 0)
  %66 = insertelement <2 x i32> undef, i32 %65, i64 0
  %67 = tail call i32 @llvm.amdgcn.readlane(i32 %57, i32 0)
  %68 = insertelement <2 x i32> %66, i32 %67, i64 1
  %69 = bitcast <2 x i32> %68 to i64
  %70 = and i64 %64, %69
  br label %71

71:                                               ; preds = %53, %1
  %72 = phi i64 [ %70, %53 ], [ %50, %1 ]
  ret i64 %72
}

; Function Attrs: convergent norecurse nounwind
define linkonce_odr protected i64 @__ockl_wfscan_and_u64(i64 noundef %0, i1 noundef zeroext %1) local_unnamed_addr #12 {
  %3 = tail call i32 @__ockl_lane_u32() #58
  %4 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %5 = icmp slt i32 %4, 8000
  br i1 %5, label %6, label %78

6:                                                ; preds = %2
  %7 = trunc i64 %0 to i32
  %8 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %7, i32 30)
  %9 = insertelement <2 x i32> undef, i32 %8, i64 0
  %10 = lshr i64 %0, 32
  %11 = trunc i64 %10 to i32
  %12 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %11, i32 30)
  %13 = insertelement <2 x i32> %9, i32 %12, i64 1
  %14 = bitcast <2 x i32> %13 to i64
  %15 = and i32 %3, 1
  %16 = icmp eq i32 %15, 0
  %17 = select i1 %16, i64 -1, i64 %14
  %18 = and i64 %17, %0
  %19 = trunc i64 %18 to i32
  %20 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %19, i32 60)
  %21 = insertelement <2 x i32> undef, i32 %20, i64 0
  %22 = lshr i64 %18, 32
  %23 = trunc i64 %22 to i32
  %24 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %23, i32 60)
  %25 = insertelement <2 x i32> %21, i32 %24, i64 1
  %26 = bitcast <2 x i32> %25 to i64
  %27 = and i32 %3, 2
  %28 = icmp eq i32 %27, 0
  %29 = select i1 %28, i64 -1, i64 %26
  %30 = and i64 %29, %18
  %31 = trunc i64 %30 to i32
  %32 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %31, i32 120)
  %33 = insertelement <2 x i32> undef, i32 %32, i64 0
  %34 = lshr i64 %30, 32
  %35 = trunc i64 %34 to i32
  %36 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %35, i32 120)
  %37 = insertelement <2 x i32> %33, i32 %36, i64 1
  %38 = bitcast <2 x i32> %37 to i64
  %39 = and i32 %3, 4
  %40 = icmp eq i32 %39, 0
  %41 = select i1 %40, i64 -1, i64 %38
  %42 = and i64 %41, %30
  %43 = trunc i64 %42 to i32
  %44 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %43, i32 240)
  %45 = insertelement <2 x i32> undef, i32 %44, i64 0
  %46 = lshr i64 %42, 32
  %47 = trunc i64 %46 to i32
  %48 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %47, i32 240)
  %49 = insertelement <2 x i32> %45, i32 %48, i64 1
  %50 = bitcast <2 x i32> %49 to i64
  %51 = and i32 %3, 8
  %52 = icmp eq i32 %51, 0
  %53 = select i1 %52, i64 -1, i64 %50
  %54 = and i64 %53, %42
  %55 = trunc i64 %54 to i32
  %56 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %55, i32 480)
  %57 = insertelement <2 x i32> undef, i32 %56, i64 0
  %58 = lshr i64 %54, 32
  %59 = trunc i64 %58 to i32
  %60 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %59, i32 480)
  %61 = insertelement <2 x i32> %57, i32 %60, i64 1
  %62 = bitcast <2 x i32> %61 to i64
  %63 = and i32 %3, 16
  %64 = icmp eq i32 %63, 0
  %65 = select i1 %64, i64 -1, i64 %62
  %66 = and i64 %65, %54
  %67 = trunc i64 %66 to i32
  %68 = tail call i32 @llvm.amdgcn.readlane(i32 %67, i32 31)
  %69 = insertelement <2 x i32> undef, i32 %68, i64 0
  %70 = lshr i64 %66, 32
  %71 = trunc i64 %70 to i32
  %72 = tail call i32 @llvm.amdgcn.readlane(i32 %71, i32 31)
  %73 = insertelement <2 x i32> %69, i32 %72, i64 1
  %74 = bitcast <2 x i32> %73 to i64
  %75 = icmp ugt i32 %3, 31
  %76 = select i1 %75, i64 %74, i64 -1
  %77 = and i64 %76, %66
  br label %84

78:                                               ; preds = %2
  %79 = icmp ult i32 %4, 10000
  br i1 %79, label %80, label %82

80:                                               ; preds = %78
  %81 = tail call fastcc i64 @209(i64 noundef %0) #57
  br label %84

82:                                               ; preds = %78
  %83 = tail call fastcc i64 @210(i64 noundef %0, i32 noundef %3) #57
  br label %84

84:                                               ; preds = %82, %80, %6
  %85 = phi i64 [ %77, %6 ], [ %81, %80 ], [ %83, %82 ]
  br i1 %1, label %131, label %86

86:                                               ; preds = %84
  br i1 %5, label %87, label %125

87:                                               ; preds = %86
  %88 = trunc i64 %85 to i32
  %89 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %88, i32 32912)
  %90 = insertelement <2 x i32> undef, i32 %89, i64 0
  %91 = lshr i64 %85, 32
  %92 = trunc i64 %91 to i32
  %93 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %92, i32 32912)
  %94 = insertelement <2 x i32> %90, i32 %93, i64 1
  %95 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %88, i32 120)
  %96 = insertelement <2 x i32> undef, i32 %95, i64 0
  %97 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %92, i32 120)
  %98 = insertelement <2 x i32> %96, i32 %97, i64 1
  %99 = and i32 %3, 7
  %100 = icmp eq i32 %99, 4
  %101 = select i1 %100, <2 x i32> %98, <2 x i32> %94
  %102 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %88, i32 240)
  %103 = insertelement <2 x i32> undef, i32 %102, i64 0
  %104 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %92, i32 240)
  %105 = insertelement <2 x i32> %103, i32 %104, i64 1
  %106 = and i32 %3, 15
  %107 = icmp eq i32 %106, 8
  %108 = select i1 %107, <2 x i32> %105, <2 x i32> %101
  %109 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %88, i32 480)
  %110 = insertelement <2 x i32> undef, i32 %109, i64 0
  %111 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %92, i32 480)
  %112 = insertelement <2 x i32> %110, i32 %111, i64 1
  %113 = and i32 %3, 31
  %114 = icmp eq i32 %113, 16
  %115 = select i1 %114, <2 x i32> %112, <2 x i32> %108
  %116 = tail call i32 @llvm.amdgcn.readlane(i32 %88, i32 31)
  %117 = insertelement <2 x i32> undef, i32 %116, i64 0
  %118 = tail call i32 @llvm.amdgcn.readlane(i32 %92, i32 31)
  %119 = insertelement <2 x i32> %117, i32 %118, i64 1
  %120 = icmp eq i32 %3, 32
  %121 = select i1 %120, <2 x i32> %119, <2 x i32> %115
  %122 = bitcast <2 x i32> %121 to i64
  %123 = icmp eq i32 %3, 0
  %124 = select i1 %123, i64 -1, i64 %122
  br label %131

125:                                              ; preds = %86
  %126 = icmp ult i32 %4, 10000
  br i1 %126, label %127, label %129

127:                                              ; preds = %125
  %128 = tail call fastcc i64 @211(i64 noundef %85) #57
  br label %131

129:                                              ; preds = %125
  %130 = tail call fastcc i64 @212(i64 noundef %85, i32 noundef %3) #57
  br label %131

131:                                              ; preds = %129, %127, %87, %84
  %132 = phi i64 [ %85, %84 ], [ %124, %87 ], [ %128, %127 ], [ %130, %129 ]
  ret i64 %132
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i64 @209(i64 noundef %0) unnamed_addr #54 {
  %2 = trunc i64 %0 to i32
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %2, i32 273, i32 15, i32 15, i1 false)
  %4 = insertelement <2 x i32> undef, i32 %3, i64 0
  %5 = lshr i64 %0, 32
  %6 = trunc i64 %5 to i32
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %6, i32 273, i32 15, i32 15, i1 false)
  %8 = insertelement <2 x i32> %4, i32 %7, i64 1
  %9 = bitcast <2 x i32> %8 to i64
  %10 = and i64 %9, %0
  %11 = trunc i64 %10 to i32
  %12 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %11, i32 274, i32 15, i32 15, i1 false)
  %13 = insertelement <2 x i32> undef, i32 %12, i64 0
  %14 = lshr i64 %10, 32
  %15 = trunc i64 %14 to i32
  %16 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %15, i32 274, i32 15, i32 15, i1 false)
  %17 = insertelement <2 x i32> %13, i32 %16, i64 1
  %18 = bitcast <2 x i32> %17 to i64
  %19 = and i64 %10, %18
  %20 = trunc i64 %19 to i32
  %21 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %20, i32 276, i32 15, i32 15, i1 false)
  %22 = insertelement <2 x i32> undef, i32 %21, i64 0
  %23 = lshr i64 %19, 32
  %24 = trunc i64 %23 to i32
  %25 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %24, i32 276, i32 15, i32 15, i1 false)
  %26 = insertelement <2 x i32> %22, i32 %25, i64 1
  %27 = bitcast <2 x i32> %26 to i64
  %28 = and i64 %19, %27
  %29 = trunc i64 %28 to i32
  %30 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %29, i32 280, i32 15, i32 15, i1 false)
  %31 = insertelement <2 x i32> undef, i32 %30, i64 0
  %32 = lshr i64 %28, 32
  %33 = trunc i64 %32 to i32
  %34 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %33, i32 280, i32 15, i32 15, i1 false)
  %35 = insertelement <2 x i32> %31, i32 %34, i64 1
  %36 = bitcast <2 x i32> %35 to i64
  %37 = and i64 %28, %36
  %38 = trunc i64 %37 to i32
  %39 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %38, i32 322, i32 10, i32 15, i1 false)
  %40 = insertelement <2 x i32> undef, i32 %39, i64 0
  %41 = lshr i64 %37, 32
  %42 = trunc i64 %41 to i32
  %43 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %42, i32 322, i32 10, i32 15, i1 false)
  %44 = insertelement <2 x i32> %40, i32 %43, i64 1
  %45 = bitcast <2 x i32> %44 to i64
  %46 = and i64 %37, %45
  %47 = trunc i64 %46 to i32
  %48 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %47, i32 323, i32 12, i32 15, i1 false)
  %49 = insertelement <2 x i32> undef, i32 %48, i64 0
  %50 = lshr i64 %46, 32
  %51 = trunc i64 %50 to i32
  %52 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %51, i32 323, i32 12, i32 15, i1 false)
  %53 = insertelement <2 x i32> %49, i32 %52, i64 1
  %54 = bitcast <2 x i32> %53 to i64
  %55 = and i64 %46, %54
  ret i64 %55
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i64 @210(i64 noundef %0, i32 noundef %1) unnamed_addr #55 {
  %3 = trunc i64 %0 to i32
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %3, i32 273, i32 15, i32 15, i1 false)
  %5 = insertelement <2 x i32> undef, i32 %4, i64 0
  %6 = lshr i64 %0, 32
  %7 = trunc i64 %6 to i32
  %8 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %7, i32 273, i32 15, i32 15, i1 false)
  %9 = insertelement <2 x i32> %5, i32 %8, i64 1
  %10 = bitcast <2 x i32> %9 to i64
  %11 = and i64 %10, %0
  %12 = trunc i64 %11 to i32
  %13 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %12, i32 274, i32 15, i32 15, i1 false)
  %14 = insertelement <2 x i32> undef, i32 %13, i64 0
  %15 = lshr i64 %11, 32
  %16 = trunc i64 %15 to i32
  %17 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %16, i32 274, i32 15, i32 15, i1 false)
  %18 = insertelement <2 x i32> %14, i32 %17, i64 1
  %19 = bitcast <2 x i32> %18 to i64
  %20 = and i64 %11, %19
  %21 = trunc i64 %20 to i32
  %22 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %21, i32 276, i32 15, i32 15, i1 false)
  %23 = insertelement <2 x i32> undef, i32 %22, i64 0
  %24 = lshr i64 %20, 32
  %25 = trunc i64 %24 to i32
  %26 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %25, i32 276, i32 15, i32 15, i1 false)
  %27 = insertelement <2 x i32> %23, i32 %26, i64 1
  %28 = bitcast <2 x i32> %27 to i64
  %29 = and i64 %20, %28
  %30 = trunc i64 %29 to i32
  %31 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %30, i32 280, i32 15, i32 15, i1 false)
  %32 = insertelement <2 x i32> undef, i32 %31, i64 0
  %33 = lshr i64 %29, 32
  %34 = trunc i64 %33 to i32
  %35 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %34, i32 280, i32 15, i32 15, i1 false)
  %36 = insertelement <2 x i32> %32, i32 %35, i64 1
  %37 = bitcast <2 x i32> %36 to i64
  %38 = and i64 %29, %37
  %39 = trunc i64 %38 to i32
  %40 = tail call i32 @llvm.amdgcn.permlanex16(i32 -1, i32 %39, i32 -1, i32 -1, i1 false, i1 false)
  %41 = insertelement <2 x i32> undef, i32 %40, i64 0
  %42 = lshr i64 %38, 32
  %43 = trunc i64 %42 to i32
  %44 = tail call i32 @llvm.amdgcn.permlanex16(i32 -1, i32 %43, i32 -1, i32 -1, i1 false, i1 false)
  %45 = insertelement <2 x i32> %41, i32 %44, i64 1
  %46 = bitcast <2 x i32> %45 to i64
  %47 = and i32 %1, 16
  %48 = icmp eq i32 %47, 0
  %49 = select i1 %48, i64 -1, i64 %46
  %50 = and i64 %49, %38
  %51 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %52 = icmp eq i8 %51, 0
  br i1 %52, label %65, label %53

53:                                               ; preds = %2
  %54 = trunc i64 %50 to i32
  %55 = tail call i32 @llvm.amdgcn.readlane(i32 %54, i32 31)
  %56 = insertelement <2 x i32> undef, i32 %55, i64 0
  %57 = lshr i64 %50, 32
  %58 = trunc i64 %57 to i32
  %59 = tail call i32 @llvm.amdgcn.readlane(i32 %58, i32 31)
  %60 = insertelement <2 x i32> %56, i32 %59, i64 1
  %61 = bitcast <2 x i32> %60 to i64
  %62 = icmp ugt i32 %1, 31
  %63 = select i1 %62, i64 %61, i64 -1
  %64 = and i64 %63, %50
  br label %65

65:                                               ; preds = %53, %2
  %66 = phi i64 [ %64, %53 ], [ %50, %2 ]
  ret i64 %66
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i64 @211(i64 noundef %0) unnamed_addr #54 {
  %2 = trunc i64 %0 to i32
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %2, i32 312, i32 15, i32 15, i1 false)
  %4 = insertelement <2 x i32> undef, i32 %3, i64 0
  %5 = lshr i64 %0, 32
  %6 = trunc i64 %5 to i32
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %6, i32 312, i32 15, i32 15, i1 false)
  %8 = insertelement <2 x i32> %4, i32 %7, i64 1
  %9 = bitcast <2 x i32> %8 to i64
  ret i64 %9
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i64 @212(i64 noundef %0, i32 noundef %1) unnamed_addr #55 {
  %3 = trunc i64 %0 to i32
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %3, i32 273, i32 15, i32 15, i1 false)
  %5 = insertelement <2 x i32> undef, i32 %4, i64 0
  %6 = lshr i64 %0, 32
  %7 = trunc i64 %6 to i32
  %8 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 -1, i32 %7, i32 273, i32 15, i32 15, i1 false)
  %9 = insertelement <2 x i32> %5, i32 %8, i64 1
  %10 = bitcast <2 x i32> %9 to i64
  %11 = tail call i32 @llvm.amdgcn.permlanex16(i32 -1, i32 %3, i32 -1, i32 -1, i1 false, i1 false)
  %12 = insertelement <2 x i32> undef, i32 %11, i64 0
  %13 = tail call i32 @llvm.amdgcn.permlanex16(i32 -1, i32 %7, i32 -1, i32 -1, i1 false, i1 false)
  %14 = insertelement <2 x i32> %12, i32 %13, i64 1
  %15 = bitcast <2 x i32> %14 to i64
  %16 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %30, label %18

18:                                               ; preds = %2
  %19 = tail call i32 @llvm.amdgcn.readlane(i32 %3, i32 31)
  %20 = insertelement <2 x i32> undef, i32 %19, i64 0
  %21 = tail call i32 @llvm.amdgcn.readlane(i32 %7, i32 31)
  %22 = insertelement <2 x i32> %20, i32 %21, i64 1
  %23 = bitcast <2 x i32> %22 to i64
  %24 = icmp eq i32 %1, 32
  %25 = select i1 %24, i64 %23, i64 %15
  %26 = and i32 %1, 31
  %27 = icmp eq i32 %26, 16
  %28 = or i1 %24, %27
  %29 = select i1 %28, i64 %25, i64 %10
  br label %33

30:                                               ; preds = %2
  %31 = icmp eq i32 %1, 16
  %32 = select i1 %31, i64 %15, i64 %10
  br label %33

33:                                               ; preds = %30, %18
  %34 = phi i64 [ %29, %18 ], [ %32, %30 ]
  ret i64 %34
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected i32 @__ockl_wfred_or_i32(i32 noundef %0) local_unnamed_addr #0 {
  %2 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %3 = icmp slt i32 %2, 8000
  br i1 %3, label %4, label %37

4:                                                ; preds = %1
  %5 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %10, label %7

7:                                                ; preds = %4
  %8 = tail call i64 @llvm.read_register.i64(metadata !36) #57
  %9 = icmp eq i64 %8, -1
  br label %13

10:                                               ; preds = %4
  %11 = tail call i32 @llvm.read_register.i32(metadata !10) #57
  %12 = icmp eq i32 %11, -1
  br label %13

13:                                               ; preds = %10, %7
  %14 = phi i1 [ %9, %7 ], [ %12, %10 ]
  %15 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %0, i32 32945)
  %16 = or i32 %15, %0
  %17 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %16, i32 32846)
  %18 = or i32 %16, %17
  %19 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %18, i32 4127)
  %20 = or i32 %18, %19
  %21 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %20, i32 8223)
  %22 = or i32 %20, %21
  %23 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %22, i32 16415)
  %24 = or i32 %22, %23
  br i1 %14, label %25, label %29

25:                                               ; preds = %13
  %26 = tail call i32 @llvm.amdgcn.readlane(i32 %24, i32 0)
  %27 = tail call i32 @llvm.amdgcn.readlane(i32 %24, i32 32)
  %28 = or i32 %27, %26
  br label %43

29:                                               ; preds = %13
  %30 = tail call i32 @llvm.amdgcn.readlane(i32 %24, i32 32)
  %31 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %32 = and i32 %31, 1
  %33 = icmp eq i32 %32, 0
  %34 = select i1 %33, i32 0, i32 %30
  %35 = tail call i32 @llvm.amdgcn.readlane(i32 %24, i32 0)
  %36 = or i32 %34, %35
  br label %43

37:                                               ; preds = %1
  %38 = icmp ult i32 %2, 10000
  br i1 %38, label %39, label %41

39:                                               ; preds = %37
  %40 = tail call fastcc i32 @213(i32 noundef %0) #57
  br label %43

41:                                               ; preds = %37
  %42 = tail call fastcc i32 @214(i32 noundef %0) #57
  br label %43

43:                                               ; preds = %41, %39, %29, %25
  %44 = phi i32 [ %28, %25 ], [ %36, %29 ], [ %40, %39 ], [ %42, %41 ]
  ret i32 %44
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc i32 @213(i32 noundef %0) unnamed_addr #52 {
  %2 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %0, i32 257, i32 15, i32 15, i1 true)
  %3 = or i32 %2, %0
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %3, i32 258, i32 15, i32 15, i1 true)
  %5 = or i32 %3, %4
  %6 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %5, i32 260, i32 15, i32 15, i1 true)
  %7 = or i32 %5, %6
  %8 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %7, i32 264, i32 15, i32 15, i1 true)
  %9 = or i32 %7, %8
  %10 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %9, i32 304, i32 15, i32 15, i1 true)
  %11 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %10, i32 320, i32 15, i32 15, i1 true)
  %12 = or i32 %11, %9
  %13 = tail call i32 @llvm.amdgcn.readlane(i32 %12, i32 32)
  %14 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %15 = and i32 %14, 1
  %16 = icmp eq i32 %15, 0
  %17 = select i1 %16, i32 0, i32 %13
  %18 = tail call i32 @llvm.amdgcn.readlane(i32 %12, i32 0)
  %19 = or i32 %17, %18
  ret i32 %19
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc i32 @214(i32 noundef %0) unnamed_addr #53 {
  %2 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %0, i32 257, i32 15, i32 15, i1 true)
  %3 = or i32 %2, %0
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %3, i32 258, i32 15, i32 15, i1 true)
  %5 = or i32 %3, %4
  %6 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %5, i32 260, i32 15, i32 15, i1 true)
  %7 = or i32 %5, %6
  %8 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %7, i32 264, i32 15, i32 15, i1 true)
  %9 = or i32 %7, %8
  %10 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %9, i32 336, i32 15, i32 15, i1 true)
  %11 = tail call i32 @llvm.amdgcn.permlanex16(i32 undef, i32 %10, i32 0, i32 0, i1 false, i1 true)
  %12 = or i32 %11, %10
  %13 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %23, label %15

15:                                               ; preds = %1
  %16 = tail call i32 @llvm.amdgcn.readlane(i32 %12, i32 32)
  %17 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %18 = and i32 %17, 1
  %19 = icmp eq i32 %18, 0
  %20 = select i1 %19, i32 0, i32 %16
  %21 = tail call i32 @llvm.amdgcn.readlane(i32 %12, i32 0)
  %22 = or i32 %20, %21
  br label %23

23:                                               ; preds = %15, %1
  %24 = phi i32 [ %22, %15 ], [ %12, %1 ]
  ret i32 %24
}

; Function Attrs: convergent norecurse nounwind
define linkonce_odr protected i32 @__ockl_wfscan_or_i32(i32 noundef %0, i1 noundef zeroext %1) local_unnamed_addr #12 {
  %3 = tail call i32 @__ockl_lane_u32() #58
  %4 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %5 = icmp slt i32 %4, 8000
  br i1 %5, label %6, label %36

6:                                                ; preds = %2
  %7 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %0, i32 30)
  %8 = and i32 %3, 1
  %9 = icmp eq i32 %8, 0
  %10 = select i1 %9, i32 0, i32 %7
  %11 = or i32 %10, %0
  %12 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %11, i32 60)
  %13 = and i32 %3, 2
  %14 = icmp eq i32 %13, 0
  %15 = select i1 %14, i32 0, i32 %12
  %16 = or i32 %11, %15
  %17 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %16, i32 120)
  %18 = and i32 %3, 4
  %19 = icmp eq i32 %18, 0
  %20 = select i1 %19, i32 0, i32 %17
  %21 = or i32 %16, %20
  %22 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %21, i32 240)
  %23 = and i32 %3, 8
  %24 = icmp eq i32 %23, 0
  %25 = select i1 %24, i32 0, i32 %22
  %26 = or i32 %21, %25
  %27 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %26, i32 480)
  %28 = and i32 %3, 16
  %29 = icmp eq i32 %28, 0
  %30 = select i1 %29, i32 0, i32 %27
  %31 = or i32 %26, %30
  %32 = tail call i32 @llvm.amdgcn.readlane(i32 %31, i32 31)
  %33 = icmp ugt i32 %3, 31
  %34 = select i1 %33, i32 %32, i32 0
  %35 = or i32 %31, %34
  br label %42

36:                                               ; preds = %2
  %37 = icmp ult i32 %4, 10000
  br i1 %37, label %38, label %40

38:                                               ; preds = %36
  %39 = tail call fastcc i32 @215(i32 noundef %0) #57
  br label %42

40:                                               ; preds = %36
  %41 = tail call fastcc i32 @216(i32 noundef %0, i32 noundef %3) #57
  br label %42

42:                                               ; preds = %40, %38, %6
  %43 = phi i32 [ %35, %6 ], [ %39, %38 ], [ %41, %40 ]
  br i1 %1, label %70, label %44

44:                                               ; preds = %42
  br i1 %5, label %45, label %64

45:                                               ; preds = %44
  %46 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %43, i32 32912)
  %47 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %43, i32 120)
  %48 = and i32 %3, 7
  %49 = icmp eq i32 %48, 4
  %50 = select i1 %49, i32 %47, i32 %46
  %51 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %43, i32 240)
  %52 = and i32 %3, 15
  %53 = icmp eq i32 %52, 8
  %54 = select i1 %53, i32 %51, i32 %50
  %55 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %43, i32 480)
  %56 = and i32 %3, 31
  %57 = icmp eq i32 %56, 16
  %58 = select i1 %57, i32 %55, i32 %54
  %59 = tail call i32 @llvm.amdgcn.readlane(i32 %43, i32 31)
  %60 = icmp eq i32 %3, 32
  %61 = select i1 %60, i32 %59, i32 %58
  %62 = icmp eq i32 %3, 0
  %63 = select i1 %62, i32 0, i32 %61
  br label %70

64:                                               ; preds = %44
  %65 = icmp ult i32 %4, 10000
  br i1 %65, label %66, label %68

66:                                               ; preds = %64
  %67 = tail call fastcc i32 @217(i32 noundef %43) #57
  br label %70

68:                                               ; preds = %64
  %69 = tail call fastcc i32 @218(i32 noundef %43, i32 noundef %3) #57
  br label %70

70:                                               ; preds = %68, %66, %45, %42
  %71 = phi i32 [ %43, %42 ], [ %63, %45 ], [ %67, %66 ], [ %69, %68 ]
  ret i32 %71
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i32 @215(i32 noundef %0) unnamed_addr #54 {
  %2 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %0, i32 273, i32 15, i32 15, i1 true)
  %3 = or i32 %2, %0
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %3, i32 274, i32 15, i32 15, i1 true)
  %5 = or i32 %3, %4
  %6 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %5, i32 276, i32 15, i32 15, i1 true)
  %7 = or i32 %5, %6
  %8 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %7, i32 280, i32 15, i32 15, i1 true)
  %9 = or i32 %7, %8
  %10 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %9, i32 322, i32 10, i32 15, i1 false)
  %11 = or i32 %9, %10
  %12 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %11, i32 323, i32 12, i32 15, i1 false)
  %13 = or i32 %11, %12
  ret i32 %13
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i32 @216(i32 noundef %0, i32 noundef %1) unnamed_addr #55 {
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %0, i32 273, i32 15, i32 15, i1 true)
  %4 = or i32 %3, %0
  %5 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %4, i32 274, i32 15, i32 15, i1 true)
  %6 = or i32 %4, %5
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %6, i32 276, i32 15, i32 15, i1 true)
  %8 = or i32 %6, %7
  %9 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %8, i32 280, i32 15, i32 15, i1 true)
  %10 = or i32 %8, %9
  %11 = tail call i32 @llvm.amdgcn.permlanex16(i32 undef, i32 %10, i32 -1, i32 -1, i1 false, i1 true)
  %12 = and i32 %1, 16
  %13 = icmp eq i32 %12, 0
  %14 = select i1 %13, i32 0, i32 %11
  %15 = or i32 %14, %10
  %16 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %23, label %18

18:                                               ; preds = %2
  %19 = icmp ugt i32 %1, 31
  %20 = tail call i32 @llvm.amdgcn.readlane(i32 %15, i32 31)
  %21 = select i1 %19, i32 %20, i32 0
  %22 = or i32 %21, %15
  br label %23

23:                                               ; preds = %18, %2
  %24 = phi i32 [ %22, %18 ], [ %15, %2 ]
  ret i32 %24
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i32 @217(i32 noundef %0) unnamed_addr #54 {
  %2 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %0, i32 312, i32 15, i32 15, i1 true)
  ret i32 %2
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i32 @218(i32 noundef %0, i32 noundef %1) unnamed_addr #55 {
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %0, i32 273, i32 15, i32 15, i1 true)
  %4 = tail call i32 @llvm.amdgcn.permlanex16(i32 undef, i32 %0, i32 -1, i32 -1, i1 false, i1 true)
  %5 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %15, label %7

7:                                                ; preds = %2
  %8 = tail call i32 @llvm.amdgcn.readlane(i32 %0, i32 31)
  %9 = icmp eq i32 %1, 32
  %10 = select i1 %9, i32 %8, i32 %4
  %11 = and i32 %1, 31
  %12 = icmp eq i32 %11, 16
  %13 = or i1 %9, %12
  %14 = select i1 %13, i32 %10, i32 %3
  br label %18

15:                                               ; preds = %2
  %16 = icmp eq i32 %1, 16
  %17 = select i1 %16, i32 %4, i32 %3
  br label %18

18:                                               ; preds = %15, %7
  %19 = phi i32 [ %14, %7 ], [ %17, %15 ]
  ret i32 %19
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected i32 @__ockl_wfred_or_u32(i32 noundef %0) local_unnamed_addr #0 {
  %2 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %3 = icmp slt i32 %2, 8000
  br i1 %3, label %4, label %37

4:                                                ; preds = %1
  %5 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %10, label %7

7:                                                ; preds = %4
  %8 = tail call i64 @llvm.read_register.i64(metadata !36) #57
  %9 = icmp eq i64 %8, -1
  br label %13

10:                                               ; preds = %4
  %11 = tail call i32 @llvm.read_register.i32(metadata !10) #57
  %12 = icmp eq i32 %11, -1
  br label %13

13:                                               ; preds = %10, %7
  %14 = phi i1 [ %9, %7 ], [ %12, %10 ]
  %15 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %0, i32 32945)
  %16 = or i32 %15, %0
  %17 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %16, i32 32846)
  %18 = or i32 %16, %17
  %19 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %18, i32 4127)
  %20 = or i32 %18, %19
  %21 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %20, i32 8223)
  %22 = or i32 %20, %21
  %23 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %22, i32 16415)
  %24 = or i32 %22, %23
  br i1 %14, label %25, label %29

25:                                               ; preds = %13
  %26 = tail call i32 @llvm.amdgcn.readlane(i32 %24, i32 0)
  %27 = tail call i32 @llvm.amdgcn.readlane(i32 %24, i32 32)
  %28 = or i32 %27, %26
  br label %43

29:                                               ; preds = %13
  %30 = tail call i32 @llvm.amdgcn.readlane(i32 %24, i32 32)
  %31 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %32 = and i32 %31, 1
  %33 = icmp eq i32 %32, 0
  %34 = select i1 %33, i32 0, i32 %30
  %35 = tail call i32 @llvm.amdgcn.readlane(i32 %24, i32 0)
  %36 = or i32 %34, %35
  br label %43

37:                                               ; preds = %1
  %38 = icmp ult i32 %2, 10000
  br i1 %38, label %39, label %41

39:                                               ; preds = %37
  %40 = tail call fastcc i32 @219(i32 noundef %0) #57
  br label %43

41:                                               ; preds = %37
  %42 = tail call fastcc i32 @220(i32 noundef %0) #57
  br label %43

43:                                               ; preds = %41, %39, %29, %25
  %44 = phi i32 [ %28, %25 ], [ %36, %29 ], [ %40, %39 ], [ %42, %41 ]
  ret i32 %44
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc i32 @219(i32 noundef %0) unnamed_addr #52 {
  %2 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %0, i32 257, i32 15, i32 15, i1 true)
  %3 = or i32 %2, %0
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %3, i32 258, i32 15, i32 15, i1 true)
  %5 = or i32 %3, %4
  %6 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %5, i32 260, i32 15, i32 15, i1 true)
  %7 = or i32 %5, %6
  %8 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %7, i32 264, i32 15, i32 15, i1 true)
  %9 = or i32 %7, %8
  %10 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %9, i32 304, i32 15, i32 15, i1 true)
  %11 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %10, i32 320, i32 15, i32 15, i1 true)
  %12 = or i32 %11, %9
  %13 = tail call i32 @llvm.amdgcn.readlane(i32 %12, i32 32)
  %14 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %15 = and i32 %14, 1
  %16 = icmp eq i32 %15, 0
  %17 = select i1 %16, i32 0, i32 %13
  %18 = tail call i32 @llvm.amdgcn.readlane(i32 %12, i32 0)
  %19 = or i32 %17, %18
  ret i32 %19
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc i32 @220(i32 noundef %0) unnamed_addr #53 {
  %2 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %0, i32 257, i32 15, i32 15, i1 true)
  %3 = or i32 %2, %0
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %3, i32 258, i32 15, i32 15, i1 true)
  %5 = or i32 %3, %4
  %6 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %5, i32 260, i32 15, i32 15, i1 true)
  %7 = or i32 %5, %6
  %8 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %7, i32 264, i32 15, i32 15, i1 true)
  %9 = or i32 %7, %8
  %10 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %9, i32 336, i32 15, i32 15, i1 true)
  %11 = tail call i32 @llvm.amdgcn.permlanex16(i32 undef, i32 %10, i32 0, i32 0, i1 false, i1 true)
  %12 = or i32 %11, %10
  %13 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %23, label %15

15:                                               ; preds = %1
  %16 = tail call i32 @llvm.amdgcn.readlane(i32 %12, i32 32)
  %17 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %18 = and i32 %17, 1
  %19 = icmp eq i32 %18, 0
  %20 = select i1 %19, i32 0, i32 %16
  %21 = tail call i32 @llvm.amdgcn.readlane(i32 %12, i32 0)
  %22 = or i32 %20, %21
  br label %23

23:                                               ; preds = %15, %1
  %24 = phi i32 [ %22, %15 ], [ %12, %1 ]
  ret i32 %24
}

; Function Attrs: convergent norecurse nounwind
define linkonce_odr protected i32 @__ockl_wfscan_or_u32(i32 noundef %0, i1 noundef zeroext %1) local_unnamed_addr #12 {
  %3 = tail call i32 @__ockl_lane_u32() #58
  %4 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %5 = icmp slt i32 %4, 8000
  br i1 %5, label %6, label %36

6:                                                ; preds = %2
  %7 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %0, i32 30)
  %8 = and i32 %3, 1
  %9 = icmp eq i32 %8, 0
  %10 = select i1 %9, i32 0, i32 %7
  %11 = or i32 %10, %0
  %12 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %11, i32 60)
  %13 = and i32 %3, 2
  %14 = icmp eq i32 %13, 0
  %15 = select i1 %14, i32 0, i32 %12
  %16 = or i32 %11, %15
  %17 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %16, i32 120)
  %18 = and i32 %3, 4
  %19 = icmp eq i32 %18, 0
  %20 = select i1 %19, i32 0, i32 %17
  %21 = or i32 %16, %20
  %22 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %21, i32 240)
  %23 = and i32 %3, 8
  %24 = icmp eq i32 %23, 0
  %25 = select i1 %24, i32 0, i32 %22
  %26 = or i32 %21, %25
  %27 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %26, i32 480)
  %28 = and i32 %3, 16
  %29 = icmp eq i32 %28, 0
  %30 = select i1 %29, i32 0, i32 %27
  %31 = or i32 %26, %30
  %32 = tail call i32 @llvm.amdgcn.readlane(i32 %31, i32 31)
  %33 = icmp ugt i32 %3, 31
  %34 = select i1 %33, i32 %32, i32 0
  %35 = or i32 %31, %34
  br label %42

36:                                               ; preds = %2
  %37 = icmp ult i32 %4, 10000
  br i1 %37, label %38, label %40

38:                                               ; preds = %36
  %39 = tail call fastcc i32 @221(i32 noundef %0) #57
  br label %42

40:                                               ; preds = %36
  %41 = tail call fastcc i32 @222(i32 noundef %0, i32 noundef %3) #57
  br label %42

42:                                               ; preds = %40, %38, %6
  %43 = phi i32 [ %35, %6 ], [ %39, %38 ], [ %41, %40 ]
  br i1 %1, label %70, label %44

44:                                               ; preds = %42
  br i1 %5, label %45, label %64

45:                                               ; preds = %44
  %46 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %43, i32 32912)
  %47 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %43, i32 120)
  %48 = and i32 %3, 7
  %49 = icmp eq i32 %48, 4
  %50 = select i1 %49, i32 %47, i32 %46
  %51 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %43, i32 240)
  %52 = and i32 %3, 15
  %53 = icmp eq i32 %52, 8
  %54 = select i1 %53, i32 %51, i32 %50
  %55 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %43, i32 480)
  %56 = and i32 %3, 31
  %57 = icmp eq i32 %56, 16
  %58 = select i1 %57, i32 %55, i32 %54
  %59 = tail call i32 @llvm.amdgcn.readlane(i32 %43, i32 31)
  %60 = icmp eq i32 %3, 32
  %61 = select i1 %60, i32 %59, i32 %58
  %62 = icmp eq i32 %3, 0
  %63 = select i1 %62, i32 0, i32 %61
  br label %70

64:                                               ; preds = %44
  %65 = icmp ult i32 %4, 10000
  br i1 %65, label %66, label %68

66:                                               ; preds = %64
  %67 = tail call fastcc i32 @223(i32 noundef %43) #57
  br label %70

68:                                               ; preds = %64
  %69 = tail call fastcc i32 @224(i32 noundef %43, i32 noundef %3) #57
  br label %70

70:                                               ; preds = %68, %66, %45, %42
  %71 = phi i32 [ %43, %42 ], [ %63, %45 ], [ %67, %66 ], [ %69, %68 ]
  ret i32 %71
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i32 @221(i32 noundef %0) unnamed_addr #54 {
  %2 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %0, i32 273, i32 15, i32 15, i1 true)
  %3 = or i32 %2, %0
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %3, i32 274, i32 15, i32 15, i1 true)
  %5 = or i32 %3, %4
  %6 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %5, i32 276, i32 15, i32 15, i1 true)
  %7 = or i32 %5, %6
  %8 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %7, i32 280, i32 15, i32 15, i1 true)
  %9 = or i32 %7, %8
  %10 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %9, i32 322, i32 10, i32 15, i1 false)
  %11 = or i32 %9, %10
  %12 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %11, i32 323, i32 12, i32 15, i1 false)
  %13 = or i32 %11, %12
  ret i32 %13
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i32 @222(i32 noundef %0, i32 noundef %1) unnamed_addr #55 {
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %0, i32 273, i32 15, i32 15, i1 true)
  %4 = or i32 %3, %0
  %5 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %4, i32 274, i32 15, i32 15, i1 true)
  %6 = or i32 %4, %5
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %6, i32 276, i32 15, i32 15, i1 true)
  %8 = or i32 %6, %7
  %9 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %8, i32 280, i32 15, i32 15, i1 true)
  %10 = or i32 %8, %9
  %11 = tail call i32 @llvm.amdgcn.permlanex16(i32 undef, i32 %10, i32 -1, i32 -1, i1 false, i1 true)
  %12 = and i32 %1, 16
  %13 = icmp eq i32 %12, 0
  %14 = select i1 %13, i32 0, i32 %11
  %15 = or i32 %14, %10
  %16 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %23, label %18

18:                                               ; preds = %2
  %19 = icmp ugt i32 %1, 31
  %20 = tail call i32 @llvm.amdgcn.readlane(i32 %15, i32 31)
  %21 = select i1 %19, i32 %20, i32 0
  %22 = or i32 %21, %15
  br label %23

23:                                               ; preds = %18, %2
  %24 = phi i32 [ %22, %18 ], [ %15, %2 ]
  ret i32 %24
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i32 @223(i32 noundef %0) unnamed_addr #54 {
  %2 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %0, i32 312, i32 15, i32 15, i1 true)
  ret i32 %2
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i32 @224(i32 noundef %0, i32 noundef %1) unnamed_addr #55 {
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %0, i32 273, i32 15, i32 15, i1 true)
  %4 = tail call i32 @llvm.amdgcn.permlanex16(i32 undef, i32 %0, i32 -1, i32 -1, i1 false, i1 true)
  %5 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %15, label %7

7:                                                ; preds = %2
  %8 = tail call i32 @llvm.amdgcn.readlane(i32 %0, i32 31)
  %9 = icmp eq i32 %1, 32
  %10 = select i1 %9, i32 %8, i32 %4
  %11 = and i32 %1, 31
  %12 = icmp eq i32 %11, 16
  %13 = or i1 %9, %12
  %14 = select i1 %13, i32 %10, i32 %3
  br label %18

15:                                               ; preds = %2
  %16 = icmp eq i32 %1, 16
  %17 = select i1 %16, i32 %4, i32 %3
  br label %18

18:                                               ; preds = %15, %7
  %19 = phi i32 [ %14, %7 ], [ %17, %15 ]
  ret i32 %19
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected i64 @__ockl_wfred_or_i64(i64 noundef %0) local_unnamed_addr #0 {
  %2 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %3 = icmp slt i32 %2, 8000
  br i1 %3, label %4, label %92

4:                                                ; preds = %1
  %5 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %10, label %7

7:                                                ; preds = %4
  %8 = tail call i64 @llvm.read_register.i64(metadata !36) #57
  %9 = icmp eq i64 %8, -1
  br label %13

10:                                               ; preds = %4
  %11 = tail call i32 @llvm.read_register.i32(metadata !10) #57
  %12 = icmp eq i32 %11, -1
  br label %13

13:                                               ; preds = %10, %7
  %14 = phi i1 [ %9, %7 ], [ %12, %10 ]
  %15 = trunc i64 %0 to i32
  %16 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %15, i32 32945)
  %17 = insertelement <2 x i32> undef, i32 %16, i64 0
  %18 = lshr i64 %0, 32
  %19 = trunc i64 %18 to i32
  %20 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %19, i32 32945)
  %21 = insertelement <2 x i32> %17, i32 %20, i64 1
  %22 = bitcast <2 x i32> %21 to i64
  %23 = or i64 %22, %0
  %24 = trunc i64 %23 to i32
  %25 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %24, i32 32846)
  %26 = insertelement <2 x i32> undef, i32 %25, i64 0
  %27 = lshr i64 %23, 32
  %28 = trunc i64 %27 to i32
  %29 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %28, i32 32846)
  %30 = insertelement <2 x i32> %26, i32 %29, i64 1
  %31 = bitcast <2 x i32> %30 to i64
  %32 = or i64 %23, %31
  %33 = trunc i64 %32 to i32
  %34 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %33, i32 4127)
  %35 = insertelement <2 x i32> undef, i32 %34, i64 0
  %36 = lshr i64 %32, 32
  %37 = trunc i64 %36 to i32
  %38 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %37, i32 4127)
  %39 = insertelement <2 x i32> %35, i32 %38, i64 1
  %40 = bitcast <2 x i32> %39 to i64
  %41 = or i64 %32, %40
  %42 = trunc i64 %41 to i32
  %43 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %42, i32 8223)
  %44 = insertelement <2 x i32> undef, i32 %43, i64 0
  %45 = lshr i64 %41, 32
  %46 = trunc i64 %45 to i32
  %47 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %46, i32 8223)
  %48 = insertelement <2 x i32> %44, i32 %47, i64 1
  %49 = bitcast <2 x i32> %48 to i64
  %50 = or i64 %41, %49
  %51 = trunc i64 %50 to i32
  %52 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %51, i32 16415)
  %53 = insertelement <2 x i32> undef, i32 %52, i64 0
  %54 = lshr i64 %50, 32
  %55 = trunc i64 %54 to i32
  %56 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %55, i32 16415)
  %57 = insertelement <2 x i32> %53, i32 %56, i64 1
  %58 = bitcast <2 x i32> %57 to i64
  %59 = or i64 %50, %58
  %60 = trunc i64 %59 to i32
  br i1 %14, label %61, label %74

61:                                               ; preds = %13
  %62 = tail call i32 @llvm.amdgcn.readlane(i32 %60, i32 0)
  %63 = insertelement <2 x i32> undef, i32 %62, i64 0
  %64 = lshr i64 %59, 32
  %65 = trunc i64 %64 to i32
  %66 = tail call i32 @llvm.amdgcn.readlane(i32 %65, i32 0)
  %67 = insertelement <2 x i32> %63, i32 %66, i64 1
  %68 = tail call i32 @llvm.amdgcn.readlane(i32 %60, i32 32)
  %69 = insertelement <2 x i32> undef, i32 %68, i64 0
  %70 = tail call i32 @llvm.amdgcn.readlane(i32 %65, i32 32)
  %71 = insertelement <2 x i32> %69, i32 %70, i64 1
  %72 = or <2 x i32> %71, %67
  %73 = bitcast <2 x i32> %72 to i64
  br label %98

74:                                               ; preds = %13
  %75 = tail call i32 @llvm.amdgcn.readlane(i32 %60, i32 32)
  %76 = insertelement <2 x i32> undef, i32 %75, i64 0
  %77 = lshr i64 %59, 32
  %78 = trunc i64 %77 to i32
  %79 = tail call i32 @llvm.amdgcn.readlane(i32 %78, i32 32)
  %80 = insertelement <2 x i32> %76, i32 %79, i64 1
  %81 = bitcast <2 x i32> %80 to i64
  %82 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %83 = and i32 %82, 1
  %84 = icmp eq i32 %83, 0
  %85 = select i1 %84, i64 0, i64 %81
  %86 = tail call i32 @llvm.amdgcn.readlane(i32 %60, i32 0)
  %87 = insertelement <2 x i32> undef, i32 %86, i64 0
  %88 = tail call i32 @llvm.amdgcn.readlane(i32 %78, i32 0)
  %89 = insertelement <2 x i32> %87, i32 %88, i64 1
  %90 = bitcast <2 x i32> %89 to i64
  %91 = or i64 %85, %90
  br label %98

92:                                               ; preds = %1
  %93 = icmp ult i32 %2, 10000
  br i1 %93, label %94, label %96

94:                                               ; preds = %92
  %95 = tail call fastcc i64 @225(i64 noundef %0) #57
  br label %98

96:                                               ; preds = %92
  %97 = tail call fastcc i64 @226(i64 noundef %0) #57
  br label %98

98:                                               ; preds = %96, %94, %74, %61
  %99 = phi i64 [ %73, %61 ], [ %91, %74 ], [ %95, %94 ], [ %97, %96 ]
  ret i64 %99
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc i64 @225(i64 noundef %0) unnamed_addr #52 {
  %2 = trunc i64 %0 to i32
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %2, i32 257, i32 15, i32 15, i1 true)
  %4 = insertelement <2 x i32> undef, i32 %3, i64 0
  %5 = lshr i64 %0, 32
  %6 = trunc i64 %5 to i32
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %6, i32 257, i32 15, i32 15, i1 true)
  %8 = insertelement <2 x i32> %4, i32 %7, i64 1
  %9 = bitcast <2 x i32> %8 to i64
  %10 = or i64 %9, %0
  %11 = trunc i64 %10 to i32
  %12 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %11, i32 258, i32 15, i32 15, i1 true)
  %13 = insertelement <2 x i32> undef, i32 %12, i64 0
  %14 = lshr i64 %10, 32
  %15 = trunc i64 %14 to i32
  %16 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %15, i32 258, i32 15, i32 15, i1 true)
  %17 = insertelement <2 x i32> %13, i32 %16, i64 1
  %18 = bitcast <2 x i32> %17 to i64
  %19 = or i64 %10, %18
  %20 = trunc i64 %19 to i32
  %21 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %20, i32 260, i32 15, i32 15, i1 true)
  %22 = insertelement <2 x i32> undef, i32 %21, i64 0
  %23 = lshr i64 %19, 32
  %24 = trunc i64 %23 to i32
  %25 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %24, i32 260, i32 15, i32 15, i1 true)
  %26 = insertelement <2 x i32> %22, i32 %25, i64 1
  %27 = bitcast <2 x i32> %26 to i64
  %28 = or i64 %19, %27
  %29 = trunc i64 %28 to i32
  %30 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %29, i32 264, i32 15, i32 15, i1 true)
  %31 = insertelement <2 x i32> undef, i32 %30, i64 0
  %32 = lshr i64 %28, 32
  %33 = trunc i64 %32 to i32
  %34 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %33, i32 264, i32 15, i32 15, i1 true)
  %35 = insertelement <2 x i32> %31, i32 %34, i64 1
  %36 = bitcast <2 x i32> %35 to i64
  %37 = or i64 %28, %36
  %38 = trunc i64 %37 to i32
  %39 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %38, i32 304, i32 15, i32 15, i1 true)
  %40 = lshr i64 %37, 32
  %41 = trunc i64 %40 to i32
  %42 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %41, i32 304, i32 15, i32 15, i1 true)
  %43 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %39, i32 320, i32 15, i32 15, i1 true)
  %44 = insertelement <2 x i32> undef, i32 %43, i64 0
  %45 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %42, i32 320, i32 15, i32 15, i1 true)
  %46 = insertelement <2 x i32> %44, i32 %45, i64 1
  %47 = bitcast <2 x i32> %46 to i64
  %48 = or i64 %37, %47
  %49 = trunc i64 %48 to i32
  %50 = tail call i32 @llvm.amdgcn.readlane(i32 %49, i32 32)
  %51 = insertelement <2 x i32> undef, i32 %50, i64 0
  %52 = lshr i64 %48, 32
  %53 = trunc i64 %52 to i32
  %54 = tail call i32 @llvm.amdgcn.readlane(i32 %53, i32 32)
  %55 = insertelement <2 x i32> %51, i32 %54, i64 1
  %56 = bitcast <2 x i32> %55 to i64
  %57 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %58 = and i32 %57, 1
  %59 = icmp eq i32 %58, 0
  %60 = select i1 %59, i64 0, i64 %56
  %61 = tail call i32 @llvm.amdgcn.readlane(i32 %49, i32 0)
  %62 = insertelement <2 x i32> undef, i32 %61, i64 0
  %63 = tail call i32 @llvm.amdgcn.readlane(i32 %53, i32 0)
  %64 = insertelement <2 x i32> %62, i32 %63, i64 1
  %65 = bitcast <2 x i32> %64 to i64
  %66 = or i64 %60, %65
  ret i64 %66
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc i64 @226(i64 noundef %0) unnamed_addr #53 {
  %2 = trunc i64 %0 to i32
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %2, i32 257, i32 15, i32 15, i1 true)
  %4 = insertelement <2 x i32> undef, i32 %3, i64 0
  %5 = lshr i64 %0, 32
  %6 = trunc i64 %5 to i32
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %6, i32 257, i32 15, i32 15, i1 true)
  %8 = insertelement <2 x i32> %4, i32 %7, i64 1
  %9 = bitcast <2 x i32> %8 to i64
  %10 = or i64 %9, %0
  %11 = trunc i64 %10 to i32
  %12 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %11, i32 258, i32 15, i32 15, i1 true)
  %13 = insertelement <2 x i32> undef, i32 %12, i64 0
  %14 = lshr i64 %10, 32
  %15 = trunc i64 %14 to i32
  %16 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %15, i32 258, i32 15, i32 15, i1 true)
  %17 = insertelement <2 x i32> %13, i32 %16, i64 1
  %18 = bitcast <2 x i32> %17 to i64
  %19 = or i64 %10, %18
  %20 = trunc i64 %19 to i32
  %21 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %20, i32 260, i32 15, i32 15, i1 true)
  %22 = insertelement <2 x i32> undef, i32 %21, i64 0
  %23 = lshr i64 %19, 32
  %24 = trunc i64 %23 to i32
  %25 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %24, i32 260, i32 15, i32 15, i1 true)
  %26 = insertelement <2 x i32> %22, i32 %25, i64 1
  %27 = bitcast <2 x i32> %26 to i64
  %28 = or i64 %19, %27
  %29 = trunc i64 %28 to i32
  %30 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %29, i32 264, i32 15, i32 15, i1 true)
  %31 = insertelement <2 x i32> undef, i32 %30, i64 0
  %32 = lshr i64 %28, 32
  %33 = trunc i64 %32 to i32
  %34 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %33, i32 264, i32 15, i32 15, i1 true)
  %35 = insertelement <2 x i32> %31, i32 %34, i64 1
  %36 = bitcast <2 x i32> %35 to i64
  %37 = or i64 %28, %36
  %38 = trunc i64 %37 to i32
  %39 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %38, i32 336, i32 15, i32 15, i1 true)
  %40 = insertelement <2 x i32> undef, i32 %39, i64 0
  %41 = lshr i64 %37, 32
  %42 = trunc i64 %41 to i32
  %43 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %42, i32 336, i32 15, i32 15, i1 true)
  %44 = insertelement <2 x i32> %40, i32 %43, i64 1
  %45 = tail call i32 @llvm.amdgcn.permlanex16(i32 undef, i32 %39, i32 0, i32 0, i1 false, i1 true)
  %46 = insertelement <2 x i32> undef, i32 %45, i64 0
  %47 = tail call i32 @llvm.amdgcn.permlanex16(i32 undef, i32 %43, i32 0, i32 0, i1 false, i1 true)
  %48 = insertelement <2 x i32> %46, i32 %47, i64 1
  %49 = or <2 x i32> %48, %44
  %50 = bitcast <2 x i32> %49 to i64
  %51 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %52 = icmp eq i8 %51, 0
  br i1 %52, label %71, label %53

53:                                               ; preds = %1
  %54 = extractelement <2 x i32> %49, i64 0
  %55 = tail call i32 @llvm.amdgcn.readlane(i32 %54, i32 32)
  %56 = insertelement <2 x i32> undef, i32 %55, i64 0
  %57 = extractelement <2 x i32> %49, i64 1
  %58 = tail call i32 @llvm.amdgcn.readlane(i32 %57, i32 32)
  %59 = insertelement <2 x i32> %56, i32 %58, i64 1
  %60 = bitcast <2 x i32> %59 to i64
  %61 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %62 = and i32 %61, 1
  %63 = icmp eq i32 %62, 0
  %64 = select i1 %63, i64 0, i64 %60
  %65 = tail call i32 @llvm.amdgcn.readlane(i32 %54, i32 0)
  %66 = insertelement <2 x i32> undef, i32 %65, i64 0
  %67 = tail call i32 @llvm.amdgcn.readlane(i32 %57, i32 0)
  %68 = insertelement <2 x i32> %66, i32 %67, i64 1
  %69 = bitcast <2 x i32> %68 to i64
  %70 = or i64 %64, %69
  br label %71

71:                                               ; preds = %53, %1
  %72 = phi i64 [ %70, %53 ], [ %50, %1 ]
  ret i64 %72
}

; Function Attrs: convergent norecurse nounwind
define linkonce_odr protected i64 @__ockl_wfscan_or_i64(i64 noundef %0, i1 noundef zeroext %1) local_unnamed_addr #12 {
  %3 = tail call i32 @__ockl_lane_u32() #58
  %4 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %5 = icmp slt i32 %4, 8000
  br i1 %5, label %6, label %78

6:                                                ; preds = %2
  %7 = trunc i64 %0 to i32
  %8 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %7, i32 30)
  %9 = insertelement <2 x i32> undef, i32 %8, i64 0
  %10 = lshr i64 %0, 32
  %11 = trunc i64 %10 to i32
  %12 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %11, i32 30)
  %13 = insertelement <2 x i32> %9, i32 %12, i64 1
  %14 = bitcast <2 x i32> %13 to i64
  %15 = and i32 %3, 1
  %16 = icmp eq i32 %15, 0
  %17 = select i1 %16, i64 0, i64 %14
  %18 = or i64 %17, %0
  %19 = trunc i64 %18 to i32
  %20 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %19, i32 60)
  %21 = insertelement <2 x i32> undef, i32 %20, i64 0
  %22 = lshr i64 %18, 32
  %23 = trunc i64 %22 to i32
  %24 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %23, i32 60)
  %25 = insertelement <2 x i32> %21, i32 %24, i64 1
  %26 = bitcast <2 x i32> %25 to i64
  %27 = and i32 %3, 2
  %28 = icmp eq i32 %27, 0
  %29 = select i1 %28, i64 0, i64 %26
  %30 = or i64 %29, %18
  %31 = trunc i64 %30 to i32
  %32 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %31, i32 120)
  %33 = insertelement <2 x i32> undef, i32 %32, i64 0
  %34 = lshr i64 %30, 32
  %35 = trunc i64 %34 to i32
  %36 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %35, i32 120)
  %37 = insertelement <2 x i32> %33, i32 %36, i64 1
  %38 = bitcast <2 x i32> %37 to i64
  %39 = and i32 %3, 4
  %40 = icmp eq i32 %39, 0
  %41 = select i1 %40, i64 0, i64 %38
  %42 = or i64 %41, %30
  %43 = trunc i64 %42 to i32
  %44 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %43, i32 240)
  %45 = insertelement <2 x i32> undef, i32 %44, i64 0
  %46 = lshr i64 %42, 32
  %47 = trunc i64 %46 to i32
  %48 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %47, i32 240)
  %49 = insertelement <2 x i32> %45, i32 %48, i64 1
  %50 = bitcast <2 x i32> %49 to i64
  %51 = and i32 %3, 8
  %52 = icmp eq i32 %51, 0
  %53 = select i1 %52, i64 0, i64 %50
  %54 = or i64 %53, %42
  %55 = trunc i64 %54 to i32
  %56 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %55, i32 480)
  %57 = insertelement <2 x i32> undef, i32 %56, i64 0
  %58 = lshr i64 %54, 32
  %59 = trunc i64 %58 to i32
  %60 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %59, i32 480)
  %61 = insertelement <2 x i32> %57, i32 %60, i64 1
  %62 = bitcast <2 x i32> %61 to i64
  %63 = and i32 %3, 16
  %64 = icmp eq i32 %63, 0
  %65 = select i1 %64, i64 0, i64 %62
  %66 = or i64 %65, %54
  %67 = trunc i64 %66 to i32
  %68 = tail call i32 @llvm.amdgcn.readlane(i32 %67, i32 31)
  %69 = insertelement <2 x i32> undef, i32 %68, i64 0
  %70 = lshr i64 %66, 32
  %71 = trunc i64 %70 to i32
  %72 = tail call i32 @llvm.amdgcn.readlane(i32 %71, i32 31)
  %73 = insertelement <2 x i32> %69, i32 %72, i64 1
  %74 = bitcast <2 x i32> %73 to i64
  %75 = icmp ugt i32 %3, 31
  %76 = select i1 %75, i64 %74, i64 0
  %77 = or i64 %76, %66
  br label %84

78:                                               ; preds = %2
  %79 = icmp ult i32 %4, 10000
  br i1 %79, label %80, label %82

80:                                               ; preds = %78
  %81 = tail call fastcc i64 @227(i64 noundef %0) #57
  br label %84

82:                                               ; preds = %78
  %83 = tail call fastcc i64 @228(i64 noundef %0, i32 noundef %3) #57
  br label %84

84:                                               ; preds = %82, %80, %6
  %85 = phi i64 [ %77, %6 ], [ %81, %80 ], [ %83, %82 ]
  br i1 %1, label %131, label %86

86:                                               ; preds = %84
  br i1 %5, label %87, label %125

87:                                               ; preds = %86
  %88 = trunc i64 %85 to i32
  %89 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %88, i32 32912)
  %90 = insertelement <2 x i32> undef, i32 %89, i64 0
  %91 = lshr i64 %85, 32
  %92 = trunc i64 %91 to i32
  %93 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %92, i32 32912)
  %94 = insertelement <2 x i32> %90, i32 %93, i64 1
  %95 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %88, i32 120)
  %96 = insertelement <2 x i32> undef, i32 %95, i64 0
  %97 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %92, i32 120)
  %98 = insertelement <2 x i32> %96, i32 %97, i64 1
  %99 = and i32 %3, 7
  %100 = icmp eq i32 %99, 4
  %101 = select i1 %100, <2 x i32> %98, <2 x i32> %94
  %102 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %88, i32 240)
  %103 = insertelement <2 x i32> undef, i32 %102, i64 0
  %104 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %92, i32 240)
  %105 = insertelement <2 x i32> %103, i32 %104, i64 1
  %106 = and i32 %3, 15
  %107 = icmp eq i32 %106, 8
  %108 = select i1 %107, <2 x i32> %105, <2 x i32> %101
  %109 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %88, i32 480)
  %110 = insertelement <2 x i32> undef, i32 %109, i64 0
  %111 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %92, i32 480)
  %112 = insertelement <2 x i32> %110, i32 %111, i64 1
  %113 = and i32 %3, 31
  %114 = icmp eq i32 %113, 16
  %115 = select i1 %114, <2 x i32> %112, <2 x i32> %108
  %116 = tail call i32 @llvm.amdgcn.readlane(i32 %88, i32 31)
  %117 = insertelement <2 x i32> undef, i32 %116, i64 0
  %118 = tail call i32 @llvm.amdgcn.readlane(i32 %92, i32 31)
  %119 = insertelement <2 x i32> %117, i32 %118, i64 1
  %120 = icmp eq i32 %3, 32
  %121 = select i1 %120, <2 x i32> %119, <2 x i32> %115
  %122 = bitcast <2 x i32> %121 to i64
  %123 = icmp eq i32 %3, 0
  %124 = select i1 %123, i64 0, i64 %122
  br label %131

125:                                              ; preds = %86
  %126 = icmp ult i32 %4, 10000
  br i1 %126, label %127, label %129

127:                                              ; preds = %125
  %128 = tail call fastcc i64 @229(i64 noundef %85) #57
  br label %131

129:                                              ; preds = %125
  %130 = tail call fastcc i64 @230(i64 noundef %85, i32 noundef %3) #57
  br label %131

131:                                              ; preds = %129, %127, %87, %84
  %132 = phi i64 [ %85, %84 ], [ %124, %87 ], [ %128, %127 ], [ %130, %129 ]
  ret i64 %132
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i64 @227(i64 noundef %0) unnamed_addr #54 {
  %2 = trunc i64 %0 to i32
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %2, i32 273, i32 15, i32 15, i1 true)
  %4 = insertelement <2 x i32> undef, i32 %3, i64 0
  %5 = lshr i64 %0, 32
  %6 = trunc i64 %5 to i32
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %6, i32 273, i32 15, i32 15, i1 true)
  %8 = insertelement <2 x i32> %4, i32 %7, i64 1
  %9 = bitcast <2 x i32> %8 to i64
  %10 = or i64 %9, %0
  %11 = trunc i64 %10 to i32
  %12 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %11, i32 274, i32 15, i32 15, i1 true)
  %13 = insertelement <2 x i32> undef, i32 %12, i64 0
  %14 = lshr i64 %10, 32
  %15 = trunc i64 %14 to i32
  %16 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %15, i32 274, i32 15, i32 15, i1 true)
  %17 = insertelement <2 x i32> %13, i32 %16, i64 1
  %18 = bitcast <2 x i32> %17 to i64
  %19 = or i64 %10, %18
  %20 = trunc i64 %19 to i32
  %21 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %20, i32 276, i32 15, i32 15, i1 true)
  %22 = insertelement <2 x i32> undef, i32 %21, i64 0
  %23 = lshr i64 %19, 32
  %24 = trunc i64 %23 to i32
  %25 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %24, i32 276, i32 15, i32 15, i1 true)
  %26 = insertelement <2 x i32> %22, i32 %25, i64 1
  %27 = bitcast <2 x i32> %26 to i64
  %28 = or i64 %19, %27
  %29 = trunc i64 %28 to i32
  %30 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %29, i32 280, i32 15, i32 15, i1 true)
  %31 = insertelement <2 x i32> undef, i32 %30, i64 0
  %32 = lshr i64 %28, 32
  %33 = trunc i64 %32 to i32
  %34 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %33, i32 280, i32 15, i32 15, i1 true)
  %35 = insertelement <2 x i32> %31, i32 %34, i64 1
  %36 = bitcast <2 x i32> %35 to i64
  %37 = or i64 %28, %36
  %38 = trunc i64 %37 to i32
  %39 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %38, i32 322, i32 10, i32 15, i1 false)
  %40 = insertelement <2 x i32> undef, i32 %39, i64 0
  %41 = lshr i64 %37, 32
  %42 = trunc i64 %41 to i32
  %43 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %42, i32 322, i32 10, i32 15, i1 false)
  %44 = insertelement <2 x i32> %40, i32 %43, i64 1
  %45 = bitcast <2 x i32> %44 to i64
  %46 = or i64 %37, %45
  %47 = trunc i64 %46 to i32
  %48 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %47, i32 323, i32 12, i32 15, i1 false)
  %49 = insertelement <2 x i32> undef, i32 %48, i64 0
  %50 = lshr i64 %46, 32
  %51 = trunc i64 %50 to i32
  %52 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %51, i32 323, i32 12, i32 15, i1 false)
  %53 = insertelement <2 x i32> %49, i32 %52, i64 1
  %54 = bitcast <2 x i32> %53 to i64
  %55 = or i64 %46, %54
  ret i64 %55
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i64 @228(i64 noundef %0, i32 noundef %1) unnamed_addr #55 {
  %3 = trunc i64 %0 to i32
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %3, i32 273, i32 15, i32 15, i1 true)
  %5 = insertelement <2 x i32> undef, i32 %4, i64 0
  %6 = lshr i64 %0, 32
  %7 = trunc i64 %6 to i32
  %8 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %7, i32 273, i32 15, i32 15, i1 true)
  %9 = insertelement <2 x i32> %5, i32 %8, i64 1
  %10 = bitcast <2 x i32> %9 to i64
  %11 = or i64 %10, %0
  %12 = trunc i64 %11 to i32
  %13 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %12, i32 274, i32 15, i32 15, i1 true)
  %14 = insertelement <2 x i32> undef, i32 %13, i64 0
  %15 = lshr i64 %11, 32
  %16 = trunc i64 %15 to i32
  %17 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %16, i32 274, i32 15, i32 15, i1 true)
  %18 = insertelement <2 x i32> %14, i32 %17, i64 1
  %19 = bitcast <2 x i32> %18 to i64
  %20 = or i64 %11, %19
  %21 = trunc i64 %20 to i32
  %22 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %21, i32 276, i32 15, i32 15, i1 true)
  %23 = insertelement <2 x i32> undef, i32 %22, i64 0
  %24 = lshr i64 %20, 32
  %25 = trunc i64 %24 to i32
  %26 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %25, i32 276, i32 15, i32 15, i1 true)
  %27 = insertelement <2 x i32> %23, i32 %26, i64 1
  %28 = bitcast <2 x i32> %27 to i64
  %29 = or i64 %20, %28
  %30 = trunc i64 %29 to i32
  %31 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %30, i32 280, i32 15, i32 15, i1 true)
  %32 = insertelement <2 x i32> undef, i32 %31, i64 0
  %33 = lshr i64 %29, 32
  %34 = trunc i64 %33 to i32
  %35 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %34, i32 280, i32 15, i32 15, i1 true)
  %36 = insertelement <2 x i32> %32, i32 %35, i64 1
  %37 = bitcast <2 x i32> %36 to i64
  %38 = or i64 %29, %37
  %39 = trunc i64 %38 to i32
  %40 = tail call i32 @llvm.amdgcn.permlanex16(i32 undef, i32 %39, i32 -1, i32 -1, i1 false, i1 true)
  %41 = insertelement <2 x i32> undef, i32 %40, i64 0
  %42 = lshr i64 %38, 32
  %43 = trunc i64 %42 to i32
  %44 = tail call i32 @llvm.amdgcn.permlanex16(i32 undef, i32 %43, i32 -1, i32 -1, i1 false, i1 true)
  %45 = insertelement <2 x i32> %41, i32 %44, i64 1
  %46 = bitcast <2 x i32> %45 to i64
  %47 = and i32 %1, 16
  %48 = icmp eq i32 %47, 0
  %49 = select i1 %48, i64 0, i64 %46
  %50 = or i64 %49, %38
  %51 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %52 = icmp eq i8 %51, 0
  br i1 %52, label %65, label %53

53:                                               ; preds = %2
  %54 = trunc i64 %50 to i32
  %55 = tail call i32 @llvm.amdgcn.readlane(i32 %54, i32 31)
  %56 = insertelement <2 x i32> undef, i32 %55, i64 0
  %57 = lshr i64 %50, 32
  %58 = trunc i64 %57 to i32
  %59 = tail call i32 @llvm.amdgcn.readlane(i32 %58, i32 31)
  %60 = insertelement <2 x i32> %56, i32 %59, i64 1
  %61 = bitcast <2 x i32> %60 to i64
  %62 = icmp ugt i32 %1, 31
  %63 = select i1 %62, i64 %61, i64 0
  %64 = or i64 %63, %50
  br label %65

65:                                               ; preds = %53, %2
  %66 = phi i64 [ %64, %53 ], [ %50, %2 ]
  ret i64 %66
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i64 @229(i64 noundef %0) unnamed_addr #54 {
  %2 = trunc i64 %0 to i32
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %2, i32 312, i32 15, i32 15, i1 true)
  %4 = insertelement <2 x i32> undef, i32 %3, i64 0
  %5 = lshr i64 %0, 32
  %6 = trunc i64 %5 to i32
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %6, i32 312, i32 15, i32 15, i1 true)
  %8 = insertelement <2 x i32> %4, i32 %7, i64 1
  %9 = bitcast <2 x i32> %8 to i64
  ret i64 %9
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i64 @230(i64 noundef %0, i32 noundef %1) unnamed_addr #55 {
  %3 = trunc i64 %0 to i32
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %3, i32 273, i32 15, i32 15, i1 true)
  %5 = insertelement <2 x i32> undef, i32 %4, i64 0
  %6 = lshr i64 %0, 32
  %7 = trunc i64 %6 to i32
  %8 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %7, i32 273, i32 15, i32 15, i1 true)
  %9 = insertelement <2 x i32> %5, i32 %8, i64 1
  %10 = bitcast <2 x i32> %9 to i64
  %11 = tail call i32 @llvm.amdgcn.permlanex16(i32 undef, i32 %3, i32 -1, i32 -1, i1 false, i1 true)
  %12 = insertelement <2 x i32> undef, i32 %11, i64 0
  %13 = tail call i32 @llvm.amdgcn.permlanex16(i32 undef, i32 %7, i32 -1, i32 -1, i1 false, i1 true)
  %14 = insertelement <2 x i32> %12, i32 %13, i64 1
  %15 = bitcast <2 x i32> %14 to i64
  %16 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %30, label %18

18:                                               ; preds = %2
  %19 = tail call i32 @llvm.amdgcn.readlane(i32 %3, i32 31)
  %20 = insertelement <2 x i32> undef, i32 %19, i64 0
  %21 = tail call i32 @llvm.amdgcn.readlane(i32 %7, i32 31)
  %22 = insertelement <2 x i32> %20, i32 %21, i64 1
  %23 = bitcast <2 x i32> %22 to i64
  %24 = icmp eq i32 %1, 32
  %25 = select i1 %24, i64 %23, i64 %15
  %26 = and i32 %1, 31
  %27 = icmp eq i32 %26, 16
  %28 = or i1 %24, %27
  %29 = select i1 %28, i64 %25, i64 %10
  br label %33

30:                                               ; preds = %2
  %31 = icmp eq i32 %1, 16
  %32 = select i1 %31, i64 %15, i64 %10
  br label %33

33:                                               ; preds = %30, %18
  %34 = phi i64 [ %29, %18 ], [ %32, %30 ]
  ret i64 %34
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected i64 @__ockl_wfred_or_u64(i64 noundef %0) local_unnamed_addr #0 {
  %2 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %3 = icmp slt i32 %2, 8000
  br i1 %3, label %4, label %92

4:                                                ; preds = %1
  %5 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %10, label %7

7:                                                ; preds = %4
  %8 = tail call i64 @llvm.read_register.i64(metadata !36) #57
  %9 = icmp eq i64 %8, -1
  br label %13

10:                                               ; preds = %4
  %11 = tail call i32 @llvm.read_register.i32(metadata !10) #57
  %12 = icmp eq i32 %11, -1
  br label %13

13:                                               ; preds = %10, %7
  %14 = phi i1 [ %9, %7 ], [ %12, %10 ]
  %15 = trunc i64 %0 to i32
  %16 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %15, i32 32945)
  %17 = insertelement <2 x i32> undef, i32 %16, i64 0
  %18 = lshr i64 %0, 32
  %19 = trunc i64 %18 to i32
  %20 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %19, i32 32945)
  %21 = insertelement <2 x i32> %17, i32 %20, i64 1
  %22 = bitcast <2 x i32> %21 to i64
  %23 = or i64 %22, %0
  %24 = trunc i64 %23 to i32
  %25 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %24, i32 32846)
  %26 = insertelement <2 x i32> undef, i32 %25, i64 0
  %27 = lshr i64 %23, 32
  %28 = trunc i64 %27 to i32
  %29 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %28, i32 32846)
  %30 = insertelement <2 x i32> %26, i32 %29, i64 1
  %31 = bitcast <2 x i32> %30 to i64
  %32 = or i64 %23, %31
  %33 = trunc i64 %32 to i32
  %34 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %33, i32 4127)
  %35 = insertelement <2 x i32> undef, i32 %34, i64 0
  %36 = lshr i64 %32, 32
  %37 = trunc i64 %36 to i32
  %38 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %37, i32 4127)
  %39 = insertelement <2 x i32> %35, i32 %38, i64 1
  %40 = bitcast <2 x i32> %39 to i64
  %41 = or i64 %32, %40
  %42 = trunc i64 %41 to i32
  %43 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %42, i32 8223)
  %44 = insertelement <2 x i32> undef, i32 %43, i64 0
  %45 = lshr i64 %41, 32
  %46 = trunc i64 %45 to i32
  %47 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %46, i32 8223)
  %48 = insertelement <2 x i32> %44, i32 %47, i64 1
  %49 = bitcast <2 x i32> %48 to i64
  %50 = or i64 %41, %49
  %51 = trunc i64 %50 to i32
  %52 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %51, i32 16415)
  %53 = insertelement <2 x i32> undef, i32 %52, i64 0
  %54 = lshr i64 %50, 32
  %55 = trunc i64 %54 to i32
  %56 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %55, i32 16415)
  %57 = insertelement <2 x i32> %53, i32 %56, i64 1
  %58 = bitcast <2 x i32> %57 to i64
  %59 = or i64 %50, %58
  %60 = trunc i64 %59 to i32
  br i1 %14, label %61, label %74

61:                                               ; preds = %13
  %62 = tail call i32 @llvm.amdgcn.readlane(i32 %60, i32 0)
  %63 = insertelement <2 x i32> undef, i32 %62, i64 0
  %64 = lshr i64 %59, 32
  %65 = trunc i64 %64 to i32
  %66 = tail call i32 @llvm.amdgcn.readlane(i32 %65, i32 0)
  %67 = insertelement <2 x i32> %63, i32 %66, i64 1
  %68 = tail call i32 @llvm.amdgcn.readlane(i32 %60, i32 32)
  %69 = insertelement <2 x i32> undef, i32 %68, i64 0
  %70 = tail call i32 @llvm.amdgcn.readlane(i32 %65, i32 32)
  %71 = insertelement <2 x i32> %69, i32 %70, i64 1
  %72 = or <2 x i32> %71, %67
  %73 = bitcast <2 x i32> %72 to i64
  br label %98

74:                                               ; preds = %13
  %75 = tail call i32 @llvm.amdgcn.readlane(i32 %60, i32 32)
  %76 = insertelement <2 x i32> undef, i32 %75, i64 0
  %77 = lshr i64 %59, 32
  %78 = trunc i64 %77 to i32
  %79 = tail call i32 @llvm.amdgcn.readlane(i32 %78, i32 32)
  %80 = insertelement <2 x i32> %76, i32 %79, i64 1
  %81 = bitcast <2 x i32> %80 to i64
  %82 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %83 = and i32 %82, 1
  %84 = icmp eq i32 %83, 0
  %85 = select i1 %84, i64 0, i64 %81
  %86 = tail call i32 @llvm.amdgcn.readlane(i32 %60, i32 0)
  %87 = insertelement <2 x i32> undef, i32 %86, i64 0
  %88 = tail call i32 @llvm.amdgcn.readlane(i32 %78, i32 0)
  %89 = insertelement <2 x i32> %87, i32 %88, i64 1
  %90 = bitcast <2 x i32> %89 to i64
  %91 = or i64 %85, %90
  br label %98

92:                                               ; preds = %1
  %93 = icmp ult i32 %2, 10000
  br i1 %93, label %94, label %96

94:                                               ; preds = %92
  %95 = tail call fastcc i64 @231(i64 noundef %0) #57
  br label %98

96:                                               ; preds = %92
  %97 = tail call fastcc i64 @232(i64 noundef %0) #57
  br label %98

98:                                               ; preds = %96, %94, %74, %61
  %99 = phi i64 [ %73, %61 ], [ %91, %74 ], [ %95, %94 ], [ %97, %96 ]
  ret i64 %99
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc i64 @231(i64 noundef %0) unnamed_addr #52 {
  %2 = trunc i64 %0 to i32
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %2, i32 257, i32 15, i32 15, i1 true)
  %4 = insertelement <2 x i32> undef, i32 %3, i64 0
  %5 = lshr i64 %0, 32
  %6 = trunc i64 %5 to i32
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %6, i32 257, i32 15, i32 15, i1 true)
  %8 = insertelement <2 x i32> %4, i32 %7, i64 1
  %9 = bitcast <2 x i32> %8 to i64
  %10 = or i64 %9, %0
  %11 = trunc i64 %10 to i32
  %12 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %11, i32 258, i32 15, i32 15, i1 true)
  %13 = insertelement <2 x i32> undef, i32 %12, i64 0
  %14 = lshr i64 %10, 32
  %15 = trunc i64 %14 to i32
  %16 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %15, i32 258, i32 15, i32 15, i1 true)
  %17 = insertelement <2 x i32> %13, i32 %16, i64 1
  %18 = bitcast <2 x i32> %17 to i64
  %19 = or i64 %10, %18
  %20 = trunc i64 %19 to i32
  %21 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %20, i32 260, i32 15, i32 15, i1 true)
  %22 = insertelement <2 x i32> undef, i32 %21, i64 0
  %23 = lshr i64 %19, 32
  %24 = trunc i64 %23 to i32
  %25 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %24, i32 260, i32 15, i32 15, i1 true)
  %26 = insertelement <2 x i32> %22, i32 %25, i64 1
  %27 = bitcast <2 x i32> %26 to i64
  %28 = or i64 %19, %27
  %29 = trunc i64 %28 to i32
  %30 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %29, i32 264, i32 15, i32 15, i1 true)
  %31 = insertelement <2 x i32> undef, i32 %30, i64 0
  %32 = lshr i64 %28, 32
  %33 = trunc i64 %32 to i32
  %34 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %33, i32 264, i32 15, i32 15, i1 true)
  %35 = insertelement <2 x i32> %31, i32 %34, i64 1
  %36 = bitcast <2 x i32> %35 to i64
  %37 = or i64 %28, %36
  %38 = trunc i64 %37 to i32
  %39 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %38, i32 304, i32 15, i32 15, i1 true)
  %40 = lshr i64 %37, 32
  %41 = trunc i64 %40 to i32
  %42 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %41, i32 304, i32 15, i32 15, i1 true)
  %43 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %39, i32 320, i32 15, i32 15, i1 true)
  %44 = insertelement <2 x i32> undef, i32 %43, i64 0
  %45 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %42, i32 320, i32 15, i32 15, i1 true)
  %46 = insertelement <2 x i32> %44, i32 %45, i64 1
  %47 = bitcast <2 x i32> %46 to i64
  %48 = or i64 %37, %47
  %49 = trunc i64 %48 to i32
  %50 = tail call i32 @llvm.amdgcn.readlane(i32 %49, i32 32)
  %51 = insertelement <2 x i32> undef, i32 %50, i64 0
  %52 = lshr i64 %48, 32
  %53 = trunc i64 %52 to i32
  %54 = tail call i32 @llvm.amdgcn.readlane(i32 %53, i32 32)
  %55 = insertelement <2 x i32> %51, i32 %54, i64 1
  %56 = bitcast <2 x i32> %55 to i64
  %57 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %58 = and i32 %57, 1
  %59 = icmp eq i32 %58, 0
  %60 = select i1 %59, i64 0, i64 %56
  %61 = tail call i32 @llvm.amdgcn.readlane(i32 %49, i32 0)
  %62 = insertelement <2 x i32> undef, i32 %61, i64 0
  %63 = tail call i32 @llvm.amdgcn.readlane(i32 %53, i32 0)
  %64 = insertelement <2 x i32> %62, i32 %63, i64 1
  %65 = bitcast <2 x i32> %64 to i64
  %66 = or i64 %60, %65
  ret i64 %66
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc i64 @232(i64 noundef %0) unnamed_addr #53 {
  %2 = trunc i64 %0 to i32
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %2, i32 257, i32 15, i32 15, i1 true)
  %4 = insertelement <2 x i32> undef, i32 %3, i64 0
  %5 = lshr i64 %0, 32
  %6 = trunc i64 %5 to i32
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %6, i32 257, i32 15, i32 15, i1 true)
  %8 = insertelement <2 x i32> %4, i32 %7, i64 1
  %9 = bitcast <2 x i32> %8 to i64
  %10 = or i64 %9, %0
  %11 = trunc i64 %10 to i32
  %12 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %11, i32 258, i32 15, i32 15, i1 true)
  %13 = insertelement <2 x i32> undef, i32 %12, i64 0
  %14 = lshr i64 %10, 32
  %15 = trunc i64 %14 to i32
  %16 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %15, i32 258, i32 15, i32 15, i1 true)
  %17 = insertelement <2 x i32> %13, i32 %16, i64 1
  %18 = bitcast <2 x i32> %17 to i64
  %19 = or i64 %10, %18
  %20 = trunc i64 %19 to i32
  %21 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %20, i32 260, i32 15, i32 15, i1 true)
  %22 = insertelement <2 x i32> undef, i32 %21, i64 0
  %23 = lshr i64 %19, 32
  %24 = trunc i64 %23 to i32
  %25 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %24, i32 260, i32 15, i32 15, i1 true)
  %26 = insertelement <2 x i32> %22, i32 %25, i64 1
  %27 = bitcast <2 x i32> %26 to i64
  %28 = or i64 %19, %27
  %29 = trunc i64 %28 to i32
  %30 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %29, i32 264, i32 15, i32 15, i1 true)
  %31 = insertelement <2 x i32> undef, i32 %30, i64 0
  %32 = lshr i64 %28, 32
  %33 = trunc i64 %32 to i32
  %34 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %33, i32 264, i32 15, i32 15, i1 true)
  %35 = insertelement <2 x i32> %31, i32 %34, i64 1
  %36 = bitcast <2 x i32> %35 to i64
  %37 = or i64 %28, %36
  %38 = trunc i64 %37 to i32
  %39 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %38, i32 336, i32 15, i32 15, i1 true)
  %40 = insertelement <2 x i32> undef, i32 %39, i64 0
  %41 = lshr i64 %37, 32
  %42 = trunc i64 %41 to i32
  %43 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %42, i32 336, i32 15, i32 15, i1 true)
  %44 = insertelement <2 x i32> %40, i32 %43, i64 1
  %45 = tail call i32 @llvm.amdgcn.permlanex16(i32 undef, i32 %39, i32 0, i32 0, i1 false, i1 true)
  %46 = insertelement <2 x i32> undef, i32 %45, i64 0
  %47 = tail call i32 @llvm.amdgcn.permlanex16(i32 undef, i32 %43, i32 0, i32 0, i1 false, i1 true)
  %48 = insertelement <2 x i32> %46, i32 %47, i64 1
  %49 = or <2 x i32> %48, %44
  %50 = bitcast <2 x i32> %49 to i64
  %51 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %52 = icmp eq i8 %51, 0
  br i1 %52, label %71, label %53

53:                                               ; preds = %1
  %54 = extractelement <2 x i32> %49, i64 0
  %55 = tail call i32 @llvm.amdgcn.readlane(i32 %54, i32 32)
  %56 = insertelement <2 x i32> undef, i32 %55, i64 0
  %57 = extractelement <2 x i32> %49, i64 1
  %58 = tail call i32 @llvm.amdgcn.readlane(i32 %57, i32 32)
  %59 = insertelement <2 x i32> %56, i32 %58, i64 1
  %60 = bitcast <2 x i32> %59 to i64
  %61 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %62 = and i32 %61, 1
  %63 = icmp eq i32 %62, 0
  %64 = select i1 %63, i64 0, i64 %60
  %65 = tail call i32 @llvm.amdgcn.readlane(i32 %54, i32 0)
  %66 = insertelement <2 x i32> undef, i32 %65, i64 0
  %67 = tail call i32 @llvm.amdgcn.readlane(i32 %57, i32 0)
  %68 = insertelement <2 x i32> %66, i32 %67, i64 1
  %69 = bitcast <2 x i32> %68 to i64
  %70 = or i64 %64, %69
  br label %71

71:                                               ; preds = %53, %1
  %72 = phi i64 [ %70, %53 ], [ %50, %1 ]
  ret i64 %72
}

; Function Attrs: convergent norecurse nounwind
define linkonce_odr protected i64 @__ockl_wfscan_or_u64(i64 noundef %0, i1 noundef zeroext %1) local_unnamed_addr #12 {
  %3 = tail call i32 @__ockl_lane_u32() #58
  %4 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %5 = icmp slt i32 %4, 8000
  br i1 %5, label %6, label %78

6:                                                ; preds = %2
  %7 = trunc i64 %0 to i32
  %8 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %7, i32 30)
  %9 = insertelement <2 x i32> undef, i32 %8, i64 0
  %10 = lshr i64 %0, 32
  %11 = trunc i64 %10 to i32
  %12 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %11, i32 30)
  %13 = insertelement <2 x i32> %9, i32 %12, i64 1
  %14 = bitcast <2 x i32> %13 to i64
  %15 = and i32 %3, 1
  %16 = icmp eq i32 %15, 0
  %17 = select i1 %16, i64 0, i64 %14
  %18 = or i64 %17, %0
  %19 = trunc i64 %18 to i32
  %20 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %19, i32 60)
  %21 = insertelement <2 x i32> undef, i32 %20, i64 0
  %22 = lshr i64 %18, 32
  %23 = trunc i64 %22 to i32
  %24 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %23, i32 60)
  %25 = insertelement <2 x i32> %21, i32 %24, i64 1
  %26 = bitcast <2 x i32> %25 to i64
  %27 = and i32 %3, 2
  %28 = icmp eq i32 %27, 0
  %29 = select i1 %28, i64 0, i64 %26
  %30 = or i64 %29, %18
  %31 = trunc i64 %30 to i32
  %32 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %31, i32 120)
  %33 = insertelement <2 x i32> undef, i32 %32, i64 0
  %34 = lshr i64 %30, 32
  %35 = trunc i64 %34 to i32
  %36 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %35, i32 120)
  %37 = insertelement <2 x i32> %33, i32 %36, i64 1
  %38 = bitcast <2 x i32> %37 to i64
  %39 = and i32 %3, 4
  %40 = icmp eq i32 %39, 0
  %41 = select i1 %40, i64 0, i64 %38
  %42 = or i64 %41, %30
  %43 = trunc i64 %42 to i32
  %44 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %43, i32 240)
  %45 = insertelement <2 x i32> undef, i32 %44, i64 0
  %46 = lshr i64 %42, 32
  %47 = trunc i64 %46 to i32
  %48 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %47, i32 240)
  %49 = insertelement <2 x i32> %45, i32 %48, i64 1
  %50 = bitcast <2 x i32> %49 to i64
  %51 = and i32 %3, 8
  %52 = icmp eq i32 %51, 0
  %53 = select i1 %52, i64 0, i64 %50
  %54 = or i64 %53, %42
  %55 = trunc i64 %54 to i32
  %56 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %55, i32 480)
  %57 = insertelement <2 x i32> undef, i32 %56, i64 0
  %58 = lshr i64 %54, 32
  %59 = trunc i64 %58 to i32
  %60 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %59, i32 480)
  %61 = insertelement <2 x i32> %57, i32 %60, i64 1
  %62 = bitcast <2 x i32> %61 to i64
  %63 = and i32 %3, 16
  %64 = icmp eq i32 %63, 0
  %65 = select i1 %64, i64 0, i64 %62
  %66 = or i64 %65, %54
  %67 = trunc i64 %66 to i32
  %68 = tail call i32 @llvm.amdgcn.readlane(i32 %67, i32 31)
  %69 = insertelement <2 x i32> undef, i32 %68, i64 0
  %70 = lshr i64 %66, 32
  %71 = trunc i64 %70 to i32
  %72 = tail call i32 @llvm.amdgcn.readlane(i32 %71, i32 31)
  %73 = insertelement <2 x i32> %69, i32 %72, i64 1
  %74 = bitcast <2 x i32> %73 to i64
  %75 = icmp ugt i32 %3, 31
  %76 = select i1 %75, i64 %74, i64 0
  %77 = or i64 %76, %66
  br label %84

78:                                               ; preds = %2
  %79 = icmp ult i32 %4, 10000
  br i1 %79, label %80, label %82

80:                                               ; preds = %78
  %81 = tail call fastcc i64 @233(i64 noundef %0) #57
  br label %84

82:                                               ; preds = %78
  %83 = tail call fastcc i64 @234(i64 noundef %0, i32 noundef %3) #57
  br label %84

84:                                               ; preds = %82, %80, %6
  %85 = phi i64 [ %77, %6 ], [ %81, %80 ], [ %83, %82 ]
  br i1 %1, label %131, label %86

86:                                               ; preds = %84
  br i1 %5, label %87, label %125

87:                                               ; preds = %86
  %88 = trunc i64 %85 to i32
  %89 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %88, i32 32912)
  %90 = insertelement <2 x i32> undef, i32 %89, i64 0
  %91 = lshr i64 %85, 32
  %92 = trunc i64 %91 to i32
  %93 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %92, i32 32912)
  %94 = insertelement <2 x i32> %90, i32 %93, i64 1
  %95 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %88, i32 120)
  %96 = insertelement <2 x i32> undef, i32 %95, i64 0
  %97 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %92, i32 120)
  %98 = insertelement <2 x i32> %96, i32 %97, i64 1
  %99 = and i32 %3, 7
  %100 = icmp eq i32 %99, 4
  %101 = select i1 %100, <2 x i32> %98, <2 x i32> %94
  %102 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %88, i32 240)
  %103 = insertelement <2 x i32> undef, i32 %102, i64 0
  %104 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %92, i32 240)
  %105 = insertelement <2 x i32> %103, i32 %104, i64 1
  %106 = and i32 %3, 15
  %107 = icmp eq i32 %106, 8
  %108 = select i1 %107, <2 x i32> %105, <2 x i32> %101
  %109 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %88, i32 480)
  %110 = insertelement <2 x i32> undef, i32 %109, i64 0
  %111 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %92, i32 480)
  %112 = insertelement <2 x i32> %110, i32 %111, i64 1
  %113 = and i32 %3, 31
  %114 = icmp eq i32 %113, 16
  %115 = select i1 %114, <2 x i32> %112, <2 x i32> %108
  %116 = tail call i32 @llvm.amdgcn.readlane(i32 %88, i32 31)
  %117 = insertelement <2 x i32> undef, i32 %116, i64 0
  %118 = tail call i32 @llvm.amdgcn.readlane(i32 %92, i32 31)
  %119 = insertelement <2 x i32> %117, i32 %118, i64 1
  %120 = icmp eq i32 %3, 32
  %121 = select i1 %120, <2 x i32> %119, <2 x i32> %115
  %122 = bitcast <2 x i32> %121 to i64
  %123 = icmp eq i32 %3, 0
  %124 = select i1 %123, i64 0, i64 %122
  br label %131

125:                                              ; preds = %86
  %126 = icmp ult i32 %4, 10000
  br i1 %126, label %127, label %129

127:                                              ; preds = %125
  %128 = tail call fastcc i64 @235(i64 noundef %85) #57
  br label %131

129:                                              ; preds = %125
  %130 = tail call fastcc i64 @236(i64 noundef %85, i32 noundef %3) #57
  br label %131

131:                                              ; preds = %129, %127, %87, %84
  %132 = phi i64 [ %85, %84 ], [ %124, %87 ], [ %128, %127 ], [ %130, %129 ]
  ret i64 %132
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i64 @233(i64 noundef %0) unnamed_addr #54 {
  %2 = trunc i64 %0 to i32
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %2, i32 273, i32 15, i32 15, i1 true)
  %4 = insertelement <2 x i32> undef, i32 %3, i64 0
  %5 = lshr i64 %0, 32
  %6 = trunc i64 %5 to i32
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %6, i32 273, i32 15, i32 15, i1 true)
  %8 = insertelement <2 x i32> %4, i32 %7, i64 1
  %9 = bitcast <2 x i32> %8 to i64
  %10 = or i64 %9, %0
  %11 = trunc i64 %10 to i32
  %12 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %11, i32 274, i32 15, i32 15, i1 true)
  %13 = insertelement <2 x i32> undef, i32 %12, i64 0
  %14 = lshr i64 %10, 32
  %15 = trunc i64 %14 to i32
  %16 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %15, i32 274, i32 15, i32 15, i1 true)
  %17 = insertelement <2 x i32> %13, i32 %16, i64 1
  %18 = bitcast <2 x i32> %17 to i64
  %19 = or i64 %10, %18
  %20 = trunc i64 %19 to i32
  %21 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %20, i32 276, i32 15, i32 15, i1 true)
  %22 = insertelement <2 x i32> undef, i32 %21, i64 0
  %23 = lshr i64 %19, 32
  %24 = trunc i64 %23 to i32
  %25 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %24, i32 276, i32 15, i32 15, i1 true)
  %26 = insertelement <2 x i32> %22, i32 %25, i64 1
  %27 = bitcast <2 x i32> %26 to i64
  %28 = or i64 %19, %27
  %29 = trunc i64 %28 to i32
  %30 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %29, i32 280, i32 15, i32 15, i1 true)
  %31 = insertelement <2 x i32> undef, i32 %30, i64 0
  %32 = lshr i64 %28, 32
  %33 = trunc i64 %32 to i32
  %34 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %33, i32 280, i32 15, i32 15, i1 true)
  %35 = insertelement <2 x i32> %31, i32 %34, i64 1
  %36 = bitcast <2 x i32> %35 to i64
  %37 = or i64 %28, %36
  %38 = trunc i64 %37 to i32
  %39 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %38, i32 322, i32 10, i32 15, i1 false)
  %40 = insertelement <2 x i32> undef, i32 %39, i64 0
  %41 = lshr i64 %37, 32
  %42 = trunc i64 %41 to i32
  %43 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %42, i32 322, i32 10, i32 15, i1 false)
  %44 = insertelement <2 x i32> %40, i32 %43, i64 1
  %45 = bitcast <2 x i32> %44 to i64
  %46 = or i64 %37, %45
  %47 = trunc i64 %46 to i32
  %48 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %47, i32 323, i32 12, i32 15, i1 false)
  %49 = insertelement <2 x i32> undef, i32 %48, i64 0
  %50 = lshr i64 %46, 32
  %51 = trunc i64 %50 to i32
  %52 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %51, i32 323, i32 12, i32 15, i1 false)
  %53 = insertelement <2 x i32> %49, i32 %52, i64 1
  %54 = bitcast <2 x i32> %53 to i64
  %55 = or i64 %46, %54
  ret i64 %55
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i64 @234(i64 noundef %0, i32 noundef %1) unnamed_addr #55 {
  %3 = trunc i64 %0 to i32
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %3, i32 273, i32 15, i32 15, i1 true)
  %5 = insertelement <2 x i32> undef, i32 %4, i64 0
  %6 = lshr i64 %0, 32
  %7 = trunc i64 %6 to i32
  %8 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %7, i32 273, i32 15, i32 15, i1 true)
  %9 = insertelement <2 x i32> %5, i32 %8, i64 1
  %10 = bitcast <2 x i32> %9 to i64
  %11 = or i64 %10, %0
  %12 = trunc i64 %11 to i32
  %13 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %12, i32 274, i32 15, i32 15, i1 true)
  %14 = insertelement <2 x i32> undef, i32 %13, i64 0
  %15 = lshr i64 %11, 32
  %16 = trunc i64 %15 to i32
  %17 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %16, i32 274, i32 15, i32 15, i1 true)
  %18 = insertelement <2 x i32> %14, i32 %17, i64 1
  %19 = bitcast <2 x i32> %18 to i64
  %20 = or i64 %11, %19
  %21 = trunc i64 %20 to i32
  %22 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %21, i32 276, i32 15, i32 15, i1 true)
  %23 = insertelement <2 x i32> undef, i32 %22, i64 0
  %24 = lshr i64 %20, 32
  %25 = trunc i64 %24 to i32
  %26 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %25, i32 276, i32 15, i32 15, i1 true)
  %27 = insertelement <2 x i32> %23, i32 %26, i64 1
  %28 = bitcast <2 x i32> %27 to i64
  %29 = or i64 %20, %28
  %30 = trunc i64 %29 to i32
  %31 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %30, i32 280, i32 15, i32 15, i1 true)
  %32 = insertelement <2 x i32> undef, i32 %31, i64 0
  %33 = lshr i64 %29, 32
  %34 = trunc i64 %33 to i32
  %35 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %34, i32 280, i32 15, i32 15, i1 true)
  %36 = insertelement <2 x i32> %32, i32 %35, i64 1
  %37 = bitcast <2 x i32> %36 to i64
  %38 = or i64 %29, %37
  %39 = trunc i64 %38 to i32
  %40 = tail call i32 @llvm.amdgcn.permlanex16(i32 undef, i32 %39, i32 -1, i32 -1, i1 false, i1 true)
  %41 = insertelement <2 x i32> undef, i32 %40, i64 0
  %42 = lshr i64 %38, 32
  %43 = trunc i64 %42 to i32
  %44 = tail call i32 @llvm.amdgcn.permlanex16(i32 undef, i32 %43, i32 -1, i32 -1, i1 false, i1 true)
  %45 = insertelement <2 x i32> %41, i32 %44, i64 1
  %46 = bitcast <2 x i32> %45 to i64
  %47 = and i32 %1, 16
  %48 = icmp eq i32 %47, 0
  %49 = select i1 %48, i64 0, i64 %46
  %50 = or i64 %49, %38
  %51 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %52 = icmp eq i8 %51, 0
  br i1 %52, label %65, label %53

53:                                               ; preds = %2
  %54 = trunc i64 %50 to i32
  %55 = tail call i32 @llvm.amdgcn.readlane(i32 %54, i32 31)
  %56 = insertelement <2 x i32> undef, i32 %55, i64 0
  %57 = lshr i64 %50, 32
  %58 = trunc i64 %57 to i32
  %59 = tail call i32 @llvm.amdgcn.readlane(i32 %58, i32 31)
  %60 = insertelement <2 x i32> %56, i32 %59, i64 1
  %61 = bitcast <2 x i32> %60 to i64
  %62 = icmp ugt i32 %1, 31
  %63 = select i1 %62, i64 %61, i64 0
  %64 = or i64 %63, %50
  br label %65

65:                                               ; preds = %53, %2
  %66 = phi i64 [ %64, %53 ], [ %50, %2 ]
  ret i64 %66
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i64 @235(i64 noundef %0) unnamed_addr #54 {
  %2 = trunc i64 %0 to i32
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %2, i32 312, i32 15, i32 15, i1 true)
  %4 = insertelement <2 x i32> undef, i32 %3, i64 0
  %5 = lshr i64 %0, 32
  %6 = trunc i64 %5 to i32
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %6, i32 312, i32 15, i32 15, i1 true)
  %8 = insertelement <2 x i32> %4, i32 %7, i64 1
  %9 = bitcast <2 x i32> %8 to i64
  ret i64 %9
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i64 @236(i64 noundef %0, i32 noundef %1) unnamed_addr #55 {
  %3 = trunc i64 %0 to i32
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %3, i32 273, i32 15, i32 15, i1 true)
  %5 = insertelement <2 x i32> undef, i32 %4, i64 0
  %6 = lshr i64 %0, 32
  %7 = trunc i64 %6 to i32
  %8 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %7, i32 273, i32 15, i32 15, i1 true)
  %9 = insertelement <2 x i32> %5, i32 %8, i64 1
  %10 = bitcast <2 x i32> %9 to i64
  %11 = tail call i32 @llvm.amdgcn.permlanex16(i32 undef, i32 %3, i32 -1, i32 -1, i1 false, i1 true)
  %12 = insertelement <2 x i32> undef, i32 %11, i64 0
  %13 = tail call i32 @llvm.amdgcn.permlanex16(i32 undef, i32 %7, i32 -1, i32 -1, i1 false, i1 true)
  %14 = insertelement <2 x i32> %12, i32 %13, i64 1
  %15 = bitcast <2 x i32> %14 to i64
  %16 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %30, label %18

18:                                               ; preds = %2
  %19 = tail call i32 @llvm.amdgcn.readlane(i32 %3, i32 31)
  %20 = insertelement <2 x i32> undef, i32 %19, i64 0
  %21 = tail call i32 @llvm.amdgcn.readlane(i32 %7, i32 31)
  %22 = insertelement <2 x i32> %20, i32 %21, i64 1
  %23 = bitcast <2 x i32> %22 to i64
  %24 = icmp eq i32 %1, 32
  %25 = select i1 %24, i64 %23, i64 %15
  %26 = and i32 %1, 31
  %27 = icmp eq i32 %26, 16
  %28 = or i1 %24, %27
  %29 = select i1 %28, i64 %25, i64 %10
  br label %33

30:                                               ; preds = %2
  %31 = icmp eq i32 %1, 16
  %32 = select i1 %31, i64 %15, i64 %10
  br label %33

33:                                               ; preds = %30, %18
  %34 = phi i64 [ %29, %18 ], [ %32, %30 ]
  ret i64 %34
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected i32 @__ockl_wfred_xor_i32(i32 noundef %0) local_unnamed_addr #0 {
  %2 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %3 = icmp slt i32 %2, 8000
  br i1 %3, label %4, label %37

4:                                                ; preds = %1
  %5 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %10, label %7

7:                                                ; preds = %4
  %8 = tail call i64 @llvm.read_register.i64(metadata !36) #57
  %9 = icmp eq i64 %8, -1
  br label %13

10:                                               ; preds = %4
  %11 = tail call i32 @llvm.read_register.i32(metadata !10) #57
  %12 = icmp eq i32 %11, -1
  br label %13

13:                                               ; preds = %10, %7
  %14 = phi i1 [ %9, %7 ], [ %12, %10 ]
  %15 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %0, i32 32945)
  %16 = xor i32 %15, %0
  %17 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %16, i32 32846)
  %18 = xor i32 %16, %17
  %19 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %18, i32 4127)
  %20 = xor i32 %18, %19
  %21 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %20, i32 8223)
  %22 = xor i32 %20, %21
  %23 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %22, i32 16415)
  %24 = xor i32 %22, %23
  br i1 %14, label %25, label %29

25:                                               ; preds = %13
  %26 = tail call i32 @llvm.amdgcn.readlane(i32 %24, i32 0)
  %27 = tail call i32 @llvm.amdgcn.readlane(i32 %24, i32 32)
  %28 = xor i32 %27, %26
  br label %43

29:                                               ; preds = %13
  %30 = tail call i32 @llvm.amdgcn.readlane(i32 %24, i32 32)
  %31 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %32 = and i32 %31, 1
  %33 = icmp eq i32 %32, 0
  %34 = select i1 %33, i32 0, i32 %30
  %35 = tail call i32 @llvm.amdgcn.readlane(i32 %24, i32 0)
  %36 = xor i32 %34, %35
  br label %43

37:                                               ; preds = %1
  %38 = icmp ult i32 %2, 10000
  br i1 %38, label %39, label %41

39:                                               ; preds = %37
  %40 = tail call fastcc i32 @237(i32 noundef %0) #57
  br label %43

41:                                               ; preds = %37
  %42 = tail call fastcc i32 @238(i32 noundef %0) #57
  br label %43

43:                                               ; preds = %41, %39, %29, %25
  %44 = phi i32 [ %28, %25 ], [ %36, %29 ], [ %40, %39 ], [ %42, %41 ]
  ret i32 %44
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc i32 @237(i32 noundef %0) unnamed_addr #52 {
  %2 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %0, i32 257, i32 15, i32 15, i1 true)
  %3 = xor i32 %2, %0
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %3, i32 258, i32 15, i32 15, i1 true)
  %5 = xor i32 %3, %4
  %6 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %5, i32 260, i32 15, i32 15, i1 true)
  %7 = xor i32 %5, %6
  %8 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %7, i32 264, i32 15, i32 15, i1 true)
  %9 = xor i32 %7, %8
  %10 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %9, i32 304, i32 15, i32 15, i1 true)
  %11 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %10, i32 320, i32 15, i32 15, i1 true)
  %12 = xor i32 %11, %9
  %13 = tail call i32 @llvm.amdgcn.readlane(i32 %12, i32 32)
  %14 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %15 = and i32 %14, 1
  %16 = icmp eq i32 %15, 0
  %17 = select i1 %16, i32 0, i32 %13
  %18 = tail call i32 @llvm.amdgcn.readlane(i32 %12, i32 0)
  %19 = xor i32 %17, %18
  ret i32 %19
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc i32 @238(i32 noundef %0) unnamed_addr #53 {
  %2 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %0, i32 257, i32 15, i32 15, i1 true)
  %3 = xor i32 %2, %0
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %3, i32 258, i32 15, i32 15, i1 true)
  %5 = xor i32 %3, %4
  %6 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %5, i32 260, i32 15, i32 15, i1 true)
  %7 = xor i32 %5, %6
  %8 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %7, i32 264, i32 15, i32 15, i1 true)
  %9 = xor i32 %7, %8
  %10 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %9, i32 336, i32 15, i32 15, i1 true)
  %11 = tail call i32 @llvm.amdgcn.permlanex16(i32 undef, i32 %10, i32 0, i32 0, i1 false, i1 true)
  %12 = xor i32 %11, %10
  %13 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %23, label %15

15:                                               ; preds = %1
  %16 = tail call i32 @llvm.amdgcn.readlane(i32 %12, i32 32)
  %17 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %18 = and i32 %17, 1
  %19 = icmp eq i32 %18, 0
  %20 = select i1 %19, i32 0, i32 %16
  %21 = tail call i32 @llvm.amdgcn.readlane(i32 %12, i32 0)
  %22 = xor i32 %20, %21
  br label %23

23:                                               ; preds = %15, %1
  %24 = phi i32 [ %22, %15 ], [ %12, %1 ]
  ret i32 %24
}

; Function Attrs: convergent norecurse nounwind
define linkonce_odr protected i32 @__ockl_wfscan_xor_i32(i32 noundef %0, i1 noundef zeroext %1) local_unnamed_addr #12 {
  %3 = tail call i32 @__ockl_lane_u32() #58
  %4 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %5 = icmp slt i32 %4, 8000
  br i1 %5, label %6, label %36

6:                                                ; preds = %2
  %7 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %0, i32 30)
  %8 = and i32 %3, 1
  %9 = icmp eq i32 %8, 0
  %10 = select i1 %9, i32 0, i32 %7
  %11 = xor i32 %10, %0
  %12 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %11, i32 60)
  %13 = and i32 %3, 2
  %14 = icmp eq i32 %13, 0
  %15 = select i1 %14, i32 0, i32 %12
  %16 = xor i32 %11, %15
  %17 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %16, i32 120)
  %18 = and i32 %3, 4
  %19 = icmp eq i32 %18, 0
  %20 = select i1 %19, i32 0, i32 %17
  %21 = xor i32 %16, %20
  %22 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %21, i32 240)
  %23 = and i32 %3, 8
  %24 = icmp eq i32 %23, 0
  %25 = select i1 %24, i32 0, i32 %22
  %26 = xor i32 %21, %25
  %27 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %26, i32 480)
  %28 = and i32 %3, 16
  %29 = icmp eq i32 %28, 0
  %30 = select i1 %29, i32 0, i32 %27
  %31 = xor i32 %26, %30
  %32 = tail call i32 @llvm.amdgcn.readlane(i32 %31, i32 31)
  %33 = icmp ugt i32 %3, 31
  %34 = select i1 %33, i32 %32, i32 0
  %35 = xor i32 %31, %34
  br label %42

36:                                               ; preds = %2
  %37 = icmp ult i32 %4, 10000
  br i1 %37, label %38, label %40

38:                                               ; preds = %36
  %39 = tail call fastcc i32 @239(i32 noundef %0) #57
  br label %42

40:                                               ; preds = %36
  %41 = tail call fastcc i32 @240(i32 noundef %0, i32 noundef %3) #57
  br label %42

42:                                               ; preds = %40, %38, %6
  %43 = phi i32 [ %35, %6 ], [ %39, %38 ], [ %41, %40 ]
  br i1 %1, label %70, label %44

44:                                               ; preds = %42
  br i1 %5, label %45, label %64

45:                                               ; preds = %44
  %46 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %43, i32 32912)
  %47 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %43, i32 120)
  %48 = and i32 %3, 7
  %49 = icmp eq i32 %48, 4
  %50 = select i1 %49, i32 %47, i32 %46
  %51 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %43, i32 240)
  %52 = and i32 %3, 15
  %53 = icmp eq i32 %52, 8
  %54 = select i1 %53, i32 %51, i32 %50
  %55 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %43, i32 480)
  %56 = and i32 %3, 31
  %57 = icmp eq i32 %56, 16
  %58 = select i1 %57, i32 %55, i32 %54
  %59 = tail call i32 @llvm.amdgcn.readlane(i32 %43, i32 31)
  %60 = icmp eq i32 %3, 32
  %61 = select i1 %60, i32 %59, i32 %58
  %62 = icmp eq i32 %3, 0
  %63 = select i1 %62, i32 0, i32 %61
  br label %70

64:                                               ; preds = %44
  %65 = icmp ult i32 %4, 10000
  br i1 %65, label %66, label %68

66:                                               ; preds = %64
  %67 = tail call fastcc i32 @241(i32 noundef %43) #57
  br label %70

68:                                               ; preds = %64
  %69 = tail call fastcc i32 @242(i32 noundef %43, i32 noundef %3) #57
  br label %70

70:                                               ; preds = %68, %66, %45, %42
  %71 = phi i32 [ %43, %42 ], [ %63, %45 ], [ %67, %66 ], [ %69, %68 ]
  ret i32 %71
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i32 @239(i32 noundef %0) unnamed_addr #54 {
  %2 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %0, i32 273, i32 15, i32 15, i1 true)
  %3 = xor i32 %2, %0
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %3, i32 274, i32 15, i32 15, i1 true)
  %5 = xor i32 %3, %4
  %6 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %5, i32 276, i32 15, i32 15, i1 true)
  %7 = xor i32 %5, %6
  %8 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %7, i32 280, i32 15, i32 15, i1 true)
  %9 = xor i32 %7, %8
  %10 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %9, i32 322, i32 10, i32 15, i1 false)
  %11 = xor i32 %9, %10
  %12 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %11, i32 323, i32 12, i32 15, i1 false)
  %13 = xor i32 %11, %12
  ret i32 %13
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i32 @240(i32 noundef %0, i32 noundef %1) unnamed_addr #55 {
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %0, i32 273, i32 15, i32 15, i1 true)
  %4 = xor i32 %3, %0
  %5 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %4, i32 274, i32 15, i32 15, i1 true)
  %6 = xor i32 %4, %5
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %6, i32 276, i32 15, i32 15, i1 true)
  %8 = xor i32 %6, %7
  %9 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %8, i32 280, i32 15, i32 15, i1 true)
  %10 = xor i32 %8, %9
  %11 = tail call i32 @llvm.amdgcn.permlanex16(i32 undef, i32 %10, i32 -1, i32 -1, i1 false, i1 true)
  %12 = and i32 %1, 16
  %13 = icmp eq i32 %12, 0
  %14 = select i1 %13, i32 0, i32 %11
  %15 = xor i32 %14, %10
  %16 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %23, label %18

18:                                               ; preds = %2
  %19 = icmp ugt i32 %1, 31
  %20 = tail call i32 @llvm.amdgcn.readlane(i32 %15, i32 31)
  %21 = select i1 %19, i32 %20, i32 0
  %22 = xor i32 %21, %15
  br label %23

23:                                               ; preds = %18, %2
  %24 = phi i32 [ %22, %18 ], [ %15, %2 ]
  ret i32 %24
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i32 @241(i32 noundef %0) unnamed_addr #54 {
  %2 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %0, i32 312, i32 15, i32 15, i1 true)
  ret i32 %2
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i32 @242(i32 noundef %0, i32 noundef %1) unnamed_addr #55 {
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %0, i32 273, i32 15, i32 15, i1 true)
  %4 = tail call i32 @llvm.amdgcn.permlanex16(i32 undef, i32 %0, i32 -1, i32 -1, i1 false, i1 true)
  %5 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %15, label %7

7:                                                ; preds = %2
  %8 = tail call i32 @llvm.amdgcn.readlane(i32 %0, i32 31)
  %9 = icmp eq i32 %1, 32
  %10 = select i1 %9, i32 %8, i32 %4
  %11 = and i32 %1, 31
  %12 = icmp eq i32 %11, 16
  %13 = or i1 %9, %12
  %14 = select i1 %13, i32 %10, i32 %3
  br label %18

15:                                               ; preds = %2
  %16 = icmp eq i32 %1, 16
  %17 = select i1 %16, i32 %4, i32 %3
  br label %18

18:                                               ; preds = %15, %7
  %19 = phi i32 [ %14, %7 ], [ %17, %15 ]
  ret i32 %19
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected i32 @__ockl_wfred_xor_u32(i32 noundef %0) local_unnamed_addr #0 {
  %2 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %3 = icmp slt i32 %2, 8000
  br i1 %3, label %4, label %37

4:                                                ; preds = %1
  %5 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %10, label %7

7:                                                ; preds = %4
  %8 = tail call i64 @llvm.read_register.i64(metadata !36) #57
  %9 = icmp eq i64 %8, -1
  br label %13

10:                                               ; preds = %4
  %11 = tail call i32 @llvm.read_register.i32(metadata !10) #57
  %12 = icmp eq i32 %11, -1
  br label %13

13:                                               ; preds = %10, %7
  %14 = phi i1 [ %9, %7 ], [ %12, %10 ]
  %15 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %0, i32 32945)
  %16 = xor i32 %15, %0
  %17 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %16, i32 32846)
  %18 = xor i32 %16, %17
  %19 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %18, i32 4127)
  %20 = xor i32 %18, %19
  %21 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %20, i32 8223)
  %22 = xor i32 %20, %21
  %23 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %22, i32 16415)
  %24 = xor i32 %22, %23
  br i1 %14, label %25, label %29

25:                                               ; preds = %13
  %26 = tail call i32 @llvm.amdgcn.readlane(i32 %24, i32 0)
  %27 = tail call i32 @llvm.amdgcn.readlane(i32 %24, i32 32)
  %28 = xor i32 %27, %26
  br label %43

29:                                               ; preds = %13
  %30 = tail call i32 @llvm.amdgcn.readlane(i32 %24, i32 32)
  %31 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %32 = and i32 %31, 1
  %33 = icmp eq i32 %32, 0
  %34 = select i1 %33, i32 0, i32 %30
  %35 = tail call i32 @llvm.amdgcn.readlane(i32 %24, i32 0)
  %36 = xor i32 %34, %35
  br label %43

37:                                               ; preds = %1
  %38 = icmp ult i32 %2, 10000
  br i1 %38, label %39, label %41

39:                                               ; preds = %37
  %40 = tail call fastcc i32 @243(i32 noundef %0) #57
  br label %43

41:                                               ; preds = %37
  %42 = tail call fastcc i32 @244(i32 noundef %0) #57
  br label %43

43:                                               ; preds = %41, %39, %29, %25
  %44 = phi i32 [ %28, %25 ], [ %36, %29 ], [ %40, %39 ], [ %42, %41 ]
  ret i32 %44
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc i32 @243(i32 noundef %0) unnamed_addr #52 {
  %2 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %0, i32 257, i32 15, i32 15, i1 true)
  %3 = xor i32 %2, %0
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %3, i32 258, i32 15, i32 15, i1 true)
  %5 = xor i32 %3, %4
  %6 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %5, i32 260, i32 15, i32 15, i1 true)
  %7 = xor i32 %5, %6
  %8 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %7, i32 264, i32 15, i32 15, i1 true)
  %9 = xor i32 %7, %8
  %10 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %9, i32 304, i32 15, i32 15, i1 true)
  %11 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %10, i32 320, i32 15, i32 15, i1 true)
  %12 = xor i32 %11, %9
  %13 = tail call i32 @llvm.amdgcn.readlane(i32 %12, i32 32)
  %14 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %15 = and i32 %14, 1
  %16 = icmp eq i32 %15, 0
  %17 = select i1 %16, i32 0, i32 %13
  %18 = tail call i32 @llvm.amdgcn.readlane(i32 %12, i32 0)
  %19 = xor i32 %17, %18
  ret i32 %19
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc i32 @244(i32 noundef %0) unnamed_addr #53 {
  %2 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %0, i32 257, i32 15, i32 15, i1 true)
  %3 = xor i32 %2, %0
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %3, i32 258, i32 15, i32 15, i1 true)
  %5 = xor i32 %3, %4
  %6 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %5, i32 260, i32 15, i32 15, i1 true)
  %7 = xor i32 %5, %6
  %8 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %7, i32 264, i32 15, i32 15, i1 true)
  %9 = xor i32 %7, %8
  %10 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %9, i32 336, i32 15, i32 15, i1 true)
  %11 = tail call i32 @llvm.amdgcn.permlanex16(i32 undef, i32 %10, i32 0, i32 0, i1 false, i1 true)
  %12 = xor i32 %11, %10
  %13 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %23, label %15

15:                                               ; preds = %1
  %16 = tail call i32 @llvm.amdgcn.readlane(i32 %12, i32 32)
  %17 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %18 = and i32 %17, 1
  %19 = icmp eq i32 %18, 0
  %20 = select i1 %19, i32 0, i32 %16
  %21 = tail call i32 @llvm.amdgcn.readlane(i32 %12, i32 0)
  %22 = xor i32 %20, %21
  br label %23

23:                                               ; preds = %15, %1
  %24 = phi i32 [ %22, %15 ], [ %12, %1 ]
  ret i32 %24
}

; Function Attrs: convergent norecurse nounwind
define linkonce_odr protected i32 @__ockl_wfscan_xor_u32(i32 noundef %0, i1 noundef zeroext %1) local_unnamed_addr #12 {
  %3 = tail call i32 @__ockl_lane_u32() #58
  %4 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %5 = icmp slt i32 %4, 8000
  br i1 %5, label %6, label %36

6:                                                ; preds = %2
  %7 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %0, i32 30)
  %8 = and i32 %3, 1
  %9 = icmp eq i32 %8, 0
  %10 = select i1 %9, i32 0, i32 %7
  %11 = xor i32 %10, %0
  %12 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %11, i32 60)
  %13 = and i32 %3, 2
  %14 = icmp eq i32 %13, 0
  %15 = select i1 %14, i32 0, i32 %12
  %16 = xor i32 %11, %15
  %17 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %16, i32 120)
  %18 = and i32 %3, 4
  %19 = icmp eq i32 %18, 0
  %20 = select i1 %19, i32 0, i32 %17
  %21 = xor i32 %16, %20
  %22 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %21, i32 240)
  %23 = and i32 %3, 8
  %24 = icmp eq i32 %23, 0
  %25 = select i1 %24, i32 0, i32 %22
  %26 = xor i32 %21, %25
  %27 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %26, i32 480)
  %28 = and i32 %3, 16
  %29 = icmp eq i32 %28, 0
  %30 = select i1 %29, i32 0, i32 %27
  %31 = xor i32 %26, %30
  %32 = tail call i32 @llvm.amdgcn.readlane(i32 %31, i32 31)
  %33 = icmp ugt i32 %3, 31
  %34 = select i1 %33, i32 %32, i32 0
  %35 = xor i32 %31, %34
  br label %42

36:                                               ; preds = %2
  %37 = icmp ult i32 %4, 10000
  br i1 %37, label %38, label %40

38:                                               ; preds = %36
  %39 = tail call fastcc i32 @245(i32 noundef %0) #57
  br label %42

40:                                               ; preds = %36
  %41 = tail call fastcc i32 @246(i32 noundef %0, i32 noundef %3) #57
  br label %42

42:                                               ; preds = %40, %38, %6
  %43 = phi i32 [ %35, %6 ], [ %39, %38 ], [ %41, %40 ]
  br i1 %1, label %70, label %44

44:                                               ; preds = %42
  br i1 %5, label %45, label %64

45:                                               ; preds = %44
  %46 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %43, i32 32912)
  %47 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %43, i32 120)
  %48 = and i32 %3, 7
  %49 = icmp eq i32 %48, 4
  %50 = select i1 %49, i32 %47, i32 %46
  %51 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %43, i32 240)
  %52 = and i32 %3, 15
  %53 = icmp eq i32 %52, 8
  %54 = select i1 %53, i32 %51, i32 %50
  %55 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %43, i32 480)
  %56 = and i32 %3, 31
  %57 = icmp eq i32 %56, 16
  %58 = select i1 %57, i32 %55, i32 %54
  %59 = tail call i32 @llvm.amdgcn.readlane(i32 %43, i32 31)
  %60 = icmp eq i32 %3, 32
  %61 = select i1 %60, i32 %59, i32 %58
  %62 = icmp eq i32 %3, 0
  %63 = select i1 %62, i32 0, i32 %61
  br label %70

64:                                               ; preds = %44
  %65 = icmp ult i32 %4, 10000
  br i1 %65, label %66, label %68

66:                                               ; preds = %64
  %67 = tail call fastcc i32 @247(i32 noundef %43) #57
  br label %70

68:                                               ; preds = %64
  %69 = tail call fastcc i32 @248(i32 noundef %43, i32 noundef %3) #57
  br label %70

70:                                               ; preds = %68, %66, %45, %42
  %71 = phi i32 [ %43, %42 ], [ %63, %45 ], [ %67, %66 ], [ %69, %68 ]
  ret i32 %71
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i32 @245(i32 noundef %0) unnamed_addr #54 {
  %2 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %0, i32 273, i32 15, i32 15, i1 true)
  %3 = xor i32 %2, %0
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %3, i32 274, i32 15, i32 15, i1 true)
  %5 = xor i32 %3, %4
  %6 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %5, i32 276, i32 15, i32 15, i1 true)
  %7 = xor i32 %5, %6
  %8 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %7, i32 280, i32 15, i32 15, i1 true)
  %9 = xor i32 %7, %8
  %10 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %9, i32 322, i32 10, i32 15, i1 false)
  %11 = xor i32 %9, %10
  %12 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %11, i32 323, i32 12, i32 15, i1 false)
  %13 = xor i32 %11, %12
  ret i32 %13
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i32 @246(i32 noundef %0, i32 noundef %1) unnamed_addr #55 {
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %0, i32 273, i32 15, i32 15, i1 true)
  %4 = xor i32 %3, %0
  %5 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %4, i32 274, i32 15, i32 15, i1 true)
  %6 = xor i32 %4, %5
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %6, i32 276, i32 15, i32 15, i1 true)
  %8 = xor i32 %6, %7
  %9 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %8, i32 280, i32 15, i32 15, i1 true)
  %10 = xor i32 %8, %9
  %11 = tail call i32 @llvm.amdgcn.permlanex16(i32 undef, i32 %10, i32 -1, i32 -1, i1 false, i1 true)
  %12 = and i32 %1, 16
  %13 = icmp eq i32 %12, 0
  %14 = select i1 %13, i32 0, i32 %11
  %15 = xor i32 %14, %10
  %16 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %23, label %18

18:                                               ; preds = %2
  %19 = icmp ugt i32 %1, 31
  %20 = tail call i32 @llvm.amdgcn.readlane(i32 %15, i32 31)
  %21 = select i1 %19, i32 %20, i32 0
  %22 = xor i32 %21, %15
  br label %23

23:                                               ; preds = %18, %2
  %24 = phi i32 [ %22, %18 ], [ %15, %2 ]
  ret i32 %24
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i32 @247(i32 noundef %0) unnamed_addr #54 {
  %2 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %0, i32 312, i32 15, i32 15, i1 true)
  ret i32 %2
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i32 @248(i32 noundef %0, i32 noundef %1) unnamed_addr #55 {
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %0, i32 273, i32 15, i32 15, i1 true)
  %4 = tail call i32 @llvm.amdgcn.permlanex16(i32 undef, i32 %0, i32 -1, i32 -1, i1 false, i1 true)
  %5 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %15, label %7

7:                                                ; preds = %2
  %8 = tail call i32 @llvm.amdgcn.readlane(i32 %0, i32 31)
  %9 = icmp eq i32 %1, 32
  %10 = select i1 %9, i32 %8, i32 %4
  %11 = and i32 %1, 31
  %12 = icmp eq i32 %11, 16
  %13 = or i1 %9, %12
  %14 = select i1 %13, i32 %10, i32 %3
  br label %18

15:                                               ; preds = %2
  %16 = icmp eq i32 %1, 16
  %17 = select i1 %16, i32 %4, i32 %3
  br label %18

18:                                               ; preds = %15, %7
  %19 = phi i32 [ %14, %7 ], [ %17, %15 ]
  ret i32 %19
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected i64 @__ockl_wfred_xor_i64(i64 noundef %0) local_unnamed_addr #0 {
  %2 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %3 = icmp slt i32 %2, 8000
  br i1 %3, label %4, label %92

4:                                                ; preds = %1
  %5 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %10, label %7

7:                                                ; preds = %4
  %8 = tail call i64 @llvm.read_register.i64(metadata !36) #57
  %9 = icmp eq i64 %8, -1
  br label %13

10:                                               ; preds = %4
  %11 = tail call i32 @llvm.read_register.i32(metadata !10) #57
  %12 = icmp eq i32 %11, -1
  br label %13

13:                                               ; preds = %10, %7
  %14 = phi i1 [ %9, %7 ], [ %12, %10 ]
  %15 = trunc i64 %0 to i32
  %16 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %15, i32 32945)
  %17 = insertelement <2 x i32> undef, i32 %16, i64 0
  %18 = lshr i64 %0, 32
  %19 = trunc i64 %18 to i32
  %20 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %19, i32 32945)
  %21 = insertelement <2 x i32> %17, i32 %20, i64 1
  %22 = bitcast <2 x i32> %21 to i64
  %23 = xor i64 %22, %0
  %24 = trunc i64 %23 to i32
  %25 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %24, i32 32846)
  %26 = insertelement <2 x i32> undef, i32 %25, i64 0
  %27 = lshr i64 %23, 32
  %28 = trunc i64 %27 to i32
  %29 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %28, i32 32846)
  %30 = insertelement <2 x i32> %26, i32 %29, i64 1
  %31 = bitcast <2 x i32> %30 to i64
  %32 = xor i64 %23, %31
  %33 = trunc i64 %32 to i32
  %34 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %33, i32 4127)
  %35 = insertelement <2 x i32> undef, i32 %34, i64 0
  %36 = lshr i64 %32, 32
  %37 = trunc i64 %36 to i32
  %38 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %37, i32 4127)
  %39 = insertelement <2 x i32> %35, i32 %38, i64 1
  %40 = bitcast <2 x i32> %39 to i64
  %41 = xor i64 %32, %40
  %42 = trunc i64 %41 to i32
  %43 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %42, i32 8223)
  %44 = insertelement <2 x i32> undef, i32 %43, i64 0
  %45 = lshr i64 %41, 32
  %46 = trunc i64 %45 to i32
  %47 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %46, i32 8223)
  %48 = insertelement <2 x i32> %44, i32 %47, i64 1
  %49 = bitcast <2 x i32> %48 to i64
  %50 = xor i64 %41, %49
  %51 = trunc i64 %50 to i32
  %52 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %51, i32 16415)
  %53 = insertelement <2 x i32> undef, i32 %52, i64 0
  %54 = lshr i64 %50, 32
  %55 = trunc i64 %54 to i32
  %56 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %55, i32 16415)
  %57 = insertelement <2 x i32> %53, i32 %56, i64 1
  %58 = bitcast <2 x i32> %57 to i64
  %59 = xor i64 %50, %58
  %60 = trunc i64 %59 to i32
  br i1 %14, label %61, label %74

61:                                               ; preds = %13
  %62 = tail call i32 @llvm.amdgcn.readlane(i32 %60, i32 0)
  %63 = insertelement <2 x i32> undef, i32 %62, i64 0
  %64 = lshr i64 %59, 32
  %65 = trunc i64 %64 to i32
  %66 = tail call i32 @llvm.amdgcn.readlane(i32 %65, i32 0)
  %67 = insertelement <2 x i32> %63, i32 %66, i64 1
  %68 = tail call i32 @llvm.amdgcn.readlane(i32 %60, i32 32)
  %69 = insertelement <2 x i32> undef, i32 %68, i64 0
  %70 = tail call i32 @llvm.amdgcn.readlane(i32 %65, i32 32)
  %71 = insertelement <2 x i32> %69, i32 %70, i64 1
  %72 = xor <2 x i32> %71, %67
  %73 = bitcast <2 x i32> %72 to i64
  br label %98

74:                                               ; preds = %13
  %75 = tail call i32 @llvm.amdgcn.readlane(i32 %60, i32 32)
  %76 = insertelement <2 x i32> undef, i32 %75, i64 0
  %77 = lshr i64 %59, 32
  %78 = trunc i64 %77 to i32
  %79 = tail call i32 @llvm.amdgcn.readlane(i32 %78, i32 32)
  %80 = insertelement <2 x i32> %76, i32 %79, i64 1
  %81 = bitcast <2 x i32> %80 to i64
  %82 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %83 = and i32 %82, 1
  %84 = icmp eq i32 %83, 0
  %85 = select i1 %84, i64 0, i64 %81
  %86 = tail call i32 @llvm.amdgcn.readlane(i32 %60, i32 0)
  %87 = insertelement <2 x i32> undef, i32 %86, i64 0
  %88 = tail call i32 @llvm.amdgcn.readlane(i32 %78, i32 0)
  %89 = insertelement <2 x i32> %87, i32 %88, i64 1
  %90 = bitcast <2 x i32> %89 to i64
  %91 = xor i64 %85, %90
  br label %98

92:                                               ; preds = %1
  %93 = icmp ult i32 %2, 10000
  br i1 %93, label %94, label %96

94:                                               ; preds = %92
  %95 = tail call fastcc i64 @249(i64 noundef %0) #57
  br label %98

96:                                               ; preds = %92
  %97 = tail call fastcc i64 @250(i64 noundef %0) #57
  br label %98

98:                                               ; preds = %96, %94, %74, %61
  %99 = phi i64 [ %73, %61 ], [ %91, %74 ], [ %95, %94 ], [ %97, %96 ]
  ret i64 %99
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc i64 @249(i64 noundef %0) unnamed_addr #52 {
  %2 = trunc i64 %0 to i32
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %2, i32 257, i32 15, i32 15, i1 true)
  %4 = insertelement <2 x i32> undef, i32 %3, i64 0
  %5 = lshr i64 %0, 32
  %6 = trunc i64 %5 to i32
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %6, i32 257, i32 15, i32 15, i1 true)
  %8 = insertelement <2 x i32> %4, i32 %7, i64 1
  %9 = bitcast <2 x i32> %8 to i64
  %10 = xor i64 %9, %0
  %11 = trunc i64 %10 to i32
  %12 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %11, i32 258, i32 15, i32 15, i1 true)
  %13 = insertelement <2 x i32> undef, i32 %12, i64 0
  %14 = lshr i64 %10, 32
  %15 = trunc i64 %14 to i32
  %16 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %15, i32 258, i32 15, i32 15, i1 true)
  %17 = insertelement <2 x i32> %13, i32 %16, i64 1
  %18 = bitcast <2 x i32> %17 to i64
  %19 = xor i64 %10, %18
  %20 = trunc i64 %19 to i32
  %21 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %20, i32 260, i32 15, i32 15, i1 true)
  %22 = insertelement <2 x i32> undef, i32 %21, i64 0
  %23 = lshr i64 %19, 32
  %24 = trunc i64 %23 to i32
  %25 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %24, i32 260, i32 15, i32 15, i1 true)
  %26 = insertelement <2 x i32> %22, i32 %25, i64 1
  %27 = bitcast <2 x i32> %26 to i64
  %28 = xor i64 %19, %27
  %29 = trunc i64 %28 to i32
  %30 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %29, i32 264, i32 15, i32 15, i1 true)
  %31 = insertelement <2 x i32> undef, i32 %30, i64 0
  %32 = lshr i64 %28, 32
  %33 = trunc i64 %32 to i32
  %34 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %33, i32 264, i32 15, i32 15, i1 true)
  %35 = insertelement <2 x i32> %31, i32 %34, i64 1
  %36 = bitcast <2 x i32> %35 to i64
  %37 = xor i64 %28, %36
  %38 = trunc i64 %37 to i32
  %39 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %38, i32 304, i32 15, i32 15, i1 true)
  %40 = lshr i64 %37, 32
  %41 = trunc i64 %40 to i32
  %42 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %41, i32 304, i32 15, i32 15, i1 true)
  %43 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %39, i32 320, i32 15, i32 15, i1 true)
  %44 = insertelement <2 x i32> undef, i32 %43, i64 0
  %45 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %42, i32 320, i32 15, i32 15, i1 true)
  %46 = insertelement <2 x i32> %44, i32 %45, i64 1
  %47 = bitcast <2 x i32> %46 to i64
  %48 = xor i64 %37, %47
  %49 = trunc i64 %48 to i32
  %50 = tail call i32 @llvm.amdgcn.readlane(i32 %49, i32 32)
  %51 = insertelement <2 x i32> undef, i32 %50, i64 0
  %52 = lshr i64 %48, 32
  %53 = trunc i64 %52 to i32
  %54 = tail call i32 @llvm.amdgcn.readlane(i32 %53, i32 32)
  %55 = insertelement <2 x i32> %51, i32 %54, i64 1
  %56 = bitcast <2 x i32> %55 to i64
  %57 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %58 = and i32 %57, 1
  %59 = icmp eq i32 %58, 0
  %60 = select i1 %59, i64 0, i64 %56
  %61 = tail call i32 @llvm.amdgcn.readlane(i32 %49, i32 0)
  %62 = insertelement <2 x i32> undef, i32 %61, i64 0
  %63 = tail call i32 @llvm.amdgcn.readlane(i32 %53, i32 0)
  %64 = insertelement <2 x i32> %62, i32 %63, i64 1
  %65 = bitcast <2 x i32> %64 to i64
  %66 = xor i64 %60, %65
  ret i64 %66
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc i64 @250(i64 noundef %0) unnamed_addr #53 {
  %2 = trunc i64 %0 to i32
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %2, i32 257, i32 15, i32 15, i1 true)
  %4 = insertelement <2 x i32> undef, i32 %3, i64 0
  %5 = lshr i64 %0, 32
  %6 = trunc i64 %5 to i32
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %6, i32 257, i32 15, i32 15, i1 true)
  %8 = insertelement <2 x i32> %4, i32 %7, i64 1
  %9 = bitcast <2 x i32> %8 to i64
  %10 = xor i64 %9, %0
  %11 = trunc i64 %10 to i32
  %12 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %11, i32 258, i32 15, i32 15, i1 true)
  %13 = insertelement <2 x i32> undef, i32 %12, i64 0
  %14 = lshr i64 %10, 32
  %15 = trunc i64 %14 to i32
  %16 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %15, i32 258, i32 15, i32 15, i1 true)
  %17 = insertelement <2 x i32> %13, i32 %16, i64 1
  %18 = bitcast <2 x i32> %17 to i64
  %19 = xor i64 %10, %18
  %20 = trunc i64 %19 to i32
  %21 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %20, i32 260, i32 15, i32 15, i1 true)
  %22 = insertelement <2 x i32> undef, i32 %21, i64 0
  %23 = lshr i64 %19, 32
  %24 = trunc i64 %23 to i32
  %25 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %24, i32 260, i32 15, i32 15, i1 true)
  %26 = insertelement <2 x i32> %22, i32 %25, i64 1
  %27 = bitcast <2 x i32> %26 to i64
  %28 = xor i64 %19, %27
  %29 = trunc i64 %28 to i32
  %30 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %29, i32 264, i32 15, i32 15, i1 true)
  %31 = insertelement <2 x i32> undef, i32 %30, i64 0
  %32 = lshr i64 %28, 32
  %33 = trunc i64 %32 to i32
  %34 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %33, i32 264, i32 15, i32 15, i1 true)
  %35 = insertelement <2 x i32> %31, i32 %34, i64 1
  %36 = bitcast <2 x i32> %35 to i64
  %37 = xor i64 %28, %36
  %38 = trunc i64 %37 to i32
  %39 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %38, i32 336, i32 15, i32 15, i1 true)
  %40 = insertelement <2 x i32> undef, i32 %39, i64 0
  %41 = lshr i64 %37, 32
  %42 = trunc i64 %41 to i32
  %43 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %42, i32 336, i32 15, i32 15, i1 true)
  %44 = insertelement <2 x i32> %40, i32 %43, i64 1
  %45 = tail call i32 @llvm.amdgcn.permlanex16(i32 undef, i32 %39, i32 0, i32 0, i1 false, i1 true)
  %46 = insertelement <2 x i32> undef, i32 %45, i64 0
  %47 = tail call i32 @llvm.amdgcn.permlanex16(i32 undef, i32 %43, i32 0, i32 0, i1 false, i1 true)
  %48 = insertelement <2 x i32> %46, i32 %47, i64 1
  %49 = xor <2 x i32> %48, %44
  %50 = bitcast <2 x i32> %49 to i64
  %51 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %52 = icmp eq i8 %51, 0
  br i1 %52, label %71, label %53

53:                                               ; preds = %1
  %54 = extractelement <2 x i32> %49, i64 0
  %55 = tail call i32 @llvm.amdgcn.readlane(i32 %54, i32 32)
  %56 = insertelement <2 x i32> undef, i32 %55, i64 0
  %57 = extractelement <2 x i32> %49, i64 1
  %58 = tail call i32 @llvm.amdgcn.readlane(i32 %57, i32 32)
  %59 = insertelement <2 x i32> %56, i32 %58, i64 1
  %60 = bitcast <2 x i32> %59 to i64
  %61 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %62 = and i32 %61, 1
  %63 = icmp eq i32 %62, 0
  %64 = select i1 %63, i64 0, i64 %60
  %65 = tail call i32 @llvm.amdgcn.readlane(i32 %54, i32 0)
  %66 = insertelement <2 x i32> undef, i32 %65, i64 0
  %67 = tail call i32 @llvm.amdgcn.readlane(i32 %57, i32 0)
  %68 = insertelement <2 x i32> %66, i32 %67, i64 1
  %69 = bitcast <2 x i32> %68 to i64
  %70 = xor i64 %64, %69
  br label %71

71:                                               ; preds = %53, %1
  %72 = phi i64 [ %70, %53 ], [ %50, %1 ]
  ret i64 %72
}

; Function Attrs: convergent norecurse nounwind
define linkonce_odr protected i64 @__ockl_wfscan_xor_i64(i64 noundef %0, i1 noundef zeroext %1) local_unnamed_addr #12 {
  %3 = tail call i32 @__ockl_lane_u32() #58
  %4 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %5 = icmp slt i32 %4, 8000
  br i1 %5, label %6, label %78

6:                                                ; preds = %2
  %7 = trunc i64 %0 to i32
  %8 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %7, i32 30)
  %9 = insertelement <2 x i32> undef, i32 %8, i64 0
  %10 = lshr i64 %0, 32
  %11 = trunc i64 %10 to i32
  %12 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %11, i32 30)
  %13 = insertelement <2 x i32> %9, i32 %12, i64 1
  %14 = bitcast <2 x i32> %13 to i64
  %15 = and i32 %3, 1
  %16 = icmp eq i32 %15, 0
  %17 = select i1 %16, i64 0, i64 %14
  %18 = xor i64 %17, %0
  %19 = trunc i64 %18 to i32
  %20 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %19, i32 60)
  %21 = insertelement <2 x i32> undef, i32 %20, i64 0
  %22 = lshr i64 %18, 32
  %23 = trunc i64 %22 to i32
  %24 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %23, i32 60)
  %25 = insertelement <2 x i32> %21, i32 %24, i64 1
  %26 = bitcast <2 x i32> %25 to i64
  %27 = and i32 %3, 2
  %28 = icmp eq i32 %27, 0
  %29 = select i1 %28, i64 0, i64 %26
  %30 = xor i64 %29, %18
  %31 = trunc i64 %30 to i32
  %32 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %31, i32 120)
  %33 = insertelement <2 x i32> undef, i32 %32, i64 0
  %34 = lshr i64 %30, 32
  %35 = trunc i64 %34 to i32
  %36 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %35, i32 120)
  %37 = insertelement <2 x i32> %33, i32 %36, i64 1
  %38 = bitcast <2 x i32> %37 to i64
  %39 = and i32 %3, 4
  %40 = icmp eq i32 %39, 0
  %41 = select i1 %40, i64 0, i64 %38
  %42 = xor i64 %41, %30
  %43 = trunc i64 %42 to i32
  %44 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %43, i32 240)
  %45 = insertelement <2 x i32> undef, i32 %44, i64 0
  %46 = lshr i64 %42, 32
  %47 = trunc i64 %46 to i32
  %48 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %47, i32 240)
  %49 = insertelement <2 x i32> %45, i32 %48, i64 1
  %50 = bitcast <2 x i32> %49 to i64
  %51 = and i32 %3, 8
  %52 = icmp eq i32 %51, 0
  %53 = select i1 %52, i64 0, i64 %50
  %54 = xor i64 %53, %42
  %55 = trunc i64 %54 to i32
  %56 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %55, i32 480)
  %57 = insertelement <2 x i32> undef, i32 %56, i64 0
  %58 = lshr i64 %54, 32
  %59 = trunc i64 %58 to i32
  %60 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %59, i32 480)
  %61 = insertelement <2 x i32> %57, i32 %60, i64 1
  %62 = bitcast <2 x i32> %61 to i64
  %63 = and i32 %3, 16
  %64 = icmp eq i32 %63, 0
  %65 = select i1 %64, i64 0, i64 %62
  %66 = xor i64 %65, %54
  %67 = trunc i64 %66 to i32
  %68 = tail call i32 @llvm.amdgcn.readlane(i32 %67, i32 31)
  %69 = insertelement <2 x i32> undef, i32 %68, i64 0
  %70 = lshr i64 %66, 32
  %71 = trunc i64 %70 to i32
  %72 = tail call i32 @llvm.amdgcn.readlane(i32 %71, i32 31)
  %73 = insertelement <2 x i32> %69, i32 %72, i64 1
  %74 = bitcast <2 x i32> %73 to i64
  %75 = icmp ugt i32 %3, 31
  %76 = select i1 %75, i64 %74, i64 0
  %77 = xor i64 %76, %66
  br label %84

78:                                               ; preds = %2
  %79 = icmp ult i32 %4, 10000
  br i1 %79, label %80, label %82

80:                                               ; preds = %78
  %81 = tail call fastcc i64 @251(i64 noundef %0) #57
  br label %84

82:                                               ; preds = %78
  %83 = tail call fastcc i64 @252(i64 noundef %0, i32 noundef %3) #57
  br label %84

84:                                               ; preds = %82, %80, %6
  %85 = phi i64 [ %77, %6 ], [ %81, %80 ], [ %83, %82 ]
  br i1 %1, label %131, label %86

86:                                               ; preds = %84
  br i1 %5, label %87, label %125

87:                                               ; preds = %86
  %88 = trunc i64 %85 to i32
  %89 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %88, i32 32912)
  %90 = insertelement <2 x i32> undef, i32 %89, i64 0
  %91 = lshr i64 %85, 32
  %92 = trunc i64 %91 to i32
  %93 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %92, i32 32912)
  %94 = insertelement <2 x i32> %90, i32 %93, i64 1
  %95 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %88, i32 120)
  %96 = insertelement <2 x i32> undef, i32 %95, i64 0
  %97 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %92, i32 120)
  %98 = insertelement <2 x i32> %96, i32 %97, i64 1
  %99 = and i32 %3, 7
  %100 = icmp eq i32 %99, 4
  %101 = select i1 %100, <2 x i32> %98, <2 x i32> %94
  %102 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %88, i32 240)
  %103 = insertelement <2 x i32> undef, i32 %102, i64 0
  %104 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %92, i32 240)
  %105 = insertelement <2 x i32> %103, i32 %104, i64 1
  %106 = and i32 %3, 15
  %107 = icmp eq i32 %106, 8
  %108 = select i1 %107, <2 x i32> %105, <2 x i32> %101
  %109 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %88, i32 480)
  %110 = insertelement <2 x i32> undef, i32 %109, i64 0
  %111 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %92, i32 480)
  %112 = insertelement <2 x i32> %110, i32 %111, i64 1
  %113 = and i32 %3, 31
  %114 = icmp eq i32 %113, 16
  %115 = select i1 %114, <2 x i32> %112, <2 x i32> %108
  %116 = tail call i32 @llvm.amdgcn.readlane(i32 %88, i32 31)
  %117 = insertelement <2 x i32> undef, i32 %116, i64 0
  %118 = tail call i32 @llvm.amdgcn.readlane(i32 %92, i32 31)
  %119 = insertelement <2 x i32> %117, i32 %118, i64 1
  %120 = icmp eq i32 %3, 32
  %121 = select i1 %120, <2 x i32> %119, <2 x i32> %115
  %122 = bitcast <2 x i32> %121 to i64
  %123 = icmp eq i32 %3, 0
  %124 = select i1 %123, i64 0, i64 %122
  br label %131

125:                                              ; preds = %86
  %126 = icmp ult i32 %4, 10000
  br i1 %126, label %127, label %129

127:                                              ; preds = %125
  %128 = tail call fastcc i64 @253(i64 noundef %85) #57
  br label %131

129:                                              ; preds = %125
  %130 = tail call fastcc i64 @254(i64 noundef %85, i32 noundef %3) #57
  br label %131

131:                                              ; preds = %129, %127, %87, %84
  %132 = phi i64 [ %85, %84 ], [ %124, %87 ], [ %128, %127 ], [ %130, %129 ]
  ret i64 %132
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i64 @251(i64 noundef %0) unnamed_addr #54 {
  %2 = trunc i64 %0 to i32
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %2, i32 273, i32 15, i32 15, i1 true)
  %4 = insertelement <2 x i32> undef, i32 %3, i64 0
  %5 = lshr i64 %0, 32
  %6 = trunc i64 %5 to i32
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %6, i32 273, i32 15, i32 15, i1 true)
  %8 = insertelement <2 x i32> %4, i32 %7, i64 1
  %9 = bitcast <2 x i32> %8 to i64
  %10 = xor i64 %9, %0
  %11 = trunc i64 %10 to i32
  %12 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %11, i32 274, i32 15, i32 15, i1 true)
  %13 = insertelement <2 x i32> undef, i32 %12, i64 0
  %14 = lshr i64 %10, 32
  %15 = trunc i64 %14 to i32
  %16 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %15, i32 274, i32 15, i32 15, i1 true)
  %17 = insertelement <2 x i32> %13, i32 %16, i64 1
  %18 = bitcast <2 x i32> %17 to i64
  %19 = xor i64 %10, %18
  %20 = trunc i64 %19 to i32
  %21 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %20, i32 276, i32 15, i32 15, i1 true)
  %22 = insertelement <2 x i32> undef, i32 %21, i64 0
  %23 = lshr i64 %19, 32
  %24 = trunc i64 %23 to i32
  %25 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %24, i32 276, i32 15, i32 15, i1 true)
  %26 = insertelement <2 x i32> %22, i32 %25, i64 1
  %27 = bitcast <2 x i32> %26 to i64
  %28 = xor i64 %19, %27
  %29 = trunc i64 %28 to i32
  %30 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %29, i32 280, i32 15, i32 15, i1 true)
  %31 = insertelement <2 x i32> undef, i32 %30, i64 0
  %32 = lshr i64 %28, 32
  %33 = trunc i64 %32 to i32
  %34 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %33, i32 280, i32 15, i32 15, i1 true)
  %35 = insertelement <2 x i32> %31, i32 %34, i64 1
  %36 = bitcast <2 x i32> %35 to i64
  %37 = xor i64 %28, %36
  %38 = trunc i64 %37 to i32
  %39 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %38, i32 322, i32 10, i32 15, i1 false)
  %40 = insertelement <2 x i32> undef, i32 %39, i64 0
  %41 = lshr i64 %37, 32
  %42 = trunc i64 %41 to i32
  %43 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %42, i32 322, i32 10, i32 15, i1 false)
  %44 = insertelement <2 x i32> %40, i32 %43, i64 1
  %45 = bitcast <2 x i32> %44 to i64
  %46 = xor i64 %37, %45
  %47 = trunc i64 %46 to i32
  %48 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %47, i32 323, i32 12, i32 15, i1 false)
  %49 = insertelement <2 x i32> undef, i32 %48, i64 0
  %50 = lshr i64 %46, 32
  %51 = trunc i64 %50 to i32
  %52 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %51, i32 323, i32 12, i32 15, i1 false)
  %53 = insertelement <2 x i32> %49, i32 %52, i64 1
  %54 = bitcast <2 x i32> %53 to i64
  %55 = xor i64 %46, %54
  ret i64 %55
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i64 @252(i64 noundef %0, i32 noundef %1) unnamed_addr #55 {
  %3 = trunc i64 %0 to i32
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %3, i32 273, i32 15, i32 15, i1 true)
  %5 = insertelement <2 x i32> undef, i32 %4, i64 0
  %6 = lshr i64 %0, 32
  %7 = trunc i64 %6 to i32
  %8 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %7, i32 273, i32 15, i32 15, i1 true)
  %9 = insertelement <2 x i32> %5, i32 %8, i64 1
  %10 = bitcast <2 x i32> %9 to i64
  %11 = xor i64 %10, %0
  %12 = trunc i64 %11 to i32
  %13 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %12, i32 274, i32 15, i32 15, i1 true)
  %14 = insertelement <2 x i32> undef, i32 %13, i64 0
  %15 = lshr i64 %11, 32
  %16 = trunc i64 %15 to i32
  %17 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %16, i32 274, i32 15, i32 15, i1 true)
  %18 = insertelement <2 x i32> %14, i32 %17, i64 1
  %19 = bitcast <2 x i32> %18 to i64
  %20 = xor i64 %11, %19
  %21 = trunc i64 %20 to i32
  %22 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %21, i32 276, i32 15, i32 15, i1 true)
  %23 = insertelement <2 x i32> undef, i32 %22, i64 0
  %24 = lshr i64 %20, 32
  %25 = trunc i64 %24 to i32
  %26 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %25, i32 276, i32 15, i32 15, i1 true)
  %27 = insertelement <2 x i32> %23, i32 %26, i64 1
  %28 = bitcast <2 x i32> %27 to i64
  %29 = xor i64 %20, %28
  %30 = trunc i64 %29 to i32
  %31 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %30, i32 280, i32 15, i32 15, i1 true)
  %32 = insertelement <2 x i32> undef, i32 %31, i64 0
  %33 = lshr i64 %29, 32
  %34 = trunc i64 %33 to i32
  %35 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %34, i32 280, i32 15, i32 15, i1 true)
  %36 = insertelement <2 x i32> %32, i32 %35, i64 1
  %37 = bitcast <2 x i32> %36 to i64
  %38 = xor i64 %29, %37
  %39 = trunc i64 %38 to i32
  %40 = tail call i32 @llvm.amdgcn.permlanex16(i32 undef, i32 %39, i32 -1, i32 -1, i1 false, i1 true)
  %41 = insertelement <2 x i32> undef, i32 %40, i64 0
  %42 = lshr i64 %38, 32
  %43 = trunc i64 %42 to i32
  %44 = tail call i32 @llvm.amdgcn.permlanex16(i32 undef, i32 %43, i32 -1, i32 -1, i1 false, i1 true)
  %45 = insertelement <2 x i32> %41, i32 %44, i64 1
  %46 = bitcast <2 x i32> %45 to i64
  %47 = and i32 %1, 16
  %48 = icmp eq i32 %47, 0
  %49 = select i1 %48, i64 0, i64 %46
  %50 = xor i64 %49, %38
  %51 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %52 = icmp eq i8 %51, 0
  br i1 %52, label %65, label %53

53:                                               ; preds = %2
  %54 = trunc i64 %50 to i32
  %55 = tail call i32 @llvm.amdgcn.readlane(i32 %54, i32 31)
  %56 = insertelement <2 x i32> undef, i32 %55, i64 0
  %57 = lshr i64 %50, 32
  %58 = trunc i64 %57 to i32
  %59 = tail call i32 @llvm.amdgcn.readlane(i32 %58, i32 31)
  %60 = insertelement <2 x i32> %56, i32 %59, i64 1
  %61 = bitcast <2 x i32> %60 to i64
  %62 = icmp ugt i32 %1, 31
  %63 = select i1 %62, i64 %61, i64 0
  %64 = xor i64 %63, %50
  br label %65

65:                                               ; preds = %53, %2
  %66 = phi i64 [ %64, %53 ], [ %50, %2 ]
  ret i64 %66
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i64 @253(i64 noundef %0) unnamed_addr #54 {
  %2 = trunc i64 %0 to i32
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %2, i32 312, i32 15, i32 15, i1 true)
  %4 = insertelement <2 x i32> undef, i32 %3, i64 0
  %5 = lshr i64 %0, 32
  %6 = trunc i64 %5 to i32
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %6, i32 312, i32 15, i32 15, i1 true)
  %8 = insertelement <2 x i32> %4, i32 %7, i64 1
  %9 = bitcast <2 x i32> %8 to i64
  ret i64 %9
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i64 @254(i64 noundef %0, i32 noundef %1) unnamed_addr #55 {
  %3 = trunc i64 %0 to i32
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %3, i32 273, i32 15, i32 15, i1 true)
  %5 = insertelement <2 x i32> undef, i32 %4, i64 0
  %6 = lshr i64 %0, 32
  %7 = trunc i64 %6 to i32
  %8 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %7, i32 273, i32 15, i32 15, i1 true)
  %9 = insertelement <2 x i32> %5, i32 %8, i64 1
  %10 = bitcast <2 x i32> %9 to i64
  %11 = tail call i32 @llvm.amdgcn.permlanex16(i32 undef, i32 %3, i32 -1, i32 -1, i1 false, i1 true)
  %12 = insertelement <2 x i32> undef, i32 %11, i64 0
  %13 = tail call i32 @llvm.amdgcn.permlanex16(i32 undef, i32 %7, i32 -1, i32 -1, i1 false, i1 true)
  %14 = insertelement <2 x i32> %12, i32 %13, i64 1
  %15 = bitcast <2 x i32> %14 to i64
  %16 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %30, label %18

18:                                               ; preds = %2
  %19 = tail call i32 @llvm.amdgcn.readlane(i32 %3, i32 31)
  %20 = insertelement <2 x i32> undef, i32 %19, i64 0
  %21 = tail call i32 @llvm.amdgcn.readlane(i32 %7, i32 31)
  %22 = insertelement <2 x i32> %20, i32 %21, i64 1
  %23 = bitcast <2 x i32> %22 to i64
  %24 = icmp eq i32 %1, 32
  %25 = select i1 %24, i64 %23, i64 %15
  %26 = and i32 %1, 31
  %27 = icmp eq i32 %26, 16
  %28 = or i1 %24, %27
  %29 = select i1 %28, i64 %25, i64 %10
  br label %33

30:                                               ; preds = %2
  %31 = icmp eq i32 %1, 16
  %32 = select i1 %31, i64 %15, i64 %10
  br label %33

33:                                               ; preds = %30, %18
  %34 = phi i64 [ %29, %18 ], [ %32, %30 ]
  ret i64 %34
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define linkonce_odr protected i64 @__ockl_wfred_xor_u64(i64 noundef %0) local_unnamed_addr #0 {
  %2 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %3 = icmp slt i32 %2, 8000
  br i1 %3, label %4, label %92

4:                                                ; preds = %1
  %5 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %10, label %7

7:                                                ; preds = %4
  %8 = tail call i64 @llvm.read_register.i64(metadata !36) #57
  %9 = icmp eq i64 %8, -1
  br label %13

10:                                               ; preds = %4
  %11 = tail call i32 @llvm.read_register.i32(metadata !10) #57
  %12 = icmp eq i32 %11, -1
  br label %13

13:                                               ; preds = %10, %7
  %14 = phi i1 [ %9, %7 ], [ %12, %10 ]
  %15 = trunc i64 %0 to i32
  %16 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %15, i32 32945)
  %17 = insertelement <2 x i32> undef, i32 %16, i64 0
  %18 = lshr i64 %0, 32
  %19 = trunc i64 %18 to i32
  %20 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %19, i32 32945)
  %21 = insertelement <2 x i32> %17, i32 %20, i64 1
  %22 = bitcast <2 x i32> %21 to i64
  %23 = xor i64 %22, %0
  %24 = trunc i64 %23 to i32
  %25 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %24, i32 32846)
  %26 = insertelement <2 x i32> undef, i32 %25, i64 0
  %27 = lshr i64 %23, 32
  %28 = trunc i64 %27 to i32
  %29 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %28, i32 32846)
  %30 = insertelement <2 x i32> %26, i32 %29, i64 1
  %31 = bitcast <2 x i32> %30 to i64
  %32 = xor i64 %23, %31
  %33 = trunc i64 %32 to i32
  %34 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %33, i32 4127)
  %35 = insertelement <2 x i32> undef, i32 %34, i64 0
  %36 = lshr i64 %32, 32
  %37 = trunc i64 %36 to i32
  %38 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %37, i32 4127)
  %39 = insertelement <2 x i32> %35, i32 %38, i64 1
  %40 = bitcast <2 x i32> %39 to i64
  %41 = xor i64 %32, %40
  %42 = trunc i64 %41 to i32
  %43 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %42, i32 8223)
  %44 = insertelement <2 x i32> undef, i32 %43, i64 0
  %45 = lshr i64 %41, 32
  %46 = trunc i64 %45 to i32
  %47 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %46, i32 8223)
  %48 = insertelement <2 x i32> %44, i32 %47, i64 1
  %49 = bitcast <2 x i32> %48 to i64
  %50 = xor i64 %41, %49
  %51 = trunc i64 %50 to i32
  %52 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %51, i32 16415)
  %53 = insertelement <2 x i32> undef, i32 %52, i64 0
  %54 = lshr i64 %50, 32
  %55 = trunc i64 %54 to i32
  %56 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %55, i32 16415)
  %57 = insertelement <2 x i32> %53, i32 %56, i64 1
  %58 = bitcast <2 x i32> %57 to i64
  %59 = xor i64 %50, %58
  %60 = trunc i64 %59 to i32
  br i1 %14, label %61, label %74

61:                                               ; preds = %13
  %62 = tail call i32 @llvm.amdgcn.readlane(i32 %60, i32 0)
  %63 = insertelement <2 x i32> undef, i32 %62, i64 0
  %64 = lshr i64 %59, 32
  %65 = trunc i64 %64 to i32
  %66 = tail call i32 @llvm.amdgcn.readlane(i32 %65, i32 0)
  %67 = insertelement <2 x i32> %63, i32 %66, i64 1
  %68 = tail call i32 @llvm.amdgcn.readlane(i32 %60, i32 32)
  %69 = insertelement <2 x i32> undef, i32 %68, i64 0
  %70 = tail call i32 @llvm.amdgcn.readlane(i32 %65, i32 32)
  %71 = insertelement <2 x i32> %69, i32 %70, i64 1
  %72 = xor <2 x i32> %71, %67
  %73 = bitcast <2 x i32> %72 to i64
  br label %98

74:                                               ; preds = %13
  %75 = tail call i32 @llvm.amdgcn.readlane(i32 %60, i32 32)
  %76 = insertelement <2 x i32> undef, i32 %75, i64 0
  %77 = lshr i64 %59, 32
  %78 = trunc i64 %77 to i32
  %79 = tail call i32 @llvm.amdgcn.readlane(i32 %78, i32 32)
  %80 = insertelement <2 x i32> %76, i32 %79, i64 1
  %81 = bitcast <2 x i32> %80 to i64
  %82 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %83 = and i32 %82, 1
  %84 = icmp eq i32 %83, 0
  %85 = select i1 %84, i64 0, i64 %81
  %86 = tail call i32 @llvm.amdgcn.readlane(i32 %60, i32 0)
  %87 = insertelement <2 x i32> undef, i32 %86, i64 0
  %88 = tail call i32 @llvm.amdgcn.readlane(i32 %78, i32 0)
  %89 = insertelement <2 x i32> %87, i32 %88, i64 1
  %90 = bitcast <2 x i32> %89 to i64
  %91 = xor i64 %85, %90
  br label %98

92:                                               ; preds = %1
  %93 = icmp ult i32 %2, 10000
  br i1 %93, label %94, label %96

94:                                               ; preds = %92
  %95 = tail call fastcc i64 @255(i64 noundef %0) #57
  br label %98

96:                                               ; preds = %92
  %97 = tail call fastcc i64 @256(i64 noundef %0) #57
  br label %98

98:                                               ; preds = %96, %94, %74, %61
  %99 = phi i64 [ %73, %61 ], [ %91, %74 ], [ %95, %94 ], [ %97, %96 ]
  ret i64 %99
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc i64 @255(i64 noundef %0) unnamed_addr #52 {
  %2 = trunc i64 %0 to i32
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %2, i32 257, i32 15, i32 15, i1 true)
  %4 = insertelement <2 x i32> undef, i32 %3, i64 0
  %5 = lshr i64 %0, 32
  %6 = trunc i64 %5 to i32
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %6, i32 257, i32 15, i32 15, i1 true)
  %8 = insertelement <2 x i32> %4, i32 %7, i64 1
  %9 = bitcast <2 x i32> %8 to i64
  %10 = xor i64 %9, %0
  %11 = trunc i64 %10 to i32
  %12 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %11, i32 258, i32 15, i32 15, i1 true)
  %13 = insertelement <2 x i32> undef, i32 %12, i64 0
  %14 = lshr i64 %10, 32
  %15 = trunc i64 %14 to i32
  %16 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %15, i32 258, i32 15, i32 15, i1 true)
  %17 = insertelement <2 x i32> %13, i32 %16, i64 1
  %18 = bitcast <2 x i32> %17 to i64
  %19 = xor i64 %10, %18
  %20 = trunc i64 %19 to i32
  %21 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %20, i32 260, i32 15, i32 15, i1 true)
  %22 = insertelement <2 x i32> undef, i32 %21, i64 0
  %23 = lshr i64 %19, 32
  %24 = trunc i64 %23 to i32
  %25 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %24, i32 260, i32 15, i32 15, i1 true)
  %26 = insertelement <2 x i32> %22, i32 %25, i64 1
  %27 = bitcast <2 x i32> %26 to i64
  %28 = xor i64 %19, %27
  %29 = trunc i64 %28 to i32
  %30 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %29, i32 264, i32 15, i32 15, i1 true)
  %31 = insertelement <2 x i32> undef, i32 %30, i64 0
  %32 = lshr i64 %28, 32
  %33 = trunc i64 %32 to i32
  %34 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %33, i32 264, i32 15, i32 15, i1 true)
  %35 = insertelement <2 x i32> %31, i32 %34, i64 1
  %36 = bitcast <2 x i32> %35 to i64
  %37 = xor i64 %28, %36
  %38 = trunc i64 %37 to i32
  %39 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %38, i32 304, i32 15, i32 15, i1 true)
  %40 = lshr i64 %37, 32
  %41 = trunc i64 %40 to i32
  %42 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %41, i32 304, i32 15, i32 15, i1 true)
  %43 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %39, i32 320, i32 15, i32 15, i1 true)
  %44 = insertelement <2 x i32> undef, i32 %43, i64 0
  %45 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %42, i32 320, i32 15, i32 15, i1 true)
  %46 = insertelement <2 x i32> %44, i32 %45, i64 1
  %47 = bitcast <2 x i32> %46 to i64
  %48 = xor i64 %37, %47
  %49 = trunc i64 %48 to i32
  %50 = tail call i32 @llvm.amdgcn.readlane(i32 %49, i32 32)
  %51 = insertelement <2 x i32> undef, i32 %50, i64 0
  %52 = lshr i64 %48, 32
  %53 = trunc i64 %52 to i32
  %54 = tail call i32 @llvm.amdgcn.readlane(i32 %53, i32 32)
  %55 = insertelement <2 x i32> %51, i32 %54, i64 1
  %56 = bitcast <2 x i32> %55 to i64
  %57 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %58 = and i32 %57, 1
  %59 = icmp eq i32 %58, 0
  %60 = select i1 %59, i64 0, i64 %56
  %61 = tail call i32 @llvm.amdgcn.readlane(i32 %49, i32 0)
  %62 = insertelement <2 x i32> undef, i32 %61, i64 0
  %63 = tail call i32 @llvm.amdgcn.readlane(i32 %53, i32 0)
  %64 = insertelement <2 x i32> %62, i32 %63, i64 1
  %65 = bitcast <2 x i32> %64 to i64
  %66 = xor i64 %60, %65
  ret i64 %66
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readonly willreturn
define internal fastcc i64 @256(i64 noundef %0) unnamed_addr #53 {
  %2 = trunc i64 %0 to i32
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %2, i32 257, i32 15, i32 15, i1 true)
  %4 = insertelement <2 x i32> undef, i32 %3, i64 0
  %5 = lshr i64 %0, 32
  %6 = trunc i64 %5 to i32
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %6, i32 257, i32 15, i32 15, i1 true)
  %8 = insertelement <2 x i32> %4, i32 %7, i64 1
  %9 = bitcast <2 x i32> %8 to i64
  %10 = xor i64 %9, %0
  %11 = trunc i64 %10 to i32
  %12 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %11, i32 258, i32 15, i32 15, i1 true)
  %13 = insertelement <2 x i32> undef, i32 %12, i64 0
  %14 = lshr i64 %10, 32
  %15 = trunc i64 %14 to i32
  %16 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %15, i32 258, i32 15, i32 15, i1 true)
  %17 = insertelement <2 x i32> %13, i32 %16, i64 1
  %18 = bitcast <2 x i32> %17 to i64
  %19 = xor i64 %10, %18
  %20 = trunc i64 %19 to i32
  %21 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %20, i32 260, i32 15, i32 15, i1 true)
  %22 = insertelement <2 x i32> undef, i32 %21, i64 0
  %23 = lshr i64 %19, 32
  %24 = trunc i64 %23 to i32
  %25 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %24, i32 260, i32 15, i32 15, i1 true)
  %26 = insertelement <2 x i32> %22, i32 %25, i64 1
  %27 = bitcast <2 x i32> %26 to i64
  %28 = xor i64 %19, %27
  %29 = trunc i64 %28 to i32
  %30 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %29, i32 264, i32 15, i32 15, i1 true)
  %31 = insertelement <2 x i32> undef, i32 %30, i64 0
  %32 = lshr i64 %28, 32
  %33 = trunc i64 %32 to i32
  %34 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %33, i32 264, i32 15, i32 15, i1 true)
  %35 = insertelement <2 x i32> %31, i32 %34, i64 1
  %36 = bitcast <2 x i32> %35 to i64
  %37 = xor i64 %28, %36
  %38 = trunc i64 %37 to i32
  %39 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %38, i32 336, i32 15, i32 15, i1 true)
  %40 = insertelement <2 x i32> undef, i32 %39, i64 0
  %41 = lshr i64 %37, 32
  %42 = trunc i64 %41 to i32
  %43 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %42, i32 336, i32 15, i32 15, i1 true)
  %44 = insertelement <2 x i32> %40, i32 %43, i64 1
  %45 = tail call i32 @llvm.amdgcn.permlanex16(i32 undef, i32 %39, i32 0, i32 0, i1 false, i1 true)
  %46 = insertelement <2 x i32> undef, i32 %45, i64 0
  %47 = tail call i32 @llvm.amdgcn.permlanex16(i32 undef, i32 %43, i32 0, i32 0, i1 false, i1 true)
  %48 = insertelement <2 x i32> %46, i32 %47, i64 1
  %49 = xor <2 x i32> %48, %44
  %50 = bitcast <2 x i32> %49 to i64
  %51 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %52 = icmp eq i8 %51, 0
  br i1 %52, label %71, label %53

53:                                               ; preds = %1
  %54 = extractelement <2 x i32> %49, i64 0
  %55 = tail call i32 @llvm.amdgcn.readlane(i32 %54, i32 32)
  %56 = insertelement <2 x i32> undef, i32 %55, i64 0
  %57 = extractelement <2 x i32> %49, i64 1
  %58 = tail call i32 @llvm.amdgcn.readlane(i32 %57, i32 32)
  %59 = insertelement <2 x i32> %56, i32 %58, i64 1
  %60 = bitcast <2 x i32> %59 to i64
  %61 = tail call i32 @llvm.read_register.i32(metadata !9) #57
  %62 = and i32 %61, 1
  %63 = icmp eq i32 %62, 0
  %64 = select i1 %63, i64 0, i64 %60
  %65 = tail call i32 @llvm.amdgcn.readlane(i32 %54, i32 0)
  %66 = insertelement <2 x i32> undef, i32 %65, i64 0
  %67 = tail call i32 @llvm.amdgcn.readlane(i32 %57, i32 0)
  %68 = insertelement <2 x i32> %66, i32 %67, i64 1
  %69 = bitcast <2 x i32> %68 to i64
  %70 = xor i64 %64, %69
  br label %71

71:                                               ; preds = %53, %1
  %72 = phi i64 [ %70, %53 ], [ %50, %1 ]
  ret i64 %72
}

; Function Attrs: convergent norecurse nounwind
define linkonce_odr protected i64 @__ockl_wfscan_xor_u64(i64 noundef %0, i1 noundef zeroext %1) local_unnamed_addr #12 {
  %3 = tail call i32 @__ockl_lane_u32() #58
  %4 = load i32, ptr addrspace(4) @__oclc_ISA_version, align 4, !tbaa !11
  %5 = icmp slt i32 %4, 8000
  br i1 %5, label %6, label %78

6:                                                ; preds = %2
  %7 = trunc i64 %0 to i32
  %8 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %7, i32 30)
  %9 = insertelement <2 x i32> undef, i32 %8, i64 0
  %10 = lshr i64 %0, 32
  %11 = trunc i64 %10 to i32
  %12 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %11, i32 30)
  %13 = insertelement <2 x i32> %9, i32 %12, i64 1
  %14 = bitcast <2 x i32> %13 to i64
  %15 = and i32 %3, 1
  %16 = icmp eq i32 %15, 0
  %17 = select i1 %16, i64 0, i64 %14
  %18 = xor i64 %17, %0
  %19 = trunc i64 %18 to i32
  %20 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %19, i32 60)
  %21 = insertelement <2 x i32> undef, i32 %20, i64 0
  %22 = lshr i64 %18, 32
  %23 = trunc i64 %22 to i32
  %24 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %23, i32 60)
  %25 = insertelement <2 x i32> %21, i32 %24, i64 1
  %26 = bitcast <2 x i32> %25 to i64
  %27 = and i32 %3, 2
  %28 = icmp eq i32 %27, 0
  %29 = select i1 %28, i64 0, i64 %26
  %30 = xor i64 %29, %18
  %31 = trunc i64 %30 to i32
  %32 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %31, i32 120)
  %33 = insertelement <2 x i32> undef, i32 %32, i64 0
  %34 = lshr i64 %30, 32
  %35 = trunc i64 %34 to i32
  %36 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %35, i32 120)
  %37 = insertelement <2 x i32> %33, i32 %36, i64 1
  %38 = bitcast <2 x i32> %37 to i64
  %39 = and i32 %3, 4
  %40 = icmp eq i32 %39, 0
  %41 = select i1 %40, i64 0, i64 %38
  %42 = xor i64 %41, %30
  %43 = trunc i64 %42 to i32
  %44 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %43, i32 240)
  %45 = insertelement <2 x i32> undef, i32 %44, i64 0
  %46 = lshr i64 %42, 32
  %47 = trunc i64 %46 to i32
  %48 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %47, i32 240)
  %49 = insertelement <2 x i32> %45, i32 %48, i64 1
  %50 = bitcast <2 x i32> %49 to i64
  %51 = and i32 %3, 8
  %52 = icmp eq i32 %51, 0
  %53 = select i1 %52, i64 0, i64 %50
  %54 = xor i64 %53, %42
  %55 = trunc i64 %54 to i32
  %56 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %55, i32 480)
  %57 = insertelement <2 x i32> undef, i32 %56, i64 0
  %58 = lshr i64 %54, 32
  %59 = trunc i64 %58 to i32
  %60 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %59, i32 480)
  %61 = insertelement <2 x i32> %57, i32 %60, i64 1
  %62 = bitcast <2 x i32> %61 to i64
  %63 = and i32 %3, 16
  %64 = icmp eq i32 %63, 0
  %65 = select i1 %64, i64 0, i64 %62
  %66 = xor i64 %65, %54
  %67 = trunc i64 %66 to i32
  %68 = tail call i32 @llvm.amdgcn.readlane(i32 %67, i32 31)
  %69 = insertelement <2 x i32> undef, i32 %68, i64 0
  %70 = lshr i64 %66, 32
  %71 = trunc i64 %70 to i32
  %72 = tail call i32 @llvm.amdgcn.readlane(i32 %71, i32 31)
  %73 = insertelement <2 x i32> %69, i32 %72, i64 1
  %74 = bitcast <2 x i32> %73 to i64
  %75 = icmp ugt i32 %3, 31
  %76 = select i1 %75, i64 %74, i64 0
  %77 = xor i64 %76, %66
  br label %84

78:                                               ; preds = %2
  %79 = icmp ult i32 %4, 10000
  br i1 %79, label %80, label %82

80:                                               ; preds = %78
  %81 = tail call fastcc i64 @257(i64 noundef %0) #57
  br label %84

82:                                               ; preds = %78
  %83 = tail call fastcc i64 @258(i64 noundef %0, i32 noundef %3) #57
  br label %84

84:                                               ; preds = %82, %80, %6
  %85 = phi i64 [ %77, %6 ], [ %81, %80 ], [ %83, %82 ]
  br i1 %1, label %131, label %86

86:                                               ; preds = %84
  br i1 %5, label %87, label %125

87:                                               ; preds = %86
  %88 = trunc i64 %85 to i32
  %89 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %88, i32 32912)
  %90 = insertelement <2 x i32> undef, i32 %89, i64 0
  %91 = lshr i64 %85, 32
  %92 = trunc i64 %91 to i32
  %93 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %92, i32 32912)
  %94 = insertelement <2 x i32> %90, i32 %93, i64 1
  %95 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %88, i32 120)
  %96 = insertelement <2 x i32> undef, i32 %95, i64 0
  %97 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %92, i32 120)
  %98 = insertelement <2 x i32> %96, i32 %97, i64 1
  %99 = and i32 %3, 7
  %100 = icmp eq i32 %99, 4
  %101 = select i1 %100, <2 x i32> %98, <2 x i32> %94
  %102 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %88, i32 240)
  %103 = insertelement <2 x i32> undef, i32 %102, i64 0
  %104 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %92, i32 240)
  %105 = insertelement <2 x i32> %103, i32 %104, i64 1
  %106 = and i32 %3, 15
  %107 = icmp eq i32 %106, 8
  %108 = select i1 %107, <2 x i32> %105, <2 x i32> %101
  %109 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %88, i32 480)
  %110 = insertelement <2 x i32> undef, i32 %109, i64 0
  %111 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %92, i32 480)
  %112 = insertelement <2 x i32> %110, i32 %111, i64 1
  %113 = and i32 %3, 31
  %114 = icmp eq i32 %113, 16
  %115 = select i1 %114, <2 x i32> %112, <2 x i32> %108
  %116 = tail call i32 @llvm.amdgcn.readlane(i32 %88, i32 31)
  %117 = insertelement <2 x i32> undef, i32 %116, i64 0
  %118 = tail call i32 @llvm.amdgcn.readlane(i32 %92, i32 31)
  %119 = insertelement <2 x i32> %117, i32 %118, i64 1
  %120 = icmp eq i32 %3, 32
  %121 = select i1 %120, <2 x i32> %119, <2 x i32> %115
  %122 = bitcast <2 x i32> %121 to i64
  %123 = icmp eq i32 %3, 0
  %124 = select i1 %123, i64 0, i64 %122
  br label %131

125:                                              ; preds = %86
  %126 = icmp ult i32 %4, 10000
  br i1 %126, label %127, label %129

127:                                              ; preds = %125
  %128 = tail call fastcc i64 @259(i64 noundef %85) #57
  br label %131

129:                                              ; preds = %125
  %130 = tail call fastcc i64 @260(i64 noundef %85, i32 noundef %3) #57
  br label %131

131:                                              ; preds = %129, %127, %87, %84
  %132 = phi i64 [ %85, %84 ], [ %124, %87 ], [ %128, %127 ], [ %130, %129 ]
  ret i64 %132
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i64 @257(i64 noundef %0) unnamed_addr #54 {
  %2 = trunc i64 %0 to i32
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %2, i32 273, i32 15, i32 15, i1 true)
  %4 = insertelement <2 x i32> undef, i32 %3, i64 0
  %5 = lshr i64 %0, 32
  %6 = trunc i64 %5 to i32
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %6, i32 273, i32 15, i32 15, i1 true)
  %8 = insertelement <2 x i32> %4, i32 %7, i64 1
  %9 = bitcast <2 x i32> %8 to i64
  %10 = xor i64 %9, %0
  %11 = trunc i64 %10 to i32
  %12 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %11, i32 274, i32 15, i32 15, i1 true)
  %13 = insertelement <2 x i32> undef, i32 %12, i64 0
  %14 = lshr i64 %10, 32
  %15 = trunc i64 %14 to i32
  %16 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %15, i32 274, i32 15, i32 15, i1 true)
  %17 = insertelement <2 x i32> %13, i32 %16, i64 1
  %18 = bitcast <2 x i32> %17 to i64
  %19 = xor i64 %10, %18
  %20 = trunc i64 %19 to i32
  %21 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %20, i32 276, i32 15, i32 15, i1 true)
  %22 = insertelement <2 x i32> undef, i32 %21, i64 0
  %23 = lshr i64 %19, 32
  %24 = trunc i64 %23 to i32
  %25 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %24, i32 276, i32 15, i32 15, i1 true)
  %26 = insertelement <2 x i32> %22, i32 %25, i64 1
  %27 = bitcast <2 x i32> %26 to i64
  %28 = xor i64 %19, %27
  %29 = trunc i64 %28 to i32
  %30 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %29, i32 280, i32 15, i32 15, i1 true)
  %31 = insertelement <2 x i32> undef, i32 %30, i64 0
  %32 = lshr i64 %28, 32
  %33 = trunc i64 %32 to i32
  %34 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %33, i32 280, i32 15, i32 15, i1 true)
  %35 = insertelement <2 x i32> %31, i32 %34, i64 1
  %36 = bitcast <2 x i32> %35 to i64
  %37 = xor i64 %28, %36
  %38 = trunc i64 %37 to i32
  %39 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %38, i32 322, i32 10, i32 15, i1 false)
  %40 = insertelement <2 x i32> undef, i32 %39, i64 0
  %41 = lshr i64 %37, 32
  %42 = trunc i64 %41 to i32
  %43 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %42, i32 322, i32 10, i32 15, i1 false)
  %44 = insertelement <2 x i32> %40, i32 %43, i64 1
  %45 = bitcast <2 x i32> %44 to i64
  %46 = xor i64 %37, %45
  %47 = trunc i64 %46 to i32
  %48 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %47, i32 323, i32 12, i32 15, i1 false)
  %49 = insertelement <2 x i32> undef, i32 %48, i64 0
  %50 = lshr i64 %46, 32
  %51 = trunc i64 %50 to i32
  %52 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 0, i32 %51, i32 323, i32 12, i32 15, i1 false)
  %53 = insertelement <2 x i32> %49, i32 %52, i64 1
  %54 = bitcast <2 x i32> %53 to i64
  %55 = xor i64 %46, %54
  ret i64 %55
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i64 @258(i64 noundef %0, i32 noundef %1) unnamed_addr #55 {
  %3 = trunc i64 %0 to i32
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %3, i32 273, i32 15, i32 15, i1 true)
  %5 = insertelement <2 x i32> undef, i32 %4, i64 0
  %6 = lshr i64 %0, 32
  %7 = trunc i64 %6 to i32
  %8 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %7, i32 273, i32 15, i32 15, i1 true)
  %9 = insertelement <2 x i32> %5, i32 %8, i64 1
  %10 = bitcast <2 x i32> %9 to i64
  %11 = xor i64 %10, %0
  %12 = trunc i64 %11 to i32
  %13 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %12, i32 274, i32 15, i32 15, i1 true)
  %14 = insertelement <2 x i32> undef, i32 %13, i64 0
  %15 = lshr i64 %11, 32
  %16 = trunc i64 %15 to i32
  %17 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %16, i32 274, i32 15, i32 15, i1 true)
  %18 = insertelement <2 x i32> %14, i32 %17, i64 1
  %19 = bitcast <2 x i32> %18 to i64
  %20 = xor i64 %11, %19
  %21 = trunc i64 %20 to i32
  %22 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %21, i32 276, i32 15, i32 15, i1 true)
  %23 = insertelement <2 x i32> undef, i32 %22, i64 0
  %24 = lshr i64 %20, 32
  %25 = trunc i64 %24 to i32
  %26 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %25, i32 276, i32 15, i32 15, i1 true)
  %27 = insertelement <2 x i32> %23, i32 %26, i64 1
  %28 = bitcast <2 x i32> %27 to i64
  %29 = xor i64 %20, %28
  %30 = trunc i64 %29 to i32
  %31 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %30, i32 280, i32 15, i32 15, i1 true)
  %32 = insertelement <2 x i32> undef, i32 %31, i64 0
  %33 = lshr i64 %29, 32
  %34 = trunc i64 %33 to i32
  %35 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %34, i32 280, i32 15, i32 15, i1 true)
  %36 = insertelement <2 x i32> %32, i32 %35, i64 1
  %37 = bitcast <2 x i32> %36 to i64
  %38 = xor i64 %29, %37
  %39 = trunc i64 %38 to i32
  %40 = tail call i32 @llvm.amdgcn.permlanex16(i32 undef, i32 %39, i32 -1, i32 -1, i1 false, i1 true)
  %41 = insertelement <2 x i32> undef, i32 %40, i64 0
  %42 = lshr i64 %38, 32
  %43 = trunc i64 %42 to i32
  %44 = tail call i32 @llvm.amdgcn.permlanex16(i32 undef, i32 %43, i32 -1, i32 -1, i1 false, i1 true)
  %45 = insertelement <2 x i32> %41, i32 %44, i64 1
  %46 = bitcast <2 x i32> %45 to i64
  %47 = and i32 %1, 16
  %48 = icmp eq i32 %47, 0
  %49 = select i1 %48, i64 0, i64 %46
  %50 = xor i64 %49, %38
  %51 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %52 = icmp eq i8 %51, 0
  br i1 %52, label %65, label %53

53:                                               ; preds = %2
  %54 = trunc i64 %50 to i32
  %55 = tail call i32 @llvm.amdgcn.readlane(i32 %54, i32 31)
  %56 = insertelement <2 x i32> undef, i32 %55, i64 0
  %57 = lshr i64 %50, 32
  %58 = trunc i64 %57 to i32
  %59 = tail call i32 @llvm.amdgcn.readlane(i32 %58, i32 31)
  %60 = insertelement <2 x i32> %56, i32 %59, i64 1
  %61 = bitcast <2 x i32> %60 to i64
  %62 = icmp ugt i32 %1, 31
  %63 = select i1 %62, i64 %61, i64 0
  %64 = xor i64 %63, %50
  br label %65

65:                                               ; preds = %53, %2
  %66 = phi i64 [ %64, %53 ], [ %50, %2 ]
  ret i64 %66
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i64 @259(i64 noundef %0) unnamed_addr #54 {
  %2 = trunc i64 %0 to i32
  %3 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %2, i32 312, i32 15, i32 15, i1 true)
  %4 = insertelement <2 x i32> undef, i32 %3, i64 0
  %5 = lshr i64 %0, 32
  %6 = trunc i64 %5 to i32
  %7 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %6, i32 312, i32 15, i32 15, i1 true)
  %8 = insertelement <2 x i32> %4, i32 %7, i64 1
  %9 = bitcast <2 x i32> %8 to i64
  ret i64 %9
}

; Function Attrs: convergent mustprogress nofree norecurse nounwind readnone willreturn
define internal fastcc i64 @260(i64 noundef %0, i32 noundef %1) unnamed_addr #55 {
  %3 = trunc i64 %0 to i32
  %4 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %3, i32 273, i32 15, i32 15, i1 true)
  %5 = insertelement <2 x i32> undef, i32 %4, i64 0
  %6 = lshr i64 %0, 32
  %7 = trunc i64 %6 to i32
  %8 = tail call i32 @llvm.amdgcn.update.dpp.i32(i32 undef, i32 %7, i32 273, i32 15, i32 15, i1 true)
  %9 = insertelement <2 x i32> %5, i32 %8, i64 1
  %10 = bitcast <2 x i32> %9 to i64
  %11 = tail call i32 @llvm.amdgcn.permlanex16(i32 undef, i32 %3, i32 -1, i32 -1, i1 false, i1 true)
  %12 = insertelement <2 x i32> undef, i32 %11, i64 0
  %13 = tail call i32 @llvm.amdgcn.permlanex16(i32 undef, i32 %7, i32 -1, i32 -1, i1 false, i1 true)
  %14 = insertelement <2 x i32> %12, i32 %13, i64 1
  %15 = bitcast <2 x i32> %14 to i64
  %16 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %30, label %18

18:                                               ; preds = %2
  %19 = tail call i32 @llvm.amdgcn.readlane(i32 %3, i32 31)
  %20 = insertelement <2 x i32> undef, i32 %19, i64 0
  %21 = tail call i32 @llvm.amdgcn.readlane(i32 %7, i32 31)
  %22 = insertelement <2 x i32> %20, i32 %21, i64 1
  %23 = bitcast <2 x i32> %22 to i64
  %24 = icmp eq i32 %1, 32
  %25 = select i1 %24, i64 %23, i64 %15
  %26 = and i32 %1, 31
  %27 = icmp eq i32 %26, 16
  %28 = or i1 %24, %27
  %29 = select i1 %28, i64 %25, i64 %10
  br label %33

30:                                               ; preds = %2
  %31 = icmp eq i32 %1, 16
  %32 = select i1 %31, i64 %15, i64 %10
  br label %33

33:                                               ; preds = %30, %18
  %34 = phi i64 [ %29, %18 ], [ %32, %30 ]
  ret i64 %34
}

; Function Attrs: convergent norecurse nounwind
define linkonce_odr protected i32 @__ockl_wgred_add_i32(i32 noundef %0) local_unnamed_addr #12 {
  %2 = tail call i64 @__ockl_get_local_size(i32 noundef 2) #17
  %3 = trunc i64 %2 to i32
  %4 = tail call i64 @__ockl_get_local_size(i32 noundef 1) #17
  %5 = trunc i64 %4 to i32
  %6 = tail call i64 @__ockl_get_local_size(i32 noundef 0) #17
  %7 = trunc i64 %6 to i32
  %8 = tail call i32 @__ockl_mul24_i32(i32 noundef %5, i32 noundef %7) #17
  %9 = tail call i32 @__ockl_mul24_i32(i32 noundef %3, i32 noundef %8) #17
  %10 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %11 = icmp eq i8 %10, 0
  %12 = add i32 %9, 63
  %13 = lshr i32 %12, 6
  %14 = add i32 %9, 31
  %15 = lshr i32 %14, 5
  %16 = select i1 %11, i32 %15, i32 %13
  %17 = tail call i32 @__ockl_wfred_add_i32(i32 noundef %0) #58
  %18 = icmp eq i32 %16, 1
  br i1 %18, label %37, label %19

19:                                               ; preds = %1
  %20 = tail call ptr addrspace(3) @__get_scratch_lds() #17
  %21 = tail call i32 @__ockl_lane_u32() #58
  %22 = tail call i64 @__ockl_get_local_linear_id() #17
  %23 = trunc i64 %22 to i32
  %24 = select i1 %11, i32 5, i32 6
  %25 = lshr i32 %23, %24
  %26 = icmp eq i32 %21, 0
  %27 = or i32 %25, %21
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %30

29:                                               ; preds = %19
  store atomic i32 %17, ptr addrspace(3) %20 syncscope("workgroup-one-as") monotonic, align 4
  br label %30

30:                                               ; preds = %29, %19
  fence syncscope("workgroup") release
  tail call void @llvm.amdgcn.s.barrier()
  fence syncscope("workgroup") acquire
  %31 = icmp ne i32 %25, 0
  %32 = and i1 %26, %31
  br i1 %32, label %33, label %35

33:                                               ; preds = %30
  %34 = atomicrmw add ptr addrspace(3) %20, i32 %17 syncscope("workgroup-one-as") monotonic, align 4
  br label %35

35:                                               ; preds = %33, %30
  fence syncscope("workgroup") release
  tail call void @llvm.amdgcn.s.barrier()
  fence syncscope("workgroup") acquire
  %36 = load atomic i32, ptr addrspace(3) %20 syncscope("workgroup-one-as") monotonic, align 4
  fence syncscope("workgroup") release
  tail call void @llvm.amdgcn.s.barrier()
  fence syncscope("workgroup") acquire
  br label %37

37:                                               ; preds = %35, %1
  %38 = phi i32 [ %36, %35 ], [ %17, %1 ]
  ret i32 %38
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i64 @__ockl_get_local_size(i32 noundef %0) local_unnamed_addr #3 {
  switch i32 %0, label %76 [
    i32 0, label %2
    i32 1, label %26
    i32 2, label %51
  ]

2:                                                ; preds = %1
  %3 = load i32, ptr addrspace(4) @__oclc_ABI_version, align 4, !tbaa !11
  %4 = icmp slt i32 %3, 500
  br i1 %4, label %5, label %17

5:                                                ; preds = %2
  %6 = tail call align 4 dereferenceable(64) ptr addrspace(4) @llvm.amdgcn.dispatch.ptr()
  %7 = tail call i32 @llvm.amdgcn.workgroup.id.x()
  %8 = getelementptr i8, ptr addrspace(4) %6, i64 4
  %9 = load i16, ptr addrspace(4) %8, align 4, !range !21, !invariant.load !22
  %10 = zext i16 %9 to i32
  %11 = getelementptr inbounds %5, ptr addrspace(4) %6, i64 0, i32 6
  %12 = load i32, ptr addrspace(4) %11, align 4, !tbaa !16
  %13 = mul i32 %7, %10
  %14 = sub i32 %12, %13
  %15 = tail call i32 @llvm.umin.i32(i32 %14, i32 %10)
  %16 = zext i32 %15 to i64
  br label %76

17:                                               ; preds = %2
  %18 = tail call i32 @llvm.amdgcn.workgroup.id.x()
  %19 = tail call ptr addrspace(4) @llvm.amdgcn.implicitarg.ptr()
  %20 = load i32, ptr addrspace(4) %19, align 4, !tbaa !11
  %21 = icmp ult i32 %18, %20
  %22 = select i1 %21, i64 6, i64 9
  %23 = getelementptr inbounds i16, ptr addrspace(4) %19, i64 %22
  %24 = load i16, ptr addrspace(4) %23, align 2, !tbaa !23
  %25 = zext i16 %24 to i64
  br label %76

26:                                               ; preds = %1
  %27 = load i32, ptr addrspace(4) @__oclc_ABI_version, align 4, !tbaa !11
  %28 = icmp slt i32 %27, 500
  br i1 %28, label %29, label %41

29:                                               ; preds = %26
  %30 = tail call align 4 dereferenceable(64) ptr addrspace(4) @llvm.amdgcn.dispatch.ptr()
  %31 = tail call i32 @llvm.amdgcn.workgroup.id.y()
  %32 = getelementptr i8, ptr addrspace(4) %30, i64 6
  %33 = load i16, ptr addrspace(4) %32, align 2, !range !21, !invariant.load !22
  %34 = zext i16 %33 to i32
  %35 = getelementptr inbounds %5, ptr addrspace(4) %30, i64 0, i32 7
  %36 = load i32, ptr addrspace(4) %35, align 8, !tbaa !24
  %37 = mul i32 %31, %34
  %38 = sub i32 %36, %37
  %39 = tail call i32 @llvm.umin.i32(i32 %38, i32 %34)
  %40 = zext i32 %39 to i64
  br label %76

41:                                               ; preds = %26
  %42 = tail call i32 @llvm.amdgcn.workgroup.id.y()
  %43 = tail call ptr addrspace(4) @llvm.amdgcn.implicitarg.ptr()
  %44 = getelementptr inbounds i32, ptr addrspace(4) %43, i64 1
  %45 = load i32, ptr addrspace(4) %44, align 4, !tbaa !11
  %46 = icmp ult i32 %42, %45
  %47 = select i1 %46, i64 7, i64 10
  %48 = getelementptr inbounds i16, ptr addrspace(4) %43, i64 %47
  %49 = load i16, ptr addrspace(4) %48, align 2, !tbaa !23
  %50 = zext i16 %49 to i64
  br label %76

51:                                               ; preds = %1
  %52 = load i32, ptr addrspace(4) @__oclc_ABI_version, align 4, !tbaa !11
  %53 = icmp slt i32 %52, 500
  br i1 %53, label %54, label %66

54:                                               ; preds = %51
  %55 = tail call align 4 dereferenceable(64) ptr addrspace(4) @llvm.amdgcn.dispatch.ptr()
  %56 = tail call i32 @llvm.amdgcn.workgroup.id.z()
  %57 = getelementptr i8, ptr addrspace(4) %55, i64 8
  %58 = load i16, ptr addrspace(4) %57, align 4, !range !21, !invariant.load !22
  %59 = zext i16 %58 to i32
  %60 = getelementptr inbounds %5, ptr addrspace(4) %55, i64 0, i32 8
  %61 = load i32, ptr addrspace(4) %60, align 4, !tbaa !25
  %62 = mul i32 %56, %59
  %63 = sub i32 %61, %62
  %64 = tail call i32 @llvm.umin.i32(i32 %63, i32 %59)
  %65 = zext i32 %64 to i64
  br label %76

66:                                               ; preds = %51
  %67 = tail call i32 @llvm.amdgcn.workgroup.id.z()
  %68 = tail call ptr addrspace(4) @llvm.amdgcn.implicitarg.ptr()
  %69 = getelementptr inbounds i32, ptr addrspace(4) %68, i64 2
  %70 = load i32, ptr addrspace(4) %69, align 4, !tbaa !11
  %71 = icmp ult i32 %67, %70
  %72 = select i1 %71, i64 8, i64 11
  %73 = getelementptr inbounds i16, ptr addrspace(4) %68, i64 %72
  %74 = load i16, ptr addrspace(4) %73, align 2, !tbaa !23
  %75 = zext i16 %74 to i64
  br label %76

76:                                               ; preds = %66, %54, %41, %29, %17, %5, %1
  %77 = phi i64 [ 1, %1 ], [ %16, %5 ], [ %25, %17 ], [ %40, %29 ], [ %50, %41 ], [ %65, %54 ], [ %75, %66 ]
  ret i64 %77
}

; Function Attrs: alwaysinline norecurse nounwind readnone speculatable
define linkonce_odr protected ptr addrspace(3) @__get_scratch_lds() #56 {
  ret ptr addrspace(3) @__scratch_lds
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i64 @__ockl_get_local_linear_id() local_unnamed_addr #3 {
  %1 = load i32, ptr addrspace(4) @__oclc_ABI_version, align 4, !tbaa !11
  %2 = icmp slt i32 %1, 500
  %3 = tail call i32 @llvm.amdgcn.workitem.id.z(), !range !15
  br i1 %2, label %4, label %13

4:                                                ; preds = %0
  %5 = tail call align 4 dereferenceable(64) ptr addrspace(4) @llvm.amdgcn.dispatch.ptr()
  %6 = getelementptr i8, ptr addrspace(4) %5, i64 6
  %7 = load i16, ptr addrspace(4) %6, align 2, !range !21, !invariant.load !22
  %8 = zext i16 %7 to i32
  %9 = mul nuw nsw i32 %3, %8
  %10 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !15
  %11 = add nuw nsw i32 %9, %10
  %12 = getelementptr i8, ptr addrspace(4) %5, i64 4
  br label %22

13:                                               ; preds = %0
  %14 = tail call ptr addrspace(4) @llvm.amdgcn.implicitarg.ptr()
  %15 = getelementptr inbounds i16, ptr addrspace(4) %14, i64 7
  %16 = load i16, ptr addrspace(4) %15, align 2, !tbaa !23
  %17 = zext i16 %16 to i32
  %18 = mul nuw nsw i32 %3, %17
  %19 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !15
  %20 = add nuw nsw i32 %18, %19
  %21 = getelementptr inbounds i16, ptr addrspace(4) %14, i64 6
  br label %22

22:                                               ; preds = %13, %4
  %23 = phi ptr addrspace(4) [ %21, %13 ], [ %12, %4 ]
  %24 = phi i32 [ %20, %13 ], [ %11, %4 ]
  %25 = load i16, ptr addrspace(4) %23, align 4
  %26 = zext i16 %25 to i32
  %27 = mul i32 %24, %26
  %28 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15
  %29 = add i32 %27, %28
  %30 = zext i32 %29 to i64
  ret i64 %30
}

; Function Attrs: convergent norecurse nounwind
define linkonce_odr protected i32 @__ockl_wgred_and_i32(i32 noundef %0) local_unnamed_addr #12 {
  %2 = tail call i64 @__ockl_get_local_size(i32 noundef 2) #17
  %3 = trunc i64 %2 to i32
  %4 = tail call i64 @__ockl_get_local_size(i32 noundef 1) #17
  %5 = trunc i64 %4 to i32
  %6 = tail call i64 @__ockl_get_local_size(i32 noundef 0) #17
  %7 = trunc i64 %6 to i32
  %8 = tail call i32 @__ockl_mul24_i32(i32 noundef %5, i32 noundef %7) #17
  %9 = tail call i32 @__ockl_mul24_i32(i32 noundef %3, i32 noundef %8) #17
  %10 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %11 = icmp eq i8 %10, 0
  %12 = add i32 %9, 63
  %13 = lshr i32 %12, 6
  %14 = add i32 %9, 31
  %15 = lshr i32 %14, 5
  %16 = select i1 %11, i32 %15, i32 %13
  %17 = tail call i32 @__ockl_wfred_and_i32(i32 noundef %0) #58
  %18 = icmp eq i32 %16, 1
  br i1 %18, label %37, label %19

19:                                               ; preds = %1
  %20 = tail call ptr addrspace(3) @__get_scratch_lds() #17
  %21 = tail call i32 @__ockl_lane_u32() #58
  %22 = tail call i64 @__ockl_get_local_linear_id() #17
  %23 = trunc i64 %22 to i32
  %24 = select i1 %11, i32 5, i32 6
  %25 = lshr i32 %23, %24
  %26 = icmp eq i32 %21, 0
  %27 = or i32 %25, %21
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %30

29:                                               ; preds = %19
  store atomic i32 %17, ptr addrspace(3) %20 syncscope("workgroup-one-as") monotonic, align 4
  br label %30

30:                                               ; preds = %29, %19
  fence syncscope("workgroup") release
  tail call void @llvm.amdgcn.s.barrier()
  fence syncscope("workgroup") acquire
  %31 = icmp ne i32 %25, 0
  %32 = and i1 %26, %31
  br i1 %32, label %33, label %35

33:                                               ; preds = %30
  %34 = atomicrmw and ptr addrspace(3) %20, i32 %17 syncscope("workgroup-one-as") monotonic, align 4
  br label %35

35:                                               ; preds = %33, %30
  fence syncscope("workgroup") release
  tail call void @llvm.amdgcn.s.barrier()
  fence syncscope("workgroup") acquire
  %36 = load atomic i32, ptr addrspace(3) %20 syncscope("workgroup-one-as") monotonic, align 4
  fence syncscope("workgroup") release
  tail call void @llvm.amdgcn.s.barrier()
  fence syncscope("workgroup") acquire
  br label %37

37:                                               ; preds = %35, %1
  %38 = phi i32 [ %36, %35 ], [ %17, %1 ]
  ret i32 %38
}

; Function Attrs: convergent norecurse nounwind
define linkonce_odr protected i32 @__ockl_wgred_or_i32(i32 noundef %0) local_unnamed_addr #12 {
  %2 = tail call i64 @__ockl_get_local_size(i32 noundef 2) #17
  %3 = trunc i64 %2 to i32
  %4 = tail call i64 @__ockl_get_local_size(i32 noundef 1) #17
  %5 = trunc i64 %4 to i32
  %6 = tail call i64 @__ockl_get_local_size(i32 noundef 0) #17
  %7 = trunc i64 %6 to i32
  %8 = tail call i32 @__ockl_mul24_i32(i32 noundef %5, i32 noundef %7) #17
  %9 = tail call i32 @__ockl_mul24_i32(i32 noundef %3, i32 noundef %8) #17
  %10 = load i8, ptr addrspace(4) @__oclc_wavefrontsize64, align 1, !tbaa !4, !range !8
  %11 = icmp eq i8 %10, 0
  %12 = add i32 %9, 63
  %13 = lshr i32 %12, 6
  %14 = add i32 %9, 31
  %15 = lshr i32 %14, 5
  %16 = select i1 %11, i32 %15, i32 %13
  %17 = tail call i32 @__ockl_wfred_or_i32(i32 noundef %0) #58
  %18 = icmp eq i32 %16, 1
  br i1 %18, label %37, label %19

19:                                               ; preds = %1
  %20 = tail call ptr addrspace(3) @__get_scratch_lds() #17
  %21 = tail call i32 @__ockl_lane_u32() #58
  %22 = tail call i64 @__ockl_get_local_linear_id() #17
  %23 = trunc i64 %22 to i32
  %24 = select i1 %11, i32 5, i32 6
  %25 = lshr i32 %23, %24
  %26 = icmp eq i32 %21, 0
  %27 = or i32 %25, %21
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %30

29:                                               ; preds = %19
  store atomic i32 %17, ptr addrspace(3) %20 syncscope("workgroup-one-as") monotonic, align 4
  br label %30

30:                                               ; preds = %29, %19
  fence syncscope("workgroup") release
  tail call void @llvm.amdgcn.s.barrier()
  fence syncscope("workgroup") acquire
  %31 = icmp ne i32 %25, 0
  %32 = and i1 %26, %31
  br i1 %32, label %33, label %35

33:                                               ; preds = %30
  %34 = atomicrmw or ptr addrspace(3) %20, i32 %17 syncscope("workgroup-one-as") monotonic, align 4
  br label %35

35:                                               ; preds = %33, %30
  fence syncscope("workgroup") release
  tail call void @llvm.amdgcn.s.barrier()
  fence syncscope("workgroup") acquire
  %36 = load atomic i32, ptr addrspace(3) %20 syncscope("workgroup-one-as") monotonic, align 4
  fence syncscope("workgroup") release
  tail call void @llvm.amdgcn.s.barrier()
  fence syncscope("workgroup") acquire
  br label %37

37:                                               ; preds = %35, %1
  %38 = phi i32 [ %36, %35 ], [ %17, %1 ]
  ret i32 %38
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i64 @__ockl_get_global_offset(i32 noundef %0) local_unnamed_addr #3 {
  switch i32 %0, label %23 [
    i32 0, label %2
    i32 1, label %8
    i32 2, label %14
  ]

2:                                                ; preds = %1
  %3 = load i32, ptr addrspace(4) @__oclc_ABI_version, align 4, !tbaa !11
  %4 = icmp slt i32 %3, 500
  %5 = tail call ptr addrspace(4) @llvm.amdgcn.implicitarg.ptr()
  %6 = select i1 %4, i64 0, i64 5
  %7 = getelementptr i64, ptr addrspace(4) %5, i64 %6
  br label %20

8:                                                ; preds = %1
  %9 = load i32, ptr addrspace(4) @__oclc_ABI_version, align 4, !tbaa !11
  %10 = icmp slt i32 %9, 500
  %11 = tail call ptr addrspace(4) @llvm.amdgcn.implicitarg.ptr()
  %12 = select i1 %10, i64 1, i64 6
  %13 = getelementptr inbounds i64, ptr addrspace(4) %11, i64 %12
  br label %20

14:                                               ; preds = %1
  %15 = load i32, ptr addrspace(4) @__oclc_ABI_version, align 4, !tbaa !11
  %16 = icmp slt i32 %15, 500
  %17 = tail call ptr addrspace(4) @llvm.amdgcn.implicitarg.ptr()
  %18 = select i1 %16, i64 2, i64 7
  %19 = getelementptr inbounds i64, ptr addrspace(4) %17, i64 %18
  br label %20

20:                                               ; preds = %14, %8, %2
  %21 = phi ptr addrspace(4) [ %19, %14 ], [ %13, %8 ], [ %7, %2 ]
  %22 = load i64, ptr addrspace(4) %21, align 8, !tbaa !13
  br label %23

23:                                               ; preds = %20, %1
  %24 = phi i64 [ 0, %1 ], [ %22, %20 ]
  ret i64 %24
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i64 @__ockl_get_global_id(i32 noundef %0) local_unnamed_addr #3 {
  switch i32 %0, label %56 [
    i32 0, label %2
    i32 1, label %18
    i32 2, label %34
  ]

2:                                                ; preds = %1
  %3 = load i32, ptr addrspace(4) @__oclc_ABI_version, align 4, !tbaa !11
  %4 = icmp slt i32 %3, 500
  %5 = tail call align 4 ptr addrspace(4) @llvm.amdgcn.dispatch.ptr()
  %6 = getelementptr i8, ptr addrspace(4) %5, i64 4
  %7 = tail call ptr addrspace(4) @llvm.amdgcn.implicitarg.ptr()
  %8 = getelementptr inbounds i16, ptr addrspace(4) %7, i64 6
  %9 = select i1 %4, ptr addrspace(4) %6, ptr addrspace(4) %8
  %10 = load i16, ptr addrspace(4) %9, align 4
  %11 = zext i16 %10 to i32
  %12 = tail call i32 @llvm.amdgcn.workgroup.id.x()
  %13 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15
  %14 = mul i32 %12, %11
  %15 = add i32 %14, %13
  %16 = select i1 %4, i64 0, i64 5
  %17 = getelementptr i64, ptr addrspace(4) %7, i64 %16
  br label %50

18:                                               ; preds = %1
  %19 = load i32, ptr addrspace(4) @__oclc_ABI_version, align 4, !tbaa !11
  %20 = icmp slt i32 %19, 500
  %21 = tail call align 4 ptr addrspace(4) @llvm.amdgcn.dispatch.ptr()
  %22 = getelementptr i8, ptr addrspace(4) %21, i64 6
  %23 = tail call ptr addrspace(4) @llvm.amdgcn.implicitarg.ptr()
  %24 = getelementptr inbounds i16, ptr addrspace(4) %23, i64 7
  %25 = select i1 %20, ptr addrspace(4) %22, ptr addrspace(4) %24
  %26 = load i16, ptr addrspace(4) %25, align 2
  %27 = zext i16 %26 to i32
  %28 = tail call i32 @llvm.amdgcn.workgroup.id.y()
  %29 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !15
  %30 = mul i32 %28, %27
  %31 = add i32 %30, %29
  %32 = select i1 %20, i64 1, i64 6
  %33 = getelementptr inbounds i64, ptr addrspace(4) %23, i64 %32
  br label %50

34:                                               ; preds = %1
  %35 = load i32, ptr addrspace(4) @__oclc_ABI_version, align 4, !tbaa !11
  %36 = icmp slt i32 %35, 500
  %37 = tail call align 4 ptr addrspace(4) @llvm.amdgcn.dispatch.ptr()
  %38 = getelementptr i8, ptr addrspace(4) %37, i64 8
  %39 = tail call ptr addrspace(4) @llvm.amdgcn.implicitarg.ptr()
  %40 = getelementptr inbounds i16, ptr addrspace(4) %39, i64 8
  %41 = select i1 %36, ptr addrspace(4) %38, ptr addrspace(4) %40
  %42 = load i16, ptr addrspace(4) %41, align 4
  %43 = zext i16 %42 to i32
  %44 = tail call i32 @llvm.amdgcn.workgroup.id.z()
  %45 = tail call i32 @llvm.amdgcn.workitem.id.z(), !range !15
  %46 = mul i32 %44, %43
  %47 = add i32 %46, %45
  %48 = select i1 %36, i64 2, i64 7
  %49 = getelementptr inbounds i64, ptr addrspace(4) %39, i64 %48
  br label %50

50:                                               ; preds = %34, %18, %2
  %51 = phi ptr addrspace(4) [ %49, %34 ], [ %33, %18 ], [ %17, %2 ]
  %52 = phi i32 [ %47, %34 ], [ %31, %18 ], [ %15, %2 ]
  %53 = zext i32 %52 to i64
  %54 = load i64, ptr addrspace(4) %51, align 8, !tbaa !13
  %55 = add i64 %54, %53
  br label %56

56:                                               ; preds = %50, %1
  %57 = phi i64 [ 0, %1 ], [ %55, %50 ]
  ret i64 %57
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i64 @__ockl_get_local_id(i32 noundef %0) local_unnamed_addr #3 {
  switch i32 %0, label %8 [
    i32 0, label %2
    i32 1, label %4
    i32 2, label %6
  ]

2:                                                ; preds = %1
  %3 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !15
  br label %8

4:                                                ; preds = %1
  %5 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !15
  br label %8

6:                                                ; preds = %1
  %7 = tail call i32 @llvm.amdgcn.workitem.id.z(), !range !15
  br label %8

8:                                                ; preds = %6, %4, %2, %1
  %9 = phi i32 [ %7, %6 ], [ %5, %4 ], [ %3, %2 ], [ 0, %1 ]
  %10 = zext i32 %9 to i64
  ret i64 %10
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i64 @__ockl_get_group_id(i32 noundef %0) local_unnamed_addr #3 {
  switch i32 %0, label %8 [
    i32 0, label %2
    i32 1, label %4
    i32 2, label %6
  ]

2:                                                ; preds = %1
  %3 = tail call i32 @llvm.amdgcn.workgroup.id.x()
  br label %8

4:                                                ; preds = %1
  %5 = tail call i32 @llvm.amdgcn.workgroup.id.y()
  br label %8

6:                                                ; preds = %1
  %7 = tail call i32 @llvm.amdgcn.workgroup.id.z()
  br label %8

8:                                                ; preds = %6, %4, %2, %1
  %9 = phi i32 [ %7, %6 ], [ %5, %4 ], [ %3, %2 ], [ 0, %1 ]
  %10 = zext i32 %9 to i64
  ret i64 %10
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i64 @__ockl_get_global_size(i32 noundef %0) local_unnamed_addr #3 {
  switch i32 %0, label %58 [
    i32 0, label %2
    i32 1, label %20
    i32 2, label %39
  ]

2:                                                ; preds = %1
  %3 = load i32, ptr addrspace(4) @__oclc_ABI_version, align 4, !tbaa !11
  %4 = icmp slt i32 %3, 500
  br i1 %4, label %5, label %9

5:                                                ; preds = %2
  %6 = tail call align 4 dereferenceable(64) ptr addrspace(4) @llvm.amdgcn.dispatch.ptr()
  %7 = getelementptr inbounds %5, ptr addrspace(4) %6, i64 0, i32 6
  %8 = load i32, ptr addrspace(4) %7, align 4, !tbaa !16
  br label %58

9:                                                ; preds = %2
  %10 = tail call ptr addrspace(4) @llvm.amdgcn.implicitarg.ptr()
  %11 = load i32, ptr addrspace(4) %10, align 4, !tbaa !11
  %12 = getelementptr inbounds i16, ptr addrspace(4) %10, i64 6
  %13 = load i16, ptr addrspace(4) %12, align 4, !tbaa !23
  %14 = zext i16 %13 to i32
  %15 = mul i32 %11, %14
  %16 = getelementptr inbounds i16, ptr addrspace(4) %10, i64 9
  %17 = load i16, ptr addrspace(4) %16, align 2, !tbaa !23
  %18 = zext i16 %17 to i32
  %19 = add i32 %15, %18
  br label %58

20:                                               ; preds = %1
  %21 = load i32, ptr addrspace(4) @__oclc_ABI_version, align 4, !tbaa !11
  %22 = icmp slt i32 %21, 500
  br i1 %22, label %23, label %27

23:                                               ; preds = %20
  %24 = tail call align 4 dereferenceable(64) ptr addrspace(4) @llvm.amdgcn.dispatch.ptr()
  %25 = getelementptr inbounds %5, ptr addrspace(4) %24, i64 0, i32 7
  %26 = load i32, ptr addrspace(4) %25, align 8, !tbaa !24
  br label %58

27:                                               ; preds = %20
  %28 = tail call ptr addrspace(4) @llvm.amdgcn.implicitarg.ptr()
  %29 = getelementptr inbounds i32, ptr addrspace(4) %28, i64 1
  %30 = load i32, ptr addrspace(4) %29, align 4, !tbaa !11
  %31 = getelementptr inbounds i16, ptr addrspace(4) %28, i64 7
  %32 = load i16, ptr addrspace(4) %31, align 2, !tbaa !23
  %33 = zext i16 %32 to i32
  %34 = mul i32 %30, %33
  %35 = getelementptr inbounds i16, ptr addrspace(4) %28, i64 10
  %36 = load i16, ptr addrspace(4) %35, align 4, !tbaa !23
  %37 = zext i16 %36 to i32
  %38 = add i32 %34, %37
  br label %58

39:                                               ; preds = %1
  %40 = load i32, ptr addrspace(4) @__oclc_ABI_version, align 4, !tbaa !11
  %41 = icmp slt i32 %40, 500
  br i1 %41, label %42, label %46

42:                                               ; preds = %39
  %43 = tail call align 4 dereferenceable(64) ptr addrspace(4) @llvm.amdgcn.dispatch.ptr()
  %44 = getelementptr inbounds %5, ptr addrspace(4) %43, i64 0, i32 8
  %45 = load i32, ptr addrspace(4) %44, align 4, !tbaa !25
  br label %58

46:                                               ; preds = %39
  %47 = tail call ptr addrspace(4) @llvm.amdgcn.implicitarg.ptr()
  %48 = getelementptr inbounds i32, ptr addrspace(4) %47, i64 2
  %49 = load i32, ptr addrspace(4) %48, align 4, !tbaa !11
  %50 = getelementptr inbounds i16, ptr addrspace(4) %47, i64 8
  %51 = load i16, ptr addrspace(4) %50, align 4, !tbaa !23
  %52 = zext i16 %51 to i32
  %53 = mul i32 %49, %52
  %54 = getelementptr inbounds i16, ptr addrspace(4) %47, i64 11
  %55 = load i16, ptr addrspace(4) %54, align 2, !tbaa !23
  %56 = zext i16 %55 to i32
  %57 = add i32 %53, %56
  br label %58

58:                                               ; preds = %46, %42, %27, %23, %9, %5, %1
  %59 = phi i32 [ 1, %1 ], [ %8, %5 ], [ %19, %9 ], [ %26, %23 ], [ %38, %27 ], [ %45, %42 ], [ %57, %46 ]
  %60 = zext i32 %59 to i64
  ret i64 %60
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i32 @__ockl_get_work_dim() local_unnamed_addr #3 {
  %1 = load i32, ptr addrspace(4) @__oclc_ABI_version, align 4, !tbaa !11
  %2 = icmp slt i32 %1, 500
  %3 = tail call align 4 ptr addrspace(4) @llvm.amdgcn.dispatch.ptr()
  %4 = getelementptr inbounds %5, ptr addrspace(4) %3, i64 0, i32 1
  %5 = tail call ptr addrspace(4) @llvm.amdgcn.implicitarg.ptr()
  %6 = getelementptr inbounds i16, ptr addrspace(4) %5, i64 32
  %7 = select i1 %2, ptr addrspace(4) %4, ptr addrspace(4) %6
  %8 = load i16, ptr addrspace(4) %7, align 2, !tbaa !23
  %9 = zext i16 %8 to i32
  ret i32 %9
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define linkonce_odr protected i64 @__ockl_get_enqueued_local_size(i32 noundef %0) local_unnamed_addr #3 {
  switch i32 %0, label %29 [
    i32 0, label %2
    i32 1, label %11
    i32 2, label %20
  ]

2:                                                ; preds = %1
  %3 = load i32, ptr addrspace(4) @__oclc_ABI_version, align 4, !tbaa !11
  %4 = icmp slt i32 %3, 500
  %5 = tail call align 4 ptr addrspace(4) @llvm.amdgcn.dispatch.ptr()
  %6 = getelementptr i8, ptr addrspace(4) %5, i64 4
  %7 = tail call ptr addrspace(4) @llvm.amdgcn.implicitarg.ptr()
  %8 = getelementptr inbounds i16, ptr addrspace(4) %7, i64 6
  %9 = select i1 %4, ptr addrspace(4) %6, ptr addrspace(4) %8
  %10 = load i16, ptr addrspace(4) %9, align 4
  br label %29

11:                                               ; preds = %1
  %12 = load i32, ptr addrspace(4) @__oclc_ABI_version, align 4, !tbaa !11
  %13 = icmp slt i32 %12, 500
  %14 = tail call align 4 ptr addrspace(4) @llvm.amdgcn.dispatch.ptr()
  %15 = getelementptr i8, ptr addrspace(4) %14, i64 6
  %16 = tail call ptr addrspace(4) @llvm.amdgcn.implicitarg.ptr()
  %17 = getelementptr inbounds i16, ptr addrspace(4) %16, i64 7
  %18 = select i1 %13, ptr addrspace(4) %15, ptr addrspace(4) %17
  %19 = load i16, ptr addrspace(4) %18, align 2
  br label %29

20:                                               ; preds = %1
  %21 = load i32, ptr addrspace(4) @__oclc_ABI_version, align 4, !tbaa !11
  %22 = icmp slt i32 %21, 500
  %23 = tail call align 4 ptr addrspace(4) @llvm.amdgcn.dispatch.ptr()
  %24 = getelementptr i8, ptr addrspace(4) %23, i64 8
  %25 = tail call ptr addrspace(4) @llvm.amdgcn.implicitarg.ptr()
  %26 = getelementptr inbounds i16, ptr addrspace(4) %25, i64 8
  %27 = select i1 %22, ptr addrspace(4) %24, ptr addrspace(4) %26
  %28 = load i16, ptr addrspace(4) %27, align 4
  br label %29

29:                                               ; preds = %20, %11, %2, %1
  %30 = phi i16 [ %28, %20 ], [ %19, %11 ], [ %10, %2 ], [ 1, %1 ]
  %31 = zext i16 %30 to i64
  ret i64 %31
}

attributes #0 = { convergent mustprogress nofree norecurse nounwind readonly willreturn "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
attributes #1 = { nounwind readonly }
attributes #2 = { nounwind readnone willreturn }
attributes #3 = { mustprogress nofree norecurse nosync nounwind readnone willreturn "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
attributes #4 = { nocallback nofree nosync nounwind readnone speculatable willreturn }
attributes #5 = { convergent mustprogress norecurse nounwind willreturn writeonly "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
attributes #6 = { convergent inaccessiblememonly nounwind willreturn writeonly }
attributes #7 = { convergent mustprogress norecurse nounwind willreturn "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
attributes #8 = { convergent inaccessiblememonly nounwind willreturn }
attributes #9 = { nounwind readnone speculatable willreturn }
attributes #10 = { convergent nounwind willreturn }
attributes #11 = { convergent mustprogress nofree norecurse nounwind readnone willreturn "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
attributes #12 = { convergent norecurse nounwind "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
attributes #13 = { nounwind willreturn }
attributes #14 = { alwaysinline mustprogress nofree norecurse nosync nounwind readnone willreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
attributes #15 = { convergent noinline norecurse nounwind "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
attributes #16 = { convergent norecurse nounwind "frame-pointer"="none" "min-legal-vector-width"="128" "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
attributes #17 = { convergent nounwind readnone willreturn }
attributes #18 = { alwaysinline convergent norecurse nounwind "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
attributes #19 = { convergent noinline norecurse nounwind optnone "frame-pointer"="none" "min-legal-vector-width"="128" "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
attributes #20 = { argmemonly nocallback nofree nosync nounwind willreturn }
attributes #21 = { alwaysinline mustprogress nofree norecurse nosync nounwind readnone willreturn "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
attributes #22 = { argmemonly mustprogress nofree norecurse nosync nounwind readonly willreturn "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
attributes #23 = { convergent mustprogress nofree norecurse nounwind willreturn "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
attributes #24 = { norecurse nounwind "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
attributes #25 = { nounwind }
attributes #26 = { mustprogress norecurse nounwind willreturn "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+s-memrealtime" }
attributes #27 = { convergent norecurse nounwind "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+s-memrealtime" }
attributes #28 = { inaccessiblememonly nocallback nofree nosync nounwind willreturn }
attributes #29 = { mustprogress nofree norecurse nounwind willreturn "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
attributes #30 = { convergent mustprogress nofree norecurse nosync nounwind readnone willreturn "frame-pointer"="none" "min-legal-vector-width"="32" "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
attributes #31 = { mustprogress nofree norecurse nosync nounwind readnone willreturn "frame-pointer"="none" "min-legal-vector-width"="32" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+dot7-insts" }
attributes #32 = { mustprogress nofree norecurse nosync nounwind readnone willreturn "frame-pointer"="none" "min-legal-vector-width"="32" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+dot2-insts" }
attributes #33 = { convergent mustprogress nofree norecurse nounwind readnone willreturn "frame-pointer"="none" "min-legal-vector-width"="32" "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
attributes #34 = { mustprogress nofree norecurse nosync nounwind readnone willreturn "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+dot1-insts" }
attributes #35 = { mustprogress nofree norecurse nosync nounwind readnone willreturn "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+dot7-insts" }
attributes #36 = { mustprogress nofree norecurse nosync nounwind readnone willreturn "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+flat-address-space" }
attributes #37 = { argmemonly nounwind willreturn }
attributes #38 = { argmemonly mustprogress nofree norecurse nounwind willreturn "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
attributes #39 = { mustprogress nofree norecurse nounwind readonly willreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
attributes #40 = { nounwind readonly willreturn }
attributes #41 = { convergent mustprogress nofree norecurse nounwind readonly willreturn "frame-pointer"="none" "min-legal-vector-width"="128" "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
attributes #42 = { mustprogress norecurse nounwind willreturn writeonly "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
attributes #43 = { nounwind willreturn writeonly }
attributes #44 = { convergent mustprogress norecurse nounwind willreturn writeonly "frame-pointer"="none" "min-legal-vector-width"="128" "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
attributes #45 = { convergent mustprogress nofree norecurse nounwind readonly willreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
attributes #46 = { mustprogress nofree norecurse nounwind readonly willreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+extended-image-insts" }
attributes #47 = { convergent mustprogress nofree norecurse nounwind readonly willreturn "frame-pointer"="none" "min-legal-vector-width"="256" "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
attributes #48 = { convergent mustprogress nofree norecurse nosync nounwind readnone willreturn "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
attributes #49 = { inlinehint mustprogress nofree norecurse nosync nounwind readnone willreturn "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+gfx9-insts" }
attributes #50 = { mustprogress nofree norecurse nosync nounwind readnone willreturn "frame-pointer"="none" "min-legal-vector-width"="128" "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
attributes #51 = { mustprogress norecurse nounwind willreturn "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+s-memtime-inst" }
attributes #52 = { convergent mustprogress nofree norecurse nounwind readonly willreturn "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+dpp" }
attributes #53 = { convergent mustprogress nofree norecurse nounwind readonly willreturn "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+dpp,+gfx10-insts" }
attributes #54 = { convergent mustprogress nofree norecurse nounwind readnone willreturn "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+dpp" }
attributes #55 = { convergent mustprogress nofree norecurse nounwind readnone willreturn "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+dpp,+gfx10-insts" }
attributes #56 = { alwaysinline norecurse nounwind readnone speculatable }
attributes #57 = { convergent }
attributes #58 = { convergent nounwind }
attributes #59 = { convergent nounwind readonly willreturn }

!opencl.ocl.version = !{!0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0}
!llvm.ident = !{!1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1}
!llvm.module.flags = !{!2, !3}

!0 = !{i32 2, i32 0}
!1 = !{!"clang version 16.0.0 (https://github.com/llvm/llvm-project 809855b56f06dd7182685f88fbbc64111df9339a)"}
!2 = !{i32 1, !"wchar_size", i32 4}
!3 = !{i32 7, !"PIC Level", i32 1}
!4 = !{!5, !5, i64 0}
!5 = !{!"bool", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C/C++ TBAA"}
!8 = !{i8 0, i8 2}
!9 = !{!"exec_hi"}
!10 = !{!"exec_lo"}
!11 = !{!12, !12, i64 0}
!12 = !{!"int", !6, i64 0}
!13 = !{!14, !14, i64 0}
!14 = !{!"long", !6, i64 0}
!15 = !{i32 0, i32 1024}
!16 = !{!17, !12, i64 12}
!17 = !{!"hsa_kernel_dispatch_packet_s", !18, i64 0, !18, i64 2, !18, i64 4, !18, i64 6, !18, i64 8, !18, i64 10, !12, i64 12, !12, i64 16, !12, i64 20, !12, i64 24, !12, i64 28, !14, i64 32, !19, i64 40, !14, i64 48, !20, i64 56}
!18 = !{!"short", !6, i64 0}
!19 = !{!"any pointer", !6, i64 0}
!20 = !{!"hsa_signal_s", !14, i64 0}
!21 = !{i16 1, i16 1025}
!22 = !{}
!23 = !{!18, !18, i64 0}
!24 = !{!17, !12, i64 16}
!25 = !{!17, !12, i64 20}
!26 = !{!27, !12, i64 12}
!27 = !{!"mg_info", !19, i64 0, !12, i64 8, !12, i64 12, !14, i64 16, !14, i64 24}
!28 = !{!27, !12, i64 8}
!29 = !{!27, !14, i64 24}
!30 = !{!27, !14, i64 16}
!31 = !{!27, !19, i64 0}
!32 = !{i8 0, i8 9}
!33 = !{i16 0, i16 17}
!34 = !{i32 0, i32 33}
!35 = !{i64 0, i64 65}
!36 = !{!"exec"}
!37 = !{!38, !12, i64 0}
!38 = !{!"slab_s", !12, i64 0, !12, i64 4, !6, i64 8, !12, i64 12, !6, i64 16}
!39 = !{!38, !12, i64 4}
!40 = !{i64 6786}
!41 = !{!42, !12, i64 12}
!42 = !{!"kind_info_s", !12, i64 0, !12, i64 4, !12, i64 8, !12, i64 12, !12, i64 16, !12, i64 20, !12, i64 24, !12, i64 28}
!43 = !{i64 751}
!44 = !{!19, !19, i64 0}
!45 = !{!46, !19, i64 0}
!46 = !{!"", !19, i64 0, !19, i64 8, !20, i64 16, !14, i64 24, !14, i64 32, !14, i64 40}
!47 = !{!46, !14, i64 40}
!48 = !{!46, !19, i64 8}
!49 = !{!6, !6, i64 0}
!50 = !{i64 2509}
!51 = !{!52, !12, i64 16}
!52 = !{!"", !14, i64 0, !14, i64 8, !12, i64 16, !12, i64 20}
!53 = !{!52, !14, i64 8}
!54 = !{!52, !12, i64 20}
!55 = !{!52, !14, i64 0}
!56 = !{!57, !14, i64 16}
!57 = !{!"amd_signal_s", !14, i64 0, !6, i64 8, !14, i64 16, !12, i64 24, !12, i64 28, !14, i64 32, !14, i64 40, !6, i64 48, !6, i64 56}
!58 = !{!57, !12, i64 24}
!59 = !{i64 6909}
!60 = !{!42, !12, i64 8}
!61 = !{!42, !12, i64 20}
!62 = !{!42, !12, i64 0}
!63 = !{!42, !12, i64 16}
!64 = !{!42, !12, i64 24}
!65 = !{!42, !12, i64 4}
!66 = !{!67, !6, i64 8}
!67 = !{!"sdata_s", !6, i64 0, !6, i64 8, !6, i64 16}
!68 = !{!42, !12, i64 28}
!69 = !{!57, !14, i64 0}
!70 = !{!71, !14, i64 80}
!71 = !{!"amd_queue_s", !72, i64 0, !6, i64 40, !14, i64 56, !12, i64 64, !12, i64 68, !12, i64 72, !12, i64 76, !14, i64 80, !12, i64 88, !6, i64 92, !14, i64 128, !12, i64 136, !12, i64 140, !6, i64 144, !14, i64 160, !14, i64 168, !12, i64 176, !12, i64 180, !6, i64 184, !20, i64 192, !6, i64 200}
!72 = !{!"hsa_queue_s", !6, i64 0, !12, i64 4, !19, i64 8, !20, i64 16, !12, i64 24, !12, i64 28, !14, i64 32}
!73 = !{!71, !12, i64 24}
